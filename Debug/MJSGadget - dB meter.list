
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ae0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003500  08023ba0  08023ba0  00024ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080270a0  080270a0  00029428  2**0
                  CONTENTS
  4 .ARM          00000008  080270a0  080270a0  000280a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080270a8  080270a8  00029428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080270a8  080270a8  000280a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080270ac  080270ac  000280ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  080270b0  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003094  20000428  080274d8  00029428  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200034bc  080274d8  000294bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00029428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003444d  00000000  00000000  00029450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000093d5  00000000  00000000  0005d89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ae8  00000000  00000000  00066c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fd8  00000000  00000000  00069760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d11  00000000  00000000  0006b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041dce  00000000  00000000  0008e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11d0  00000000  00000000  000d0217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001713e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af10  00000000  00000000  00171498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017c415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017e991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023b88 	.word	0x08023b88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	08023b88 	.word	0x08023b88

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08026284 	.word	0x08026284
 8000e0c:	080262c4 	.word	0x080262c4
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08026300 	.word	0x08026300
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000028 	.word	0x20000028

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00c f874 	bl	800f758 <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000618 	.word	0x20000618

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f003 f9fe 	bl	8006a8c <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f003 fa5b 	bl	8006b50 <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000570 	.word	0x20000570
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000574 	.word	0x20000574

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f004 f9db 	bl	8007a98 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000658 	.word	0x20000658
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000664 	.word	0x20000664
 8003738:	20000668 	.word	0x20000668

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f004 f9a5 	bl	8007a98 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000066c 	.word	0x2000066c
 800379c:	08080090 	.word	0x08080090
 80037a0:	2000068c 	.word	0x2000068c
 80037a4:	20000690 	.word	0x20000690

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000624 	.word	0x20000624

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000624 	.word	0x20000624

08003800 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <setMic+0x28>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <setMic+0x28>)
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <setMic+0x28>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000624 	.word	0x20000624

0800382c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fec7 	bl	80015d0 <__aeabi_i2f>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <setPM2p5+0x50>)
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fd f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1a      	adds	r2, r3, #0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <setPM2p5+0x54>)
 8003852:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setPM2p5+0x54>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <setPM2p5+0x54>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	1c19      	adds	r1, r3, #0
 800385e:	1c10      	adds	r0, r2, #0
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_fcmpgt>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d100      	bne.n	800386a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8003868:	e003      	b.n	8003872 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <setPM2p5+0x54>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <setPM2p5+0x54>)
 8003870:	60da      	str	r2, [r3, #12]
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	41200000 	.word	0x41200000
 8003880:	20000624 	.word	0x20000624

08003884 <setPM10>:

void setPM10(uint16_t PM10) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe9b 	bl	80015d0 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <setPM10+0x50>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fd f998 	bl	8000bd4 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <setPM10+0x54>)
 80038aa:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <setPM10+0x54>)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <setPM10+0x54>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	1c19      	adds	r1, r3, #0
 80038b6:	1c10      	adds	r0, r2, #0
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_fcmpgt>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d100      	bne.n	80038c2 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038c0:	e003      	b.n	80038ca <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <setPM10+0x54>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <setPM10+0x54>)
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	41200000 	.word	0x41200000
 80038d8:	20000624 	.word	0x20000624

080038dc <setNOx>:

void setNOx(uint16_t nox) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <setNOx+0x30>)
 80038ea:	1dba      	adds	r2, r7, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setNOx+0x30>)
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <setNOx+0x30>)
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000624 	.word	0x20000624

08003910 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003914:	f006 f82a 	bl	800996c <sen5x_Get_sen5x_enable_state>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d008      	beq.n	800392e <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000624 	.word	0x20000624

08003940 <SetConfigMode>:

void SetConfigMode(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SetConfigMode+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4053      	eors	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <SetConfigMode+0x34>)
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <SetConfigMode+0x38>)
 8003956:	0019      	movs	r1, r3
 8003958:	2003      	movs	r0, #3
 800395a:	f00b fab9 	bl	800eed0 <CreateLine>
  }
  ReconfigSet = true;
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SetConfigMode+0x30>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SetConfigMode+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000054f 	.word	0x2000054f
 8003974:	08023ba0 	.word	0x08023ba0
 8003978:	08023bc0 	.word	0x08023bc0
 800397c:	200001f7 	.word	0x200001f7

08003980 <GetReconfigMode>:

bool GetReconfigMode() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <GetReconfigMode+0x10>)
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	2000054f 	.word	0x2000054f

08003994 <ESP_GetUID>:

void ESP_GetUID(){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003998:	f00b ff28 	bl	800f7ec <HAL_GetUIDw0>
 800399c:	0002      	movs	r2, r0
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <ESP_GetUID+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039a2:	f00b ff2d 	bl	800f800 <HAL_GetUIDw1>
 80039a6:	0002      	movs	r2, r0
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <ESP_GetUID+0x28>)
 80039aa:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ac:	f00b ff32 	bl	800f814 <HAL_GetUIDw2>
 80039b0:	0002      	movs	r2, r0
 80039b2:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <ESP_GetUID+0x28>)
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000558 	.word	0x20000558

080039c0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <ESP_Init+0x2c>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Init+0x30>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039d4:	f7ff ffde 	bl	8003994 <ESP_GetUID>
  beurs = checkEEprom();
 80039d8:	f7ff fe7a 	bl	80036d0 <checkEEprom>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_Init+0x34>)
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000444 	.word	0x20000444
 80039f0:	20000030 	.word	0x20000030
 80039f4:	20000552 	.word	0x20000552

080039f8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	000a      	movs	r2, r1
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <ESP_Send+0x54>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	250f      	movs	r5, #15
 8003a0c:	197c      	adds	r4, r7, r5
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f014 f9c9 	bl	8017dac <HAL_UART_Transmit_DMA>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <ESP_Send+0x58>)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Send+0x5c>)
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00b fa4f 	bl	800eed0 <CreateLine>
    return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e006      	b.n	8003a44 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <ESP_Send+0x60>)
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f01c ff2f 	bl	80208a0 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	20000444 	.word	0x20000444
 8003a50:	08023bc4 	.word	0x08023bc4
 8003a54:	08023be4 	.word	0x08023be4
 8003a58:	08023be8 	.word	0x08023be8

08003a5c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	000a      	movs	r2, r1
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a6a:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <ESP_Receive+0x124>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003a70:	260f      	movs	r6, #15
 8003a72:	19bb      	adds	r3, r7, r6
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a78:	4b42      	ldr	r3, [pc, #264]	@ (8003b84 <ESP_Receive+0x128>)
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	250e      	movs	r5, #14
 8003a7e:	197c      	adds	r4, r7, r5
 8003a80:	1cbb      	adds	r3, r7, #2
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0019      	movs	r1, r3
 8003a88:	f014 fa20 	bl	8017ecc <HAL_UART_Receive_DMA>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a90:	002c      	movs	r4, r5
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <ESP_Receive+0x40>
 8003a9a:	e06c      	b.n	8003b76 <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a9c:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <ESP_Receive+0x128>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2284      	movs	r2, #132	@ 0x84
 8003aa2:	589b      	ldr	r3, [r3, r2]
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <ESP_Receive+0x12c>)
 8003aa6:	4939      	ldr	r1, [pc, #228]	@ (8003b8c <ESP_Receive+0x130>)
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f00b fa11 	bl	800eed0 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d008      	beq.n	8003aca <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <ESP_Receive+0x134>)
 8003aba:	4b34      	ldr	r3, [pc, #208]	@ (8003b8c <ESP_Receive+0x130>)
 8003abc:	0019      	movs	r1, r3
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f00b fa06 	bl	800eed0 <CreateLine>
      reset = true;
 8003ac4:	19bb      	adds	r3, r7, r6
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003aca:	230e      	movs	r3, #14
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d005      	beq.n	8003ae2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b94 <ESP_Receive+0x138>)
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b8c <ESP_Receive+0x130>)
 8003ada:	0019      	movs	r1, r3
 8003adc:	2001      	movs	r0, #1
 8003ade:	f00b f9f7 	bl	800eed0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003ae2:	230e      	movs	r3, #14
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2204      	movs	r2, #4
 8003aea:	4013      	ands	r3, r2
 8003aec:	d005      	beq.n	8003afa <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003aee:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <ESP_Receive+0x13c>)
 8003af0:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <ESP_Receive+0x130>)
 8003af2:	0019      	movs	r1, r3
 8003af4:	2001      	movs	r0, #1
 8003af6:	f00b f9eb 	bl	800eed0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003afa:	230e      	movs	r3, #14
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	d005      	beq.n	8003b12 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b06:	4a25      	ldr	r2, [pc, #148]	@ (8003b9c <ESP_Receive+0x140>)
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <ESP_Receive+0x130>)
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	f00b f9df 	bl	800eed0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b12:	230e      	movs	r3, #14
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d005      	beq.n	8003b2a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ba0 <ESP_Receive+0x144>)
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <ESP_Receive+0x130>)
 8003b22:	0019      	movs	r1, r3
 8003b24:	2001      	movs	r0, #1
 8003b26:	f00b f9d3 	bl	800eed0 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b2a:	230e      	movs	r3, #14
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	4013      	ands	r3, r2
 8003b34:	d005      	beq.n	8003b42 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <ESP_Receive+0x148>)
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <ESP_Receive+0x130>)
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f00b f9c7 	bl	800eed0 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b42:	230e      	movs	r3, #14
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2240      	movs	r2, #64	@ 0x40
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d005      	beq.n	8003b5a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <ESP_Receive+0x14c>)
 8003b50:	4b0e      	ldr	r3, [pc, #56]	@ (8003b8c <ESP_Receive+0x130>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f00b f9bb 	bl	800eed0 <CreateLine>
    }
#endif
    if (reset) {
 8003b5a:	230f      	movs	r3, #15
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <ESP_Receive+0x110>
      SetAllREDLED();
 8003b64:	f00a f936 	bl	800ddd4 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003b68:	f00c fabf 	bl	80100ea <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <ESP_Receive+0x124>)
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
    return false;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <ESP_Receive+0x11c>
  }
  return true;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b005      	add	sp, #20
 8003b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b80:	20000448 	.word	0x20000448
 8003b84:	20000444 	.word	0x20000444
 8003b88:	08023bf8 	.word	0x08023bf8
 8003b8c:	08023be4 	.word	0x08023be4
 8003b90:	08023c28 	.word	0x08023c28
 8003b94:	08023c4c 	.word	0x08023c4c
 8003b98:	08023c70 	.word	0x08023c70
 8003b9c:	08023c94 	.word	0x08023c94
 8003ba0:	08023cb8 	.word	0x08023cb8
 8003ba4:	08023ce4 	.word	0x08023ce4
 8003ba8:	08023d14 	.word	0x08023d14

08003bac <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bb4:	4b39      	ldr	r3, [pc, #228]	@ (8003c9c <HAL_UART_ErrorCallback+0xf0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d16b      	bne.n	8003c96 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2284      	movs	r2, #132	@ 0x84
 8003bc2:	589b      	ldr	r3, [r3, r2]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d065      	beq.n	8003c94 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2284      	movs	r2, #132	@ 0x84
 8003bcc:	589b      	ldr	r3, [r3, r2]
 8003bce:	4a34      	ldr	r2, [pc, #208]	@ (8003ca0 <HAL_UART_ErrorCallback+0xf4>)
 8003bd0:	4934      	ldr	r1, [pc, #208]	@ (8003ca4 <HAL_UART_ErrorCallback+0xf8>)
 8003bd2:	2003      	movs	r0, #3
 8003bd4:	f00b f97c 	bl	800eed0 <CreateLine>
    switch (huart->ErrorCode) {
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2284      	movs	r2, #132	@ 0x84
 8003bdc:	589b      	ldr	r3, [r3, r2]
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	d851      	bhi.n	8003c86 <HAL_UART_ErrorCallback+0xda>
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	4b30      	ldr	r3, [pc, #192]	@ (8003ca8 <HAL_UART_ErrorCallback+0xfc>)
 8003be6:	18d3      	adds	r3, r2, r3
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003bec:	4a2f      	ldr	r2, [pc, #188]	@ (8003cac <HAL_UART_ErrorCallback+0x100>)
 8003bee:	4b30      	ldr	r3, [pc, #192]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f00b f96c 	bl	800eed0 <CreateLine>
        break;
 8003bf8:	e04d      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb4 <HAL_UART_ErrorCallback+0x108>)
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003bfe:	0019      	movs	r1, r3
 8003c00:	2001      	movs	r0, #1
 8003c02:	f00b f965 	bl	800eed0 <CreateLine>
        break;
 8003c06:	e046      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <HAL_UART_ErrorCallback+0x10c>)
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f00b f95e 	bl	800eed0 <CreateLine>
        break;
 8003c14:	e03f      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c16:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <HAL_UART_ErrorCallback+0x110>)
 8003c18:	4b25      	ldr	r3, [pc, #148]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f00b f957 	bl	800eed0 <CreateLine>
        break;
 8003c22:	e038      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c24:	4a26      	ldr	r2, [pc, #152]	@ (8003cc0 <HAL_UART_ErrorCallback+0x114>)
 8003c26:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c28:	0019      	movs	r1, r3
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f00b f950 	bl	800eed0 <CreateLine>
        break;
 8003c30:	e031      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003c32:	4a24      	ldr	r2, [pc, #144]	@ (8003cc4 <HAL_UART_ErrorCallback+0x118>)
 8003c34:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f00b f949 	bl	800eed0 <CreateLine>
        break;
 8003c3e:	e02a      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003c40:	4a21      	ldr	r2, [pc, #132]	@ (8003cc8 <HAL_UART_ErrorCallback+0x11c>)
 8003c42:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c44:	0019      	movs	r1, r3
 8003c46:	2001      	movs	r0, #1
 8003c48:	f00b f942 	bl	800eed0 <CreateLine>
        break;
 8003c4c:	e023      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <HAL_UART_ErrorCallback+0x120>)
 8003c50:	4b17      	ldr	r3, [pc, #92]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c52:	0019      	movs	r1, r3
 8003c54:	2001      	movs	r0, #1
 8003c56:	f00b f93b 	bl	800eed0 <CreateLine>
        break;
 8003c5a:	e01c      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd0 <HAL_UART_ErrorCallback+0x124>)
 8003c5e:	4b14      	ldr	r3, [pc, #80]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c60:	0019      	movs	r1, r3
 8003c62:	2001      	movs	r0, #1
 8003c64:	f00b f934 	bl	800eed0 <CreateLine>
        break;
 8003c68:	e015      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <HAL_UART_ErrorCallback+0x128>)
 8003c6c:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c6e:	0019      	movs	r1, r3
 8003c70:	2001      	movs	r0, #1
 8003c72:	f00b f92d 	bl	800eed0 <CreateLine>
        break;
 8003c76:	e00e      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003c78:	4a17      	ldr	r2, [pc, #92]	@ (8003cd8 <HAL_UART_ErrorCallback+0x12c>)
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f00b f926 	bl	800eed0 <CreateLine>
        break;
 8003c84:	e007      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003c86:	4a15      	ldr	r2, [pc, #84]	@ (8003cdc <HAL_UART_ErrorCallback+0x130>)
 8003c88:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <HAL_UART_ErrorCallback+0x104>)
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	f00b f91f 	bl	800eed0 <CreateLine>
 8003c92:	e000      	b.n	8003c96 <HAL_UART_ErrorCallback+0xea>
      return;
 8003c94:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000444 	.word	0x20000444
 8003ca0:	08023d44 	.word	0x08023d44
 8003ca4:	08023bc0 	.word	0x08023bc0
 8003ca8:	080263cc 	.word	0x080263cc
 8003cac:	08023d74 	.word	0x08023d74
 8003cb0:	08023be4 	.word	0x08023be4
 8003cb4:	08023da8 	.word	0x08023da8
 8003cb8:	08023dd4 	.word	0x08023dd4
 8003cbc:	08023e08 	.word	0x08023e08
 8003cc0:	08023e34 	.word	0x08023e34
 8003cc4:	08023e5c 	.word	0x08023e5c
 8003cc8:	08023e8c 	.word	0x08023e8c
 8003ccc:	08023ec4 	.word	0x08023ec4
 8003cd0:	08023efc 	.word	0x08023efc
 8003cd4:	08023f24 	.word	0x08023f24
 8003cd8:	08023f4c 	.word	0x08023f4c
 8003cdc:	08023f78 	.word	0x08023f78

08003ce0 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	e010      	b.n	8003d12 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	1898      	adds	r0, r3, r2
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	18d3      	adds	r3, r2, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	001a      	movs	r2, r3
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <uint8ArrayToString+0x44>)
 8003d06:	0019      	movs	r1, r3
 8003d08:	f01c fe3a 	bl	8020980 <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b0b      	cmp	r3, #11
 8003d16:	ddeb      	ble.n	8003cf0 <uint8ArrayToString+0x10>
  }
}
 8003d18:	46c0      	nop			@ (mov r8, r8)
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	08023f9c 	.word	0x08023f9c

08003d28 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	6039      	str	r1, [r7, #0]
 8003d30:	0011      	movs	r1, r2
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	1c02      	adds	r2, r0, #0
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	1dbb      	adds	r3, r7, #6
 8003d3a:	1c0a      	adds	r2, r1, #0
 8003d3c:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d3e:	4b20      	ldr	r3, [pc, #128]	@ (8003dc0 <CreateMessage+0x98>)
 8003d40:	4820      	ldr	r0, [pc, #128]	@ (8003dc4 <CreateMessage+0x9c>)
 8003d42:	220c      	movs	r2, #12
 8003d44:	0019      	movs	r1, r3
 8003d46:	f003 fea7 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <CreateMessage+0xa0>)
 8003d4c:	481f      	ldr	r0, [pc, #124]	@ (8003dcc <CreateMessage+0xa4>)
 8003d4e:	220c      	movs	r2, #12
 8003d50:	0019      	movs	r1, r3
 8003d52:	f003 fea1 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d56:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <CreateMessage+0xa8>)
 8003d58:	481e      	ldr	r0, [pc, #120]	@ (8003dd4 <CreateMessage+0xac>)
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	f003 fe9b 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d62:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <CreateMessage+0xb0>)
 8003d64:	481d      	ldr	r0, [pc, #116]	@ (8003ddc <CreateMessage+0xb4>)
 8003d66:	220c      	movs	r2, #12
 8003d68:	0019      	movs	r1, r3
 8003d6a:	f003 fe95 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003de0 <CreateMessage+0xb8>)
 8003d70:	481c      	ldr	r0, [pc, #112]	@ (8003de4 <CreateMessage+0xbc>)
 8003d72:	220c      	movs	r2, #12
 8003d74:	0019      	movs	r1, r3
 8003d76:	f003 fe8f 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <CreateMessage+0xc0>)
 8003d7c:	481b      	ldr	r0, [pc, #108]	@ (8003dec <CreateMessage+0xc4>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	0019      	movs	r1, r3
 8003d82:	f003 fe89 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003d86:	4b1a      	ldr	r3, [pc, #104]	@ (8003df0 <CreateMessage+0xc8>)
 8003d88:	481a      	ldr	r0, [pc, #104]	@ (8003df4 <CreateMessage+0xcc>)
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f003 fe83 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d92:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <CreateMessage+0xd0>)
 8003d94:	4819      	ldr	r0, [pc, #100]	@ (8003dfc <CreateMessage+0xd4>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f003 fe7d 	bl	8007a98 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003d9e:	4b18      	ldr	r3, [pc, #96]	@ (8003e00 <CreateMessage+0xd8>)
 8003da0:	4818      	ldr	r0, [pc, #96]	@ (8003e04 <CreateMessage+0xdc>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	0019      	movs	r1, r3
 8003da6:	f003 fe77 	bl	8007a98 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003daa:	f7ff fcc7 	bl	800373c <checkName>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d02e      	beq.n	8003e10 <CreateMessage+0xe8>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <CreateMessage+0xe0>)
 8003db4:	4815      	ldr	r0, [pc, #84]	@ (8003e0c <CreateMessage+0xe4>)
 8003db6:	2220      	movs	r2, #32
 8003db8:	0019      	movs	r1, r3
 8003dba:	f003 fe6d 	bl	8007a98 <ReadUint8ArrayEEprom>
 8003dbe:	e02d      	b.n	8003e1c <CreateMessage+0xf4>
 8003dc0:	20000694 	.word	0x20000694
 8003dc4:	0808000c 	.word	0x0808000c
 8003dc8:	200006a0 	.word	0x200006a0
 8003dcc:	08080018 	.word	0x08080018
 8003dd0:	200006ac 	.word	0x200006ac
 8003dd4:	08080048 	.word	0x08080048
 8003dd8:	200006b8 	.word	0x200006b8
 8003ddc:	08080030 	.word	0x08080030
 8003de0:	200006c4 	.word	0x200006c4
 8003de4:	0808006c 	.word	0x0808006c
 8003de8:	200006d0 	.word	0x200006d0
 8003dec:	08080078 	.word	0x08080078
 8003df0:	200006dc 	.word	0x200006dc
 8003df4:	08080024 	.word	0x08080024
 8003df8:	200006e8 	.word	0x200006e8
 8003dfc:	08080054 	.word	0x08080054
 8003e00:	200006f4 	.word	0x200006f4
 8003e04:	08080060 	.word	0x08080060
 8003e08:	20000700 	.word	0x20000700
 8003e0c:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e10:	4bed      	ldr	r3, [pc, #948]	@ (80041c8 <CreateMessage+0x4a0>)
 8003e12:	4aee      	ldr	r2, [pc, #952]	@ (80041cc <CreateMessage+0x4a4>)
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	6019      	str	r1, [r3, #0]
 8003e18:	7912      	ldrb	r2, [r2, #4]
 8003e1a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e1c:	f7ff fc34 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003e20:	260e      	movs	r6, #14
 8003e22:	19bb      	adds	r3, r7, r6
 8003e24:	2200      	movs	r2, #0
 8003e26:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e28:	19bb      	adds	r3, r7, r6
 8003e2a:	881a      	ldrh	r2, [r3, #0]
 8003e2c:	4be8      	ldr	r3, [pc, #928]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e2e:	18d3      	adds	r3, r2, r3
 8003e30:	4ae8      	ldr	r2, [pc, #928]	@ (80041d4 <CreateMessage+0x4ac>)
 8003e32:	0011      	movs	r1, r2
 8003e34:	0018      	movs	r0, r3
 8003e36:	f01c fda3 	bl	8020980 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8003e3a:	4ae7      	ldr	r2, [pc, #924]	@ (80041d8 <CreateMessage+0x4b0>)
 8003e3c:	4be7      	ldr	r3, [pc, #924]	@ (80041dc <CreateMessage+0x4b4>)
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff ff4d 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e46:	4be6      	ldr	r3, [pc, #920]	@ (80041e0 <CreateMessage+0x4b8>)
 8003e48:	689c      	ldr	r4, [r3, #8]
 8003e4a:	4be6      	ldr	r3, [pc, #920]	@ (80041e4 <CreateMessage+0x4bc>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1c18      	adds	r0, r3, #0
 8003e50:	f7ff fb08 	bl	8003464 <__aeabi_f2d>
 8003e54:	0002      	movs	r2, r0
 8003e56:	000b      	movs	r3, r1
 8003e58:	4ddb      	ldr	r5, [pc, #876]	@ (80041c8 <CreateMessage+0x4a0>)
 8003e5a:	49e3      	ldr	r1, [pc, #908]	@ (80041e8 <CreateMessage+0x4c0>)
 8003e5c:	48e3      	ldr	r0, [pc, #908]	@ (80041ec <CreateMessage+0x4c4>)
 8003e5e:	9202      	str	r2, [sp, #8]
 8003e60:	9303      	str	r3, [sp, #12]
 8003e62:	4bde      	ldr	r3, [pc, #888]	@ (80041dc <CreateMessage+0x4b4>)
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	002b      	movs	r3, r5
 8003e68:	0022      	movs	r2, r4
 8003e6a:	f01c fd89 	bl	8020980 <siprintf>
#endif
index = strlen(message);
 8003e6e:	4bd8      	ldr	r3, [pc, #864]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7fc f97b 	bl	800016c <strlen>
 8003e76:	0002      	movs	r2, r0
 8003e78:	19bb      	adds	r3, r7, r6
 8003e7a:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003e7c:	1dbb      	adds	r3, r7, #6
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d019      	beq.n	8003eb8 <CreateMessage+0x190>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003e84:	4bd2      	ldr	r3, [pc, #840]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc f970 	bl	800016c <strlen>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4bcf      	ldr	r3, [pc, #828]	@ (80041d0 <CreateMessage+0x4a8>)
 8003e92:	0011      	movs	r1, r2
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fdaf 	bl	80039f8 <ESP_Send>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	4bd4      	ldr	r3, [pc, #848]	@ (80041f0 <CreateMessage+0x4c8>)
 8003ea0:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003ea2:	4bd4      	ldr	r3, [pc, #848]	@ (80041f4 <CreateMessage+0x4cc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	4bd1      	ldr	r3, [pc, #836]	@ (80041f0 <CreateMessage+0x4c8>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	4013      	ands	r3, r2
 8003eae:	1e5a      	subs	r2, r3, #1
 8003eb0:	4193      	sbcs	r3, r2
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	4bcf      	ldr	r3, [pc, #828]	@ (80041f4 <CreateMessage+0x4cc>)
 8003eb6:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003eb8:	4acf      	ldr	r2, [pc, #828]	@ (80041f8 <CreateMessage+0x4d0>)
 8003eba:	4bc8      	ldr	r3, [pc, #800]	@ (80041dc <CreateMessage+0x4b4>)
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff ff0e 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003ec4:	4bc6      	ldr	r3, [pc, #792]	@ (80041e0 <CreateMessage+0x4b8>)
 8003ec6:	689c      	ldr	r4, [r3, #8]
 8003ec8:	4bc6      	ldr	r3, [pc, #792]	@ (80041e4 <CreateMessage+0x4bc>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	1c18      	adds	r0, r3, #0
 8003ece:	f7ff fac9 	bl	8003464 <__aeabi_f2d>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	000b      	movs	r3, r1
 8003ed6:	4dbc      	ldr	r5, [pc, #752]	@ (80041c8 <CreateMessage+0x4a0>)
 8003ed8:	49c8      	ldr	r1, [pc, #800]	@ (80041fc <CreateMessage+0x4d4>)
 8003eda:	48bd      	ldr	r0, [pc, #756]	@ (80041d0 <CreateMessage+0x4a8>)
 8003edc:	9202      	str	r2, [sp, #8]
 8003ede:	9303      	str	r3, [sp, #12]
 8003ee0:	4bbe      	ldr	r3, [pc, #760]	@ (80041dc <CreateMessage+0x4b4>)
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	002b      	movs	r3, r5
 8003ee6:	0022      	movs	r2, r4
 8003ee8:	f01c fd4a 	bl	8020980 <siprintf>
#endif
  index += strlen(message);
 8003eec:	4bb8      	ldr	r3, [pc, #736]	@ (80041d0 <CreateMessage+0x4a8>)
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7fc f93c 	bl	800016c <strlen>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	220e      	movs	r2, #14
 8003efa:	18bb      	adds	r3, r7, r2
 8003efc:	18ba      	adds	r2, r7, r2
 8003efe:	8812      	ldrh	r2, [r2, #0]
 8003f00:	188a      	adds	r2, r1, r2
 8003f02:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f04:	1dbb      	adds	r3, r7, #6
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d019      	beq.n	8003f40 <CreateMessage+0x218>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f0c:	4bb0      	ldr	r3, [pc, #704]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc f92c 	bl	800016c <strlen>
 8003f14:	0003      	movs	r3, r0
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	4bad      	ldr	r3, [pc, #692]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fd6b 	bl	80039f8 <ESP_Send>
 8003f22:	0003      	movs	r3, r0
 8003f24:	001a      	movs	r2, r3
 8003f26:	4bb2      	ldr	r3, [pc, #712]	@ (80041f0 <CreateMessage+0x4c8>)
 8003f28:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f2a:	4bb2      	ldr	r3, [pc, #712]	@ (80041f4 <CreateMessage+0x4cc>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	001a      	movs	r2, r3
 8003f30:	4baf      	ldr	r3, [pc, #700]	@ (80041f0 <CreateMessage+0x4c8>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4013      	ands	r3, r2
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	4193      	sbcs	r3, r2
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4bad      	ldr	r3, [pc, #692]	@ (80041f4 <CreateMessage+0x4cc>)
 8003f3e:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003f40:	4aaf      	ldr	r2, [pc, #700]	@ (8004200 <CreateMessage+0x4d8>)
 8003f42:	4ba6      	ldr	r3, [pc, #664]	@ (80041dc <CreateMessage+0x4b4>)
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff feca 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003f4c:	4ba4      	ldr	r3, [pc, #656]	@ (80041e0 <CreateMessage+0x4b8>)
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4ba4      	ldr	r3, [pc, #656]	@ (80041e4 <CreateMessage+0x4bc>)
 8003f52:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f54:	4c9c      	ldr	r4, [pc, #624]	@ (80041c8 <CreateMessage+0x4a0>)
 8003f56:	49ab      	ldr	r1, [pc, #684]	@ (8004204 <CreateMessage+0x4dc>)
 8003f58:	489d      	ldr	r0, [pc, #628]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	4b9f      	ldr	r3, [pc, #636]	@ (80041dc <CreateMessage+0x4b4>)
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	0023      	movs	r3, r4
 8003f62:	f01c fd0d 	bl	8020980 <siprintf>
#endif
  index += strlen(message);
 8003f66:	4b9a      	ldr	r3, [pc, #616]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fc f8ff 	bl	800016c <strlen>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	b299      	uxth	r1, r3
 8003f72:	220e      	movs	r2, #14
 8003f74:	18bb      	adds	r3, r7, r2
 8003f76:	18ba      	adds	r2, r7, r2
 8003f78:	8812      	ldrh	r2, [r2, #0]
 8003f7a:	188a      	adds	r2, r1, r2
 8003f7c:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f7e:	1dbb      	adds	r3, r7, #6
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d019      	beq.n	8003fba <CreateMessage+0x292>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f86:	4b92      	ldr	r3, [pc, #584]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc f8ef 	bl	800016c <strlen>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	4b8f      	ldr	r3, [pc, #572]	@ (80041d0 <CreateMessage+0x4a8>)
 8003f94:	0011      	movs	r1, r2
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fd2e 	bl	80039f8 <ESP_Send>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	4b93      	ldr	r3, [pc, #588]	@ (80041f0 <CreateMessage+0x4c8>)
 8003fa2:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fa4:	4b93      	ldr	r3, [pc, #588]	@ (80041f4 <CreateMessage+0x4cc>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	001a      	movs	r2, r3
 8003faa:	4b91      	ldr	r3, [pc, #580]	@ (80041f0 <CreateMessage+0x4c8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	4193      	sbcs	r3, r2
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	4b8f      	ldr	r3, [pc, #572]	@ (80041f4 <CreateMessage+0x4cc>)
 8003fb8:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, soundConfig);
 8003fba:	4a93      	ldr	r2, [pc, #588]	@ (8004208 <CreateMessage+0x4e0>)
 8003fbc:	4b87      	ldr	r3, [pc, #540]	@ (80041dc <CreateMessage+0x4b4>)
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff fe8d 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003fc6:	4b86      	ldr	r3, [pc, #536]	@ (80041e0 <CreateMessage+0x4b8>)
 8003fc8:	689c      	ldr	r4, [r3, #8]
 8003fca:	4b86      	ldr	r3, [pc, #536]	@ (80041e4 <CreateMessage+0x4bc>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	1c18      	adds	r0, r3, #0
 8003fd0:	f7ff fa48 	bl	8003464 <__aeabi_f2d>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	000b      	movs	r3, r1
 8003fd8:	4d7b      	ldr	r5, [pc, #492]	@ (80041c8 <CreateMessage+0x4a0>)
 8003fda:	498c      	ldr	r1, [pc, #560]	@ (800420c <CreateMessage+0x4e4>)
 8003fdc:	487c      	ldr	r0, [pc, #496]	@ (80041d0 <CreateMessage+0x4a8>)
 8003fde:	9202      	str	r2, [sp, #8]
 8003fe0:	9303      	str	r3, [sp, #12]
 8003fe2:	4b7e      	ldr	r3, [pc, #504]	@ (80041dc <CreateMessage+0x4b4>)
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	002b      	movs	r3, r5
 8003fe8:	0022      	movs	r2, r4
 8003fea:	f01c fcc9 	bl	8020980 <siprintf>
#endif
  index += strlen(message);
 8003fee:	4b78      	ldr	r3, [pc, #480]	@ (80041d0 <CreateMessage+0x4a8>)
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fc f8bb 	bl	800016c <strlen>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	220e      	movs	r2, #14
 8003ffc:	18bb      	adds	r3, r7, r2
 8003ffe:	18ba      	adds	r2, r7, r2
 8004000:	8812      	ldrh	r2, [r2, #0]
 8004002:	188a      	adds	r2, r1, r2
 8004004:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004006:	1dbb      	adds	r3, r7, #6
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <CreateMessage+0x31a>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800400e:	4b70      	ldr	r3, [pc, #448]	@ (80041d0 <CreateMessage+0x4a8>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0003      	movs	r3, r0
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b6d      	ldr	r3, [pc, #436]	@ (80041d0 <CreateMessage+0x4a8>)
 800401c:	0011      	movs	r1, r2
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff fcea 	bl	80039f8 <ESP_Send>
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	4b71      	ldr	r3, [pc, #452]	@ (80041f0 <CreateMessage+0x4c8>)
 800402a:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800402c:	4b71      	ldr	r3, [pc, #452]	@ (80041f4 <CreateMessage+0x4cc>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	001a      	movs	r2, r3
 8004032:	4b6f      	ldr	r3, [pc, #444]	@ (80041f0 <CreateMessage+0x4c8>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4013      	ands	r3, r2
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	4193      	sbcs	r3, r2
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b6d      	ldr	r3, [pc, #436]	@ (80041f4 <CreateMessage+0x4cc>)
 8004040:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004042:	1dfb      	adds	r3, r7, #7
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4053      	eors	r3, r2
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d100      	bne.n	8004052 <CreateMessage+0x32a>
 8004050:	e14a      	b.n	80042e8 <CreateMessage+0x5c0>
    uint8ArrayToString(Buffer, solarConfig);
 8004052:	4a6f      	ldr	r2, [pc, #444]	@ (8004210 <CreateMessage+0x4e8>)
 8004054:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <CreateMessage+0x4b4>)
 8004056:	0011      	movs	r1, r2
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff fe41 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 800405e:	4b60      	ldr	r3, [pc, #384]	@ (80041e0 <CreateMessage+0x4b8>)
 8004060:	689c      	ldr	r4, [r3, #8]
 8004062:	4b6c      	ldr	r3, [pc, #432]	@ (8004214 <CreateMessage+0x4ec>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1c18      	adds	r0, r3, #0
 8004068:	f7ff f9fc 	bl	8003464 <__aeabi_f2d>
 800406c:	0002      	movs	r2, r0
 800406e:	000b      	movs	r3, r1
 8004070:	4d55      	ldr	r5, [pc, #340]	@ (80041c8 <CreateMessage+0x4a0>)
 8004072:	4969      	ldr	r1, [pc, #420]	@ (8004218 <CreateMessage+0x4f0>)
 8004074:	4856      	ldr	r0, [pc, #344]	@ (80041d0 <CreateMessage+0x4a8>)
 8004076:	9202      	str	r2, [sp, #8]
 8004078:	9303      	str	r3, [sp, #12]
 800407a:	4b58      	ldr	r3, [pc, #352]	@ (80041dc <CreateMessage+0x4b4>)
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	002b      	movs	r3, r5
 8004080:	0022      	movs	r2, r4
 8004082:	f01c fc7d 	bl	8020980 <siprintf>
#endif
    index += strlen(message);
 8004086:	4b52      	ldr	r3, [pc, #328]	@ (80041d0 <CreateMessage+0x4a8>)
 8004088:	0018      	movs	r0, r3
 800408a:	f7fc f86f 	bl	800016c <strlen>
 800408e:	0003      	movs	r3, r0
 8004090:	b299      	uxth	r1, r3
 8004092:	220e      	movs	r2, #14
 8004094:	18bb      	adds	r3, r7, r2
 8004096:	18ba      	adds	r2, r7, r2
 8004098:	8812      	ldrh	r2, [r2, #0]
 800409a:	188a      	adds	r2, r1, r2
 800409c:	801a      	strh	r2, [r3, #0]
    if (send) {
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d019      	beq.n	80040da <CreateMessage+0x3b2>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <CreateMessage+0x4a8>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7fc f85f 	bl	800016c <strlen>
 80040ae:	0003      	movs	r3, r0
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	4b47      	ldr	r3, [pc, #284]	@ (80041d0 <CreateMessage+0x4a8>)
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fc9e 	bl	80039f8 <ESP_Send>
 80040bc:	0003      	movs	r3, r0
 80040be:	001a      	movs	r2, r3
 80040c0:	4b4b      	ldr	r3, [pc, #300]	@ (80041f0 <CreateMessage+0x4c8>)
 80040c2:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <CreateMessage+0x4cc>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	001a      	movs	r2, r3
 80040ca:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <CreateMessage+0x4c8>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	1e5a      	subs	r2, r3, #1
 80040d2:	4193      	sbcs	r3, r2
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <CreateMessage+0x4cc>)
 80040d8:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80040da:	4b50      	ldr	r3, [pc, #320]	@ (800421c <CreateMessage+0x4f4>)
 80040dc:	791b      	ldrb	r3, [r3, #4]
 80040de:	2b35      	cmp	r3, #53	@ 0x35
 80040e0:	d140      	bne.n	8004164 <CreateMessage+0x43c>
 80040e2:	f002 fd89 	bl	8006bf8 <Check_USB_PowerOn>
 80040e6:	1e03      	subs	r3, r0, #0
 80040e8:	d03c      	beq.n	8004164 <CreateMessage+0x43c>
      uint8ArrayToString(Buffer, noxConfig);
 80040ea:	4a4d      	ldr	r2, [pc, #308]	@ (8004220 <CreateMessage+0x4f8>)
 80040ec:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <CreateMessage+0x4b4>)
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fdf5 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <CreateMessage+0x4b8>)
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	4b3a      	ldr	r3, [pc, #232]	@ (80041e4 <CreateMessage+0x4bc>)
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040fe:	4c32      	ldr	r4, [pc, #200]	@ (80041c8 <CreateMessage+0x4a0>)
 8004100:	4948      	ldr	r1, [pc, #288]	@ (8004224 <CreateMessage+0x4fc>)
 8004102:	4833      	ldr	r0, [pc, #204]	@ (80041d0 <CreateMessage+0x4a8>)
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	4b35      	ldr	r3, [pc, #212]	@ (80041dc <CreateMessage+0x4b4>)
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	0023      	movs	r3, r4
 800410c:	f01c fc38 	bl	8020980 <siprintf>
#endif
      index += strlen(message);
 8004110:	4b2f      	ldr	r3, [pc, #188]	@ (80041d0 <CreateMessage+0x4a8>)
 8004112:	0018      	movs	r0, r3
 8004114:	f7fc f82a 	bl	800016c <strlen>
 8004118:	0003      	movs	r3, r0
 800411a:	b299      	uxth	r1, r3
 800411c:	220e      	movs	r2, #14
 800411e:	18bb      	adds	r3, r7, r2
 8004120:	18ba      	adds	r2, r7, r2
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	188a      	adds	r2, r1, r2
 8004126:	801a      	strh	r2, [r3, #0]
      if (send) {
 8004128:	1dbb      	adds	r3, r7, #6
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d019      	beq.n	8004164 <CreateMessage+0x43c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004130:	4b27      	ldr	r3, [pc, #156]	@ (80041d0 <CreateMessage+0x4a8>)
 8004132:	0018      	movs	r0, r3
 8004134:	f7fc f81a 	bl	800016c <strlen>
 8004138:	0003      	movs	r3, r0
 800413a:	b29a      	uxth	r2, r3
 800413c:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <CreateMessage+0x4a8>)
 800413e:	0011      	movs	r1, r2
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff fc59 	bl	80039f8 <ESP_Send>
 8004146:	0003      	movs	r3, r0
 8004148:	001a      	movs	r2, r3
 800414a:	4b29      	ldr	r3, [pc, #164]	@ (80041f0 <CreateMessage+0x4c8>)
 800414c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800414e:	4b29      	ldr	r3, [pc, #164]	@ (80041f4 <CreateMessage+0x4cc>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	001a      	movs	r2, r3
 8004154:	4b26      	ldr	r3, [pc, #152]	@ (80041f0 <CreateMessage+0x4c8>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4013      	ands	r3, r2
 800415a:	1e5a      	subs	r2, r3, #1
 800415c:	4193      	sbcs	r3, r2
 800415e:	b2da      	uxtb	r2, r3
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <CreateMessage+0x4cc>)
 8004162:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 8004164:	f005 fc02 	bl	800996c <sen5x_Get_sen5x_enable_state>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d100      	bne.n	800416e <CreateMessage+0x446>
 800416c:	e0bc      	b.n	80042e8 <CreateMessage+0x5c0>
      uint8ArrayToString(Buffer, PM2Config);
 800416e:	4a2e      	ldr	r2, [pc, #184]	@ (8004228 <CreateMessage+0x500>)
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <CreateMessage+0x4b4>)
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f7ff fdb3 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 800417a:	4b19      	ldr	r3, [pc, #100]	@ (80041e0 <CreateMessage+0x4b8>)
 800417c:	689c      	ldr	r4, [r3, #8]
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <CreateMessage+0x4bc>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	1c18      	adds	r0, r3, #0
 8004184:	f7ff f96e 	bl	8003464 <__aeabi_f2d>
 8004188:	0002      	movs	r2, r0
 800418a:	000b      	movs	r3, r1
 800418c:	4d0e      	ldr	r5, [pc, #56]	@ (80041c8 <CreateMessage+0x4a0>)
 800418e:	4927      	ldr	r1, [pc, #156]	@ (800422c <CreateMessage+0x504>)
 8004190:	480f      	ldr	r0, [pc, #60]	@ (80041d0 <CreateMessage+0x4a8>)
 8004192:	9202      	str	r2, [sp, #8]
 8004194:	9303      	str	r3, [sp, #12]
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <CreateMessage+0x4b4>)
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	002b      	movs	r3, r5
 800419c:	0022      	movs	r2, r4
 800419e:	f01c fbef 	bl	8020980 <siprintf>
#endif
      index += strlen(message);
 80041a2:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <CreateMessage+0x4a8>)
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fb ffe1 	bl	800016c <strlen>
 80041aa:	0003      	movs	r3, r0
 80041ac:	b299      	uxth	r1, r3
 80041ae:	220e      	movs	r2, #14
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	18ba      	adds	r2, r7, r2
 80041b4:	8812      	ldrh	r2, [r2, #0]
 80041b6:	188a      	adds	r2, r1, r2
 80041b8:	801a      	strh	r2, [r3, #0]
      if (send) {
 80041ba:	1dbb      	adds	r3, r7, #6
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d04e      	beq.n	8004260 <CreateMessage+0x538>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80041c2:	4b03      	ldr	r3, [pc, #12]	@ (80041d0 <CreateMessage+0x4a8>)
 80041c4:	0018      	movs	r0, r3
 80041c6:	e033      	b.n	8004230 <CreateMessage+0x508>
 80041c8:	20000700 	.word	0x20000700
 80041cc:	08026360 	.word	0x08026360
 80041d0:	20000578 	.word	0x20000578
 80041d4:	08023fa4 	.word	0x08023fa4
 80041d8:	20000694 	.word	0x20000694
 80041dc:	20000720 	.word	0x20000720
 80041e0:	20000558 	.word	0x20000558
 80041e4:	20000624 	.word	0x20000624
 80041e8:	08023fa8 	.word	0x08023fa8
 80041ec:	20000579 	.word	0x20000579
 80041f0:	20000739 	.word	0x20000739
 80041f4:	20000031 	.word	0x20000031
 80041f8:	200006a0 	.word	0x200006a0
 80041fc:	08023ffc 	.word	0x08023ffc
 8004200:	200006b8 	.word	0x200006b8
 8004204:	08024054 	.word	0x08024054
 8004208:	200006ac 	.word	0x200006ac
 800420c:	080240a8 	.word	0x080240a8
 8004210:	200006d0 	.word	0x200006d0
 8004214:	20000574 	.word	0x20000574
 8004218:	08024104 	.word	0x08024104
 800421c:	20000d6c 	.word	0x20000d6c
 8004220:	200006dc 	.word	0x200006dc
 8004224:	08024164 	.word	0x08024164
 8004228:	200006e8 	.word	0x200006e8
 800422c:	080241b8 	.word	0x080241b8
 8004230:	f7fb ff9c 	bl	800016c <strlen>
 8004234:	0003      	movs	r3, r0
 8004236:	b29a      	uxth	r2, r3
 8004238:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <CreateMessage+0x678>)
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fbdb 	bl	80039f8 <ESP_Send>
 8004242:	0003      	movs	r3, r0
 8004244:	001a      	movs	r2, r3
 8004246:	4b57      	ldr	r3, [pc, #348]	@ (80043a4 <CreateMessage+0x67c>)
 8004248:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800424a:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <CreateMessage+0x680>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	001a      	movs	r2, r3
 8004250:	4b54      	ldr	r3, [pc, #336]	@ (80043a4 <CreateMessage+0x67c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4013      	ands	r3, r2
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	4193      	sbcs	r3, r2
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b52      	ldr	r3, [pc, #328]	@ (80043a8 <CreateMessage+0x680>)
 800425e:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 8004260:	4a52      	ldr	r2, [pc, #328]	@ (80043ac <CreateMessage+0x684>)
 8004262:	4b53      	ldr	r3, [pc, #332]	@ (80043b0 <CreateMessage+0x688>)
 8004264:	0011      	movs	r1, r2
 8004266:	0018      	movs	r0, r3
 8004268:	f7ff fd3a 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800426c:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <CreateMessage+0x68c>)
 800426e:	689c      	ldr	r4, [r3, #8]
 8004270:	4b51      	ldr	r3, [pc, #324]	@ (80043b8 <CreateMessage+0x690>)
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	1c18      	adds	r0, r3, #0
 8004276:	f7ff f8f5 	bl	8003464 <__aeabi_f2d>
 800427a:	0002      	movs	r2, r0
 800427c:	000b      	movs	r3, r1
 800427e:	4d4f      	ldr	r5, [pc, #316]	@ (80043bc <CreateMessage+0x694>)
 8004280:	494f      	ldr	r1, [pc, #316]	@ (80043c0 <CreateMessage+0x698>)
 8004282:	4847      	ldr	r0, [pc, #284]	@ (80043a0 <CreateMessage+0x678>)
 8004284:	9202      	str	r2, [sp, #8]
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	4b49      	ldr	r3, [pc, #292]	@ (80043b0 <CreateMessage+0x688>)
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	002b      	movs	r3, r5
 800428e:	0022      	movs	r2, r4
 8004290:	f01c fb76 	bl	8020980 <siprintf>
#endif
      index += strlen(message);
 8004294:	4b42      	ldr	r3, [pc, #264]	@ (80043a0 <CreateMessage+0x678>)
 8004296:	0018      	movs	r0, r3
 8004298:	f7fb ff68 	bl	800016c <strlen>
 800429c:	0003      	movs	r3, r0
 800429e:	b299      	uxth	r1, r3
 80042a0:	220e      	movs	r2, #14
 80042a2:	18bb      	adds	r3, r7, r2
 80042a4:	18ba      	adds	r2, r7, r2
 80042a6:	8812      	ldrh	r2, [r2, #0]
 80042a8:	188a      	adds	r2, r1, r2
 80042aa:	801a      	strh	r2, [r3, #0]
      if (send) {
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d019      	beq.n	80042e8 <CreateMessage+0x5c0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80042b4:	4b3a      	ldr	r3, [pc, #232]	@ (80043a0 <CreateMessage+0x678>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7fb ff58 	bl	800016c <strlen>
 80042bc:	0003      	movs	r3, r0
 80042be:	b29a      	uxth	r2, r3
 80042c0:	4b37      	ldr	r3, [pc, #220]	@ (80043a0 <CreateMessage+0x678>)
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f7ff fb97 	bl	80039f8 <ESP_Send>
 80042ca:	0003      	movs	r3, r0
 80042cc:	001a      	movs	r2, r3
 80042ce:	4b35      	ldr	r3, [pc, #212]	@ (80043a4 <CreateMessage+0x67c>)
 80042d0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042d2:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <CreateMessage+0x680>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	001a      	movs	r2, r3
 80042d8:	4b32      	ldr	r3, [pc, #200]	@ (80043a4 <CreateMessage+0x67c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	4013      	ands	r3, r2
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	4193      	sbcs	r3, r2
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	4b30      	ldr	r3, [pc, #192]	@ (80043a8 <CreateMessage+0x680>)
 80042e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 80042e8:	4a36      	ldr	r2, [pc, #216]	@ (80043c4 <CreateMessage+0x69c>)
 80042ea:	4b31      	ldr	r3, [pc, #196]	@ (80043b0 <CreateMessage+0x688>)
 80042ec:	0011      	movs	r1, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff fcf6 	bl	8003ce0 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80042f4:	4b2f      	ldr	r3, [pc, #188]	@ (80043b4 <CreateMessage+0x68c>)
 80042f6:	689c      	ldr	r4, [r3, #8]
 80042f8:	4b33      	ldr	r3, [pc, #204]	@ (80043c8 <CreateMessage+0x6a0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1c18      	adds	r0, r3, #0
 80042fe:	f7ff f8b1 	bl	8003464 <__aeabi_f2d>
 8004302:	0002      	movs	r2, r0
 8004304:	000b      	movs	r3, r1
 8004306:	4d2d      	ldr	r5, [pc, #180]	@ (80043bc <CreateMessage+0x694>)
 8004308:	4930      	ldr	r1, [pc, #192]	@ (80043cc <CreateMessage+0x6a4>)
 800430a:	4825      	ldr	r0, [pc, #148]	@ (80043a0 <CreateMessage+0x678>)
 800430c:	9202      	str	r2, [sp, #8]
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	4b27      	ldr	r3, [pc, #156]	@ (80043b0 <CreateMessage+0x688>)
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	002b      	movs	r3, r5
 8004316:	0022      	movs	r2, r4
 8004318:	f01c fb32 	bl	8020980 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 800431c:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <CreateMessage+0x678>)
 800431e:	0018      	movs	r0, r3
 8004320:	f7fb ff24 	bl	800016c <strlen>
 8004324:	0002      	movs	r2, r0
 8004326:	4b1e      	ldr	r3, [pc, #120]	@ (80043a0 <CreateMessage+0x678>)
 8004328:	18d3      	adds	r3, r2, r3
 800432a:	4a29      	ldr	r2, [pc, #164]	@ (80043d0 <CreateMessage+0x6a8>)
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f01c fb26 	bl	8020980 <siprintf>
  index += strlen(message);
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <CreateMessage+0x678>)
 8004336:	0018      	movs	r0, r3
 8004338:	f7fb ff18 	bl	800016c <strlen>
 800433c:	0003      	movs	r3, r0
 800433e:	b299      	uxth	r1, r3
 8004340:	220e      	movs	r2, #14
 8004342:	18bb      	adds	r3, r7, r2
 8004344:	18ba      	adds	r2, r7, r2
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	188a      	adds	r2, r1, r2
 800434a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d019      	beq.n	8004388 <CreateMessage+0x660>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004354:	4b12      	ldr	r3, [pc, #72]	@ (80043a0 <CreateMessage+0x678>)
 8004356:	0018      	movs	r0, r3
 8004358:	f7fb ff08 	bl	800016c <strlen>
 800435c:	0003      	movs	r3, r0
 800435e:	b29a      	uxth	r2, r3
 8004360:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <CreateMessage+0x678>)
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff fb47 	bl	80039f8 <ESP_Send>
 800436a:	0003      	movs	r3, r0
 800436c:	001a      	movs	r2, r3
 800436e:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <CreateMessage+0x67c>)
 8004370:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004372:	4b0d      	ldr	r3, [pc, #52]	@ (80043a8 <CreateMessage+0x680>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	001a      	movs	r2, r3
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <CreateMessage+0x67c>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	4013      	ands	r3, r2
 800437e:	1e5a      	subs	r2, r3, #1
 8004380:	4193      	sbcs	r3, r2
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <CreateMessage+0x680>)
 8004386:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8004388:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <CreateMessage+0x680>)
 800438a:	781a      	ldrb	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	701a      	strb	r2, [r3, #0]
  return index;
 8004390:	230e      	movs	r3, #14
 8004392:	18fb      	adds	r3, r7, r3
 8004394:	881b      	ldrh	r3, [r3, #0]
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b005      	add	sp, #20
 800439c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	20000578 	.word	0x20000578
 80043a4:	20000739 	.word	0x20000739
 80043a8:	20000031 	.word	0x20000031
 80043ac:	200006f4 	.word	0x200006f4
 80043b0:	20000720 	.word	0x20000720
 80043b4:	20000558 	.word	0x20000558
 80043b8:	20000624 	.word	0x20000624
 80043bc:	20000700 	.word	0x20000700
 80043c0:	08024214 	.word	0x08024214
 80043c4:	200006c4 	.word	0x200006c4
 80043c8:	20000570 	.word	0x20000570
 80043cc:	08024270 	.word	0x08024270
 80043d0:	080242c8 	.word	0x080242c8

080043d4 <StartProg>:

void StartProg(){
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80043d8:	2064      	movs	r0, #100	@ 0x64
 80043da:	f00b f9c7 	bl	800f76c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80043de:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <StartProg+0x60>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	2101      	movs	r1, #1
 80043e4:	0018      	movs	r0, r3
 80043e6:	f00c fc48 	bl	8010c7a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80043ea:	2064      	movs	r0, #100	@ 0x64
 80043ec:	f00b f9be 	bl	800f76c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80043f0:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <StartProg+0x60>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	2102      	movs	r1, #2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f00c fc3f 	bl	8010c7a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80043fc:	23fa      	movs	r3, #250	@ 0xfa
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	0018      	movs	r0, r3
 8004402:	f00b f9b3 	bl	800f76c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <StartProg+0x60>)
 8004408:	2201      	movs	r2, #1
 800440a:	2101      	movs	r1, #1
 800440c:	0018      	movs	r0, r3
 800440e:	f00c fc34 	bl	8010c7a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004412:	23fa      	movs	r3, #250	@ 0xfa
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	0018      	movs	r0, r3
 8004418:	f00b f9a8 	bl	800f76c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <StartProg+0x60>)
 800441e:	2201      	movs	r2, #1
 8004420:	2102      	movs	r1, #2
 8004422:	0018      	movs	r0, r3
 8004424:	f00c fc29 	bl	8010c7a <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004428:	2028      	movs	r0, #40	@ 0x28
 800442a:	f00b f99f 	bl	800f76c <HAL_Delay>
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	50001c00 	.word	0x50001c00

08004438 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443a:	b0d9      	sub	sp, #356	@ 0x164
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	0008      	movs	r0, r1
 8004442:	0011      	movs	r1, r2
 8004444:	4ba4      	ldr	r3, [pc, #656]	@ (80046d8 <ParseBuffer+0x2a0>)
 8004446:	24b0      	movs	r4, #176	@ 0xb0
 8004448:	0064      	lsls	r4, r4, #1
 800444a:	191b      	adds	r3, r3, r4
 800444c:	19db      	adds	r3, r3, r7
 800444e:	1c02      	adds	r2, r0, #0
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	4ba2      	ldr	r3, [pc, #648]	@ (80046dc <ParseBuffer+0x2a4>)
 8004454:	191b      	adds	r3, r3, r4
 8004456:	19db      	adds	r3, r3, r7
 8004458:	1c0a      	adds	r2, r1, #0
 800445a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	005a      	lsls	r2, r3, #1
 8004460:	2348      	movs	r3, #72	@ 0x48
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	2100      	movs	r1, #0
 8004466:	0018      	movs	r0, r3
 8004468:	f01c fbf0 	bl	8020c4c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800446c:	2360      	movs	r3, #96	@ 0x60
 800446e:	33ff      	adds	r3, #255	@ 0xff
 8004470:	18fb      	adds	r3, r7, r3
 8004472:	2203      	movs	r2, #3
 8004474:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004476:	23ae      	movs	r3, #174	@ 0xae
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2200      	movs	r2, #0
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e013      	b.n	80044aa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004482:	20ae      	movs	r0, #174	@ 0xae
 8004484:	0040      	lsls	r0, r0, #1
 8004486:	183b      	adds	r3, r7, r0
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	18d2      	adds	r2, r2, r3
 800448e:	183b      	adds	r3, r7, r0
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	7811      	ldrb	r1, [r2, #0]
 8004494:	4a92      	ldr	r2, [pc, #584]	@ (80046e0 <ParseBuffer+0x2a8>)
 8004496:	24b0      	movs	r4, #176	@ 0xb0
 8004498:	0064      	lsls	r4, r4, #1
 800449a:	1912      	adds	r2, r2, r4
 800449c:	19d2      	adds	r2, r2, r7
 800449e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80044a0:	183b      	adds	r3, r7, r0
 80044a2:	881a      	ldrh	r2, [r3, #0]
 80044a4:	183b      	adds	r3, r7, r0
 80044a6:	3201      	adds	r2, #1
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	23ae      	movs	r3, #174	@ 0xae
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	18fa      	adds	r2, r7, r3
 80044b0:	4b89      	ldr	r3, [pc, #548]	@ (80046d8 <ParseBuffer+0x2a0>)
 80044b2:	21b0      	movs	r1, #176	@ 0xb0
 80044b4:	0049      	lsls	r1, r1, #1
 80044b6:	185b      	adds	r3, r3, r1
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	8812      	ldrh	r2, [r2, #0]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3df      	bcc.n	8004482 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <ParseBuffer+0x2a0>)
 80044c4:	185b      	adds	r3, r3, r1
 80044c6:	19db      	adds	r3, r3, r7
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	4a85      	ldr	r2, [pc, #532]	@ (80046e0 <ParseBuffer+0x2a8>)
 80044cc:	1852      	adds	r2, r2, r1
 80044ce:	19d2      	adds	r2, r2, r7
 80044d0:	2100      	movs	r1, #0
 80044d2:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80044d4:	f00a fd76 	bl	800efc4 <GetVerboseLevel>
 80044d8:	0003      	movs	r3, r0
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d106      	bne.n	80044ec <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80044de:	2348      	movs	r3, #72	@ 0x48
 80044e0:	18fa      	adds	r2, r7, r3
 80044e2:	4b80      	ldr	r3, [pc, #512]	@ (80046e4 <ParseBuffer+0x2ac>)
 80044e4:	0011      	movs	r1, r2
 80044e6:	0018      	movs	r0, r3
 80044e8:	f01c f9da 	bl	80208a0 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	26ac      	movs	r6, #172	@ 0xac
 80044f0:	0076      	lsls	r6, r6, #1
 80044f2:	19ba      	adds	r2, r7, r6
 80044f4:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80044f6:	4b7c      	ldr	r3, [pc, #496]	@ (80046e8 <ParseBuffer+0x2b0>)
 80044f8:	25b0      	movs	r5, #176	@ 0xb0
 80044fa:	006d      	lsls	r5, r5, #1
 80044fc:	195b      	adds	r3, r3, r5
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	4a7a      	ldr	r2, [pc, #488]	@ (80046ec <ParseBuffer+0x2b4>)
 8004502:	8811      	ldrh	r1, [r2, #0]
 8004504:	8019      	strh	r1, [r3, #0]
 8004506:	7892      	ldrb	r2, [r2, #2]
 8004508:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800450a:	4b79      	ldr	r3, [pc, #484]	@ (80046f0 <ParseBuffer+0x2b8>)
 800450c:	195b      	adds	r3, r3, r5
 800450e:	19db      	adds	r3, r3, r7
 8004510:	4a78      	ldr	r2, [pc, #480]	@ (80046f4 <ParseBuffer+0x2bc>)
 8004512:	6811      	ldr	r1, [r2, #0]
 8004514:	6019      	str	r1, [r3, #0]
 8004516:	8892      	ldrh	r2, [r2, #4]
 8004518:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800451a:	4b77      	ldr	r3, [pc, #476]	@ (80046f8 <ParseBuffer+0x2c0>)
 800451c:	195b      	adds	r3, r3, r5
 800451e:	19db      	adds	r3, r3, r7
 8004520:	4a76      	ldr	r2, [pc, #472]	@ (80046fc <ParseBuffer+0x2c4>)
 8004522:	6811      	ldr	r1, [r2, #0]
 8004524:	6019      	str	r1, [r3, #0]
 8004526:	7912      	ldrb	r2, [r2, #4]
 8004528:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800452a:	4b75      	ldr	r3, [pc, #468]	@ (8004700 <ParseBuffer+0x2c8>)
 800452c:	195b      	adds	r3, r3, r5
 800452e:	19db      	adds	r3, r3, r7
 8004530:	4a74      	ldr	r2, [pc, #464]	@ (8004704 <ParseBuffer+0x2cc>)
 8004532:	6811      	ldr	r1, [r2, #0]
 8004534:	6019      	str	r1, [r3, #0]
 8004536:	8892      	ldrh	r2, [r2, #4]
 8004538:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800453a:	4b73      	ldr	r3, [pc, #460]	@ (8004708 <ParseBuffer+0x2d0>)
 800453c:	195b      	adds	r3, r3, r5
 800453e:	19db      	adds	r3, r3, r7
 8004540:	223e      	movs	r2, #62	@ 0x3e
 8004542:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004544:	4b71      	ldr	r3, [pc, #452]	@ (800470c <ParseBuffer+0x2d4>)
 8004546:	195b      	adds	r3, r3, r5
 8004548:	19db      	adds	r3, r3, r7
 800454a:	4a71      	ldr	r2, [pc, #452]	@ (8004710 <ParseBuffer+0x2d8>)
 800454c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800454e:	c313      	stmia	r3!, {r0, r1, r4}
 8004550:	8811      	ldrh	r1, [r2, #0]
 8004552:	8019      	strh	r1, [r3, #0]
 8004554:	7892      	ldrb	r2, [r2, #2]
 8004556:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004558:	4b6e      	ldr	r3, [pc, #440]	@ (8004714 <ParseBuffer+0x2dc>)
 800455a:	195b      	adds	r3, r3, r5
 800455c:	19db      	adds	r3, r3, r7
 800455e:	4a6e      	ldr	r2, [pc, #440]	@ (8004718 <ParseBuffer+0x2e0>)
 8004560:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004562:	c313      	stmia	r3!, {r0, r1, r4}
 8004564:	8812      	ldrh	r2, [r2, #0]
 8004566:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004568:	4b5c      	ldr	r3, [pc, #368]	@ (80046dc <ParseBuffer+0x2a4>)
 800456a:	195b      	adds	r3, r3, r5
 800456c:	19db      	adds	r3, r3, r7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10a      	bne.n	800458a <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004574:	2344      	movs	r3, #68	@ 0x44
 8004576:	18fa      	adds	r2, r7, r3
 8004578:	2348      	movs	r3, #72	@ 0x48
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f01c fb9f 	bl	8020cc2 <strstr>
 8004584:	0003      	movs	r3, r0
 8004586:	19ba      	adds	r2, r7, r6
 8004588:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800458a:	4b54      	ldr	r3, [pc, #336]	@ (80046dc <ParseBuffer+0x2a4>)
 800458c:	22b0      	movs	r2, #176	@ 0xb0
 800458e:	0052      	lsls	r2, r2, #1
 8004590:	189b      	adds	r3, r3, r2
 8004592:	19db      	adds	r3, r3, r7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d10c      	bne.n	80045b4 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 800459a:	232c      	movs	r3, #44	@ 0x2c
 800459c:	18fa      	adds	r2, r7, r3
 800459e:	2348      	movs	r3, #72	@ 0x48
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	0011      	movs	r1, r2
 80045a4:	0018      	movs	r0, r3
 80045a6:	f01c fb8c 	bl	8020cc2 <strstr>
 80045aa:	0003      	movs	r3, r0
 80045ac:	22ac      	movs	r2, #172	@ 0xac
 80045ae:	0052      	lsls	r2, r2, #1
 80045b0:	18ba      	adds	r2, r7, r2
 80045b2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80045b4:	4b49      	ldr	r3, [pc, #292]	@ (80046dc <ParseBuffer+0x2a4>)
 80045b6:	22b0      	movs	r2, #176	@ 0xb0
 80045b8:	0052      	lsls	r2, r2, #1
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	19db      	adds	r3, r3, r7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d10c      	bne.n	80045de <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80045c4:	2328      	movs	r3, #40	@ 0x28
 80045c6:	18fa      	adds	r2, r7, r3
 80045c8:	2348      	movs	r3, #72	@ 0x48
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	0011      	movs	r1, r2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f01c fb77 	bl	8020cc2 <strstr>
 80045d4:	0003      	movs	r3, r0
 80045d6:	22ac      	movs	r2, #172	@ 0xac
 80045d8:	0052      	lsls	r2, r2, #1
 80045da:	18ba      	adds	r2, r7, r2
 80045dc:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80045de:	4b3f      	ldr	r3, [pc, #252]	@ (80046dc <ParseBuffer+0x2a4>)
 80045e0:	22b0      	movs	r2, #176	@ 0xb0
 80045e2:	0052      	lsls	r2, r2, #1
 80045e4:	189b      	adds	r3, r3, r2
 80045e6:	19db      	adds	r3, r3, r7
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b05      	cmp	r3, #5
 80045ec:	d10c      	bne.n	8004608 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80045ee:	2308      	movs	r3, #8
 80045f0:	18fa      	adds	r2, r7, r3
 80045f2:	2348      	movs	r3, #72	@ 0x48
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f01c fb62 	bl	8020cc2 <strstr>
 80045fe:	0003      	movs	r3, r0
 8004600:	22ac      	movs	r2, #172	@ 0xac
 8004602:	0052      	lsls	r2, r2, #1
 8004604:	18ba      	adds	r2, r7, r2
 8004606:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004608:	233c      	movs	r3, #60	@ 0x3c
 800460a:	18fa      	adds	r2, r7, r3
 800460c:	2448      	movs	r4, #72	@ 0x48
 800460e:	193b      	adds	r3, r7, r4
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f01c fb55 	bl	8020cc2 <strstr>
 8004618:	0003      	movs	r3, r0
 800461a:	22aa      	movs	r2, #170	@ 0xaa
 800461c:	0052      	lsls	r2, r2, #1
 800461e:	18ba      	adds	r2, r7, r2
 8004620:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004622:	2318      	movs	r3, #24
 8004624:	18fa      	adds	r2, r7, r3
 8004626:	193b      	adds	r3, r7, r4
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f01c fb49 	bl	8020cc2 <strstr>
 8004630:	0003      	movs	r3, r0
 8004632:	22a8      	movs	r2, #168	@ 0xa8
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	18ba      	adds	r2, r7, r2
 8004638:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800463a:	4a38      	ldr	r2, [pc, #224]	@ (800471c <ParseBuffer+0x2e4>)
 800463c:	193b      	adds	r3, r7, r4
 800463e:	0011      	movs	r1, r2
 8004640:	0018      	movs	r0, r3
 8004642:	f01c fb3e 	bl	8020cc2 <strstr>
 8004646:	0003      	movs	r3, r0
 8004648:	22a6      	movs	r2, #166	@ 0xa6
 800464a:	0052      	lsls	r2, r2, #1
 800464c:	18ba      	adds	r2, r7, r2
 800464e:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004650:	2334      	movs	r3, #52	@ 0x34
 8004652:	18fa      	adds	r2, r7, r3
 8004654:	193b      	adds	r3, r7, r4
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f01c fb32 	bl	8020cc2 <strstr>
 800465e:	0003      	movs	r3, r0
 8004660:	22a4      	movs	r2, #164	@ 0xa4
 8004662:	0052      	lsls	r2, r2, #1
 8004664:	18ba      	adds	r2, r7, r2
 8004666:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004668:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <ParseBuffer+0x2a0>)
 800466a:	21b0      	movs	r1, #176	@ 0xb0
 800466c:	0049      	lsls	r1, r1, #1
 800466e:	185b      	adds	r3, r3, r1
 8004670:	19db      	adds	r3, r3, r7
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d800      	bhi.n	800467a <ParseBuffer+0x242>
 8004678:	e0bf      	b.n	80047fa <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800467a:	22ac      	movs	r2, #172	@ 0xac
 800467c:	0052      	lsls	r2, r2, #1
 800467e:	18bb      	adds	r3, r7, r2
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d052      	beq.n	800472c <ParseBuffer+0x2f4>
 8004686:	18bb      	adds	r3, r7, r2
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b4f      	cmp	r3, #79	@ 0x4f
 800468e:	d14d      	bne.n	800472c <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004690:	2360      	movs	r3, #96	@ 0x60
 8004692:	33ff      	adds	r3, #255	@ 0xff
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800469a:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <ParseBuffer+0x2e8>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b12      	cmp	r3, #18
 80046a0:	d144      	bne.n	800472c <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <ParseBuffer+0x2a0>)
 80046a4:	185b      	adds	r3, r3, r1
 80046a6:	19db      	adds	r3, r3, r7
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80046ac:	d10b      	bne.n	80046c6 <ParseBuffer+0x28e>
 80046ae:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <ParseBuffer+0x2a8>)
 80046b0:	185b      	adds	r3, r3, r1
 80046b2:	19db      	adds	r3, r3, r7
 80046b4:	2221      	movs	r2, #33	@ 0x21
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b32      	cmp	r3, #50	@ 0x32
 80046ba:	d104      	bne.n	80046c6 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80046bc:	193b      	adds	r3, r7, r4
 80046be:	0018      	movs	r0, r3
 80046c0:	f002 fc06 	bl	8006ed0 <ParseTime>
 80046c4:	e032      	b.n	800472c <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80046c6:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <ParseBuffer+0x2ec>)
 80046c8:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <ParseBuffer+0x2f0>)
 80046ca:	0019      	movs	r1, r3
 80046cc:	2001      	movs	r0, #1
 80046ce:	f00a fbff 	bl	800eed0 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80046d2:	2306      	movs	r3, #6
 80046d4:	e095      	b.n	8004802 <ParseBuffer+0x3ca>
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	fffffea2 	.word	0xfffffea2
 80046dc:	fffffea1 	.word	0xfffffea1
 80046e0:	fffffee8 	.word	0xfffffee8
 80046e4:	080242cc 	.word	0x080242cc
 80046e8:	fffffee4 	.word	0xfffffee4
 80046ec:	080242f8 	.word	0x080242f8
 80046f0:	fffffedc 	.word	0xfffffedc
 80046f4:	080242fc 	.word	0x080242fc
 80046f8:	fffffed4 	.word	0xfffffed4
 80046fc:	08024304 	.word	0x08024304
 8004700:	fffffecc 	.word	0xfffffecc
 8004704:	0802430c 	.word	0x0802430c
 8004708:	fffffec8 	.word	0xfffffec8
 800470c:	fffffeb8 	.word	0xfffffeb8
 8004710:	08024314 	.word	0x08024314
 8004714:	fffffea8 	.word	0xfffffea8
 8004718:	08024324 	.word	0x08024324
 800471c:	08026340 	.word	0x08026340
 8004720:	2000061e 	.word	0x2000061e
 8004724:	080242e4 	.word	0x080242e4
 8004728:	08023be4 	.word	0x08023be4
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 800472c:	22ac      	movs	r2, #172	@ 0xac
 800472e:	0052      	lsls	r2, r2, #1
 8004730:	18bb      	adds	r3, r7, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <ParseBuffer+0x314>
 8004738:	18bb      	adds	r3, r7, r2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b72      	cmp	r3, #114	@ 0x72
 8004740:	d104      	bne.n	800474c <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 8004742:	2360      	movs	r3, #96	@ 0x60
 8004744:	33ff      	adds	r3, #255	@ 0xff
 8004746:	18fb      	adds	r3, r7, r3
 8004748:	2202      	movs	r2, #2
 800474a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 800474c:	22ac      	movs	r2, #172	@ 0xac
 800474e:	0052      	lsls	r2, r2, #1
 8004750:	18bb      	adds	r3, r7, r2
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <ParseBuffer+0x334>
 8004758:	18bb      	adds	r3, r7, r2
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004760:	d104      	bne.n	800476c <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 8004762:	2360      	movs	r3, #96	@ 0x60
 8004764:	33ff      	adds	r3, #255	@ 0xff
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	2205      	movs	r2, #5
 800476a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800476c:	22ac      	movs	r2, #172	@ 0xac
 800476e:	0052      	lsls	r2, r2, #1
 8004770:	18bb      	adds	r3, r7, r2
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <ParseBuffer+0x354>
 8004778:	18bb      	adds	r3, r7, r2
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004780:	d104      	bne.n	800478c <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 8004782:	2360      	movs	r3, #96	@ 0x60
 8004784:	33ff      	adds	r3, #255	@ 0xff
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	220b      	movs	r2, #11
 800478a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800478c:	22aa      	movs	r2, #170	@ 0xaa
 800478e:	0052      	lsls	r2, r2, #1
 8004790:	18bb      	adds	r3, r7, r2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <ParseBuffer+0x36a>
 8004798:	18bb      	adds	r3, r7, r2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b45      	cmp	r3, #69	@ 0x45
 80047a0:	d00a      	beq.n	80047b8 <ParseBuffer+0x380>
 80047a2:	22a4      	movs	r2, #164	@ 0xa4
 80047a4:	0052      	lsls	r2, r2, #1
 80047a6:	18bb      	adds	r3, r7, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <ParseBuffer+0x38a>
 80047ae:	18bb      	adds	r3, r7, r2
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b46      	cmp	r3, #70	@ 0x46
 80047b6:	d104      	bne.n	80047c2 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80047b8:	2360      	movs	r3, #96	@ 0x60
 80047ba:	33ff      	adds	r3, #255	@ 0xff
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80047c2:	22a8      	movs	r2, #168	@ 0xa8
 80047c4:	0052      	lsls	r2, r2, #1
 80047c6:	18bb      	adds	r3, r7, r2
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <ParseBuffer+0x3a6>
 80047ce:	18bb      	adds	r3, r7, r2
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b57      	cmp	r3, #87	@ 0x57
 80047d6:	d102      	bne.n	80047de <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <ParseBuffer+0x3d4>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80047de:	22a6      	movs	r2, #166	@ 0xa6
 80047e0:	0052      	lsls	r2, r2, #1
 80047e2:	18bb      	adds	r3, r7, r2
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <ParseBuffer+0x3c2>
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b32      	cmp	r3, #50	@ 0x32
 80047f2:	d102      	bne.n	80047fa <ParseBuffer+0x3c2>
      beurs = true;
 80047f4:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <ParseBuffer+0x3d8>)
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80047fa:	2360      	movs	r3, #96	@ 0x60
 80047fc:	33ff      	adds	r3, #255	@ 0xff
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	781b      	ldrb	r3, [r3, #0]

}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b059      	add	sp, #356	@ 0x164
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800480a:	46c0      	nop			@ (mov r8, r8)
 800480c:	20000550 	.word	0x20000550
 8004810:	20000552 	.word	0x20000552

08004814 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <PollAwake+0x34>)
 800481c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fca3 	bl	800016c <strlen>
 8004826:	0003      	movs	r3, r0
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f8e2 	bl	80039f8 <ESP_Send>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <PollAwake+0x28>
    return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <PollAwake+0x2a>
  }
  else{
    return false;
 800483c:	2300      	movs	r3, #0
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	08024334 	.word	0x08024334

0800484c <RFPower>:

bool RFPower(){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <RFPower+0x34>)
 8004854:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0003      	movs	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f8c6 	bl	80039f8 <ESP_Send>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <RFPower+0x28>
    return true;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <RFPower+0x2a>
  }
  else{
    return false;
 8004874:	2300      	movs	r3, #0
  }
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	0802433c 	.word	0x0802433c

08004884 <CheckRFPower>:

bool CheckRFPower(){
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <CheckRFPower+0x34>)
 800488c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fb fc6b 	bl	800016c <strlen>
 8004896:	0003      	movs	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff f8aa 	bl	80039f8 <ESP_Send>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <CheckRFPower+0x28>
    return true;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <CheckRFPower+0x2a>
  }
  else{
    return false;
 80048ac:	2300      	movs	r3, #0
  }
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	0802434c 	.word	0x0802434c

080048bc <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80048c2:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <ATRestore+0x34>)
 80048c4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fb fc4f 	bl	800016c <strlen>
 80048ce:	0003      	movs	r3, r0
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff f88e 	bl	80039f8 <ESP_Send>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d001      	beq.n	80048e4 <ATRestore+0x28>
    return true;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <ATRestore+0x2a>
  }
  else{
    return false;
 80048e4:	2300      	movs	r3, #0
  }
}
 80048e6:	0018      	movs	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b002      	add	sp, #8
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	0802435c 	.word	0x0802435c

080048f4 <CWINIT>:

bool CWINIT(){
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <CWINIT+0x34>)
 80048fc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	0018      	movs	r0, r3
 8004902:	f7fb fc33 	bl	800016c <strlen>
 8004906:	0003      	movs	r3, r0
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff f872 	bl	80039f8 <ESP_Send>
 8004914:	1e03      	subs	r3, r0, #0
 8004916:	d001      	beq.n	800491c <CWINIT+0x28>
    return true;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <CWINIT+0x2a>
  }
  else{
    return false;
 800491c:	2300      	movs	r3, #0
  }
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			@ (mov r8, r8)
 8004928:	0802436c 	.word	0x0802436c

0800492c <CWMODE1>:

bool CWMODE1(){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <CWMODE1+0x34>)
 8004934:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fb fc17 	bl	800016c <strlen>
 800493e:	0003      	movs	r3, r0
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0011      	movs	r1, r2
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff f856 	bl	80039f8 <ESP_Send>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <CWMODE1+0x28>
    return true;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004954:	2300      	movs	r3, #0
  }
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b002      	add	sp, #8
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	0802437c 	.word	0x0802437c

08004964 <CWMODE2>:

bool CWMODE2(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <CWMODE2+0x34>)
 800496c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f7fb fbfb 	bl	800016c <strlen>
 8004976:	0003      	movs	r3, r0
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0011      	movs	r1, r2
 800497e:	0018      	movs	r0, r3
 8004980:	f7ff f83a 	bl	80039f8 <ESP_Send>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d001      	beq.n	800498c <CWMODE2+0x28>
    return true;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <CWMODE2+0x2a>
  }
  else{
    return false;
 800498c:	2300      	movs	r3, #0
  }
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b002      	add	sp, #8
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	0802438c 	.word	0x0802438c

0800499c <CWAUTOCONN>:

bool CWAUTOCONN(){
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80049a2:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <CWAUTOCONN+0x34>)
 80049a4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7fb fbdf 	bl	800016c <strlen>
 80049ae:	0003      	movs	r3, r0
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0011      	movs	r1, r2
 80049b6:	0018      	movs	r0, r3
 80049b8:	f7ff f81e 	bl	80039f8 <ESP_Send>
 80049bc:	1e03      	subs	r3, r0, #0
 80049be:	d001      	beq.n	80049c4 <CWAUTOCONN+0x28>
    return true;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80049c4:	2300      	movs	r3, #0
  }
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	0802439c 	.word	0x0802439c

080049d4 <CWJAP>:

bool CWJAP(){
 80049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d6:	46c6      	mov	lr, r8
 80049d8:	b500      	push	{lr}
 80049da:	b0a2      	sub	sp, #136	@ 0x88
 80049dc:	af00      	add	r7, sp, #0
 80049de:	466b      	mov	r3, sp
 80049e0:	4698      	mov	r8, r3
  beursTest = true;
 80049e2:	4b39      	ldr	r3, [pc, #228]	@ (8004ac8 <CWJAP+0xf4>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80049e8:	2618      	movs	r6, #24
 80049ea:	19bb      	adds	r3, r7, r6
 80049ec:	2264      	movs	r2, #100	@ 0x64
 80049ee:	2100      	movs	r1, #0
 80049f0:	0018      	movs	r0, r3
 80049f2:	f01c f92b 	bl	8020c4c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80049f6:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <CWJAP+0xf8>)
 80049f8:	4a35      	ldr	r2, [pc, #212]	@ (8004ad0 <CWJAP+0xfc>)
 80049fa:	4936      	ldr	r1, [pc, #216]	@ (8004ad4 <CWJAP+0x100>)
 80049fc:	19b8      	adds	r0, r7, r6
 80049fe:	f01b ffbf 	bl	8020980 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004a02:	19bb      	adds	r3, r7, r6
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fb fbb1 	bl	800016c <strlen>
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	216f      	movs	r1, #111	@ 0x6f
 8004a0e:	0030      	movs	r0, r6
 8004a10:	180b      	adds	r3, r1, r0
 8004a12:	19db      	adds	r3, r3, r7
 8004a14:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004a16:	180b      	adds	r3, r1, r0
 8004a18:	19db      	adds	r3, r3, r7
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	2180      	movs	r1, #128	@ 0x80
 8004a22:	1879      	adds	r1, r7, r1
 8004a24:	600a      	str	r2, [r1, #0]
 8004a26:	001a      	movs	r2, r3
 8004a28:	60ba      	str	r2, [r7, #8]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	60fa      	str	r2, [r7, #12]
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	68f9      	ldr	r1, [r7, #12]
 8004a32:	0002      	movs	r2, r0
 8004a34:	0f52      	lsrs	r2, r2, #29
 8004a36:	000e      	movs	r6, r1
 8004a38:	00f6      	lsls	r6, r6, #3
 8004a3a:	617e      	str	r6, [r7, #20]
 8004a3c:	697e      	ldr	r6, [r7, #20]
 8004a3e:	4316      	orrs	r6, r2
 8004a40:	617e      	str	r6, [r7, #20]
 8004a42:	0002      	movs	r2, r0
 8004a44:	00d2      	lsls	r2, r2, #3
 8004a46:	613a      	str	r2, [r7, #16]
 8004a48:	001a      	movs	r2, r3
 8004a4a:	603a      	str	r2, [r7, #0]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	6838      	ldr	r0, [r7, #0]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	0002      	movs	r2, r0
 8004a56:	0f52      	lsrs	r2, r2, #29
 8004a58:	000e      	movs	r6, r1
 8004a5a:	00f5      	lsls	r5, r6, #3
 8004a5c:	4315      	orrs	r5, r2
 8004a5e:	0002      	movs	r2, r0
 8004a60:	00d4      	lsls	r4, r2, #3
 8004a62:	3307      	adds	r3, #7
 8004a64:	08db      	lsrs	r3, r3, #3
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	466a      	mov	r2, sp
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	469d      	mov	sp, r3
 8004a6e:	466b      	mov	r3, sp
 8004a70:	3300      	adds	r3, #0
 8004a72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004a74:	246f      	movs	r4, #111	@ 0x6f
 8004a76:	2518      	movs	r5, #24
 8004a78:	1963      	adds	r3, r4, r5
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	001a      	movs	r2, r3
 8004a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a84:	2100      	movs	r1, #0
 8004a86:	0018      	movs	r0, r3
 8004a88:	f01c f8e0 	bl	8020c4c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004a8c:	1963      	adds	r3, r4, r5
 8004a8e:	19db      	adds	r3, r3, r7
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	1979      	adds	r1, r7, r5
 8004a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a96:	0018      	movs	r0, r3
 8004a98:	f01c f8ff 	bl	8020c9a <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004a9c:	1963      	adds	r3, r4, r5
 8004a9e:	19db      	adds	r3, r3, r7
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7fe ffa5 	bl	80039f8 <ESP_Send>
 8004aae:	1e03      	subs	r3, r0, #0
 8004ab0:	d001      	beq.n	8004ab6 <CWJAP+0xe2>
    return true;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <CWJAP+0xe4>
  }
  else{
    return false;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	46c5      	mov	sp, r8
  }
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b022      	add	sp, #136	@ 0x88
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	46b8      	mov	r8, r7
 8004ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	20000551 	.word	0x20000551
 8004acc:	0802634c 	.word	0x0802634c
 8004ad0:	08026340 	.word	0x08026340
 8004ad4:	080243b0 	.word	0x080243b0

08004ad8 <CWMODE3>:

bool CWMODE3(){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004ade:	4b0b      	ldr	r3, [pc, #44]	@ (8004b0c <CWMODE3+0x34>)
 8004ae0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fb fb41 	bl	800016c <strlen>
 8004aea:	0003      	movs	r3, r0
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7fe ff80 	bl	80039f8 <ESP_Send>
 8004af8:	1e03      	subs	r3, r0, #0
 8004afa:	d001      	beq.n	8004b00 <CWMODE3+0x28>
    return true;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004b00:	2300      	movs	r3, #0
  }
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	080243c8 	.word	0x080243c8

08004b10 <CWSTATE>:

bool CWSTATE(){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <CWSTATE+0x34>)
 8004b18:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fb fb25 	bl	800016c <strlen>
 8004b22:	0003      	movs	r3, r0
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0011      	movs	r1, r2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fe ff64 	bl	80039f8 <ESP_Send>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d001      	beq.n	8004b38 <CWSTATE+0x28>
    return true;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <CWSTATE+0x2a>
  }
  else{
    return false;
 8004b38:	2300      	movs	r3, #0
  }
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	080243d8 	.word	0x080243d8

08004b48 <CWSAP>:

bool CWSAP(){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <CWSAP+0x34>)
 8004b50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7fb fb09 	bl	800016c <strlen>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0011      	movs	r1, r2
 8004b62:	0018      	movs	r0, r3
 8004b64:	f7fe ff48 	bl	80039f8 <ESP_Send>
 8004b68:	1e03      	subs	r3, r0, #0
 8004b6a:	d001      	beq.n	8004b70 <CWSAP+0x28>
    return true;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <CWSAP+0x2a>
  }
  else{
    return false;
 8004b70:	2300      	movs	r3, #0
  }
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	080243e8 	.word	0x080243e8

08004b80 <CIPMUX>:

bool CIPMUX(){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004b86:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb4 <CIPMUX+0x34>)
 8004b88:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fb faed 	bl	800016c <strlen>
 8004b92:	0003      	movs	r3, r0
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0011      	movs	r1, r2
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fe ff2c 	bl	80039f8 <ESP_Send>
 8004ba0:	1e03      	subs	r3, r0, #0
 8004ba2:	d001      	beq.n	8004ba8 <CIPMUX+0x28>
    return true;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <CIPMUX+0x2a>
  }
  else{
    return false;
 8004ba8:	2300      	movs	r3, #0
  }
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b002      	add	sp, #8
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	0802440c 	.word	0x0802440c

08004bb8 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <WEBSERVER+0x34>)
 8004bc0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fb fad1 	bl	800016c <strlen>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	0011      	movs	r1, r2
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7fe ff10 	bl	80039f8 <ESP_Send>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d001      	beq.n	8004be0 <WEBSERVER+0x28>
    return true;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004be0:	2300      	movs	r3, #0
  }
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	0802441c 	.word	0x0802441c

08004bf0 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004bf6:	1cfb      	adds	r3, r7, #3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004bfc:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <HTTPCPOST+0xa8>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	1dbc      	adds	r4, r7, #6
 8004c02:	1cf9      	adds	r1, r7, #3
 8004c04:	2200      	movs	r2, #0
 8004c06:	0018      	movs	r0, r3
 8004c08:	f7ff f88e 	bl	8003d28 <CreateMessage>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004c10:	4b21      	ldr	r3, [pc, #132]	@ (8004c98 <HTTPCPOST+0xa8>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004c18:	1dbb      	adds	r3, r7, #6
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c9c <HTTPCPOST+0xac>)
 8004c1e:	4920      	ldr	r1, [pc, #128]	@ (8004ca0 <HTTPCPOST+0xb0>)
 8004c20:	4820      	ldr	r0, [pc, #128]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c22:	f01b fead 	bl	8020980 <siprintf>
 8004c26:	e015      	b.n	8004c54 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004c28:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca8 <HTTPCPOST+0xb8>)
 8004c2a:	4820      	ldr	r0, [pc, #128]	@ (8004cac <HTTPCPOST+0xbc>)
 8004c2c:	220c      	movs	r2, #12
 8004c2e:	0019      	movs	r1, r3
 8004c30:	f002 ff32 	bl	8007a98 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004c34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ca8 <HTTPCPOST+0xb8>)
 8004c36:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <HTTPCPOST+0xc0>)
 8004c38:	0011      	movs	r1, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff f850 	bl	8003ce0 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004c40:	1dbb      	adds	r3, r7, #6
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	4c1a      	ldr	r4, [pc, #104]	@ (8004cb0 <HTTPCPOST+0xc0>)
 8004c46:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <HTTPCPOST+0xc4>)
 8004c48:	491b      	ldr	r1, [pc, #108]	@ (8004cb8 <HTTPCPOST+0xc8>)
 8004c4a:	4816      	ldr	r0, [pc, #88]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	0023      	movs	r3, r4
 8004c50:	f01b fe96 	bl	8020980 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7fb fa88 	bl	800016c <strlen>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	8818      	ldrh	r0, [r3, #0]
 8004c66:	1cfb      	adds	r3, r7, #3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <HTTPCPOST+0xcc>)
 8004c6c:	4914      	ldr	r1, [pc, #80]	@ (8004cc0 <HTTPCPOST+0xd0>)
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	0003      	movs	r3, r0
 8004c72:	2003      	movs	r0, #3
 8004c74:	f00a f92c 	bl	800eed0 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004c78:	1d3b      	adds	r3, r7, #4
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <HTTPCPOST+0xb4>)
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7fe feb9 	bl	80039f8 <ESP_Send>
 8004c86:	1e03      	subs	r3, r0, #0
 8004c88:	d001      	beq.n	8004c8e <HTTPCPOST+0x9e>
    return true;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004c8e:	2300      	movs	r3, #0
  }
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b003      	add	sp, #12
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	20000552 	.word	0x20000552
 8004c9c:	08026368 	.word	0x08026368
 8004ca0:	08024434 	.word	0x08024434
 8004ca4:	20000578 	.word	0x20000578
 8004ca8:	2000073c 	.word	0x2000073c
 8004cac:	08080000 	.word	0x08080000
 8004cb0:	20000748 	.word	0x20000748
 8004cb4:	080263a4 	.word	0x080263a4
 8004cb8:	0802446c 	.word	0x0802446c
 8004cbc:	080244ac 	.word	0x080244ac
 8004cc0:	08023bc0 	.word	0x08023bc0

08004cc4 <SENDDATA>:

bool SENDDATA(){
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af02      	add	r7, sp, #8
  bool result = false;
 8004cca:	1dfb      	adds	r3, r7, #7
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004d0c <SENDDATA+0x48>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	1df9      	adds	r1, r7, #7
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f7ff f825 	bl	8003d28 <CreateMessage>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d10 <SENDDATA+0x4c>)
 8004ce4:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004ce6:	1dfb      	adds	r3, r7, #7
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	0018      	movs	r0, r3
 8004cec:	4b08      	ldr	r3, [pc, #32]	@ (8004d10 <SENDDATA+0x4c>)
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	4a08      	ldr	r2, [pc, #32]	@ (8004d14 <SENDDATA+0x50>)
 8004cf2:	4909      	ldr	r1, [pc, #36]	@ (8004d18 <SENDDATA+0x54>)
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	2003      	movs	r0, #3
 8004cfa:	f00a f8e9 	bl	800eed0 <CreateLine>
  return result;
 8004cfe:	1dfb      	adds	r3, r7, #7
 8004d00:	781b      	ldrb	r3, [r3, #0]
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	20000552 	.word	0x20000552
 8004d10:	2000056c 	.word	0x2000056c
 8004d14:	08024508 	.word	0x08024508
 8004d18:	08023bc0 	.word	0x08023bc0

08004d1c <SLEEP>:

bool SLEEP(){
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004d22:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <SLEEP+0x34>)
 8004d24:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7fb fa1f 	bl	800016c <strlen>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0011      	movs	r1, r2
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7fe fe5e 	bl	80039f8 <ESP_Send>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d001      	beq.n	8004d44 <SLEEP+0x28>
    return true;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e000      	b.n	8004d46 <SLEEP+0x2a>
  }
  else{
    return false;
 8004d44:	2300      	movs	r3, #0
  }
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			@ (mov r8, r8)
 8004d50:	08024544 	.word	0x08024544

08004d54 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <CIPSNTPCFG+0x3c>)
 8004d5c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fb fa03 	bl	800016c <strlen>
 8004d66:	0003      	movs	r3, r0
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	0011      	movs	r1, r2
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f7fe fe42 	bl	80039f8 <ESP_Send>
 8004d74:	1e03      	subs	r3, r0, #0
 8004d76:	d006      	beq.n	8004d86 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004d78:	23fa      	movs	r3, #250	@ 0xfa
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f00a fcf5 	bl	800f76c <HAL_Delay>
    return true;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004d86:	2300      	movs	r3, #0
  }
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b002      	add	sp, #8
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	08024554 	.word	0x08024554

08004d94 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <CIPSNTPTIME+0x34>)
 8004d9c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	0018      	movs	r0, r3
 8004da2:	f7fb f9e3 	bl	800016c <strlen>
 8004da6:	0003      	movs	r3, r0
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0011      	movs	r1, r2
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fe fe22 	bl	80039f8 <ESP_Send>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d001      	beq.n	8004dbc <CIPSNTPTIME+0x28>
    return true;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004dbc:	2300      	movs	r3, #0
  }
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	080245a4 	.word	0x080245a4

08004dcc <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <CIPSNTPINTV+0x34>)
 8004dd4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7fb f9c7 	bl	800016c <strlen>
 8004dde:	0003      	movs	r3, r0
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0011      	movs	r1, r2
 8004de6:	0018      	movs	r0, r3
 8004de8:	f7fe fe06 	bl	80039f8 <ESP_Send>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d001      	beq.n	8004df4 <CIPSNTPINTV+0x28>
    return true;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004df4:	2300      	movs	r3, #0
  }
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b002      	add	sp, #8
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	080245b8 	.word	0x080245b8

08004e04 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	1dfb      	adds	r3, r7, #7
 8004e0e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004e10:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc4 <DMA_ProcessBuffer+0x1c0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	200e      	movs	r0, #14
 8004e1a:	183b      	adds	r3, r7, r0
 8004e1c:	2180      	movs	r1, #128	@ 0x80
 8004e1e:	0049      	lsls	r1, r1, #1
 8004e20:	1a8a      	subs	r2, r1, r2
 8004e22:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004e24:	230d      	movs	r3, #13
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	2203      	movs	r2, #3
 8004e2a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004e2c:	183b      	adds	r3, r7, r0
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	2380      	movs	r3, #128	@ 0x80
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d903      	bls.n	8004e40 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004e38:	183b      	adds	r3, r7, r0
 8004e3a:	2280      	movs	r2, #128	@ 0x80
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004e40:	4b61      	ldr	r3, [pc, #388]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	001a      	movs	r2, r3
 8004e48:	230e      	movs	r3, #14
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d131      	bne.n	8004eb6 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004e52:	4b5e      	ldr	r3, [pc, #376]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b14      	cmp	r3, #20
 8004e58:	d91b      	bls.n	8004e92 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004e60:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd0 <DMA_ProcessBuffer+0x1cc>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <DMA_ProcessBuffer+0x74>
 8004e68:	4b5a      	ldr	r3, [pc, #360]	@ (8004fd4 <DMA_ProcessBuffer+0x1d0>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004e70:	230d      	movs	r3, #13
 8004e72:	18fb      	adds	r3, r7, r3
 8004e74:	2207      	movs	r2, #7
 8004e76:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004e78:	4b55      	ldr	r3, [pc, #340]	@ (8004fd0 <DMA_ProcessBuffer+0x1cc>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d103      	bne.n	8004e88 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004e80:	4b55      	ldr	r3, [pc, #340]	@ (8004fd8 <DMA_ProcessBuffer+0x1d4>)
 8004e82:	220b      	movs	r2, #11
 8004e84:	701a      	strb	r2, [r3, #0]
 8004e86:	e016      	b.n	8004eb6 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004e88:	230d      	movs	r3, #13
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	2206      	movs	r2, #6
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e011      	b.n	8004eb6 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004e92:	4b4e      	ldr	r3, [pc, #312]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004e9c:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004e9e:	f00a fc5b 	bl	800f758 <HAL_GetTick>
 8004ea2:	0003      	movs	r3, r0
 8004ea4:	33f5      	adds	r3, #245	@ 0xf5
 8004ea6:	33ff      	adds	r3, #255	@ 0xff
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8004fdc <DMA_ProcessBuffer+0x1d8>)
 8004eac:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004eae:	230d      	movs	r3, #13
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004eb6:	4b44      	ldr	r3, [pc, #272]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	210e      	movs	r1, #14
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d100      	bne.n	8004eca <DMA_ProcessBuffer+0xc6>
 8004ec8:	e075      	b.n	8004fb6 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004eca:	4b40      	ldr	r3, [pc, #256]	@ (8004fcc <DMA_ProcessBuffer+0x1c8>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004ed0:	4b43      	ldr	r3, [pc, #268]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d109      	bne.n	8004ef4 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004ee8:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004eea:	230d      	movs	r3, #13
 8004eec:	18fb      	adds	r3, r7, r3
 8004eee:	220a      	movs	r2, #10
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	e060      	b.n	8004fb6 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	001a      	movs	r2, r3
 8004efc:	210e      	movs	r1, #14
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	4b34      	ldr	r3, [pc, #208]	@ (8004fe0 <DMA_ProcessBuffer+0x1dc>)
 8004f0e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004f10:	230d      	movs	r3, #13
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	220a      	movs	r2, #10
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	e04d      	b.n	8004fb6 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	001a      	movs	r2, r3
 8004f22:	210e      	movs	r1, #14
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d917      	bls.n	8004f5c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004f2c:	4b26      	ldr	r3, [pc, #152]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	001a      	movs	r2, r3
 8004f34:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <DMA_ProcessBuffer+0x1e0>)
 8004f36:	18d0      	adds	r0, r2, r3
 8004f38:	4b23      	ldr	r3, [pc, #140]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	001a      	movs	r2, r3
 8004f40:	187b      	adds	r3, r7, r1
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	b299      	uxth	r1, r3
 8004f48:	230d      	movs	r3, #13
 8004f4a:	18fc      	adds	r4, r7, r3
 8004f4c:	1dfb      	adds	r3, r7, #7
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	001a      	movs	r2, r3
 8004f52:	f7ff fa71 	bl	8004438 <ParseBuffer>
 8004f56:	0003      	movs	r3, r0
 8004f58:	7023      	strb	r3, [r4, #0]
 8004f5a:	e026      	b.n	8004faa <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	001a      	movs	r2, r3
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <DMA_ProcessBuffer+0x1e0>)
 8004f66:	18d0      	adds	r0, r2, r3
 8004f68:	4b17      	ldr	r3, [pc, #92]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	001a      	movs	r2, r3
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	b299      	uxth	r1, r3
 8004f78:	250d      	movs	r5, #13
 8004f7a:	197c      	adds	r4, r7, r5
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	001a      	movs	r2, r3
 8004f82:	f7ff fa59 	bl	8004438 <ParseBuffer>
 8004f86:	0003      	movs	r3, r0
 8004f88:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004f8a:	210e      	movs	r1, #14
 8004f8c:	187b      	adds	r3, r7, r1
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004f94:	197c      	adds	r4, r7, r5
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	8819      	ldrh	r1, [r3, #0]
 8004f9e:	4b11      	ldr	r3, [pc, #68]	@ (8004fe4 <DMA_ProcessBuffer+0x1e0>)
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff fa49 	bl	8004438 <ParseBuffer>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004faa:	230e      	movs	r3, #14
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <DMA_ProcessBuffer+0x1c4>)
 8004fb4:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004fb6:	230d      	movs	r3, #13
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	781b      	ldrb	r3, [r3, #0]
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b004      	add	sp, #16
 8004fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fc4:	20002000 	.word	0x20002000
 8004fc8:	20000761 	.word	0x20000761
 8004fcc:	2000061c 	.word	0x2000061c
 8004fd0:	2000061e 	.word	0x2000061e
 8004fd4:	20000000 	.word	0x20000000
 8004fd8:	20000030 	.word	0x20000030
 8004fdc:	20000618 	.word	0x20000618
 8004fe0:	20000762 	.word	0x20000762
 8004fe4:	2000044c 	.word	0x2000044c

08004fe8 <clearDMABuffer>:

void clearDMABuffer(){
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004fec:	2380      	movs	r3, #128	@ 0x80
 8004fee:	005a      	lsls	r2, r3, #1
 8004ff0:	4b03      	ldr	r3, [pc, #12]	@ (8005000 <clearDMABuffer+0x18>)
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f01b fe29 	bl	8020c4c <memset>
}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000044c 	.word	0x2000044c

08005004 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	0002      	movs	r2, r0
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	1dbb      	adds	r3, r7, #6
 8005012:	1c0a      	adds	r2, r1, #0
 8005014:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005016:	210f      	movs	r1, #15
 8005018:	187b      	adds	r3, r7, r1
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800501e:	1dbb      	adds	r3, r7, #6
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d105      	bne.n	8005032 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005026:	187b      	adds	r3, r7, r1
 8005028:	1dfa      	adds	r2, r7, #7
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	4251      	negs	r1, r2
 800502e:	414a      	adcs	r2, r1
 8005030:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005032:	1dbb      	adds	r3, r7, #6
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800503a:	230f      	movs	r3, #15
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	1dfa      	adds	r2, r7, #7
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	3a02      	subs	r2, #2
 8005044:	4251      	negs	r1, r2
 8005046:	414a      	adcs	r2, r1
 8005048:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800504a:	1dbb      	adds	r3, r7, #6
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d107      	bne.n	8005062 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005052:	230f      	movs	r3, #15
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	1dfa      	adds	r2, r7, #7
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	3a05      	subs	r2, #5
 800505c:	4251      	negs	r1, r2
 800505e:	414a      	adcs	r2, r1
 8005060:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005062:	1dbb      	adds	r3, r7, #6
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b05      	cmp	r3, #5
 8005068:	d107      	bne.n	800507a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800506a:	230f      	movs	r3, #15
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	1dfa      	adds	r2, r7, #7
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	3a0b      	subs	r2, #11
 8005074:	4251      	negs	r1, r2
 8005076:	414a      	adcs	r2, r1
 8005078:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800507a:	230f      	movs	r3, #15
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	781b      	ldrb	r3, [r3, #0]
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b004      	add	sp, #16
 8005086:	bd80      	pop	{r7, pc}

08005088 <AT_Send>:

bool AT_Send(AT_Commands state){
 8005088:	b590      	push	{r4, r7, lr}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	0002      	movs	r2, r0
 8005090:	1dfb      	adds	r3, r7, #7
 8005092:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8005094:	230f      	movs	r3, #15
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
  switch (state){
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b14      	cmp	r3, #20
 80050a2:	d900      	bls.n	80050a6 <AT_Send+0x1e>
 80050a4:	e19e      	b.n	80053e4 <AT_Send+0x35c>
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	4bd2      	ldr	r3, [pc, #840]	@ (80053f4 <AT_Send+0x36c>)
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80050b0:	4bd1      	ldr	r3, [pc, #836]	@ (80053f8 <AT_Send+0x370>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f009 feb5 	bl	800ee24 <TimestampIsReached>
 80050ba:	1e03      	subs	r3, r0, #0
 80050bc:	d100      	bne.n	80050c0 <AT_Send+0x38>
 80050be:	e190      	b.n	80053e2 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80050c0:	4ace      	ldr	r2, [pc, #824]	@ (80053fc <AT_Send+0x374>)
 80050c2:	4bcf      	ldr	r3, [pc, #828]	@ (8005400 <AT_Send+0x378>)
 80050c4:	0019      	movs	r1, r3
 80050c6:	2003      	movs	r0, #3
 80050c8:	f009 ff02 	bl	800eed0 <CreateLine>
    ATCommandSend = PollAwake();
 80050cc:	230f      	movs	r3, #15
 80050ce:	18fc      	adds	r4, r7, r3
 80050d0:	f7ff fba0 	bl	8004814 <PollAwake>
 80050d4:	0003      	movs	r3, r0
 80050d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80050d8:	f00a fb3e 	bl	800f758 <HAL_GetTick>
 80050dc:	0003      	movs	r3, r0
 80050de:	3332      	adds	r3, #50	@ 0x32
 80050e0:	001a      	movs	r2, r3
 80050e2:	4bc5      	ldr	r3, [pc, #788]	@ (80053f8 <AT_Send+0x370>)
 80050e4:	601a      	str	r2, [r3, #0]
  }
  break;
 80050e6:	e17c      	b.n	80053e2 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80050e8:	4ac6      	ldr	r2, [pc, #792]	@ (8005404 <AT_Send+0x37c>)
 80050ea:	4bc5      	ldr	r3, [pc, #788]	@ (8005400 <AT_Send+0x378>)
 80050ec:	0019      	movs	r1, r3
 80050ee:	2003      	movs	r0, #3
 80050f0:	f009 feee 	bl	800eed0 <CreateLine>
    ATCommandSend = RFPower();
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fc      	adds	r4, r7, r3
 80050f8:	f7ff fba8 	bl	800484c <RFPower>
 80050fc:	0003      	movs	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005100:	f00a fb2a 	bl	800f758 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	330a      	adds	r3, #10
 8005108:	001a      	movs	r2, r3
 800510a:	4bbb      	ldr	r3, [pc, #748]	@ (80053f8 <AT_Send+0x370>)
 800510c:	601a      	str	r2, [r3, #0]
    break;
 800510e:	e169      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8005110:	4abd      	ldr	r2, [pc, #756]	@ (8005408 <AT_Send+0x380>)
 8005112:	4bbb      	ldr	r3, [pc, #748]	@ (8005400 <AT_Send+0x378>)
 8005114:	0019      	movs	r1, r3
 8005116:	2003      	movs	r0, #3
 8005118:	f009 feda 	bl	800eed0 <CreateLine>
    ATCommandSend = CheckRFPower();
 800511c:	230f      	movs	r3, #15
 800511e:	18fc      	adds	r4, r7, r3
 8005120:	f7ff fbb0 	bl	8004884 <CheckRFPower>
 8005124:	0003      	movs	r3, r0
 8005126:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005128:	f00a fb16 	bl	800f758 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	330a      	adds	r3, #10
 8005130:	001a      	movs	r2, r3
 8005132:	4bb1      	ldr	r3, [pc, #708]	@ (80053f8 <AT_Send+0x370>)
 8005134:	601a      	str	r2, [r3, #0]
    break;
 8005136:	e155      	b.n	80053e4 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005138:	4ab4      	ldr	r2, [pc, #720]	@ (800540c <AT_Send+0x384>)
 800513a:	4bb1      	ldr	r3, [pc, #708]	@ (8005400 <AT_Send+0x378>)
 800513c:	0019      	movs	r1, r3
 800513e:	2003      	movs	r0, #3
 8005140:	f009 fec6 	bl	800eed0 <CreateLine>
    ATCommandSend = ATRestore();
 8005144:	230f      	movs	r3, #15
 8005146:	18fc      	adds	r4, r7, r3
 8005148:	f7ff fbb8 	bl	80048bc <ATRestore>
 800514c:	0003      	movs	r3, r0
 800514e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005150:	f00a fb02 	bl	800f758 <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	3332      	adds	r3, #50	@ 0x32
 8005158:	001a      	movs	r2, r3
 800515a:	4ba7      	ldr	r3, [pc, #668]	@ (80053f8 <AT_Send+0x370>)
 800515c:	601a      	str	r2, [r3, #0]
    break;
 800515e:	e141      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8005160:	4aab      	ldr	r2, [pc, #684]	@ (8005410 <AT_Send+0x388>)
 8005162:	4ba7      	ldr	r3, [pc, #668]	@ (8005400 <AT_Send+0x378>)
 8005164:	0019      	movs	r1, r3
 8005166:	2003      	movs	r0, #3
 8005168:	f009 feb2 	bl	800eed0 <CreateLine>
    ATCommandSend = CWINIT();
 800516c:	230f      	movs	r3, #15
 800516e:	18fc      	adds	r4, r7, r3
 8005170:	f7ff fbc0 	bl	80048f4 <CWINIT>
 8005174:	0003      	movs	r3, r0
 8005176:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005178:	f00a faee 	bl	800f758 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	33f5      	adds	r3, #245	@ 0xf5
 8005180:	33ff      	adds	r3, #255	@ 0xff
 8005182:	001a      	movs	r2, r3
 8005184:	4b9c      	ldr	r3, [pc, #624]	@ (80053f8 <AT_Send+0x370>)
 8005186:	601a      	str	r2, [r3, #0]
    break;
 8005188:	e12c      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 800518a:	4aa2      	ldr	r2, [pc, #648]	@ (8005414 <AT_Send+0x38c>)
 800518c:	4b9c      	ldr	r3, [pc, #624]	@ (8005400 <AT_Send+0x378>)
 800518e:	0019      	movs	r1, r3
 8005190:	2003      	movs	r0, #3
 8005192:	f009 fe9d 	bl	800eed0 <CreateLine>
    ATCommandSend = CWSTATE();
 8005196:	230f      	movs	r3, #15
 8005198:	18fc      	adds	r4, r7, r3
 800519a:	f7ff fcb9 	bl	8004b10 <CWSTATE>
 800519e:	0003      	movs	r3, r0
 80051a0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051a2:	f00a fad9 	bl	800f758 <HAL_GetTick>
 80051a6:	0003      	movs	r3, r0
 80051a8:	33f5      	adds	r3, #245	@ 0xf5
 80051aa:	33ff      	adds	r3, #255	@ 0xff
 80051ac:	001a      	movs	r2, r3
 80051ae:	4b92      	ldr	r3, [pc, #584]	@ (80053f8 <AT_Send+0x370>)
 80051b0:	601a      	str	r2, [r3, #0]
    break;
 80051b2:	e117      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80051b4:	4a98      	ldr	r2, [pc, #608]	@ (8005418 <AT_Send+0x390>)
 80051b6:	4b92      	ldr	r3, [pc, #584]	@ (8005400 <AT_Send+0x378>)
 80051b8:	0019      	movs	r1, r3
 80051ba:	2003      	movs	r0, #3
 80051bc:	f009 fe88 	bl	800eed0 <CreateLine>
    ATCommandSend = CWMODE1();
 80051c0:	230f      	movs	r3, #15
 80051c2:	18fc      	adds	r4, r7, r3
 80051c4:	f7ff fbb2 	bl	800492c <CWMODE1>
 80051c8:	0003      	movs	r3, r0
 80051ca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051cc:	f00a fac4 	bl	800f758 <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	330a      	adds	r3, #10
 80051d4:	001a      	movs	r2, r3
 80051d6:	4b88      	ldr	r3, [pc, #544]	@ (80053f8 <AT_Send+0x370>)
 80051d8:	601a      	str	r2, [r3, #0]
    break;
 80051da:	e103      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80051dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005418 <AT_Send+0x390>)
 80051de:	4b88      	ldr	r3, [pc, #544]	@ (8005400 <AT_Send+0x378>)
 80051e0:	0019      	movs	r1, r3
 80051e2:	2003      	movs	r0, #3
 80051e4:	f009 fe74 	bl	800eed0 <CreateLine>
    ATCommandSend = CWMODE2();
 80051e8:	230f      	movs	r3, #15
 80051ea:	18fc      	adds	r4, r7, r3
 80051ec:	f7ff fbba 	bl	8004964 <CWMODE2>
 80051f0:	0003      	movs	r3, r0
 80051f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051f4:	f00a fab0 	bl	800f758 <HAL_GetTick>
 80051f8:	0003      	movs	r3, r0
 80051fa:	330a      	adds	r3, #10
 80051fc:	001a      	movs	r2, r3
 80051fe:	4b7e      	ldr	r3, [pc, #504]	@ (80053f8 <AT_Send+0x370>)
 8005200:	601a      	str	r2, [r3, #0]
    break;
 8005202:	e0ef      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005204:	4a85      	ldr	r2, [pc, #532]	@ (800541c <AT_Send+0x394>)
 8005206:	4b7e      	ldr	r3, [pc, #504]	@ (8005400 <AT_Send+0x378>)
 8005208:	0019      	movs	r1, r3
 800520a:	2003      	movs	r0, #3
 800520c:	f009 fe60 	bl	800eed0 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005210:	230f      	movs	r3, #15
 8005212:	18fc      	adds	r4, r7, r3
 8005214:	f7ff fbc2 	bl	800499c <CWAUTOCONN>
 8005218:	0003      	movs	r3, r0
 800521a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800521c:	f00a fa9c 	bl	800f758 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	330a      	adds	r3, #10
 8005224:	001a      	movs	r2, r3
 8005226:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <AT_Send+0x370>)
 8005228:	601a      	str	r2, [r3, #0]
    break;
 800522a:	e0db      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800522c:	4a7c      	ldr	r2, [pc, #496]	@ (8005420 <AT_Send+0x398>)
 800522e:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <AT_Send+0x378>)
 8005230:	0019      	movs	r1, r3
 8005232:	2003      	movs	r0, #3
 8005234:	f009 fe4c 	bl	800eed0 <CreateLine>
    ATCommandSend = CWJAP();
 8005238:	230f      	movs	r3, #15
 800523a:	18fc      	adds	r4, r7, r3
 800523c:	f7ff fbca 	bl	80049d4 <CWJAP>
 8005240:	0003      	movs	r3, r0
 8005242:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005244:	f00a fa88 	bl	800f758 <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	3332      	adds	r3, #50	@ 0x32
 800524c:	001a      	movs	r2, r3
 800524e:	4b6a      	ldr	r3, [pc, #424]	@ (80053f8 <AT_Send+0x370>)
 8005250:	601a      	str	r2, [r3, #0]
    break;
 8005252:	e0c7      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8005254:	4a73      	ldr	r2, [pc, #460]	@ (8005424 <AT_Send+0x39c>)
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <AT_Send+0x378>)
 8005258:	0019      	movs	r1, r3
 800525a:	2003      	movs	r0, #3
 800525c:	f009 fe38 	bl	800eed0 <CreateLine>
    ATCommandSend = CWMODE3();
 8005260:	230f      	movs	r3, #15
 8005262:	18fc      	adds	r4, r7, r3
 8005264:	f7ff fc38 	bl	8004ad8 <CWMODE3>
 8005268:	0003      	movs	r3, r0
 800526a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800526c:	f00a fa74 	bl	800f758 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	330a      	adds	r3, #10
 8005274:	001a      	movs	r2, r3
 8005276:	4b60      	ldr	r3, [pc, #384]	@ (80053f8 <AT_Send+0x370>)
 8005278:	601a      	str	r2, [r3, #0]
    break;
 800527a:	e0b3      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800527c:	4a6a      	ldr	r2, [pc, #424]	@ (8005428 <AT_Send+0x3a0>)
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <AT_Send+0x378>)
 8005280:	0019      	movs	r1, r3
 8005282:	2003      	movs	r0, #3
 8005284:	f009 fe24 	bl	800eed0 <CreateLine>
    ATCommandSend = CWSAP();
 8005288:	230f      	movs	r3, #15
 800528a:	18fc      	adds	r4, r7, r3
 800528c:	f7ff fc5c 	bl	8004b48 <CWSAP>
 8005290:	0003      	movs	r3, r0
 8005292:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005294:	f00a fa60 	bl	800f758 <HAL_GetTick>
 8005298:	0003      	movs	r3, r0
 800529a:	330a      	adds	r3, #10
 800529c:	001a      	movs	r2, r3
 800529e:	4b56      	ldr	r3, [pc, #344]	@ (80053f8 <AT_Send+0x370>)
 80052a0:	601a      	str	r2, [r3, #0]
    break;
 80052a2:	e09f      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80052a4:	4a61      	ldr	r2, [pc, #388]	@ (800542c <AT_Send+0x3a4>)
 80052a6:	4b56      	ldr	r3, [pc, #344]	@ (8005400 <AT_Send+0x378>)
 80052a8:	0019      	movs	r1, r3
 80052aa:	2003      	movs	r0, #3
 80052ac:	f009 fe10 	bl	800eed0 <CreateLine>
    ATCommandSend = CIPMUX();
 80052b0:	230f      	movs	r3, #15
 80052b2:	18fc      	adds	r4, r7, r3
 80052b4:	f7ff fc64 	bl	8004b80 <CIPMUX>
 80052b8:	0003      	movs	r3, r0
 80052ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052bc:	f00a fa4c 	bl	800f758 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	330a      	adds	r3, #10
 80052c4:	001a      	movs	r2, r3
 80052c6:	4b4c      	ldr	r3, [pc, #304]	@ (80053f8 <AT_Send+0x370>)
 80052c8:	601a      	str	r2, [r3, #0]
    break;
 80052ca:	e08b      	b.n	80053e4 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80052cc:	4a58      	ldr	r2, [pc, #352]	@ (8005430 <AT_Send+0x3a8>)
 80052ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005400 <AT_Send+0x378>)
 80052d0:	0019      	movs	r1, r3
 80052d2:	2003      	movs	r0, #3
 80052d4:	f009 fdfc 	bl	800eed0 <CreateLine>
    ATCommandSend = WEBSERVER();
 80052d8:	230f      	movs	r3, #15
 80052da:	18fc      	adds	r4, r7, r3
 80052dc:	f7ff fc6c 	bl	8004bb8 <WEBSERVER>
 80052e0:	0003      	movs	r3, r0
 80052e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052e4:	f00a fa38 	bl	800f758 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	330a      	adds	r3, #10
 80052ec:	001a      	movs	r2, r3
 80052ee:	4b42      	ldr	r3, [pc, #264]	@ (80053f8 <AT_Send+0x370>)
 80052f0:	601a      	str	r2, [r3, #0]
    break;
 80052f2:	e077      	b.n	80053e4 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80052f4:	230f      	movs	r3, #15
 80052f6:	18fc      	adds	r4, r7, r3
 80052f8:	f7ff fc7a 	bl	8004bf0 <HTTPCPOST>
 80052fc:	0003      	movs	r3, r0
 80052fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005300:	f00a fa2a 	bl	800f758 <HAL_GetTick>
 8005304:	0003      	movs	r3, r0
 8005306:	33f5      	adds	r3, #245	@ 0xf5
 8005308:	33ff      	adds	r3, #255	@ 0xff
 800530a:	001a      	movs	r2, r3
 800530c:	4b3a      	ldr	r3, [pc, #232]	@ (80053f8 <AT_Send+0x370>)
 800530e:	601a      	str	r2, [r3, #0]
    break;
 8005310:	e068      	b.n	80053e4 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8005312:	4a48      	ldr	r2, [pc, #288]	@ (8005434 <AT_Send+0x3ac>)
 8005314:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <AT_Send+0x378>)
 8005316:	0019      	movs	r1, r3
 8005318:	2003      	movs	r0, #3
 800531a:	f009 fdd9 	bl	800eed0 <CreateLine>
    ATCommandSend = SENDDATA();
 800531e:	230f      	movs	r3, #15
 8005320:	18fc      	adds	r4, r7, r3
 8005322:	f7ff fccf 	bl	8004cc4 <SENDDATA>
 8005326:	0003      	movs	r3, r0
 8005328:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800532a:	f00a fa15 	bl	800f758 <HAL_GetTick>
 800532e:	0003      	movs	r3, r0
 8005330:	33f5      	adds	r3, #245	@ 0xf5
 8005332:	33ff      	adds	r3, #255	@ 0xff
 8005334:	001a      	movs	r2, r3
 8005336:	4b30      	ldr	r3, [pc, #192]	@ (80053f8 <AT_Send+0x370>)
 8005338:	601a      	str	r2, [r3, #0]
    break;
 800533a:	e053      	b.n	80053e4 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800533c:	4a3e      	ldr	r2, [pc, #248]	@ (8005438 <AT_Send+0x3b0>)
 800533e:	4b30      	ldr	r3, [pc, #192]	@ (8005400 <AT_Send+0x378>)
 8005340:	0019      	movs	r1, r3
 8005342:	2003      	movs	r0, #3
 8005344:	f009 fdc4 	bl	800eed0 <CreateLine>
    ATCommandSend = SLEEP();
 8005348:	230f      	movs	r3, #15
 800534a:	18fc      	adds	r4, r7, r3
 800534c:	f7ff fce6 	bl	8004d1c <SLEEP>
 8005350:	0003      	movs	r3, r0
 8005352:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005354:	f00a fa00 	bl	800f758 <HAL_GetTick>
 8005358:	0003      	movs	r3, r0
 800535a:	330a      	adds	r3, #10
 800535c:	001a      	movs	r2, r3
 800535e:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <AT_Send+0x370>)
 8005360:	601a      	str	r2, [r3, #0]
    break;
 8005362:	e03f      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8005364:	4a35      	ldr	r2, [pc, #212]	@ (800543c <AT_Send+0x3b4>)
 8005366:	4b26      	ldr	r3, [pc, #152]	@ (8005400 <AT_Send+0x378>)
 8005368:	0019      	movs	r1, r3
 800536a:	2003      	movs	r0, #3
 800536c:	f009 fdb0 	bl	800eed0 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005370:	230f      	movs	r3, #15
 8005372:	18fc      	adds	r4, r7, r3
 8005374:	f7ff fcee 	bl	8004d54 <CIPSNTPCFG>
 8005378:	0003      	movs	r3, r0
 800537a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800537c:	f00a f9ec 	bl	800f758 <HAL_GetTick>
 8005380:	0003      	movs	r3, r0
 8005382:	330a      	adds	r3, #10
 8005384:	001a      	movs	r2, r3
 8005386:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <AT_Send+0x370>)
 8005388:	601a      	str	r2, [r3, #0]
    break;
 800538a:	e02b      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 800538c:	4a2c      	ldr	r2, [pc, #176]	@ (8005440 <AT_Send+0x3b8>)
 800538e:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <AT_Send+0x378>)
 8005390:	0019      	movs	r1, r3
 8005392:	2003      	movs	r0, #3
 8005394:	f009 fd9c 	bl	800eed0 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005398:	230f      	movs	r3, #15
 800539a:	18fc      	adds	r4, r7, r3
 800539c:	f7ff fcfa 	bl	8004d94 <CIPSNTPTIME>
 80053a0:	0003      	movs	r3, r0
 80053a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80053a4:	f00a f9d8 	bl	800f758 <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	33f5      	adds	r3, #245	@ 0xf5
 80053ac:	33ff      	adds	r3, #255	@ 0xff
 80053ae:	001a      	movs	r2, r3
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <AT_Send+0x370>)
 80053b2:	601a      	str	r2, [r3, #0]
    break;
 80053b4:	e016      	b.n	80053e4 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80053b6:	4a23      	ldr	r2, [pc, #140]	@ (8005444 <AT_Send+0x3bc>)
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <AT_Send+0x378>)
 80053ba:	0019      	movs	r1, r3
 80053bc:	2003      	movs	r0, #3
 80053be:	f009 fd87 	bl	800eed0 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fc      	adds	r4, r7, r3
 80053c6:	f7ff fd01 	bl	8004dcc <CIPSNTPINTV>
 80053ca:	0003      	movs	r3, r0
 80053cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053ce:	f00a f9c3 	bl	800f758 <HAL_GetTick>
 80053d2:	0003      	movs	r3, r0
 80053d4:	330a      	adds	r3, #10
 80053d6:	001a      	movs	r2, r3
 80053d8:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <AT_Send+0x370>)
 80053da:	601a      	str	r2, [r3, #0]
    break;
 80053dc:	e002      	b.n	80053e4 <AT_Send+0x35c>

  case AT_END:
    break;
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	e000      	b.n	80053e4 <AT_Send+0x35c>
  break;
 80053e2:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80053e4:	230f      	movs	r3, #15
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	781b      	ldrb	r3, [r3, #0]
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b005      	add	sp, #20
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	08026400 	.word	0x08026400
 80053f8:	20000618 	.word	0x20000618
 80053fc:	080245d0 	.word	0x080245d0
 8005400:	08023bc0 	.word	0x08023bc0
 8005404:	080245dc 	.word	0x080245dc
 8005408:	080245f0 	.word	0x080245f0
 800540c:	08024604 	.word	0x08024604
 8005410:	08024614 	.word	0x08024614
 8005414:	08024628 	.word	0x08024628
 8005418:	08024640 	.word	0x08024640
 800541c:	08024658 	.word	0x08024658
 8005420:	08024670 	.word	0x08024670
 8005424:	08024684 	.word	0x08024684
 8005428:	080246a0 	.word	0x080246a0
 800542c:	080246bc 	.word	0x080246bc
 8005430:	080246d8 	.word	0x080246d8
 8005434:	080246f4 	.word	0x080246f4
 8005438:	08024704 	.word	0x08024704
 800543c:	08024728 	.word	0x08024728
 8005440:	0802473c 	.word	0x0802473c
 8005444:	08024754 	.word	0x08024754

08005448 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800544e:	1dfb      	adds	r3, r7, #7
 8005450:	2200      	movs	r2, #0
 8005452:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005454:	4b7d      	ldr	r3, [pc, #500]	@ (800564c <ESP_WakeTest+0x204>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d900      	bls.n	800545e <ESP_WakeTest+0x16>
 800545c:	e0d9      	b.n	8005612 <ESP_WakeTest+0x1ca>
 800545e:	009a      	lsls	r2, r3, #2
 8005460:	4b7b      	ldr	r3, [pc, #492]	@ (8005650 <ESP_WakeTest+0x208>)
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005468:	4b7a      	ldr	r3, [pc, #488]	@ (8005654 <ESP_WakeTest+0x20c>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2201      	movs	r2, #1
 800546e:	4053      	eors	r3, r2
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d036      	beq.n	80054e4 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	4877      	ldr	r0, [pc, #476]	@ (8005658 <ESP_WakeTest+0x210>)
 800547c:	2200      	movs	r2, #0
 800547e:	0019      	movs	r1, r3
 8005480:	f00b fbfb 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005484:	2032      	movs	r0, #50	@ 0x32
 8005486:	f00a f971 	bl	800f76c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4872      	ldr	r0, [pc, #456]	@ (8005658 <ESP_WakeTest+0x210>)
 8005490:	2201      	movs	r2, #1
 8005492:	0019      	movs	r1, r3
 8005494:	f00b fbf1 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005498:	200a      	movs	r0, #10
 800549a:	f00a f967 	bl	800f76c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800549e:	4b6f      	ldr	r3, [pc, #444]	@ (800565c <ESP_WakeTest+0x214>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	2101      	movs	r1, #1
 80054a4:	0018      	movs	r0, r3
 80054a6:	f00b fbe8 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054aa:	200a      	movs	r0, #10
 80054ac:	f00a f95e 	bl	800f76c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054b0:	4b6a      	ldr	r3, [pc, #424]	@ (800565c <ESP_WakeTest+0x214>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	2102      	movs	r1, #2
 80054b6:	0018      	movs	r0, r3
 80054b8:	f00b fbdf 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054bc:	200a      	movs	r0, #10
 80054be:	f00a f955 	bl	800f76c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054c2:	4b66      	ldr	r3, [pc, #408]	@ (800565c <ESP_WakeTest+0x214>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	2101      	movs	r1, #1
 80054c8:	0018      	movs	r0, r3
 80054ca:	f00b fbd6 	bl	8010c7a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80054ce:	f00a f943 	bl	800f758 <HAL_GetTick>
 80054d2:	0003      	movs	r3, r0
 80054d4:	22af      	movs	r2, #175	@ 0xaf
 80054d6:	0092      	lsls	r2, r2, #2
 80054d8:	189a      	adds	r2, r3, r2
 80054da:	4b61      	ldr	r3, [pc, #388]	@ (8005660 <ESP_WakeTest+0x218>)
 80054dc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80054de:	4b5d      	ldr	r3, [pc, #372]	@ (8005654 <ESP_WakeTest+0x20c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	005a      	lsls	r2, r3, #1
 80054e8:	4b5e      	ldr	r3, [pc, #376]	@ (8005664 <ESP_WakeTest+0x21c>)
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7fe fab5 	bl	8003a5c <ESP_Receive>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d100      	bne.n	80054f8 <ESP_WakeTest+0xb0>
 80054f6:	e09f      	b.n	8005638 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80054f8:	4b54      	ldr	r3, [pc, #336]	@ (800564c <ESP_WakeTest+0x204>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80054fe:	e09b      	b.n	8005638 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005500:	4b57      	ldr	r3, [pc, #348]	@ (8005660 <ESP_WakeTest+0x218>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f009 fc8d 	bl	800ee24 <TimestampIsReached>
 800550a:	1e03      	subs	r3, r0, #0
 800550c:	d100      	bne.n	8005510 <ESP_WakeTest+0xc8>
 800550e:	e095      	b.n	800563c <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8005510:	4b55      	ldr	r3, [pc, #340]	@ (8005668 <ESP_WakeTest+0x220>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	1dfc      	adds	r4, r7, #7
 8005516:	0018      	movs	r0, r3
 8005518:	f7ff fdb6 	bl	8005088 <AT_Send>
 800551c:	0003      	movs	r3, r0
 800551e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005520:	1dfb      	adds	r3, r7, #7
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d100      	bne.n	800552a <ESP_WakeTest+0xe2>
 8005528:	e088      	b.n	800563c <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 800552a:	4b48      	ldr	r3, [pc, #288]	@ (800564c <ESP_WakeTest+0x204>)
 800552c:	2202      	movs	r2, #2
 800552e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005530:	e084      	b.n	800563c <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8005532:	4b4b      	ldr	r3, [pc, #300]	@ (8005660 <ESP_WakeTest+0x218>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0018      	movs	r0, r3
 8005538:	f009 fc74 	bl	800ee24 <TimestampIsReached>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d100      	bne.n	8005542 <ESP_WakeTest+0xfa>
 8005540:	e07e      	b.n	8005640 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005542:	4b4a      	ldr	r3, [pc, #296]	@ (800566c <ESP_WakeTest+0x224>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	0018      	movs	r0, r3
 8005548:	f7ff fc5c 	bl	8004e04 <DMA_ProcessBuffer>
 800554c:	0003      	movs	r3, r0
 800554e:	001a      	movs	r2, r3
 8005550:	4b47      	ldr	r3, [pc, #284]	@ (8005670 <ESP_WakeTest+0x228>)
 8005552:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005554:	4b46      	ldr	r3, [pc, #280]	@ (8005670 <ESP_WakeTest+0x228>)
 8005556:	781a      	ldrb	r2, [r3, #0]
 8005558:	4b44      	ldr	r3, [pc, #272]	@ (800566c <ESP_WakeTest+0x224>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	1dbc      	adds	r4, r7, #6
 800555e:	0019      	movs	r1, r3
 8005560:	0010      	movs	r0, r2
 8005562:	f7ff fd4f 	bl	8005004 <ATCompare>
 8005566:	0003      	movs	r3, r0
 8005568:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800556a:	4b41      	ldr	r3, [pc, #260]	@ (8005670 <ESP_WakeTest+0x228>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005572:	4b36      	ldr	r3, [pc, #216]	@ (800564c <ESP_WakeTest+0x204>)
 8005574:	2201      	movs	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005578:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <ESP_WakeTest+0x228>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b07      	cmp	r3, #7
 800557e:	d104      	bne.n	800558a <ESP_WakeTest+0x142>
          StartProg();
 8005580:	f7fe ff28 	bl	80043d4 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005584:	4b31      	ldr	r3, [pc, #196]	@ (800564c <ESP_WakeTest+0x204>)
 8005586:	2205      	movs	r2, #5
 8005588:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800558a:	4b39      	ldr	r3, [pc, #228]	@ (8005670 <ESP_WakeTest+0x228>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d109      	bne.n	80055a6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8005592:	f00a f8e1 	bl	800f758 <HAL_GetTick>
 8005596:	0003      	movs	r3, r0
 8005598:	3332      	adds	r3, #50	@ 0x32
 800559a:	001a      	movs	r2, r3
 800559c:	4b30      	ldr	r3, [pc, #192]	@ (8005660 <ESP_WakeTest+0x218>)
 800559e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80055a0:	4b2a      	ldr	r3, [pc, #168]	@ (800564c <ESP_WakeTest+0x204>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80055a6:	1dbb      	adds	r3, r7, #6
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d048      	beq.n	8005640 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80055ae:	4b27      	ldr	r3, [pc, #156]	@ (800564c <ESP_WakeTest+0x204>)
 80055b0:	2203      	movs	r2, #3
 80055b2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80055b4:	e044      	b.n	8005640 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80055b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005674 <ESP_WakeTest+0x22c>)
 80055b8:	22fa      	movs	r2, #250	@ 0xfa
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80055be:	f008 f9e7 	bl	800d990 <Calculate_LED_ON>
 80055c2:	0003      	movs	r3, r0
 80055c4:	001a      	movs	r2, r3
 80055c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005674 <ESP_WakeTest+0x22c>)
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80055ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005674 <ESP_WakeTest+0x22c>)
 80055cc:	22fa      	movs	r2, #250	@ 0xfa
 80055ce:	0112      	lsls	r2, r2, #4
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80055d2:	4b1e      	ldr	r3, [pc, #120]	@ (800564c <ESP_WakeTest+0x204>)
 80055d4:	2204      	movs	r2, #4
 80055d6:	701a      	strb	r2, [r3, #0]

      break;
 80055d8:	e033      	b.n	8005642 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80055da:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <ESP_WakeTest+0x230>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80055e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <ESP_WakeTest+0x20c>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055e6:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <ESP_WakeTest+0x214>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	2101      	movs	r1, #1
 80055ec:	0018      	movs	r0, r3
 80055ee:	f00b fb44 	bl	8010c7a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4818      	ldr	r0, [pc, #96]	@ (8005658 <ESP_WakeTest+0x210>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	0019      	movs	r1, r3
 80055fc:	f00b fb3d 	bl	8010c7a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005600:	4b16      	ldr	r3, [pc, #88]	@ (800565c <ESP_WakeTest+0x214>)
 8005602:	2200      	movs	r2, #0
 8005604:	2102      	movs	r1, #2
 8005606:	0018      	movs	r0, r3
 8005608:	f00b fb37 	bl	8010c7a <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 800560c:	f003 fbc8 	bl	8008da0 <SetESPMeasurementDone>
      break;
 8005610:	e017      	b.n	8005642 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8005612:	4b0e      	ldr	r3, [pc, #56]	@ (800564c <ESP_WakeTest+0x204>)
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
      break;
 8005618:	e013      	b.n	8005642 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 800561a:	4b16      	ldr	r3, [pc, #88]	@ (8005674 <ESP_WakeTest+0x22c>)
 800561c:	22fa      	movs	r2, #250	@ 0xfa
 800561e:	0112      	lsls	r2, r2, #4
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8005622:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <ESP_WakeTest+0x22c>)
 8005624:	22fa      	movs	r2, #250	@ 0xfa
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 800562a:	f008 f9b1 	bl	800d990 <Calculate_LED_ON>
 800562e:	0003      	movs	r3, r0
 8005630:	001a      	movs	r2, r3
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <ESP_WakeTest+0x22c>)
 8005634:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8005636:	e004      	b.n	8005642 <ESP_WakeTest+0x1fa>
      break;
 8005638:	46c0      	nop			@ (mov r8, r8)
 800563a:	e002      	b.n	8005642 <ESP_WakeTest+0x1fa>
      break;
 800563c:	46c0      	nop			@ (mov r8, r8)
 800563e:	e000      	b.n	8005642 <ESP_WakeTest+0x1fa>
      break;
 8005640:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	46bd      	mov	sp, r7
 8005646:	b003      	add	sp, #12
 8005648:	bd90      	pop	{r4, r7, pc}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	20000620 	.word	0x20000620
 8005650:	08026454 	.word	0x08026454
 8005654:	2000054c 	.word	0x2000054c
 8005658:	50000800 	.word	0x50000800
 800565c:	50001c00 	.word	0x50001c00
 8005660:	20000618 	.word	0x20000618
 8005664:	2000044c 	.word	0x2000044c
 8005668:	2000061e 	.word	0x2000061e
 800566c:	2000061d 	.word	0x2000061d
 8005670:	20000032 	.word	0x20000032
 8005674:	40000400 	.word	0x40000400
 8005678:	20000000 	.word	0x20000000

0800567c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800567c:	b5b0      	push	{r4, r5, r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005682:	1dfb      	adds	r3, r7, #7
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8005688:	4be2      	ldr	r3, [pc, #904]	@ (8005a14 <ESP_Upkeep+0x398>)
 800568a:	781a      	ldrb	r2, [r3, #0]
 800568c:	4be2      	ldr	r3, [pc, #904]	@ (8005a18 <ESP_Upkeep+0x39c>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d024      	beq.n	80056de <ESP_Upkeep+0x62>
 8005694:	f009 fc96 	bl	800efc4 <GetVerboseLevel>
 8005698:	0003      	movs	r3, r0
 800569a:	2b03      	cmp	r3, #3
 800569c:	d11f      	bne.n	80056de <ESP_Upkeep+0x62>
    oldEspState = EspState;
 800569e:	4bdd      	ldr	r3, [pc, #884]	@ (8005a14 <ESP_Upkeep+0x398>)
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	4bdd      	ldr	r3, [pc, #884]	@ (8005a18 <ESP_Upkeep+0x39c>)
 80056a4:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80056a6:	4bdc      	ldr	r3, [pc, #880]	@ (8005a18 <ESP_Upkeep+0x39c>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d103      	bne.n	80056b6 <ESP_Upkeep+0x3a>
 80056ae:	4bdb      	ldr	r3, [pc, #876]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b0e      	cmp	r3, #14
 80056b4:	d013      	beq.n	80056de <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80056b6:	4bd8      	ldr	r3, [pc, #864]	@ (8005a18 <ESP_Upkeep+0x39c>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	001d      	movs	r5, r3
 80056bc:	4bd7      	ldr	r3, [pc, #860]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	0018      	movs	r0, r3
 80056c2:	4bd7      	ldr	r3, [pc, #860]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	001c      	movs	r4, r3
 80056c8:	4bd6      	ldr	r3, [pc, #856]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4ad6      	ldr	r2, [pc, #856]	@ (8005a28 <ESP_Upkeep+0x3ac>)
 80056ce:	49d7      	ldr	r1, [pc, #860]	@ (8005a2c <ESP_Upkeep+0x3b0>)
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	9401      	str	r4, [sp, #4]
 80056d4:	9000      	str	r0, [sp, #0]
 80056d6:	002b      	movs	r3, r5
 80056d8:	2003      	movs	r0, #3
 80056da:	f009 fbf9 	bl	800eed0 <CreateLine>
    }
  }
  switch (EspState) {
 80056de:	4bcd      	ldr	r3, [pc, #820]	@ (8005a14 <ESP_Upkeep+0x398>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b0f      	cmp	r3, #15
 80056e4:	d901      	bls.n	80056ea <ESP_Upkeep+0x6e>
 80056e6:	f000 fc32 	bl	8005f4e <ESP_Upkeep+0x8d2>
 80056ea:	009a      	lsls	r2, r3, #2
 80056ec:	4bd0      	ldr	r3, [pc, #832]	@ (8005a30 <ESP_Upkeep+0x3b4>)
 80056ee:	18d3      	adds	r3, r2, r3
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80056f4:	4bc7      	ldr	r3, [pc, #796]	@ (8005a14 <ESP_Upkeep+0x398>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
      break;
 80056fa:	f000 fc41 	bl	8005f80 <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 80056fe:	f003 fdaf 	bl	8009260 <DisableConnectedDevices>
      SetESPIndicator();
 8005702:	f008 fad7 	bl	800dcb4 <SetESPIndicator>
      if(!EspTurnedOn){
 8005706:	4bcb      	ldr	r3, [pc, #812]	@ (8005a34 <ESP_Upkeep+0x3b8>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2201      	movs	r2, #1
 800570c:	4053      	eors	r3, r2
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d036      	beq.n	8005782 <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	48c7      	ldr	r0, [pc, #796]	@ (8005a38 <ESP_Upkeep+0x3bc>)
 800571a:	2200      	movs	r2, #0
 800571c:	0019      	movs	r1, r3
 800571e:	f00b faac 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005722:	2001      	movs	r0, #1
 8005724:	f00a f822 	bl	800f76c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	48c2      	ldr	r0, [pc, #776]	@ (8005a38 <ESP_Upkeep+0x3bc>)
 800572e:	2201      	movs	r2, #1
 8005730:	0019      	movs	r1, r3
 8005732:	f00b faa2 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005736:	2001      	movs	r0, #1
 8005738:	f00a f818 	bl	800f76c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800573c:	4bbf      	ldr	r3, [pc, #764]	@ (8005a3c <ESP_Upkeep+0x3c0>)
 800573e:	2200      	movs	r2, #0
 8005740:	2101      	movs	r1, #1
 8005742:	0018      	movs	r0, r3
 8005744:	f00b fa99 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005748:	2001      	movs	r0, #1
 800574a:	f00a f80f 	bl	800f76c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800574e:	4bbb      	ldr	r3, [pc, #748]	@ (8005a3c <ESP_Upkeep+0x3c0>)
 8005750:	2201      	movs	r2, #1
 8005752:	2102      	movs	r1, #2
 8005754:	0018      	movs	r0, r3
 8005756:	f00b fa90 	bl	8010c7a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800575a:	2001      	movs	r0, #1
 800575c:	f00a f806 	bl	800f76c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005760:	4bb6      	ldr	r3, [pc, #728]	@ (8005a3c <ESP_Upkeep+0x3c0>)
 8005762:	2201      	movs	r2, #1
 8005764:	2101      	movs	r1, #1
 8005766:	0018      	movs	r0, r3
 8005768:	f00b fa87 	bl	8010c7a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800576c:	f009 fff4 	bl	800f758 <HAL_GetTick>
 8005770:	0003      	movs	r3, r0
 8005772:	22af      	movs	r2, #175	@ 0xaf
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	189a      	adds	r2, r3, r2
 8005778:	4bb1      	ldr	r3, [pc, #708]	@ (8005a40 <ESP_Upkeep+0x3c4>)
 800577a:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800577c:	4bad      	ldr	r3, [pc, #692]	@ (8005a34 <ESP_Upkeep+0x3b8>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005782:	2380      	movs	r3, #128	@ 0x80
 8005784:	005a      	lsls	r2, r3, #1
 8005786:	4baf      	ldr	r3, [pc, #700]	@ (8005a44 <ESP_Upkeep+0x3c8>)
 8005788:	0011      	movs	r1, r2
 800578a:	0018      	movs	r0, r3
 800578c:	f7fe f966 	bl	8003a5c <ESP_Receive>
 8005790:	1e03      	subs	r3, r0, #0
 8005792:	d101      	bne.n	8005798 <ESP_Upkeep+0x11c>
 8005794:	f000 fbe7 	bl	8005f66 <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005798:	4b9e      	ldr	r3, [pc, #632]	@ (8005a14 <ESP_Upkeep+0x398>)
 800579a:	220f      	movs	r2, #15
 800579c:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800579e:	f009 ffdb 	bl	800f758 <HAL_GetTick>
 80057a2:	0003      	movs	r3, r0
 80057a4:	22fa      	movs	r2, #250	@ 0xfa
 80057a6:	00d2      	lsls	r2, r2, #3
 80057a8:	189a      	adds	r2, r3, r2
 80057aa:	4ba7      	ldr	r3, [pc, #668]	@ (8005a48 <ESP_Upkeep+0x3cc>)
 80057ac:	601a      	str	r2, [r3, #0]
      }
      break;
 80057ae:	f000 fbda 	bl	8005f66 <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7ff fb26 	bl	8004e04 <DMA_ProcessBuffer>
 80057b8:	0003      	movs	r3, r0
 80057ba:	001a      	movs	r2, r3
 80057bc:	4ba3      	ldr	r3, [pc, #652]	@ (8005a4c <ESP_Upkeep+0x3d0>)
 80057be:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80057c0:	4ba2      	ldr	r3, [pc, #648]	@ (8005a4c <ESP_Upkeep+0x3d0>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	1dbc      	adds	r4, r7, #6
 80057c6:	2101      	movs	r1, #1
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7ff fc1b 	bl	8005004 <ATCompare>
 80057ce:	0003      	movs	r3, r0
 80057d0:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80057d2:	1dbb      	adds	r3, r7, #6
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d108      	bne.n	80057ec <ESP_Upkeep+0x170>
 80057da:	4b9b      	ldr	r3, [pc, #620]	@ (8005a48 <ESP_Upkeep+0x3cc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	0018      	movs	r0, r3
 80057e0:	f009 fb20 	bl	800ee24 <TimestampIsReached>
 80057e4:	1e03      	subs	r3, r0, #0
 80057e6:	d101      	bne.n	80057ec <ESP_Upkeep+0x170>
 80057e8:	f000 fbbf 	bl	8005f6a <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 80057ec:	4b89      	ldr	r3, [pc, #548]	@ (8005a14 <ESP_Upkeep+0x398>)
 80057ee:	220b      	movs	r2, #11
 80057f0:	701a      	strb	r2, [r3, #0]
        }
        break;
 80057f2:	f000 fbba 	bl	8005f6a <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80057f6:	4b96      	ldr	r3, [pc, #600]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80057f8:	2209      	movs	r2, #9
 80057fa:	2114      	movs	r1, #20
 80057fc:	0018      	movs	r0, r3
 80057fe:	f01b fa25 	bl	8020c4c <memset>
      if(!InitIsDone || WifiReset){
 8005802:	4b94      	ldr	r3, [pc, #592]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	4053      	eors	r3, r2
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <ESP_Upkeep+0x19c>
 8005810:	4b91      	ldr	r3, [pc, #580]	@ (8005a58 <ESP_Upkeep+0x3dc>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01a      	beq.n	800584e <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005818:	4b8d      	ldr	r3, [pc, #564]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800581a:	4a90      	ldr	r2, [pc, #576]	@ (8005a5c <ESP_Upkeep+0x3e0>)
 800581c:	6811      	ldr	r1, [r2, #0]
 800581e:	6019      	str	r1, [r3, #0]
 8005820:	8891      	ldrh	r1, [r2, #4]
 8005822:	8099      	strh	r1, [r3, #4]
 8005824:	7992      	ldrb	r2, [r2, #6]
 8005826:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005828:	4b7a      	ldr	r3, [pc, #488]	@ (8005a14 <ESP_Upkeep+0x398>)
 800582a:	2204      	movs	r2, #4
 800582c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800582e:	4b8c      	ldr	r3, [pc, #560]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005834:	4b7a      	ldr	r3, [pc, #488]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800583a:	4b89      	ldr	r3, [pc, #548]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	001a      	movs	r2, r3
 8005840:	4b83      	ldr	r3, [pc, #524]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005842:	5c9a      	ldrb	r2, [r3, r2]
 8005844:	4b75      	ldr	r3, [pc, #468]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 8005846:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005848:	4b76      	ldr	r3, [pc, #472]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800584e:	4b81      	ldr	r3, [pc, #516]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01f      	beq.n	8005896 <ESP_Upkeep+0x21a>
 8005856:	4b83      	ldr	r3, [pc, #524]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	4053      	eors	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d018      	beq.n	8005896 <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005864:	4b7a      	ldr	r3, [pc, #488]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005866:	4a80      	ldr	r2, [pc, #512]	@ (8005a68 <ESP_Upkeep+0x3ec>)
 8005868:	6811      	ldr	r1, [r2, #0]
 800586a:	6019      	str	r1, [r3, #0]
 800586c:	8892      	ldrh	r2, [r2, #4]
 800586e:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005870:	4b68      	ldr	r3, [pc, #416]	@ (8005a14 <ESP_Upkeep+0x398>)
 8005872:	2204      	movs	r2, #4
 8005874:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800587c:	4b68      	ldr	r3, [pc, #416]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005882:	4b77      	ldr	r3, [pc, #476]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	001a      	movs	r2, r3
 8005888:	4b71      	ldr	r3, [pc, #452]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800588a:	5c9a      	ldrb	r2, [r3, r2]
 800588c:	4b63      	ldr	r3, [pc, #396]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 800588e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005890:	4b64      	ldr	r3, [pc, #400]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005896:	4b6f      	ldr	r3, [pc, #444]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d021      	beq.n	80058e2 <ESP_Upkeep+0x266>
 800589e:	4b71      	ldr	r3, [pc, #452]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01d      	beq.n	80058e2 <ESP_Upkeep+0x266>
 80058a6:	4b71      	ldr	r3, [pc, #452]	@ (8005a6c <ESP_Upkeep+0x3f0>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	4053      	eors	r3, r2
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d016      	beq.n	80058e2 <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80058b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005a70 <ESP_Upkeep+0x3f4>)
 80058b6:	881a      	ldrh	r2, [r3, #0]
 80058b8:	4b65      	ldr	r3, [pc, #404]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80058ba:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80058bc:	4b55      	ldr	r3, [pc, #340]	@ (8005a14 <ESP_Upkeep+0x398>)
 80058be:	2204      	movs	r2, #4
 80058c0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058c2:	4b67      	ldr	r3, [pc, #412]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80058c8:	4b55      	ldr	r3, [pc, #340]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 80058ca:	2204      	movs	r2, #4
 80058cc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80058ce:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	001a      	movs	r2, r3
 80058d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80058d6:	5c9a      	ldrb	r2, [r3, r2]
 80058d8:	4b50      	ldr	r3, [pc, #320]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80058da:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058dc:	4b51      	ldr	r3, [pc, #324]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80058e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d02c      	beq.n	8005944 <ESP_Upkeep+0x2c8>
 80058ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d028      	beq.n	8005944 <ESP_Upkeep+0x2c8>
 80058f2:	4b5e      	ldr	r3, [pc, #376]	@ (8005a6c <ESP_Upkeep+0x3f0>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d024      	beq.n	8005944 <ESP_Upkeep+0x2c8>
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <ESP_Upkeep+0x3f8>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2201      	movs	r2, #1
 8005900:	4053      	eors	r3, r2
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01d      	beq.n	8005944 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005908:	4b51      	ldr	r3, [pc, #324]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800590a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a78 <ESP_Upkeep+0x3fc>)
 800590c:	8811      	ldrh	r1, [r2, #0]
 800590e:	8019      	strh	r1, [r3, #0]
 8005910:	7892      	ldrb	r2, [r2, #2]
 8005912:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005914:	4b3f      	ldr	r3, [pc, #252]	@ (8005a14 <ESP_Upkeep+0x398>)
 8005916:	2204      	movs	r2, #4
 8005918:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800591a:	4b51      	ldr	r3, [pc, #324]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005920:	4b3f      	ldr	r3, [pc, #252]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 8005922:	2202      	movs	r2, #2
 8005924:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005926:	f009 ff17 	bl	800f758 <HAL_GetTick>
 800592a:	0002      	movs	r2, r0
 800592c:	4b53      	ldr	r3, [pc, #332]	@ (8005a7c <ESP_Upkeep+0x400>)
 800592e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005930:	4b4b      	ldr	r3, [pc, #300]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	001a      	movs	r2, r3
 8005936:	4b46      	ldr	r3, [pc, #280]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005938:	5c9a      	ldrb	r2, [r3, r2]
 800593a:	4b38      	ldr	r3, [pc, #224]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 800593c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800593e:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005944:	4b43      	ldr	r3, [pc, #268]	@ (8005a54 <ESP_Upkeep+0x3d8>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d027      	beq.n	800599c <ESP_Upkeep+0x320>
 800594c:	4b45      	ldr	r3, [pc, #276]	@ (8005a64 <ESP_Upkeep+0x3e8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d023      	beq.n	800599c <ESP_Upkeep+0x320>
 8005954:	4b45      	ldr	r3, [pc, #276]	@ (8005a6c <ESP_Upkeep+0x3f0>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01f      	beq.n	800599c <ESP_Upkeep+0x320>
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <ESP_Upkeep+0x3f8>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01b      	beq.n	800599c <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005964:	4b46      	ldr	r3, [pc, #280]	@ (8005a80 <ESP_Upkeep+0x404>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b39      	ldr	r3, [pc, #228]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 800596a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800596c:	4b29      	ldr	r3, [pc, #164]	@ (8005a14 <ESP_Upkeep+0x398>)
 800596e:	2204      	movs	r2, #4
 8005970:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005972:	4b3b      	ldr	r3, [pc, #236]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005978:	4b29      	ldr	r3, [pc, #164]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 800597a:	2205      	movs	r2, #5
 800597c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800597e:	f009 feeb 	bl	800f758 <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	4b3d      	ldr	r3, [pc, #244]	@ (8005a7c <ESP_Upkeep+0x400>)
 8005986:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005988:	4b35      	ldr	r3, [pc, #212]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	001a      	movs	r2, r3
 800598e:	4b30      	ldr	r3, [pc, #192]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 8005990:	5c9a      	ldrb	r2, [r3, r2]
 8005992:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 8005994:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800599c:	4b39      	ldr	r3, [pc, #228]	@ (8005a84 <ESP_Upkeep+0x408>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d100      	bne.n	80059a6 <ESP_Upkeep+0x32a>
 80059a4:	e2e3      	b.n	8005f6e <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80059a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80059a8:	4a37      	ldr	r2, [pc, #220]	@ (8005a88 <ESP_Upkeep+0x40c>)
 80059aa:	6811      	ldr	r1, [r2, #0]
 80059ac:	6019      	str	r1, [r3, #0]
 80059ae:	7912      	ldrb	r2, [r2, #4]
 80059b0:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80059b2:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <ESP_Upkeep+0x410>)
 80059b4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <ESP_Upkeep+0x3b0>)
 80059b6:	0019      	movs	r1, r3
 80059b8:	2003      	movs	r0, #3
 80059ba:	f009 fa89 	bl	800eed0 <CreateLine>
        DisableConnectedDevices();
 80059be:	f003 fc4f 	bl	8009260 <DisableConnectedDevices>
        usblog = false;
 80059c2:	4b33      	ldr	r3, [pc, #204]	@ (8005a90 <ESP_Upkeep+0x414>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059c8:	4b12      	ldr	r3, [pc, #72]	@ (8005a14 <ESP_Upkeep+0x398>)
 80059ca:	2204      	movs	r2, #4
 80059cc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059ce:	4b24      	ldr	r3, [pc, #144]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <ESP_Upkeep+0x3a4>)
 80059d6:	2203      	movs	r2, #3
 80059d8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059da:	4b21      	ldr	r3, [pc, #132]	@ (8005a60 <ESP_Upkeep+0x3e4>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	001a      	movs	r2, r3
 80059e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a50 <ESP_Upkeep+0x3d4>)
 80059e2:	5c9a      	ldrb	r2, [r3, r2]
 80059e4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80059e6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a24 <ESP_Upkeep+0x3a8>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	701a      	strb	r2, [r3, #0]
      }
    break;
 80059ee:	e2be      	b.n	8005f6e <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80059f0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <ESP_Upkeep+0x3a0>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	1dfc      	adds	r4, r7, #7
 80059f6:	0018      	movs	r0, r3
 80059f8:	f7ff fb46 	bl	8005088 <AT_Send>
 80059fc:	0003      	movs	r3, r0
 80059fe:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005a00:	1dfb      	adds	r3, r7, #7
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d100      	bne.n	8005a0a <ESP_Upkeep+0x38e>
 8005a08:	e2b3      	b.n	8005f72 <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005a0a:	4b02      	ldr	r3, [pc, #8]	@ (8005a14 <ESP_Upkeep+0x398>)
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005a10:	e2af      	b.n	8005f72 <ESP_Upkeep+0x8f6>
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	20000030 	.word	0x20000030
 8005a18:	20000002 	.word	0x20000002
 8005a1c:	2000061e 	.word	0x2000061e
 8005a20:	2000061f 	.word	0x2000061f
 8005a24:	2000061d 	.word	0x2000061d
 8005a28:	08024774 	.word	0x08024774
 8005a2c:	08023bc0 	.word	0x08023bc0
 8005a30:	0802646c 	.word	0x0802646c
 8005a34:	2000054c 	.word	0x2000054c
 8005a38:	50000800 	.word	0x50000800
 8005a3c:	50001c00 	.word	0x50001c00
 8005a40:	20000618 	.word	0x20000618
 8005a44:	2000044c 	.word	0x2000044c
 8005a48:	20000764 	.word	0x20000764
 8005a4c:	20000033 	.word	0x20000033
 8005a50:	20000608 	.word	0x20000608
 8005a54:	2000054d 	.word	0x2000054d
 8005a58:	2000054e 	.word	0x2000054e
 8005a5c:	20000004 	.word	0x20000004
 8005a60:	20000612 	.word	0x20000612
 8005a64:	20000550 	.word	0x20000550
 8005a68:	20000014 	.word	0x20000014
 8005a6c:	20000551 	.word	0x20000551
 8005a70:	20000010 	.word	0x20000010
 8005a74:	20000001 	.word	0x20000001
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	20000564 	.word	0x20000564
 8005a80:	20000024 	.word	0x20000024
 8005a84:	2000054f 	.word	0x2000054f
 8005a88:	2000001c 	.word	0x2000001c
 8005a8c:	080247a0 	.word	0x080247a0
 8005a90:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005a94:	4bc9      	ldr	r3, [pc, #804]	@ (8005dbc <ESP_Upkeep+0x740>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <ESP_Upkeep+0x430>
 8005a9c:	4bc8      	ldr	r3, [pc, #800]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d003      	beq.n	8005aac <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005aa4:	4bc7      	ldr	r3, [pc, #796]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005aa6:	220b      	movs	r2, #11
 8005aa8:	701a      	strb	r2, [r3, #0]
        break;
 8005aaa:	e269      	b.n	8005f80 <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005aac:	4bc6      	ldr	r3, [pc, #792]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f009 f9b7 	bl	800ee24 <TimestampIsReached>
 8005ab6:	1e03      	subs	r3, r0, #0
 8005ab8:	d100      	bne.n	8005abc <ESP_Upkeep+0x440>
 8005aba:	e25c      	b.n	8005f76 <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005abc:	4bc3      	ldr	r3, [pc, #780]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	0018      	movs	r0, r3
 8005ac2:	f7ff f99f 	bl	8004e04 <DMA_ProcessBuffer>
 8005ac6:	0003      	movs	r3, r0
 8005ac8:	001a      	movs	r2, r3
 8005aca:	4bc1      	ldr	r3, [pc, #772]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005acc:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005ace:	4bc0      	ldr	r3, [pc, #768]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	4bbe      	ldr	r3, [pc, #760]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	1d7c      	adds	r4, r7, #5
 8005ad8:	0019      	movs	r1, r3
 8005ada:	0010      	movs	r0, r2
 8005adc:	f7ff fa92 	bl	8005004 <ATCompare>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005ae4:	4bba      	ldr	r3, [pc, #744]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d138      	bne.n	8005b5e <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005aec:	4bb9      	ldr	r3, [pc, #740]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b0f      	cmp	r3, #15
 8005af2:	d108      	bne.n	8005b06 <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005af4:	4bb7      	ldr	r3, [pc, #732]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005af6:	220e      	movs	r2, #14
 8005af8:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005afa:	4bb4      	ldr	r3, [pc, #720]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005afc:	2202      	movs	r2, #2
 8005afe:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005b00:	4bb5      	ldr	r3, [pc, #724]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005b06:	4baf      	ldr	r3, [pc, #700]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005b08:	2204      	movs	r2, #4
 8005b0a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005b0c:	4bb3      	ldr	r3, [pc, #716]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4bb1      	ldr	r3, [pc, #708]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005b16:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005b18:	4bb0      	ldr	r3, [pc, #704]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d91e      	bls.n	8005b5e <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b20:	f009 fe1a 	bl	800f758 <HAL_GetTick>
 8005b24:	0003      	movs	r3, r0
 8005b26:	4aae      	ldr	r2, [pc, #696]	@ (8005de0 <ESP_Upkeep+0x764>)
 8005b28:	189a      	adds	r2, r3, r2
 8005b2a:	4ba7      	ldr	r3, [pc, #668]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005b2c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005b2e:	4bad      	ldr	r3, [pc, #692]	@ (8005de4 <ESP_Upkeep+0x768>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005b34:	f7ff fa58 	bl	8004fe8 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b38:	f009 fe0e 	bl	800f758 <HAL_GetTick>
 8005b3c:	0002      	movs	r2, r0
 8005b3e:	4baa      	ldr	r3, [pc, #680]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005b40:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005b42:	4ba9      	ldr	r3, [pc, #676]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4ba9      	ldr	r3, [pc, #676]	@ (8005dec <ESP_Upkeep+0x770>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	4aa8      	ldr	r2, [pc, #672]	@ (8005df0 <ESP_Upkeep+0x774>)
 8005b4e:	49a9      	ldr	r1, [pc, #676]	@ (8005df4 <ESP_Upkeep+0x778>)
 8005b50:	2001      	movs	r0, #1
 8005b52:	f009 f9bd 	bl	800eed0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b56:	4b9b      	ldr	r3, [pc, #620]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005b58:	220d      	movs	r2, #13
 8005b5a:	701a      	strb	r2, [r3, #0]
            break;
 8005b5c:	e210      	b.n	8005f80 <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d106      	bne.n	8005b74 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005b66:	f009 fdf7 	bl	800f758 <HAL_GetTick>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	330a      	adds	r3, #10
 8005b6e:	001a      	movs	r2, r3
 8005b70:	4b95      	ldr	r3, [pc, #596]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005b72:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005b74:	4b96      	ldr	r3, [pc, #600]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b0a      	cmp	r3, #10
 8005b7a:	d106      	bne.n	8005b8a <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005b7c:	f009 fdec 	bl	800f758 <HAL_GetTick>
 8005b80:	0003      	movs	r3, r0
 8005b82:	330a      	adds	r3, #10
 8005b84:	001a      	movs	r2, r3
 8005b86:	4b90      	ldr	r3, [pc, #576]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005b88:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005b8a:	4b91      	ldr	r3, [pc, #580]	@ (8005dd0 <ESP_Upkeep+0x754>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d14b      	bne.n	8005c2a <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005b92:	4b99      	ldr	r3, [pc, #612]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b97      	ldr	r3, [pc, #604]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005b9c:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005b9e:	4a97      	ldr	r2, [pc, #604]	@ (8005dfc <ESP_Upkeep+0x780>)
 8005ba0:	4b94      	ldr	r3, [pc, #592]	@ (8005df4 <ESP_Upkeep+0x778>)
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f009 f993 	bl	800eed0 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005baa:	4b93      	ldr	r3, [pc, #588]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d924      	bls.n	8005bfc <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005bb2:	f009 fdd1 	bl	800f758 <HAL_GetTick>
 8005bb6:	0003      	movs	r3, r0
 8005bb8:	4a91      	ldr	r2, [pc, #580]	@ (8005e00 <ESP_Upkeep+0x784>)
 8005bba:	189a      	adds	r2, r3, r2
 8005bbc:	4b82      	ldr	r3, [pc, #520]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005bbe:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005bc0:	4b88      	ldr	r3, [pc, #544]	@ (8005de4 <ESP_Upkeep+0x768>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005bc6:	f7ff fa0f 	bl	8004fe8 <clearDMABuffer>
            stop = HAL_GetTick();
 8005bca:	f009 fdc5 	bl	800f758 <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	4b85      	ldr	r3, [pc, #532]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005bd2:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005bd4:	4b84      	ldr	r3, [pc, #528]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	4b84      	ldr	r3, [pc, #528]	@ (8005dec <ESP_Upkeep+0x770>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	4a89      	ldr	r2, [pc, #548]	@ (8005e04 <ESP_Upkeep+0x788>)
 8005be0:	4984      	ldr	r1, [pc, #528]	@ (8005df4 <ESP_Upkeep+0x778>)
 8005be2:	2001      	movs	r0, #1
 8005be4:	f009 f974 	bl	800eed0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005be8:	4b76      	ldr	r3, [pc, #472]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005bea:	220d      	movs	r2, #13
 8005bec:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005bee:	4b79      	ldr	r3, [pc, #484]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005bf0:	2214      	movs	r2, #20
 8005bf2:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005bf4:	4b75      	ldr	r3, [pc, #468]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
            break;
 8005bfa:	e1c1      	b.n	8005f80 <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005bfc:	4b75      	ldr	r3, [pc, #468]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b0f      	cmp	r3, #15
 8005c02:	d003      	beq.n	8005c0c <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005c04:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c06:	2204      	movs	r2, #4
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e00e      	b.n	8005c2a <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005c0c:	4b71      	ldr	r3, [pc, #452]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c0e:	220e      	movs	r2, #14
 8005c10:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005c12:	4b71      	ldr	r3, [pc, #452]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c1c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c1e:	4b6b      	ldr	r3, [pc, #428]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005c24:	4b67      	ldr	r3, [pc, #412]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c26:	2204      	movs	r2, #4
 8005c28:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005c2a:	1d7b      	adds	r3, r7, #5
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d100      	bne.n	8005c34 <ESP_Upkeep+0x5b8>
 8005c32:	e1a0      	b.n	8005f76 <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005c34:	4b63      	ldr	r3, [pc, #396]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c36:	2205      	movs	r2, #5
 8005c38:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005c3a:	e19c      	b.n	8005f76 <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005c3c:	4b66      	ldr	r3, [pc, #408]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	4b64      	ldr	r3, [pc, #400]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c46:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005c48:	4b63      	ldr	r3, [pc, #396]	@ (8005dd8 <ESP_Upkeep+0x75c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	001a      	movs	r2, r3
 8005c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005e08 <ESP_Upkeep+0x78c>)
 8005c50:	5c9a      	ldrb	r2, [r3, r2]
 8005c52:	4b60      	ldr	r3, [pc, #384]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c54:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005c56:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d102      	bne.n	8005c64 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005c64:	4b5b      	ldr	r3, [pc, #364]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b0e      	cmp	r3, #14
 8005c6a:	d102      	bne.n	8005c72 <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005c6c:	4b57      	ldr	r3, [pc, #348]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c6e:	2202      	movs	r2, #2
 8005c70:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005c72:	4b58      	ldr	r3, [pc, #352]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b0e      	cmp	r3, #14
 8005c78:	d006      	beq.n	8005c88 <ESP_Upkeep+0x60c>
 8005c7a:	4b56      	ldr	r3, [pc, #344]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d002      	beq.n	8005c88 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005c82:	4b52      	ldr	r3, [pc, #328]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005c88:	4b52      	ldr	r3, [pc, #328]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b11      	cmp	r3, #17
 8005c8e:	d102      	bne.n	8005c96 <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005c90:	4b4e      	ldr	r3, [pc, #312]	@ (8005dcc <ESP_Upkeep+0x750>)
 8005c92:	2205      	movs	r2, #5
 8005c94:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005c96:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005c98:	2204      	movs	r2, #4
 8005c9a:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8005dd4 <ESP_Upkeep+0x758>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b14      	cmp	r3, #20
 8005ca2:	d000      	beq.n	8005ca6 <ESP_Upkeep+0x62a>
 8005ca4:	e169      	b.n	8005f7a <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005ca6:	4b46      	ldr	r3, [pc, #280]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d124      	bne.n	8005cf8 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005cae:	f009 fd53 	bl	800f758 <HAL_GetTick>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8005de0 <ESP_Upkeep+0x764>)
 8005cb6:	189a      	adds	r2, r3, r2
 8005cb8:	4b43      	ldr	r3, [pc, #268]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005cba:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005cbc:	f7ff f994 	bl	8004fe8 <clearDMABuffer>
          stop = HAL_GetTick();
 8005cc0:	f009 fd4a 	bl	800f758 <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	4b48      	ldr	r3, [pc, #288]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005cc8:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005cca:	4b47      	ldr	r3, [pc, #284]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b47      	ldr	r3, [pc, #284]	@ (8005dec <ESP_Upkeep+0x770>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8005e0c <ESP_Upkeep+0x790>)
 8005cd6:	494e      	ldr	r1, [pc, #312]	@ (8005e10 <ESP_Upkeep+0x794>)
 8005cd8:	2002      	movs	r0, #2
 8005cda:	f009 f8f9 	bl	800eed0 <CreateLine>
          ResetdBAmax();
 8005cde:	f003 fadd 	bl	800929c <ResetdBAmax>
          resetMaxMeasurementValues();
 8005ce2:	f7fd fe15 	bl	8003910 <resetMaxMeasurementValues>
          showTime();
 8005ce6:	f000 ffb7 	bl	8006c58 <showTime>
          ESPTransmitDone = true;
 8005cea:	4b3e      	ldr	r3, [pc, #248]	@ (8005de4 <ESP_Upkeep+0x768>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005cf0:	4b34      	ldr	r3, [pc, #208]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005cf2:	220d      	movs	r2, #13
 8005cf4:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005cf6:	e140      	b.n	8005f7a <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005cf8:	4b31      	ldr	r3, [pc, #196]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b05      	cmp	r3, #5
 8005cfe:	d12c      	bne.n	8005d5a <ESP_Upkeep+0x6de>
            setTime = false;
 8005d00:	4b44      	ldr	r3, [pc, #272]	@ (8005e14 <ESP_Upkeep+0x798>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005d06:	f009 fd27 	bl	800f758 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	4a42      	ldr	r2, [pc, #264]	@ (8005e18 <ESP_Upkeep+0x79c>)
 8005d0e:	189a      	adds	r2, r3, r2
 8005d10:	4b42      	ldr	r3, [pc, #264]	@ (8005e1c <ESP_Upkeep+0x7a0>)
 8005d12:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005d14:	4b41      	ldr	r3, [pc, #260]	@ (8005e1c <ESP_Upkeep+0x7a0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a41      	ldr	r2, [pc, #260]	@ (8005e20 <ESP_Upkeep+0x7a4>)
 8005d1a:	493d      	ldr	r1, [pc, #244]	@ (8005e10 <ESP_Upkeep+0x794>)
 8005d1c:	2002      	movs	r0, #2
 8005d1e:	f009 f8d7 	bl	800eed0 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005d22:	4b40      	ldr	r3, [pc, #256]	@ (8005e24 <ESP_Upkeep+0x7a8>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b28      	ldr	r3, [pc, #160]	@ (8005dc8 <ESP_Upkeep+0x74c>)
 8005d28:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005d2a:	f7ff f95d 	bl	8004fe8 <clearDMABuffer>
            stop = HAL_GetTick();
 8005d2e:	f009 fd13 	bl	800f758 <HAL_GetTick>
 8005d32:	0002      	movs	r2, r0
 8005d34:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005d36:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005d38:	4b2b      	ldr	r3, [pc, #172]	@ (8005de8 <ESP_Upkeep+0x76c>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <ESP_Upkeep+0x770>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	4a39      	ldr	r2, [pc, #228]	@ (8005e28 <ESP_Upkeep+0x7ac>)
 8005d44:	4932      	ldr	r1, [pc, #200]	@ (8005e10 <ESP_Upkeep+0x794>)
 8005d46:	2002      	movs	r0, #2
 8005d48:	f009 f8c2 	bl	800eed0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005d4e:	220d      	movs	r2, #13
 8005d50:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005d52:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <ESP_Upkeep+0x744>)
 8005d54:	2202      	movs	r2, #2
 8005d56:	701a      	strb	r2, [r3, #0]
    break;
 8005d58:	e10f      	b.n	8005f7a <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005d5c:	2209      	movs	r2, #9
 8005d5e:	701a      	strb	r2, [r3, #0]
    break;
 8005d60:	e10b      	b.n	8005f7a <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005d62:	4b32      	ldr	r3, [pc, #200]	@ (8005e2c <ESP_Upkeep+0x7b0>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005d68:	4b31      	ldr	r3, [pc, #196]	@ (8005e30 <ESP_Upkeep+0x7b4>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f00a ff83 	bl	8010c7a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005d74:	2001      	movs	r0, #1
 8005d76:	f009 fcf9 	bl	800f76c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005d7a:	2380      	movs	r3, #128	@ 0x80
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	482d      	ldr	r0, [pc, #180]	@ (8005e34 <ESP_Upkeep+0x7b8>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	0019      	movs	r1, r3
 8005d84:	f00a ff79 	bl	8010c7a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005d88:	2001      	movs	r0, #1
 8005d8a:	f009 fcef 	bl	800f76c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005d8e:	4b28      	ldr	r3, [pc, #160]	@ (8005e30 <ESP_Upkeep+0x7b4>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	2102      	movs	r1, #2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f00a ff70 	bl	8010c7a <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <ESP_Upkeep+0x748>)
 8005d9c:	2209      	movs	r2, #9
 8005d9e:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005da0:	f003 fa34 	bl	800920c <EnabledConnectedDevices>
      HAL_Delay(1);
 8005da4:	2001      	movs	r0, #1
 8005da6:	f009 fce1 	bl	800f76c <HAL_Delay>
      ResetESPIndicator();
 8005daa:	f007 ff9b 	bl	800dce4 <ResetESPIndicator>
      errorcntr = 0;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <ESP_Upkeep+0x760>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005db4:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <ESP_Upkeep+0x77c>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
      break;
 8005dba:	e0e1      	b.n	8005f80 <ESP_Upkeep+0x904>
 8005dbc:	2000054f 	.word	0x2000054f
 8005dc0:	2000061f 	.word	0x2000061f
 8005dc4:	20000030 	.word	0x20000030
 8005dc8:	20000618 	.word	0x20000618
 8005dcc:	2000061d 	.word	0x2000061d
 8005dd0:	20000033 	.word	0x20000033
 8005dd4:	2000061e 	.word	0x2000061e
 8005dd8:	20000612 	.word	0x20000612
 8005ddc:	20000613 	.word	0x20000613
 8005de0:	0003a980 	.word	0x0003a980
 8005de4:	20000554 	.word	0x20000554
 8005de8:	20000568 	.word	0x20000568
 8005dec:	20000564 	.word	0x20000564
 8005df0:	080247d0 	.word	0x080247d0
 8005df4:	08023be4 	.word	0x08023be4
 8005df8:	20000614 	.word	0x20000614
 8005dfc:	08024804 	.word	0x08024804
 8005e00:	0000c350 	.word	0x0000c350
 8005e04:	08024840 	.word	0x08024840
 8005e08:	20000608 	.word	0x20000608
 8005e0c:	08024870 	.word	0x08024870
 8005e10:	08024888 	.word	0x08024888
 8005e14:	20000001 	.word	0x20000001
 8005e18:	047e7c4f 	.word	0x047e7c4f
 8005e1c:	20000028 	.word	0x20000028
 8005e20:	0802488c 	.word	0x0802488c
 8005e24:	2000002c 	.word	0x2000002c
 8005e28:	080248d0 	.word	0x080248d0
 8005e2c:	2000054c 	.word	0x2000054c
 8005e30:	50001c00 	.word	0x50001c00
 8005e34:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005e38:	4b54      	ldr	r3, [pc, #336]	@ (8005f8c <ESP_Upkeep+0x910>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f008 fff1 	bl	800ee24 <TimestampIsReached>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d103      	bne.n	8005e4e <ESP_Upkeep+0x7d2>
 8005e46:	4b52      	ldr	r3, [pc, #328]	@ (8005f90 <ESP_Upkeep+0x914>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d043      	beq.n	8005ed6 <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005e4e:	4b51      	ldr	r3, [pc, #324]	@ (8005f94 <ESP_Upkeep+0x918>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005e54:	4b50      	ldr	r3, [pc, #320]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8005f9c <ESP_Upkeep+0x920>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e62:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e64:	220b      	movs	r2, #11
 8005e66:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d108      	bne.n	8005e82 <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005e70:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa4 <ESP_Upkeep+0x928>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005e76:	4b4c      	ldr	r3, [pc, #304]	@ (8005fa8 <ESP_Upkeep+0x92c>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e7c:	4b48      	ldr	r3, [pc, #288]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e7e:	220b      	movs	r2, #11
 8005e80:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005e82:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d102      	bne.n	8005e90 <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005e8a:	4b45      	ldr	r3, [pc, #276]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005e90:	4b41      	ldr	r3, [pc, #260]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d108      	bne.n	8005eaa <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005e98:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005e9a:	220e      	movs	r2, #14
 8005e9c:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005e9e:	4a43      	ldr	r2, [pc, #268]	@ (8005fac <ESP_Upkeep+0x930>)
 8005ea0:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <ESP_Upkeep+0x934>)
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	2002      	movs	r0, #2
 8005ea6:	f009 f813 	bl	800eed0 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d105      	bne.n	8005ebe <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005eb4:	220b      	movs	r2, #11
 8005eb6:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fb4 <ESP_Upkeep+0x938>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ebe:	4b34      	ldr	r3, [pc, #208]	@ (8005f90 <ESP_Upkeep+0x914>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <ESP_Upkeep+0x88c>
 8005ec6:	4b34      	ldr	r3, [pc, #208]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d01c      	beq.n	8005f08 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005ece:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ed4:	e018      	b.n	8005f08 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ed6:	4b38      	ldr	r3, [pc, #224]	@ (8005fb8 <ESP_Upkeep+0x93c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f008 ffa2 	bl	800ee24 <TimestampIsReached>
 8005ee0:	1e03      	subs	r3, r0, #0
 8005ee2:	d04c      	beq.n	8005f7e <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d148      	bne.n	8005f7e <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005eec:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <ESP_Upkeep+0x91c>)
 8005eee:	2205      	movs	r2, #5
 8005ef0:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005ef8:	4b24      	ldr	r3, [pc, #144]	@ (8005f8c <ESP_Upkeep+0x910>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	4b2f      	ldr	r3, [pc, #188]	@ (8005fbc <ESP_Upkeep+0x940>)
 8005efe:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005f00:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc0 <ESP_Upkeep+0x944>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005f06:	e03a      	b.n	8005f7e <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f08:	46c0      	nop			@ (mov r8, r8)
      break;
 8005f0a:	e038      	b.n	8005f7e <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc4 <ESP_Upkeep+0x948>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4053      	eors	r3, r2
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005f1a:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <ESP_Upkeep+0x930>)
 8005f1c:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <ESP_Upkeep+0x934>)
 8005f1e:	0019      	movs	r1, r3
 8005f20:	2002      	movs	r0, #2
 8005f22:	f008 ffd5 	bl	800eed0 <CreateLine>
        msgdone = true;
 8005f26:	4b27      	ldr	r3, [pc, #156]	@ (8005fc4 <ESP_Upkeep+0x948>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005f2c:	f017 fc54 	bl	801d7d8 <GetUsbRxPointer>
 8005f30:	0003      	movs	r3, r0
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 f8c0 	bl	80060b8 <Process_PC_Config>
      break;
 8005f38:	e022      	b.n	8005f80 <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005f3a:	4a23      	ldr	r2, [pc, #140]	@ (8005fc8 <ESP_Upkeep+0x94c>)
 8005f3c:	4b23      	ldr	r3, [pc, #140]	@ (8005fcc <ESP_Upkeep+0x950>)
 8005f3e:	0019      	movs	r1, r3
 8005f40:	2001      	movs	r0, #1
 8005f42:	f008 ffc5 	bl	800eed0 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005f46:	4b16      	ldr	r3, [pc, #88]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005f48:	2202      	movs	r2, #2
 8005f4a:	701a      	strb	r2, [r3, #0]
      break;
 8005f4c:	e018      	b.n	8005f80 <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005f4e:	4a20      	ldr	r2, [pc, #128]	@ (8005fd0 <ESP_Upkeep+0x954>)
 8005f50:	4b1e      	ldr	r3, [pc, #120]	@ (8005fcc <ESP_Upkeep+0x950>)
 8005f52:	0019      	movs	r1, r3
 8005f54:	2001      	movs	r0, #1
 8005f56:	f008 ffbb 	bl	800eed0 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005f5a:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005f5c:	2207      	movs	r2, #7
 8005f5e:	701a      	strb	r2, [r3, #0]
      break;
 8005f60:	e00e      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	e00c      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	e00a      	b.n	8005f80 <ESP_Upkeep+0x904>
        break;
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	e008      	b.n	8005f80 <ESP_Upkeep+0x904>
    break;
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	e006      	b.n	8005f80 <ESP_Upkeep+0x904>
    break;
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	e004      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	e002      	b.n	8005f80 <ESP_Upkeep+0x904>
    break;
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	e000      	b.n	8005f80 <ESP_Upkeep+0x904>
      break;
 8005f7e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <ESP_Upkeep+0x924>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
}
 8005f84:	0018      	movs	r0, r3
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f8c:	20000618 	.word	0x20000618
 8005f90:	2000054f 	.word	0x2000054f
 8005f94:	20000554 	.word	0x20000554
 8005f98:	2000061f 	.word	0x2000061f
 8005f9c:	2000054d 	.word	0x2000054d
 8005fa0:	20000030 	.word	0x20000030
 8005fa4:	20000550 	.word	0x20000550
 8005fa8:	20000552 	.word	0x20000552
 8005fac:	080248f0 	.word	0x080248f0
 8005fb0:	08024888 	.word	0x08024888
 8005fb4:	20000551 	.word	0x20000551
 8005fb8:	20000028 	.word	0x20000028
 8005fbc:	2000002c 	.word	0x2000002c
 8005fc0:	20000001 	.word	0x20000001
 8005fc4:	20000553 	.word	0x20000553
 8005fc8:	08024908 	.word	0x08024908
 8005fcc:	08023be4 	.word	0x08023be4
 8005fd0:	0802491c 	.word	0x0802491c

08005fd4 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005fdc:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <I2CSensors_Init+0x30>)
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005fe2:	4a09      	ldr	r2, [pc, #36]	@ (8006008 <I2CSensors_Init+0x34>)
 8005fe4:	4b09      	ldr	r3, [pc, #36]	@ (800600c <I2CSensors_Init+0x38>)
 8005fe6:	0011      	movs	r1, r2
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f009 f8d5 	bl	800f198 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005fee:	4a06      	ldr	r2, [pc, #24]	@ (8006008 <I2CSensors_Init+0x34>)
 8005ff0:	4b06      	ldr	r3, [pc, #24]	@ (800600c <I2CSensors_Init+0x38>)
 8005ff2:	0011      	movs	r1, r2
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f006 f863 	bl	800c0c0 <SGP_Init>
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b002      	add	sp, #8
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	20000768 	.word	0x20000768
 8006008:	08006065 	.word	0x08006065
 800600c:	08006011 	.word	0x08006011

08006010 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6039      	str	r1, [r7, #0]
 8006018:	0011      	movs	r1, r2
 800601a:	1dfb      	adds	r3, r7, #7
 800601c:	1c02      	adds	r2, r0, #0
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	1dbb      	adds	r3, r7, #6
 8006022:	1c0a      	adds	r2, r1, #0
 8006024:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006026:	4b0e      	ldr	r3, [pc, #56]	@ (8006060 <ReadI2C+0x50>)
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	1dfb      	adds	r3, r7, #7
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	18db      	adds	r3, r3, r3
 8006032:	b299      	uxth	r1, r3
 8006034:	1dbb      	adds	r3, r7, #6
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	250f      	movs	r5, #15
 800603c:	197c      	adds	r4, r7, r5
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	f00b fa00 	bl	8011444 <HAL_I2C_Master_Receive_DMA>
 8006044:	0003      	movs	r3, r0
 8006046:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006048:	197b      	adds	r3, r7, r5
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <ReadI2C+0x44>
        return false;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <ReadI2C+0x46>
    }
    return true;
 8006054:	2301      	movs	r3, #1
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b004      	add	sp, #16
 800605c:	bdb0      	pop	{r4, r5, r7, pc}
 800605e:	46c0      	nop			@ (mov r8, r8)
 8006060:	20000768 	.word	0x20000768

08006064 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006064:	b5b0      	push	{r4, r5, r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6039      	str	r1, [r7, #0]
 800606c:	0011      	movs	r1, r2
 800606e:	1dfb      	adds	r3, r7, #7
 8006070:	1c02      	adds	r2, r0, #0
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	1dbb      	adds	r3, r7, #6
 8006076:	1c0a      	adds	r2, r1, #0
 8006078:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800607a:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <WriteI2C+0x50>)
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	1dfb      	adds	r3, r7, #7
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	18db      	adds	r3, r3, r3
 8006086:	b299      	uxth	r1, r3
 8006088:	1dbb      	adds	r3, r7, #6
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	250f      	movs	r5, #15
 8006090:	197c      	adds	r4, r7, r5
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	f00b f8d0 	bl	8011238 <HAL_I2C_Master_Transmit_DMA>
 8006098:	0003      	movs	r3, r0
 800609a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800609c:	197b      	adds	r3, r7, r5
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <WriteI2C+0x44>
        return false;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <WriteI2C+0x46>
    }
    return true;
 80060a8:	2301      	movs	r3, #1
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bdb0      	pop	{r4, r5, r7, pc}
 80060b2:	46c0      	nop			@ (mov r8, r8)
 80060b4:	20000768 	.word	0x20000768

080060b8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b0c3      	sub	sp, #268	@ 0x10c
 80060bc:	af3e      	add	r7, sp, #248	@ 0xf8
 80060be:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80060c0:	f017 fbaa 	bl	801d818 <GetUsbRxDataSize>
 80060c4:	0003      	movs	r3, r0
 80060c6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d971      	bls.n	80061b2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2123      	movs	r1, #35	@ 0x23
 80060d2:	0018      	movs	r0, r3
 80060d4:	f01a fdc2 	bl	8020c5c <strchr>
 80060d8:	0003      	movs	r3, r0
 80060da:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d065      	beq.n	80061ae <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785a      	ldrb	r2, [r3, #1]
 80060e6:	4b34      	ldr	r3, [pc, #208]	@ (80061b8 <Process_PC_Config+0x100>)
 80060e8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	789a      	ldrb	r2, [r3, #2]
 80060ee:	4b32      	ldr	r3, [pc, #200]	@ (80061b8 <Process_PC_Config+0x100>)
 80060f0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80060f2:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <Process_PC_Config+0x100>)
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	3305      	adds	r3, #5
 80060f8:	001a      	movs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d351      	bcc.n	80061a4 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	1cd9      	adds	r1, r3, #3
 8006104:	4b2c      	ldr	r3, [pc, #176]	@ (80061b8 <Process_PC_Config+0x100>)
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	001a      	movs	r2, r3
 800610a:	4b2c      	ldr	r3, [pc, #176]	@ (80061bc <Process_PC_Config+0x104>)
 800610c:	0018      	movs	r0, r3
 800610e:	f01a fe79 	bl	8020e04 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <Process_PC_Config+0x100>)
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	3303      	adds	r3, #3
 8006118:	001a      	movs	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	189b      	adds	r3, r3, r2
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	021b      	lsls	r3, r3, #8
 8006122:	b21a      	sxth	r2, r3
 8006124:	4b24      	ldr	r3, [pc, #144]	@ (80061b8 <Process_PC_Config+0x100>)
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	3304      	adds	r3, #4
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	18cb      	adds	r3, r1, r3
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	b21b      	sxth	r3, r3
 8006132:	4313      	orrs	r3, r2
 8006134:	b21b      	sxth	r3, r3
 8006136:	b299      	uxth	r1, r3
 8006138:	4a1f      	ldr	r2, [pc, #124]	@ (80061b8 <Process_PC_Config+0x100>)
 800613a:	2381      	movs	r3, #129	@ 0x81
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006140:	4a1d      	ldr	r2, [pc, #116]	@ (80061b8 <Process_PC_Config+0x100>)
 8006142:	2381      	movs	r3, #129	@ 0x81
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	5ad4      	ldrh	r4, [r2, r3]
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <Process_PC_Config+0x100>)
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	3303      	adds	r3, #3
 800614e:	b29a      	uxth	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	0011      	movs	r1, r2
 8006154:	0018      	movs	r0, r3
 8006156:	f000 f9b5 	bl	80064c4 <CRC16_ARC>
 800615a:	0003      	movs	r3, r0
 800615c:	429c      	cmp	r4, r3
 800615e:	d007      	beq.n	8006170 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8006160:	4b15      	ldr	r3, [pc, #84]	@ (80061b8 <Process_PC_Config+0x100>)
 8006162:	785a      	ldrb	r2, [r3, #1]
 8006164:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <Process_PC_Config+0x104>)
 8006166:	0019      	movs	r1, r3
 8006168:	2001      	movs	r0, #1
 800616a:	f000 f959 	bl	8006420 <Create_Message>
 800616e:	e016      	b.n	800619e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8006170:	4c11      	ldr	r4, [pc, #68]	@ (80061b8 <Process_PC_Config+0x100>)
 8006172:	466b      	mov	r3, sp
 8006174:	0018      	movs	r0, r3
 8006176:	0023      	movs	r3, r4
 8006178:	3310      	adds	r3, #16
 800617a:	22f4      	movs	r2, #244	@ 0xf4
 800617c:	0019      	movs	r1, r3
 800617e:	f01a fe41 	bl	8020e04 <memcpy>
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	68a2      	ldr	r2, [r4, #8]
 8006188:	68e3      	ldr	r3, [r4, #12]
 800618a:	f000 f819 	bl	80061c0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <Process_PC_Config+0x100>)
 8006190:	7818      	ldrb	r0, [r3, #0]
 8006192:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <Process_PC_Config+0x100>)
 8006194:	785a      	ldrb	r2, [r3, #1]
 8006196:	4b09      	ldr	r3, [pc, #36]	@ (80061bc <Process_PC_Config+0x104>)
 8006198:	0019      	movs	r1, r3
 800619a:	f000 f941 	bl	8006420 <Create_Message>
                }
                ResetUsbRxDataSize();
 800619e:	f017 fb23 	bl	801d7e8 <ResetUsbRxDataSize>
                return;
 80061a2:	e006      	b.n	80061b2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f017 fb40 	bl	801d82c <GetUsbRxNextChunk>
 80061ac:	e001      	b.n	80061b2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80061ae:	f017 fb1b 	bl	801d7e8 <ResetUsbRxDataSize>
        }
    }
}
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b005      	add	sp, #20
 80061b6:	bd90      	pop	{r4, r7, pc}
 80061b8:	2000076c 	.word	0x2000076c
 80061bc:	2000076e 	.word	0x2000076e

080061c0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80061c0:	b084      	sub	sp, #16
 80061c2:	b5b0      	push	{r4, r5, r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af04      	add	r7, sp, #16
 80061c8:	2518      	movs	r5, #24
 80061ca:	197c      	adds	r4, r7, r5
 80061cc:	6020      	str	r0, [r4, #0]
 80061ce:	6061      	str	r1, [r4, #4]
 80061d0:	60a2      	str	r2, [r4, #8]
 80061d2:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80061d4:	197b      	adds	r3, r7, r5
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2bfe      	cmp	r3, #254	@ 0xfe
 80061da:	d100      	bne.n	80061de <ProcessCmd+0x1e>
 80061dc:	e0d5      	b.n	800638a <ProcessCmd+0x1ca>
 80061de:	dd00      	ble.n	80061e2 <ProcessCmd+0x22>
 80061e0:	e0f5      	b.n	80063ce <ProcessCmd+0x20e>
 80061e2:	2b0c      	cmp	r3, #12
 80061e4:	dc0a      	bgt.n	80061fc <ProcessCmd+0x3c>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da00      	bge.n	80061ec <ProcessCmd+0x2c>
 80061ea:	e0f0      	b.n	80063ce <ProcessCmd+0x20e>
 80061ec:	2b0c      	cmp	r3, #12
 80061ee:	d900      	bls.n	80061f2 <ProcessCmd+0x32>
 80061f0:	e0ed      	b.n	80063ce <ProcessCmd+0x20e>
 80061f2:	009a      	lsls	r2, r3, #2
 80061f4:	4b79      	ldr	r3, [pc, #484]	@ (80063dc <ProcessCmd+0x21c>)
 80061f6:	18d3      	adds	r3, r2, r3
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	469f      	mov	pc, r3
 80061fc:	2bfd      	cmp	r3, #253	@ 0xfd
 80061fe:	d100      	bne.n	8006202 <ProcessCmd+0x42>
 8006200:	e0bd      	b.n	800637e <ProcessCmd+0x1be>
            }
            break;
        }
    }

}
 8006202:	e0e4      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006204:	2118      	movs	r1, #24
 8006206:	187b      	adds	r3, r7, r1
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	001a      	movs	r2, r3
 800620c:	000c      	movs	r4, r1
 800620e:	187b      	adds	r3, r7, r1
 8006210:	1c99      	adds	r1, r3, #2
 8006212:	4873      	ldr	r0, [pc, #460]	@ (80063e0 <ProcessCmd+0x220>)
 8006214:	230c      	movs	r3, #12
 8006216:	f001 fc23 	bl	8007a60 <WriteUint8ArrayEepromSafe>
            Debug("BoxConfigAddr 0x%X, msg.Payload %s, msg.PayloadLength: %d, IdSize: %d", BoxConfigAddr, *msg.Payload, msg.PayloadLength, IdSize);
 800621a:	0022      	movs	r2, r4
 800621c:	18bb      	adds	r3, r7, r2
 800621e:	789b      	ldrb	r3, [r3, #2]
 8006220:	001c      	movs	r4, r3
 8006222:	18bb      	adds	r3, r7, r2
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	001d      	movs	r5, r3
 8006228:	486d      	ldr	r0, [pc, #436]	@ (80063e0 <ProcessCmd+0x220>)
 800622a:	4a6e      	ldr	r2, [pc, #440]	@ (80063e4 <ProcessCmd+0x224>)
 800622c:	496e      	ldr	r1, [pc, #440]	@ (80063e8 <ProcessCmd+0x228>)
 800622e:	230c      	movs	r3, #12
 8006230:	9302      	str	r3, [sp, #8]
 8006232:	9501      	str	r5, [sp, #4]
 8006234:	9400      	str	r4, [sp, #0]
 8006236:	0003      	movs	r3, r0
 8006238:	2003      	movs	r0, #3
 800623a:	f008 fe49 	bl	800eed0 <CreateLine>
        break;
 800623e:	e0c6      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006240:	2118      	movs	r1, #24
 8006242:	187b      	adds	r3, r7, r1
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	001a      	movs	r2, r3
 8006248:	187b      	adds	r3, r7, r1
 800624a:	1c99      	adds	r1, r3, #2
 800624c:	4867      	ldr	r0, [pc, #412]	@ (80063ec <ProcessCmd+0x22c>)
 800624e:	230c      	movs	r3, #12
 8006250:	f001 fc06 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 8006254:	e0bb      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006256:	2118      	movs	r1, #24
 8006258:	187b      	adds	r3, r7, r1
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	001a      	movs	r2, r3
 800625e:	187b      	adds	r3, r7, r1
 8006260:	1c99      	adds	r1, r3, #2
 8006262:	4863      	ldr	r0, [pc, #396]	@ (80063f0 <ProcessCmd+0x230>)
 8006264:	230c      	movs	r3, #12
 8006266:	f001 fbfb 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 800626a:	e0b0      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800626c:	2118      	movs	r1, #24
 800626e:	187b      	adds	r3, r7, r1
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	001a      	movs	r2, r3
 8006274:	187b      	adds	r3, r7, r1
 8006276:	1c99      	adds	r1, r3, #2
 8006278:	485e      	ldr	r0, [pc, #376]	@ (80063f4 <ProcessCmd+0x234>)
 800627a:	230c      	movs	r3, #12
 800627c:	f001 fbf0 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 8006280:	e0a5      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006282:	2118      	movs	r1, #24
 8006284:	187b      	adds	r3, r7, r1
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	001a      	movs	r2, r3
 800628a:	187b      	adds	r3, r7, r1
 800628c:	1c99      	adds	r1, r3, #2
 800628e:	485a      	ldr	r0, [pc, #360]	@ (80063f8 <ProcessCmd+0x238>)
 8006290:	230c      	movs	r3, #12
 8006292:	f001 fbe5 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 8006296:	e09a      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006298:	2118      	movs	r1, #24
 800629a:	187b      	adds	r3, r7, r1
 800629c:	785b      	ldrb	r3, [r3, #1]
 800629e:	001a      	movs	r2, r3
 80062a0:	000c      	movs	r4, r1
 80062a2:	187b      	adds	r3, r7, r1
 80062a4:	1c99      	adds	r1, r3, #2
 80062a6:	4855      	ldr	r0, [pc, #340]	@ (80063fc <ProcessCmd+0x23c>)
 80062a8:	230c      	movs	r3, #12
 80062aa:	f001 fbd9 	bl	8007a60 <WriteUint8ArrayEepromSafe>
            Debug("dBaConfigAddr 0x%X, msg.Payload %s, msg.PayloadLength: %d, IdSize: %d", dBaConfigAddr, *msg.Payload, msg.PayloadLength, IdSize);
 80062ae:	0022      	movs	r2, r4
 80062b0:	18bb      	adds	r3, r7, r2
 80062b2:	789b      	ldrb	r3, [r3, #2]
 80062b4:	001c      	movs	r4, r3
 80062b6:	18bb      	adds	r3, r7, r2
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	001d      	movs	r5, r3
 80062bc:	484f      	ldr	r0, [pc, #316]	@ (80063fc <ProcessCmd+0x23c>)
 80062be:	4a50      	ldr	r2, [pc, #320]	@ (8006400 <ProcessCmd+0x240>)
 80062c0:	4949      	ldr	r1, [pc, #292]	@ (80063e8 <ProcessCmd+0x228>)
 80062c2:	230c      	movs	r3, #12
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	9501      	str	r5, [sp, #4]
 80062c8:	9400      	str	r4, [sp, #0]
 80062ca:	0003      	movs	r3, r0
 80062cc:	2003      	movs	r0, #3
 80062ce:	f008 fdff 	bl	800eed0 <CreateLine>
        break;
 80062d2:	e07c      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062d4:	2118      	movs	r1, #24
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	001a      	movs	r2, r3
 80062dc:	000c      	movs	r4, r1
 80062de:	187b      	adds	r3, r7, r1
 80062e0:	1c99      	adds	r1, r3, #2
 80062e2:	4848      	ldr	r0, [pc, #288]	@ (8006404 <ProcessCmd+0x244>)
 80062e4:	230c      	movs	r3, #12
 80062e6:	f001 fbbb 	bl	8007a60 <WriteUint8ArrayEepromSafe>
            Debug("dBAConfigAddr 0x%X, msg.Payload %s, msg.PayloadLength: %d, IdSize: %d", dBAConfigAddr, *msg.Payload, msg.PayloadLength, IdSize);
 80062ea:	0022      	movs	r2, r4
 80062ec:	18bb      	adds	r3, r7, r2
 80062ee:	789b      	ldrb	r3, [r3, #2]
 80062f0:	001c      	movs	r4, r3
 80062f2:	18bb      	adds	r3, r7, r2
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	001d      	movs	r5, r3
 80062f8:	4842      	ldr	r0, [pc, #264]	@ (8006404 <ProcessCmd+0x244>)
 80062fa:	4a43      	ldr	r2, [pc, #268]	@ (8006408 <ProcessCmd+0x248>)
 80062fc:	493a      	ldr	r1, [pc, #232]	@ (80063e8 <ProcessCmd+0x228>)
 80062fe:	230c      	movs	r3, #12
 8006300:	9302      	str	r3, [sp, #8]
 8006302:	9501      	str	r5, [sp, #4]
 8006304:	9400      	str	r4, [sp, #0]
 8006306:	0003      	movs	r3, r0
 8006308:	2003      	movs	r0, #3
 800630a:	f008 fde1 	bl	800eed0 <CreateLine>
        break;
 800630e:	e05e      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8006310:	2118      	movs	r1, #24
 8006312:	187b      	adds	r3, r7, r1
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	001a      	movs	r2, r3
 8006318:	187b      	adds	r3, r7, r1
 800631a:	1c99      	adds	r1, r3, #2
 800631c:	483b      	ldr	r0, [pc, #236]	@ (800640c <ProcessCmd+0x24c>)
 800631e:	2320      	movs	r3, #32
 8006320:	f001 fb9e 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 8006324:	e053      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006326:	2118      	movs	r1, #24
 8006328:	187b      	adds	r3, r7, r1
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	001a      	movs	r2, r3
 800632e:	187b      	adds	r3, r7, r1
 8006330:	1c99      	adds	r1, r3, #2
 8006332:	4837      	ldr	r0, [pc, #220]	@ (8006410 <ProcessCmd+0x250>)
 8006334:	230c      	movs	r3, #12
 8006336:	f001 fb93 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 800633a:	e048      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800633c:	2118      	movs	r1, #24
 800633e:	187b      	adds	r3, r7, r1
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	001a      	movs	r2, r3
 8006344:	187b      	adds	r3, r7, r1
 8006346:	1c99      	adds	r1, r3, #2
 8006348:	4832      	ldr	r0, [pc, #200]	@ (8006414 <ProcessCmd+0x254>)
 800634a:	230c      	movs	r3, #12
 800634c:	f001 fb88 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 8006350:	e03d      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006352:	2118      	movs	r1, #24
 8006354:	187b      	adds	r3, r7, r1
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	001a      	movs	r2, r3
 800635a:	187b      	adds	r3, r7, r1
 800635c:	1c99      	adds	r1, r3, #2
 800635e:	482e      	ldr	r0, [pc, #184]	@ (8006418 <ProcessCmd+0x258>)
 8006360:	230c      	movs	r3, #12
 8006362:	f001 fb7d 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 8006366:	e032      	b.n	80063ce <ProcessCmd+0x20e>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006368:	2118      	movs	r1, #24
 800636a:	187b      	adds	r3, r7, r1
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	001a      	movs	r2, r3
 8006370:	187b      	adds	r3, r7, r1
 8006372:	1c99      	adds	r1, r3, #2
 8006374:	4829      	ldr	r0, [pc, #164]	@ (800641c <ProcessCmd+0x25c>)
 8006376:	230c      	movs	r3, #12
 8006378:	f001 fb72 	bl	8007a60 <WriteUint8ArrayEepromSafe>
        break;
 800637c:	e027      	b.n	80063ce <ProcessCmd+0x20e>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 800637e:	4b18      	ldr	r3, [pc, #96]	@ (80063e0 <ProcessCmd+0x220>)
 8006380:	21bc      	movs	r1, #188	@ 0xbc
 8006382:	0018      	movs	r0, r3
 8006384:	f001 fbb1 	bl	8007aea <ClearEEprom>
        break;
 8006388:	e021      	b.n	80063ce <ProcessCmd+0x20e>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800638a:	2118      	movs	r1, #24
 800638c:	187b      	adds	r3, r7, r1
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	b21a      	sxth	r2, r3
 8006394:	187b      	adds	r3, r7, r1
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	b21b      	sxth	r3, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	b21a      	sxth	r2, r3
 800639e:	1dbb      	adds	r3, r7, #6
 80063a0:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80063a2:	1dbb      	adds	r3, r7, #6
 80063a4:	881a      	ldrh	r2, [r3, #0]
 80063a6:	23c0      	movs	r3, #192	@ 0xc0
 80063a8:	015b      	lsls	r3, r3, #5
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d207      	bcs.n	80063be <ProcessCmd+0x1fe>
                ClearEEprom(EEPromStartAddr, size);
 80063ae:	1dbb      	adds	r3, r7, #6
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	4a0b      	ldr	r2, [pc, #44]	@ (80063e0 <ProcessCmd+0x220>)
 80063b4:	0019      	movs	r1, r3
 80063b6:	0010      	movs	r0, r2
 80063b8:	f001 fb97 	bl	8007aea <ClearEEprom>
            break;
 80063bc:	e006      	b.n	80063cc <ProcessCmd+0x20c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80063be:	23c0      	movs	r3, #192	@ 0xc0
 80063c0:	015b      	lsls	r3, r3, #5
 80063c2:	4a07      	ldr	r2, [pc, #28]	@ (80063e0 <ProcessCmd+0x220>)
 80063c4:	0019      	movs	r1, r3
 80063c6:	0010      	movs	r0, r2
 80063c8:	f001 fb8f 	bl	8007aea <ClearEEprom>
            break;
 80063cc:	46c0      	nop			@ (mov r8, r8)
}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	46bd      	mov	sp, r7
 80063d2:	b002      	add	sp, #8
 80063d4:	bcb0      	pop	{r4, r5, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	b004      	add	sp, #16
 80063da:	4718      	bx	r3
 80063dc:	080264ac 	.word	0x080264ac
 80063e0:	08080000 	.word	0x08080000
 80063e4:	0802494c 	.word	0x0802494c
 80063e8:	08024994 	.word	0x08024994
 80063ec:	0808000c 	.word	0x0808000c
 80063f0:	08080018 	.word	0x08080018
 80063f4:	08080024 	.word	0x08080024
 80063f8:	08080030 	.word	0x08080030
 80063fc:	0808003c 	.word	0x0808003c
 8006400:	08024998 	.word	0x08024998
 8006404:	08080048 	.word	0x08080048
 8006408:	080249e0 	.word	0x080249e0
 800640c:	08080090 	.word	0x08080090
 8006410:	08080078 	.word	0x08080078
 8006414:	0808006c 	.word	0x0808006c
 8006418:	08080060 	.word	0x08080060
 800641c:	08080054 	.word	0x08080054

08006420 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6039      	str	r1, [r7, #0]
 8006428:	0011      	movs	r1, r2
 800642a:	1dfb      	adds	r3, r7, #7
 800642c:	1c02      	adds	r2, r0, #0
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	1dbb      	adds	r3, r7, #6
 8006432:	1c0a      	adds	r2, r1, #0
 8006434:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8006436:	2223      	movs	r2, #35	@ 0x23
 8006438:	4b20      	ldr	r3, [pc, #128]	@ (80064bc <Create_Message+0x9c>)
 800643a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800643c:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <Create_Message+0x9c>)
 800643e:	1dfa      	adds	r2, r7, #7
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006444:	4b1d      	ldr	r3, [pc, #116]	@ (80064bc <Create_Message+0x9c>)
 8006446:	1dba      	adds	r2, r7, #6
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800644c:	1dbb      	adds	r3, r7, #6
 800644e:	781a      	ldrb	r2, [r3, #0]
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	4b1b      	ldr	r3, [pc, #108]	@ (80064c0 <Create_Message+0xa0>)
 8006454:	0018      	movs	r0, r3
 8006456:	f01a fcd5 	bl	8020e04 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800645a:	1dbb      	adds	r3, r7, #6
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b29a      	uxth	r2, r3
 8006460:	250e      	movs	r5, #14
 8006462:	197b      	adds	r3, r7, r5
 8006464:	3203      	adds	r2, #3
 8006466:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8006468:	260c      	movs	r6, #12
 800646a:	19bc      	adds	r4, r7, r6
 800646c:	197b      	adds	r3, r7, r5
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <Create_Message+0x9c>)
 8006472:	0011      	movs	r1, r2
 8006474:	0018      	movs	r0, r3
 8006476:	f000 f825 	bl	80064c4 <CRC16_ARC>
 800647a:	0003      	movs	r3, r0
 800647c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800647e:	0030      	movs	r0, r6
 8006480:	183b      	adds	r3, r7, r0
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	b29a      	uxth	r2, r3
 8006488:	197b      	adds	r3, r7, r5
 800648a:	881b      	ldrh	r3, [r3, #0]
 800648c:	b2d1      	uxtb	r1, r2
 800648e:	4a0b      	ldr	r2, [pc, #44]	@ (80064bc <Create_Message+0x9c>)
 8006490:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006492:	197b      	adds	r3, r7, r5
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	183a      	adds	r2, r7, r0
 800649a:	8812      	ldrh	r2, [r2, #0]
 800649c:	b2d1      	uxtb	r1, r2
 800649e:	4a07      	ldr	r2, [pc, #28]	@ (80064bc <Create_Message+0x9c>)
 80064a0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80064a2:	197b      	adds	r3, r7, r5
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	3302      	adds	r3, #2
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <Create_Message+0x9c>)
 80064ac:	0011      	movs	r1, r2
 80064ae:	0018      	movs	r0, r3
 80064b0:	f017 f958 	bl	801d764 <CDC_Transmit_FS>
}
 80064b4:	46c0      	nop			@ (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b005      	add	sp, #20
 80064ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064bc:	20000878 	.word	0x20000878
 80064c0:	2000087b 	.word	0x2000087b

080064c4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	000a      	movs	r2, r1
 80064ce:	1cbb      	adds	r3, r7, #2
 80064d0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80064d2:	2316      	movs	r3, #22
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	2200      	movs	r2, #0
 80064d8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80064da:	2300      	movs	r3, #0
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	e02e      	b.n	800653e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	18d3      	adds	r3, r2, r3
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	0019      	movs	r1, r3
 80064ea:	2216      	movs	r2, #22
 80064ec:	18bb      	adds	r3, r7, r2
 80064ee:	18ba      	adds	r2, r7, r2
 80064f0:	8812      	ldrh	r2, [r2, #0]
 80064f2:	404a      	eors	r2, r1
 80064f4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e01a      	b.n	8006532 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80064fc:	2116      	movs	r1, #22
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	2201      	movs	r2, #1
 8006504:	4013      	ands	r3, r2
 8006506:	d00b      	beq.n	8006520 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006508:	187b      	adds	r3, r7, r1
 800650a:	187a      	adds	r2, r7, r1
 800650c:	8812      	ldrh	r2, [r2, #0]
 800650e:	0852      	lsrs	r2, r2, #1
 8006510:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8006512:	187b      	adds	r3, r7, r1
 8006514:	187a      	adds	r2, r7, r1
 8006516:	8812      	ldrh	r2, [r2, #0]
 8006518:	490f      	ldr	r1, [pc, #60]	@ (8006558 <CRC16_ARC+0x94>)
 800651a:	404a      	eors	r2, r1
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	e005      	b.n	800652c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8006520:	2216      	movs	r2, #22
 8006522:	18bb      	adds	r3, r7, r2
 8006524:	18ba      	adds	r2, r7, r2
 8006526:	8812      	ldrh	r2, [r2, #0]
 8006528:	0852      	lsrs	r2, r2, #1
 800652a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3301      	adds	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b07      	cmp	r3, #7
 8006536:	dde1      	ble.n	80064fc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3301      	adds	r3, #1
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	1cbb      	adds	r3, r7, #2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	dbcb      	blt.n	80064e0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8006548:	2316      	movs	r3, #22
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	881b      	ldrh	r3, [r3, #0]
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b006      	add	sp, #24
 8006554:	bd80      	pop	{r7, pc}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	ffffa001 	.word	0xffffa001

0800655c <printf_USB>:

void printf_USB(const char* message, ...)
{
 800655c:	b40f      	push	{r0, r1, r2, r3}
 800655e:	b590      	push	{r4, r7, lr}
 8006560:	b0a9      	sub	sp, #164	@ 0xa4
 8006562:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8006564:	23ac      	movs	r3, #172	@ 0xac
 8006566:	2108      	movs	r1, #8
 8006568:	185b      	adds	r3, r3, r1
 800656a:	19db      	adds	r3, r3, r7
 800656c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	23a8      	movs	r3, #168	@ 0xa8
 8006572:	185b      	adds	r3, r3, r1
 8006574:	19db      	adds	r3, r3, r7
 8006576:	6819      	ldr	r1, [r3, #0]
 8006578:	2408      	movs	r4, #8
 800657a:	193b      	adds	r3, r7, r4
 800657c:	0018      	movs	r0, r3
 800657e:	f01a fab9 	bl	8020af4 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8006582:	193b      	adds	r3, r7, r4
 8006584:	0018      	movs	r0, r3
 8006586:	f7f9 fdf1 	bl	800016c <strlen>
 800658a:	0003      	movs	r3, r0
 800658c:	b29a      	uxth	r2, r3
 800658e:	193b      	adds	r3, r7, r4
 8006590:	0011      	movs	r1, r2
 8006592:	0018      	movs	r0, r3
 8006594:	f017 f8e6 	bl	801d764 <CDC_Transmit_FS>
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b029      	add	sp, #164	@ 0xa4
 800659e:	bc90      	pop	{r4, r7}
 80065a0:	bc08      	pop	{r3}
 80065a2:	b004      	add	sp, #16
 80065a4:	4718      	bx	r3
	...

080065a8 <PC_USB_show_Keys>:

void PC_USB_show_Keys() {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80065ac:	4b77      	ldr	r3, [pc, #476]	@ (800678c <PC_USB_show_Keys+0x1e4>)
 80065ae:	4878      	ldr	r0, [pc, #480]	@ (8006790 <PC_USB_show_Keys+0x1e8>)
 80065b0:	220c      	movs	r2, #12
 80065b2:	0019      	movs	r1, r3
 80065b4:	f001 fa70 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 80065b8:	4a74      	ldr	r2, [pc, #464]	@ (800678c <PC_USB_show_Keys+0x1e4>)
 80065ba:	4b76      	ldr	r3, [pc, #472]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80065bc:	0011      	movs	r1, r2
 80065be:	0018      	movs	r0, r3
 80065c0:	f7fd fb8e 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("Overview of stored keys:\r\n");
 80065c4:	4b74      	ldr	r3, [pc, #464]	@ (8006798 <PC_USB_show_Keys+0x1f0>)
 80065c6:	0018      	movs	r0, r3
 80065c8:	f7ff ffc8 	bl	800655c <printf_USB>
  printf_USB("Box id:----------------------- %s\r\n", Buffer);
 80065cc:	4a71      	ldr	r2, [pc, #452]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80065ce:	4b73      	ldr	r3, [pc, #460]	@ (800679c <PC_USB_show_Keys+0x1f4>)
 80065d0:	0011      	movs	r1, r2
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7ff ffc2 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80065d8:	4b71      	ldr	r3, [pc, #452]	@ (80067a0 <PC_USB_show_Keys+0x1f8>)
 80065da:	4872      	ldr	r0, [pc, #456]	@ (80067a4 <PC_USB_show_Keys+0x1fc>)
 80065dc:	220c      	movs	r2, #12
 80065de:	0019      	movs	r1, r3
 80065e0:	f001 fa5a 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 80065e4:	4a6e      	ldr	r2, [pc, #440]	@ (80067a0 <PC_USB_show_Keys+0x1f8>)
 80065e6:	4b6b      	ldr	r3, [pc, #428]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f7fd fb78 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("1 - Temperature sensor id:---- %s\r\n", Buffer);
 80065f0:	4a68      	ldr	r2, [pc, #416]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80065f2:	4b6d      	ldr	r3, [pc, #436]	@ (80067a8 <PC_USB_show_Keys+0x200>)
 80065f4:	0011      	movs	r1, r2
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7ff ffb0 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 80065fc:	4b6b      	ldr	r3, [pc, #428]	@ (80067ac <PC_USB_show_Keys+0x204>)
 80065fe:	486c      	ldr	r0, [pc, #432]	@ (80067b0 <PC_USB_show_Keys+0x208>)
 8006600:	220c      	movs	r2, #12
 8006602:	0019      	movs	r1, r3
 8006604:	f001 fa48 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8006608:	4a68      	ldr	r2, [pc, #416]	@ (80067ac <PC_USB_show_Keys+0x204>)
 800660a:	4b62      	ldr	r3, [pc, #392]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f7fd fb66 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("2 - Humidity sensor id:------- %s\r\n", Buffer);
 8006614:	4a5f      	ldr	r2, [pc, #380]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006616:	4b67      	ldr	r3, [pc, #412]	@ (80067b4 <PC_USB_show_Keys+0x20c>)
 8006618:	0011      	movs	r1, r2
 800661a:	0018      	movs	r0, r3
 800661c:	f7ff ff9e 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8006620:	4b65      	ldr	r3, [pc, #404]	@ (80067b8 <PC_USB_show_Keys+0x210>)
 8006622:	4866      	ldr	r0, [pc, #408]	@ (80067bc <PC_USB_show_Keys+0x214>)
 8006624:	220c      	movs	r2, #12
 8006626:	0019      	movs	r1, r3
 8006628:	f001 fa36 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 800662c:	4a62      	ldr	r2, [pc, #392]	@ (80067b8 <PC_USB_show_Keys+0x210>)
 800662e:	4b59      	ldr	r3, [pc, #356]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006630:	0011      	movs	r1, r2
 8006632:	0018      	movs	r0, r3
 8006634:	f7fd fb54 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("3 - NOx sensor id:------------ %s\r\n", Buffer);
 8006638:	4a56      	ldr	r2, [pc, #344]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800663a:	4b61      	ldr	r3, [pc, #388]	@ (80067c0 <PC_USB_show_Keys+0x218>)
 800663c:	0011      	movs	r1, r2
 800663e:	0018      	movs	r0, r3
 8006640:	f7ff ff8c 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8006644:	4b5f      	ldr	r3, [pc, #380]	@ (80067c4 <PC_USB_show_Keys+0x21c>)
 8006646:	4860      	ldr	r0, [pc, #384]	@ (80067c8 <PC_USB_show_Keys+0x220>)
 8006648:	220c      	movs	r2, #12
 800664a:	0019      	movs	r1, r3
 800664c:	f001 fa24 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8006650:	4a5c      	ldr	r2, [pc, #368]	@ (80067c4 <PC_USB_show_Keys+0x21c>)
 8006652:	4b50      	ldr	r3, [pc, #320]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006654:	0011      	movs	r1, r2
 8006656:	0018      	movs	r0, r3
 8006658:	f7fd fb42 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("4 - VOC sensor id:------------ %s\r\n", Buffer);
 800665c:	4a4d      	ldr	r2, [pc, #308]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800665e:	4b5b      	ldr	r3, [pc, #364]	@ (80067cc <PC_USB_show_Keys+0x224>)
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f7ff ff7a 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(dBaConfigAddr, soundConfig, IdSize);
 8006668:	4b59      	ldr	r3, [pc, #356]	@ (80067d0 <PC_USB_show_Keys+0x228>)
 800666a:	485a      	ldr	r0, [pc, #360]	@ (80067d4 <PC_USB_show_Keys+0x22c>)
 800666c:	220c      	movs	r2, #12
 800666e:	0019      	movs	r1, r3
 8006670:	f001 fa12 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8006674:	4a56      	ldr	r2, [pc, #344]	@ (80067d0 <PC_USB_show_Keys+0x228>)
 8006676:	4b47      	ldr	r3, [pc, #284]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006678:	0011      	movs	r1, r2
 800667a:	0018      	movs	r0, r3
 800667c:	f7fd fb30 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("5 is former dBa unused\r\n");
 8006680:	4b55      	ldr	r3, [pc, #340]	@ (80067d8 <PC_USB_show_Keys+0x230>)
 8006682:	0018      	movs	r0, r3
 8006684:	f7ff ff6a 	bl	800655c <printf_USB>
  printf_USB("5 - Air pressure sensor id:--- %s\r\n", Buffer);
 8006688:	4a42      	ldr	r2, [pc, #264]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800668a:	4b54      	ldr	r3, [pc, #336]	@ (80067dc <PC_USB_show_Keys+0x234>)
 800668c:	0011      	movs	r1, r2
 800668e:	0018      	movs	r0, r3
 8006690:	f7ff ff64 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8006694:	4b4e      	ldr	r3, [pc, #312]	@ (80067d0 <PC_USB_show_Keys+0x228>)
 8006696:	4852      	ldr	r0, [pc, #328]	@ (80067e0 <PC_USB_show_Keys+0x238>)
 8006698:	220c      	movs	r2, #12
 800669a:	0019      	movs	r1, r3
 800669c:	f001 f9fc 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80066a0:	4a4b      	ldr	r2, [pc, #300]	@ (80067d0 <PC_USB_show_Keys+0x228>)
 80066a2:	4b3c      	ldr	r3, [pc, #240]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80066a4:	0011      	movs	r1, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7fd fb1a 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("6 is former dBc\r\n");
 80066ac:	4b4d      	ldr	r3, [pc, #308]	@ (80067e4 <PC_USB_show_Keys+0x23c>)
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7ff ff54 	bl	800655c <printf_USB>
  printf_USB("6 - Sound dBA sensor id:------ %s\r\n", Buffer);
 80066b4:	4a37      	ldr	r2, [pc, #220]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80066b6:	4b4c      	ldr	r3, [pc, #304]	@ (80067e8 <PC_USB_show_Keys+0x240>)
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7ff ff4e 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80066c0:	4b4a      	ldr	r3, [pc, #296]	@ (80067ec <PC_USB_show_Keys+0x244>)
 80066c2:	484b      	ldr	r0, [pc, #300]	@ (80067f0 <PC_USB_show_Keys+0x248>)
 80066c4:	2220      	movs	r2, #32
 80066c6:	0019      	movs	r1, r3
 80066c8:	f001 f9e6 	bl	8007a98 <ReadUint8ArrayEEprom>
  printf_USB("7 - Stored name:-------------- %s\r\n", (char*)nameConfig);
 80066cc:	4a47      	ldr	r2, [pc, #284]	@ (80067ec <PC_USB_show_Keys+0x244>)
 80066ce:	4b49      	ldr	r3, [pc, #292]	@ (80067f4 <PC_USB_show_Keys+0x24c>)
 80066d0:	0011      	movs	r1, r2
 80066d2:	0018      	movs	r0, r3
 80066d4:	f7ff ff42 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80066d8:	4b47      	ldr	r3, [pc, #284]	@ (80067f8 <PC_USB_show_Keys+0x250>)
 80066da:	4848      	ldr	r0, [pc, #288]	@ (80067fc <PC_USB_show_Keys+0x254>)
 80066dc:	220c      	movs	r2, #12
 80066de:	0019      	movs	r1, r3
 80066e0:	f001 f9da 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80066e4:	4a44      	ldr	r2, [pc, #272]	@ (80067f8 <PC_USB_show_Keys+0x250>)
 80066e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80066e8:	0011      	movs	r1, r2
 80066ea:	0018      	movs	r0, r3
 80066ec:	f7fd faf8 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("8 - Solar voltage sensor id:-- %s\r\n", Buffer);
 80066f0:	4a28      	ldr	r2, [pc, #160]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <PC_USB_show_Keys+0x258>)
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7ff ff30 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 80066fc:	4b41      	ldr	r3, [pc, #260]	@ (8006804 <PC_USB_show_Keys+0x25c>)
 80066fe:	4842      	ldr	r0, [pc, #264]	@ (8006808 <PC_USB_show_Keys+0x260>)
 8006700:	220c      	movs	r2, #12
 8006702:	0019      	movs	r1, r3
 8006704:	f001 f9c8 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8006708:	4a3e      	ldr	r2, [pc, #248]	@ (8006804 <PC_USB_show_Keys+0x25c>)
 800670a:	4b22      	ldr	r3, [pc, #136]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800670c:	0011      	movs	r1, r2
 800670e:	0018      	movs	r0, r3
 8006710:	f7fd fae6 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("9 - Battery voltage sensor id: %s\r\n", Buffer);
 8006714:	4a1f      	ldr	r2, [pc, #124]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006716:	4b3d      	ldr	r3, [pc, #244]	@ (800680c <PC_USB_show_Keys+0x264>)
 8006718:	0011      	movs	r1, r2
 800671a:	0018      	movs	r0, r3
 800671c:	f7ff ff1e 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8006720:	4b3b      	ldr	r3, [pc, #236]	@ (8006810 <PC_USB_show_Keys+0x268>)
 8006722:	483c      	ldr	r0, [pc, #240]	@ (8006814 <PC_USB_show_Keys+0x26c>)
 8006724:	220c      	movs	r2, #12
 8006726:	0019      	movs	r1, r3
 8006728:	f001 f9b6 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 800672c:	4a38      	ldr	r2, [pc, #224]	@ (8006810 <PC_USB_show_Keys+0x268>)
 800672e:	4b19      	ldr	r3, [pc, #100]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006730:	0011      	movs	r1, r2
 8006732:	0018      	movs	r0, r3
 8006734:	f7fd fad4 	bl	8003ce0 <uint8ArrayToString>
  printf_USB(": - PM10 sensor id:----------- %s\r\n", Buffer);
 8006738:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800673a:	4b37      	ldr	r3, [pc, #220]	@ (8006818 <PC_USB_show_Keys+0x270>)
 800673c:	0011      	movs	r1, r2
 800673e:	0018      	movs	r0, r3
 8006740:	f7ff ff0c 	bl	800655c <printf_USB>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8006744:	4b35      	ldr	r3, [pc, #212]	@ (800681c <PC_USB_show_Keys+0x274>)
 8006746:	4836      	ldr	r0, [pc, #216]	@ (8006820 <PC_USB_show_Keys+0x278>)
 8006748:	220c      	movs	r2, #12
 800674a:	0019      	movs	r1, r3
 800674c:	f001 f9a4 	bl	8007a98 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8006750:	4a32      	ldr	r2, [pc, #200]	@ (800681c <PC_USB_show_Keys+0x274>)
 8006752:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 8006754:	0011      	movs	r1, r2
 8006756:	0018      	movs	r0, r3
 8006758:	f7fd fac2 	bl	8003ce0 <uint8ArrayToString>
  printf_USB("; - PM2p5 sensor id:---------- %s\r\n", Buffer);
 800675c:	4a0d      	ldr	r2, [pc, #52]	@ (8006794 <PC_USB_show_Keys+0x1ec>)
 800675e:	4b31      	ldr	r3, [pc, #196]	@ (8006824 <PC_USB_show_Keys+0x27c>)
 8006760:	0011      	movs	r1, r2
 8006762:	0018      	movs	r0, r3
 8006764:	f7ff fefa 	bl	800655c <printf_USB>
  HAL_Delay(50);
 8006768:	2032      	movs	r0, #50	@ 0x32
 800676a:	f008 ffff 	bl	800f76c <HAL_Delay>
  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 800676e:	4b2e      	ldr	r3, [pc, #184]	@ (8006828 <PC_USB_show_Keys+0x280>)
 8006770:	0018      	movs	r0, r3
 8006772:	f7ff fef3 	bl	800655c <printf_USB>
  HAL_Delay(50);
 8006776:	2032      	movs	r0, #50	@ 0x32
 8006778:	f008 fff8 	bl	800f76c <HAL_Delay>
  printf_USB("Command example for air pressure => #5,6a\r\n");
 800677c:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <PC_USB_show_Keys+0x284>)
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff feec 	bl	800655c <printf_USB>
}
 8006784:	46c0      	nop			@ (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	20000980 	.word	0x20000980
 8006790:	08080000 	.word	0x08080000
 8006794:	2000098c 	.word	0x2000098c
 8006798:	08024a28 	.word	0x08024a28
 800679c:	08024a44 	.word	0x08024a44
 80067a0:	200009a8 	.word	0x200009a8
 80067a4:	0808000c 	.word	0x0808000c
 80067a8:	08024a68 	.word	0x08024a68
 80067ac:	200009b4 	.word	0x200009b4
 80067b0:	08080018 	.word	0x08080018
 80067b4:	08024a8c 	.word	0x08024a8c
 80067b8:	200009c0 	.word	0x200009c0
 80067bc:	08080024 	.word	0x08080024
 80067c0:	08024ab0 	.word	0x08024ab0
 80067c4:	200009cc 	.word	0x200009cc
 80067c8:	08080030 	.word	0x08080030
 80067cc:	08024ad4 	.word	0x08024ad4
 80067d0:	200009d8 	.word	0x200009d8
 80067d4:	0808003c 	.word	0x0808003c
 80067d8:	08024af8 	.word	0x08024af8
 80067dc:	08024b14 	.word	0x08024b14
 80067e0:	08080048 	.word	0x08080048
 80067e4:	08024b38 	.word	0x08024b38
 80067e8:	08024b4c 	.word	0x08024b4c
 80067ec:	200009e4 	.word	0x200009e4
 80067f0:	08080090 	.word	0x08080090
 80067f4:	08024b70 	.word	0x08024b70
 80067f8:	20000a04 	.word	0x20000a04
 80067fc:	08080078 	.word	0x08080078
 8006800:	08024b94 	.word	0x08024b94
 8006804:	20000a10 	.word	0x20000a10
 8006808:	0808006c 	.word	0x0808006c
 800680c:	08024bb8 	.word	0x08024bb8
 8006810:	20000a1c 	.word	0x20000a1c
 8006814:	08080060 	.word	0x08080060
 8006818:	08024bdc 	.word	0x08024bdc
 800681c:	20000a28 	.word	0x20000a28
 8006820:	08080054 	.word	0x08080054
 8006824:	08024c00 	.word	0x08024c00
 8006828:	08024c24 	.word	0x08024c24
 800682c:	08024c54 	.word	0x08024c54

08006830 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8006830:	b590      	push	{r4, r7, lr}
 8006832:	b0c5      	sub	sp, #276	@ 0x114
 8006834:	af3e      	add	r7, sp, #248	@ 0xf8
 8006836:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  uint32_t length = GetUsbRxDataSize();
 8006838:	f016 ffee 	bl	801d818 <GetUsbRxDataSize>
 800683c:	0003      	movs	r3, r0
 800683e:	613b      	str	r3, [r7, #16]
  static char Buffer[25];
  if (length > 5) {  //#2,34
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b05      	cmp	r3, #5
 8006844:	d800      	bhi.n	8006848 <Process_USB_input+0x18>
 8006846:	e0f1      	b.n	8006a2c <Process_USB_input+0x1fc>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	4b84      	ldr	r3, [pc, #528]	@ (8006a5c <Process_USB_input+0x22c>)
 800684c:	0011      	movs	r1, r2
 800684e:	0018      	movs	r0, r3
 8006850:	f7ff fe84 	bl	800655c <printf_USB>
    uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);  // zoek op #
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2123      	movs	r1, #35	@ 0x23
 8006858:	0018      	movs	r0, r3
 800685a:	f01a f9ff 	bl	8020c5c <strchr>
 800685e:	0003      	movs	r3, r0
 8006860:	60fb      	str	r3, [r7, #12]
    if(message != NULL) { // && strlen((const char*)message) > 5)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d100      	bne.n	800686a <Process_USB_input+0x3a>
 8006868:	e0c6      	b.n	80069f8 <Process_USB_input+0x1c8>
      received.Command = (message[1] & 0x0F);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	220f      	movs	r2, #15
 8006872:	4013      	ands	r3, r2
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4b7a      	ldr	r3, [pc, #488]	@ (8006a60 <Process_USB_input+0x230>)
 8006878:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3302      	adds	r3, #2
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b2c      	cmp	r3, #44	@ 0x2c
 8006882:	d000      	beq.n	8006886 <Process_USB_input+0x56>
 8006884:	e0b1      	b.n	80069ea <Process_USB_input+0x1ba>
        for (uint8_t i=3; i < 5; i++) {
 8006886:	2317      	movs	r3, #23
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	2203      	movs	r2, #3
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e061      	b.n	8006954 <Process_USB_input+0x124>
          if (isxdigit(message[i])) {
 8006890:	2117      	movs	r1, #23
 8006892:	187b      	adds	r3, r7, r1
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	18d3      	adds	r3, r2, r3
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	4b71      	ldr	r3, [pc, #452]	@ (8006a64 <Process_USB_input+0x234>)
 80068a0:	18d3      	adds	r3, r2, r3
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	001a      	movs	r2, r3
 80068a6:	2344      	movs	r3, #68	@ 0x44
 80068a8:	4013      	ands	r3, r2
 80068aa:	d03f      	beq.n	800692c <Process_USB_input+0xfc>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 80068ac:	4b6e      	ldr	r3, [pc, #440]	@ (8006a68 <Process_USB_input+0x238>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	b25a      	sxtb	r2, r3
 80068b4:	0008      	movs	r0, r1
 80068b6:	187b      	adds	r3, r7, r1
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	18cb      	adds	r3, r1, r3
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	4b68      	ldr	r3, [pc, #416]	@ (8006a64 <Process_USB_input+0x234>)
 80068c4:	18cb      	adds	r3, r1, r3
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	0019      	movs	r1, r3
 80068ca:	2304      	movs	r3, #4
 80068cc:	400b      	ands	r3, r1
 80068ce:	d008      	beq.n	80068e2 <Process_USB_input+0xb2>
 80068d0:	183b      	adds	r3, r7, r0
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	68f9      	ldr	r1, [r7, #12]
 80068d6:	18cb      	adds	r3, r1, r3
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	3b30      	subs	r3, #48	@ 0x30
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	b25b      	sxtb	r3, r3
 80068e0:	e01e      	b.n	8006920 <Process_USB_input+0xf0>
 80068e2:	2317      	movs	r3, #23
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	18c9      	adds	r1, r1, r3
 80068ec:	200b      	movs	r0, #11
 80068ee:	183b      	adds	r3, r7, r0
 80068f0:	7809      	ldrb	r1, [r1, #0]
 80068f2:	7019      	strb	r1, [r3, #0]
 80068f4:	183b      	adds	r3, r7, r0
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	1c59      	adds	r1, r3, #1
 80068fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006a64 <Process_USB_input+0x234>)
 80068fc:	18cb      	adds	r3, r1, r3
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	0019      	movs	r1, r3
 8006902:	2303      	movs	r3, #3
 8006904:	400b      	ands	r3, r1
 8006906:	2b02      	cmp	r3, #2
 8006908:	d103      	bne.n	8006912 <Process_USB_input+0xe2>
 800690a:	183b      	adds	r3, r7, r0
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	3b20      	subs	r3, #32
 8006910:	e002      	b.n	8006918 <Process_USB_input+0xe8>
 8006912:	230b      	movs	r3, #11
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	3b37      	subs	r3, #55	@ 0x37
 800691c:	b2db      	uxtb	r3, r3
 800691e:	b25b      	sxtb	r3, r3
 8006920:	4313      	orrs	r3, r2
 8006922:	b25b      	sxtb	r3, r3
 8006924:	b2da      	uxtb	r2, r3
 8006926:	4b50      	ldr	r3, [pc, #320]	@ (8006a68 <Process_USB_input+0x238>)
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	e00d      	b.n	8006948 <Process_USB_input+0x118>
          }
          else {
            printf_USB("Ongeldig hexadecimaal teken: '%c'\r\n", message[i]);
 800692c:	2317      	movs	r3, #23
 800692e:	18fb      	adds	r3, r7, r3
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	18d3      	adds	r3, r2, r3
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	001a      	movs	r2, r3
 800693a:	4b4c      	ldr	r3, [pc, #304]	@ (8006a6c <Process_USB_input+0x23c>)
 800693c:	0011      	movs	r1, r2
 800693e:	0018      	movs	r0, r3
 8006940:	f7ff fe0c 	bl	800655c <printf_USB>
            return false; // Of een andere foutwaarde
 8006944:	2300      	movs	r3, #0
 8006946:	e084      	b.n	8006a52 <Process_USB_input+0x222>
        for (uint8_t i=3; i < 5; i++) {
 8006948:	2117      	movs	r1, #23
 800694a:	187b      	adds	r3, r7, r1
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	187b      	adds	r3, r7, r1
 8006950:	3201      	adds	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	2317      	movs	r3, #23
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b04      	cmp	r3, #4
 800695c:	d998      	bls.n	8006890 <Process_USB_input+0x60>
          }
        }
        ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800695e:	4b44      	ldr	r3, [pc, #272]	@ (8006a70 <Process_USB_input+0x240>)
 8006960:	4844      	ldr	r0, [pc, #272]	@ (8006a74 <Process_USB_input+0x244>)
 8006962:	220c      	movs	r2, #12
 8006964:	0019      	movs	r1, r3
 8006966:	f001 f897 	bl	8007a98 <ReadUint8ArrayEEprom>
        boxConfig[11] = result; //overwrite the last byte
 800696a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a68 <Process_USB_input+0x238>)
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	4b40      	ldr	r3, [pc, #256]	@ (8006a70 <Process_USB_input+0x240>)
 8006970:	72da      	strb	r2, [r3, #11]
        memcpy(received.Payload, boxConfig, IdSize);
 8006972:	4b3b      	ldr	r3, [pc, #236]	@ (8006a60 <Process_USB_input+0x230>)
 8006974:	2202      	movs	r2, #2
 8006976:	493e      	ldr	r1, [pc, #248]	@ (8006a70 <Process_USB_input+0x240>)
 8006978:	189b      	adds	r3, r3, r2
 800697a:	220c      	movs	r2, #12
 800697c:	0018      	movs	r0, r3
 800697e:	f01a fa41 	bl	8020e04 <memcpy>
        received.PayloadLength = IdSize;
 8006982:	4b37      	ldr	r3, [pc, #220]	@ (8006a60 <Process_USB_input+0x230>)
 8006984:	220c      	movs	r2, #12
 8006986:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8006988:	4a3b      	ldr	r2, [pc, #236]	@ (8006a78 <Process_USB_input+0x248>)
 800698a:	4b3c      	ldr	r3, [pc, #240]	@ (8006a7c <Process_USB_input+0x24c>)
 800698c:	0011      	movs	r1, r2
 800698e:	0018      	movs	r0, r3
 8006990:	f7fd f9a6 	bl	8003ce0 <uint8ArrayToString>
        ProcessCmd(received);
 8006994:	4c32      	ldr	r4, [pc, #200]	@ (8006a60 <Process_USB_input+0x230>)
 8006996:	466b      	mov	r3, sp
 8006998:	0018      	movs	r0, r3
 800699a:	0023      	movs	r3, r4
 800699c:	3310      	adds	r3, #16
 800699e:	22f4      	movs	r2, #244	@ 0xf4
 80069a0:	0019      	movs	r1, r3
 80069a2:	f01a fa2f 	bl	8020e04 <memcpy>
 80069a6:	6820      	ldr	r0, [r4, #0]
 80069a8:	6861      	ldr	r1, [r4, #4]
 80069aa:	68a2      	ldr	r2, [r4, #8]
 80069ac:	68e3      	ldr	r3, [r4, #12]
 80069ae:	f7ff fc07 	bl	80061c0 <ProcessCmd>
        ResetUsbRxDataSize();
 80069b2:	f016 ff19 	bl	801d7e8 <ResetUsbRxDataSize>
        PC_USB_show_Keys();
 80069b6:	f7ff fdf7 	bl	80065a8 <PC_USB_show_Keys>
        for (uint8_t i=0; i < 8; i++) {
 80069ba:	2316      	movs	r3, #22
 80069bc:	18fb      	adds	r3, r7, r3
 80069be:	2200      	movs	r2, #0
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e00b      	b.n	80069dc <Process_USB_input+0x1ac>
          data[i] = '\0';
 80069c4:	2116      	movs	r1, #22
 80069c6:	187b      	adds	r3, r7, r1
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	18d3      	adds	r3, r2, r3
 80069ce:	2200      	movs	r2, #0
 80069d0:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 8; i++) {
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	187b      	adds	r3, r7, r1
 80069d8:	3201      	adds	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
 80069dc:	2316      	movs	r3, #22
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b07      	cmp	r3, #7
 80069e4:	d9ee      	bls.n	80069c4 <Process_USB_input+0x194>
        }
        return true;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e033      	b.n	8006a52 <Process_USB_input+0x222>
      }
      else {
        printf_USB("Invalid input command comma not found\r\n");
 80069ea:	4b25      	ldr	r3, [pc, #148]	@ (8006a80 <Process_USB_input+0x250>)
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7ff fdb5 	bl	800655c <printf_USB>
        ResetUsbRxDataSize();
 80069f2:	f016 fef9 	bl	801d7e8 <ResetUsbRxDataSize>
 80069f6:	e003      	b.n	8006a00 <Process_USB_input+0x1d0>
      }
    }
    else {
      PC_USB_show_Keys();
 80069f8:	f7ff fdd6 	bl	80065a8 <PC_USB_show_Keys>
      ResetUsbRxDataSize();
 80069fc:	f016 fef4 	bl	801d7e8 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 8; i++) {
 8006a00:	2315      	movs	r3, #21
 8006a02:	18fb      	adds	r3, r7, r3
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	e00b      	b.n	8006a22 <Process_USB_input+0x1f2>
      data[i] = '\0';
 8006a0a:	2115      	movs	r1, #21
 8006a0c:	187b      	adds	r3, r7, r1
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	18d3      	adds	r3, r2, r3
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 8; i++) {
 8006a18:	187b      	adds	r3, r7, r1
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	187b      	adds	r3, r7, r1
 8006a1e:	3201      	adds	r2, #1
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	2315      	movs	r3, #21
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b07      	cmp	r3, #7
 8006a2a:	d9ee      	bls.n	8006a0a <Process_USB_input+0x1da>
    }

  }
  if (formerlength != length) {
 8006a2c:	4b15      	ldr	r3, [pc, #84]	@ (8006a84 <Process_USB_input+0x254>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d008      	beq.n	8006a48 <Process_USB_input+0x218>
    printf_USB("USB input: %s\r", (const char*)data);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4b13      	ldr	r3, [pc, #76]	@ (8006a88 <Process_USB_input+0x258>)
 8006a3a:	0011      	movs	r1, r2
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f7ff fd8d 	bl	800655c <printf_USB>
    formerlength = length;
 8006a42:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <Process_USB_input+0x254>)
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f016 feee 	bl	801d82c <GetUsbRxNextChunk>

  return false;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	0018      	movs	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b007      	add	sp, #28
 8006a58:	bd90      	pop	{r4, r7, pc}
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	08024c80 	.word	0x08024c80
 8006a60:	2000076c 	.word	0x2000076c
 8006a64:	08026cb8 	.word	0x08026cb8
 8006a68:	20000870 	.word	0x20000870
 8006a6c:	08024c90 	.word	0x08024c90
 8006a70:	20000a34 	.word	0x20000a34
 8006a74:	08080000 	.word	0x08080000
 8006a78:	2000076e 	.word	0x2000076e
 8006a7c:	20000a40 	.word	0x20000a40
 8006a80:	08024cb4 	.word	0x08024cb4
 8006a84:	20000874 	.word	0x20000874
 8006a88:	08024cdc 	.word	0x08024cdc

08006a8c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8006a90:	4b26      	ldr	r3, [pc, #152]	@ (8006b2c <ReadBatteryVoltage+0xa0>)
 8006a92:	4a27      	ldr	r2, [pc, #156]	@ (8006b30 <ReadBatteryVoltage+0xa4>)
 8006a94:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006a96:	4b25      	ldr	r3, [pc, #148]	@ (8006b2c <ReadBatteryVoltage+0xa0>)
 8006a98:	2280      	movs	r2, #128	@ 0x80
 8006a9a:	0152      	lsls	r2, r2, #5
 8006a9c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006a9e:	4a23      	ldr	r2, [pc, #140]	@ (8006b2c <ReadBatteryVoltage+0xa0>)
 8006aa0:	4b24      	ldr	r3, [pc, #144]	@ (8006b34 <ReadBatteryVoltage+0xa8>)
 8006aa2:	0011      	movs	r1, r2
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f009 f92f 	bl	800fd08 <HAL_ADC_ConfigChannel>
 8006aaa:	1e03      	subs	r3, r0, #0
 8006aac:	d001      	beq.n	8006ab2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006aae:	f002 f8c1 	bl	8008c34 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006ab2:	4b20      	ldr	r3, [pc, #128]	@ (8006b34 <ReadBatteryVoltage+0xa8>)
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f009 f82b 	bl	800fb10 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006aba:	4b1e      	ldr	r3, [pc, #120]	@ (8006b34 <ReadBatteryVoltage+0xa8>)
 8006abc:	2101      	movs	r1, #1
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f009 f87a 	bl	800fbb8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8006b34 <ReadBatteryVoltage+0xa8>)
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f009 f912 	bl	800fcf0 <HAL_ADC_GetValue>
 8006acc:	0002      	movs	r2, r0
 8006ace:	4b1a      	ldr	r3, [pc, #104]	@ (8006b38 <ReadBatteryVoltage+0xac>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4353      	muls	r3, r2
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	4919      	ldr	r1, [pc, #100]	@ (8006b3c <ReadBatteryVoltage+0xb0>)
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7f9 fb63 	bl	80001a4 <__udivsi3>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	001a      	movs	r2, r3
 8006ae2:	4b17      	ldr	r3, [pc, #92]	@ (8006b40 <ReadBatteryVoltage+0xb4>)
 8006ae4:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006ae6:	4b16      	ldr	r3, [pc, #88]	@ (8006b40 <ReadBatteryVoltage+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fa fdbc 	bl	8001668 <__aeabi_ui2f>
 8006af0:	1c03      	adds	r3, r0, #0
 8006af2:	4914      	ldr	r1, [pc, #80]	@ (8006b44 <ReadBatteryVoltage+0xb8>)
 8006af4:	1c18      	adds	r0, r3, #0
 8006af6:	f7fa f86d 	bl	8000bd4 <__aeabi_fdiv>
 8006afa:	1c03      	adds	r3, r0, #0
 8006afc:	1c1a      	adds	r2, r3, #0
 8006afe:	4b12      	ldr	r3, [pc, #72]	@ (8006b48 <ReadBatteryVoltage+0xbc>)
 8006b00:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <ReadBatteryVoltage+0xa0>)
 8006b04:	4a0a      	ldr	r2, [pc, #40]	@ (8006b30 <ReadBatteryVoltage+0xa4>)
 8006b06:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006b08:	4b08      	ldr	r3, [pc, #32]	@ (8006b2c <ReadBatteryVoltage+0xa0>)
 8006b0a:	4a10      	ldr	r2, [pc, #64]	@ (8006b4c <ReadBatteryVoltage+0xc0>)
 8006b0c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006b0e:	4a07      	ldr	r2, [pc, #28]	@ (8006b2c <ReadBatteryVoltage+0xa0>)
 8006b10:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <ReadBatteryVoltage+0xa8>)
 8006b12:	0011      	movs	r1, r2
 8006b14:	0018      	movs	r0, r3
 8006b16:	f009 f8f7 	bl	800fd08 <HAL_ADC_ConfigChannel>
 8006b1a:	1e03      	subs	r3, r0, #0
 8006b1c:	d001      	beq.n	8006b22 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006b1e:	f002 f889 	bl	8008c34 <Error_Handler>
  }
  return trueValue;
 8006b22:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <ReadBatteryVoltage+0xbc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 }
 8006b26:	1c18      	adds	r0, r3, #0
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000a5c 	.word	0x20000a5c
 8006b30:	38004000 	.word	0x38004000
 8006b34:	20000a98 	.word	0x20000a98
 8006b38:	20000034 	.word	0x20000034
 8006b3c:	00000fff 	.word	0x00000fff
 8006b40:	20000a64 	.word	0x20000a64
 8006b44:	447a0000 	.word	0x447a0000
 8006b48:	20000a68 	.word	0x20000a68
 8006b4c:	00001001 	.word	0x00001001

08006b50 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006b54:	4b21      	ldr	r3, [pc, #132]	@ (8006bdc <ReadSolarVoltage+0x8c>)
 8006b56:	4a22      	ldr	r2, [pc, #136]	@ (8006be0 <ReadSolarVoltage+0x90>)
 8006b58:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006b5a:	4b20      	ldr	r3, [pc, #128]	@ (8006bdc <ReadSolarVoltage+0x8c>)
 8006b5c:	2280      	movs	r2, #128	@ 0x80
 8006b5e:	0152      	lsls	r2, r2, #5
 8006b60:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006b62:	4a1e      	ldr	r2, [pc, #120]	@ (8006bdc <ReadSolarVoltage+0x8c>)
 8006b64:	4b1f      	ldr	r3, [pc, #124]	@ (8006be4 <ReadSolarVoltage+0x94>)
 8006b66:	0011      	movs	r1, r2
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f009 f8cd 	bl	800fd08 <HAL_ADC_ConfigChannel>
 8006b6e:	1e03      	subs	r3, r0, #0
 8006b70:	d001      	beq.n	8006b76 <ReadSolarVoltage+0x26>
    Error_Handler();
 8006b72:	f002 f85f 	bl	8008c34 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006b76:	4b1b      	ldr	r3, [pc, #108]	@ (8006be4 <ReadSolarVoltage+0x94>)
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f008 ffc9 	bl	800fb10 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006b7e:	4b19      	ldr	r3, [pc, #100]	@ (8006be4 <ReadSolarVoltage+0x94>)
 8006b80:	2101      	movs	r1, #1
 8006b82:	0018      	movs	r0, r3
 8006b84:	f009 f818 	bl	800fbb8 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006b88:	4b16      	ldr	r3, [pc, #88]	@ (8006be4 <ReadSolarVoltage+0x94>)
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f009 f8b0 	bl	800fcf0 <HAL_ADC_GetValue>
 8006b90:	0002      	movs	r2, r0
 8006b92:	4b15      	ldr	r3, [pc, #84]	@ (8006be8 <ReadSolarVoltage+0x98>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	435a      	muls	r2, r3
 8006b98:	0013      	movs	r3, r2
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	189b      	adds	r3, r3, r2
 8006b9e:	4913      	ldr	r1, [pc, #76]	@ (8006bec <ReadSolarVoltage+0x9c>)
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7f9 faff 	bl	80001a4 <__udivsi3>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	001a      	movs	r2, r3
 8006baa:	4b11      	ldr	r3, [pc, #68]	@ (8006bf0 <ReadSolarVoltage+0xa0>)
 8006bac:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006bae:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <ReadSolarVoltage+0x8c>)
 8006bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8006be0 <ReadSolarVoltage+0x90>)
 8006bb2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006bb4:	4b09      	ldr	r3, [pc, #36]	@ (8006bdc <ReadSolarVoltage+0x8c>)
 8006bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8006bf4 <ReadSolarVoltage+0xa4>)
 8006bb8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006bba:	4a08      	ldr	r2, [pc, #32]	@ (8006bdc <ReadSolarVoltage+0x8c>)
 8006bbc:	4b09      	ldr	r3, [pc, #36]	@ (8006be4 <ReadSolarVoltage+0x94>)
 8006bbe:	0011      	movs	r1, r2
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f009 f8a1 	bl	800fd08 <HAL_ADC_ConfigChannel>
 8006bc6:	1e03      	subs	r3, r0, #0
 8006bc8:	d001      	beq.n	8006bce <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006bca:	f002 f833 	bl	8008c34 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006bce:	4b08      	ldr	r3, [pc, #32]	@ (8006bf0 <ReadSolarVoltage+0xa0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 }
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	20000a5c 	.word	0x20000a5c
 8006be0:	3c008000 	.word	0x3c008000
 8006be4:	20000a98 	.word	0x20000a98
 8006be8:	20000034 	.word	0x20000034
 8006bec:	00000fff 	.word	0x00000fff
 8006bf0:	20000a6c 	.word	0x20000a6c
 8006bf4:	00001001 	.word	0x00001001

08006bf8 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006bfc:	23a0      	movs	r3, #160	@ 0xa0
 8006bfe:	05db      	lsls	r3, r3, #23
 8006c00:	2180      	movs	r1, #128	@ 0x80
 8006c02:	0018      	movs	r0, r3
 8006c04:	f00a f81c 	bl	8010c40 <HAL_GPIO_ReadPin>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	1e5a      	subs	r2, r3, #1
 8006c0c:	4193      	sbcs	r3, r2
 8006c0e:	b2db      	uxtb	r3, r3
}
 8006c10:	0018      	movs	r0, r3
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006c16:	b580      	push	{r7, lr}
 8006c18:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006c1a:	2380      	movs	r3, #128	@ 0x80
 8006c1c:	021a      	lsls	r2, r3, #8
 8006c1e:	23a0      	movs	r3, #160	@ 0xa0
 8006c20:	05db      	lsls	r3, r3, #23
 8006c22:	0011      	movs	r1, r2
 8006c24:	0018      	movs	r0, r3
 8006c26:	f00a f80b 	bl	8010c40 <HAL_GPIO_ReadPin>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	4193      	sbcs	r3, r2
 8006c30:	b2db      	uxtb	r3, r3
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006c3c:	4b05      	ldr	r3, [pc, #20]	@ (8006c54 <UserButton_Pressed+0x1c>)
 8006c3e:	2104      	movs	r1, #4
 8006c40:	0018      	movs	r0, r3
 8006c42:	f009 fffd 	bl	8010c40 <HAL_GPIO_ReadPin>
 8006c46:	0003      	movs	r3, r0
 8006c48:	425a      	negs	r2, r3
 8006c4a:	4153      	adcs	r3, r2
 8006c4c:	b2db      	uxtb	r3, r3
}
 8006c4e:	0018      	movs	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	50000c00 	.word	0x50000c00

08006c58 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	46d6      	mov	lr, sl
 8006c5c:	464f      	mov	r7, r9
 8006c5e:	4646      	mov	r6, r8
 8006c60:	b5c0      	push	{r6, r7, lr}
 8006c62:	b08e      	sub	sp, #56	@ 0x38
 8006c64:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8006c66:	4b21      	ldr	r3, [pc, #132]	@ (8006cec <showTime+0x94>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d036      	beq.n	8006cdc <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c6e:	003a      	movs	r2, r7
 8006c70:	1d3b      	adds	r3, r7, #4
 8006c72:	0011      	movs	r1, r2
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fa2b 	bl	80070d0 <RTC_GetTime>
  UpdateSystemUptime();
 8006c7a:	f000 f83f 	bl	8006cfc <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006c7e:	003b      	movs	r3, r7
 8006c80:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006c82:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006c84:	003b      	movs	r3, r7
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006c8a:	4b19      	ldr	r3, [pc, #100]	@ (8006cf0 <showTime+0x98>)
 8006c8c:	0092      	lsls	r2, r2, #2
 8006c8e:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006c90:	003b      	movs	r3, r7
 8006c92:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006c94:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006c9a:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006c9c:	1d3b      	adds	r3, r7, #4
 8006c9e:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ca0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006ca2:	1d3b      	adds	r3, r7, #4
 8006ca4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006ca6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006ca8:	4b12      	ldr	r3, [pc, #72]	@ (8006cf4 <showTime+0x9c>)
 8006caa:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006cac:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006cae:	4b11      	ldr	r3, [pc, #68]	@ (8006cf4 <showTime+0x9c>)
 8006cb0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006cb2:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf4 <showTime+0x9c>)
 8006cb6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006cb8:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006cba:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf4 <showTime+0x9c>)
 8006cbc:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006cbe:	480e      	ldr	r0, [pc, #56]	@ (8006cf8 <showTime+0xa0>)
 8006cc0:	9306      	str	r3, [sp, #24]
 8006cc2:	4643      	mov	r3, r8
 8006cc4:	9305      	str	r3, [sp, #20]
 8006cc6:	4663      	mov	r3, ip
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	9603      	str	r6, [sp, #12]
 8006ccc:	9502      	str	r5, [sp, #8]
 8006cce:	9401      	str	r4, [sp, #4]
 8006cd0:	9100      	str	r1, [sp, #0]
 8006cd2:	4653      	mov	r3, sl
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f019 fde3 	bl	80208a0 <iprintf>
 8006cda:	e000      	b.n	8006cde <showTime+0x86>
    return;
 8006cdc:	46c0      	nop			@ (mov r8, r8)
}
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b006      	add	sp, #24
 8006ce2:	bce0      	pop	{r5, r6, r7}
 8006ce4:	46ba      	mov	sl, r7
 8006ce6:	46b1      	mov	r9, r6
 8006ce8:	46a8      	mov	r8, r5
 8006cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cec:	20000a7c 	.word	0x20000a7c
 8006cf0:	20000054 	.word	0x20000054
 8006cf4:	20000a70 	.word	0x20000a70
 8006cf8:	08024d38 	.word	0x08024d38

08006cfc <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b088      	sub	sp, #32
 8006d00:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006d02:	003a      	movs	r2, r7
 8006d04:	1d3b      	adds	r3, r7, #4
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f000 f9e1 	bl	80070d0 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006d0e:	1d3a      	adds	r2, r7, #4
 8006d10:	003b      	movs	r3, r7
 8006d12:	0011      	movs	r1, r2
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 fba7 	bl	8007468 <makeTime>
 8006d1a:	0002      	movs	r2, r0
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006d98 <UpdateSystemUptime+0x9c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	213c      	movs	r1, #60	@ 0x3c
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f7f9 fabf 	bl	80002b0 <__aeabi_uidivmod>
 8006d32:	000b      	movs	r3, r1
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	4b19      	ldr	r3, [pc, #100]	@ (8006d9c <UpdateSystemUptime+0xa0>)
 8006d38:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	213c      	movs	r1, #60	@ 0x3c
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7f9 fa30 	bl	80001a4 <__udivsi3>
 8006d44:	0003      	movs	r3, r0
 8006d46:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	213c      	movs	r1, #60	@ 0x3c
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7f9 faaf 	bl	80002b0 <__aeabi_uidivmod>
 8006d52:	000b      	movs	r3, r1
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	4b11      	ldr	r3, [pc, #68]	@ (8006d9c <UpdateSystemUptime+0xa0>)
 8006d58:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	213c      	movs	r1, #60	@ 0x3c
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7f9 fa20 	bl	80001a4 <__udivsi3>
 8006d64:	0003      	movs	r3, r0
 8006d66:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2118      	movs	r1, #24
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f7f9 fa9f 	bl	80002b0 <__aeabi_uidivmod>
 8006d72:	000b      	movs	r3, r1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	4b09      	ldr	r3, [pc, #36]	@ (8006d9c <UpdateSystemUptime+0xa0>)
 8006d78:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2118      	movs	r1, #24
 8006d7e:	0018      	movs	r0, r3
 8006d80:	f7f9 fa10 	bl	80001a4 <__udivsi3>
 8006d84:	0003      	movs	r3, r0
 8006d86:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	4b03      	ldr	r3, [pc, #12]	@ (8006d9c <UpdateSystemUptime+0xa0>)
 8006d8e:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006d90:	46c0      	nop			@ (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b008      	add	sp, #32
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000a7c 	.word	0x20000a7c
 8006d9c:	20000a70 	.word	0x20000a70

08006da0 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	0008      	movs	r0, r1
 8006daa:	0011      	movs	r1, r2
 8006dac:	1cfb      	adds	r3, r7, #3
 8006dae:	1c02      	adds	r2, r0, #0
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	1cbb      	adds	r3, r7, #2
 8006db4:	1c0a      	adds	r2, r1, #0
 8006db6:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006db8:	230e      	movs	r3, #14
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006dc0:	230f      	movs	r3, #15
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	1cfa      	adds	r2, r7, #3
 8006dc6:	7812      	ldrb	r2, [r2, #0]
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e015      	b.n	8006df8 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006dcc:	200f      	movs	r0, #15
 8006dce:	183b      	adds	r3, r7, r0
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	18d2      	adds	r2, r2, r3
 8006dd6:	240e      	movs	r4, #14
 8006dd8:	193b      	adds	r3, r7, r4
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	7811      	ldrb	r1, [r2, #0]
 8006dde:	2208      	movs	r2, #8
 8006de0:	18ba      	adds	r2, r7, r2
 8006de2:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006de4:	193b      	adds	r3, r7, r4
 8006de6:	781a      	ldrb	r2, [r3, #0]
 8006de8:	193b      	adds	r3, r7, r4
 8006dea:	3201      	adds	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006dee:	183b      	adds	r3, r7, r0
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	183b      	adds	r3, r7, r0
 8006df4:	3201      	adds	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	200f      	movs	r0, #15
 8006dfa:	183a      	adds	r2, r7, r0
 8006dfc:	1cbb      	adds	r3, r7, #2
 8006dfe:	7812      	ldrb	r2, [r2, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d9e2      	bls.n	8006dcc <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006e06:	230e      	movs	r3, #14
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2208      	movs	r2, #8
 8006e0e:	18ba      	adds	r2, r7, r2
 8006e10:	2100      	movs	r1, #0
 8006e12:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006e14:	1cfb      	adds	r3, r7, #3
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b13      	cmp	r3, #19
 8006e1a:	d849      	bhi.n	8006eb0 <aBuff2int+0x110>
    if (start == 17) { //month
 8006e1c:	1cfb      	adds	r3, r7, #3
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b11      	cmp	r3, #17
 8006e22:	d122      	bne.n	8006e6a <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006e24:	183b      	adds	r3, r7, r0
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e018      	b.n	8006e5e <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006e2c:	240f      	movs	r4, #15
 8006e2e:	193b      	adds	r3, r7, r4
 8006e30:	781a      	ldrb	r2, [r3, #0]
 8006e32:	4b25      	ldr	r3, [pc, #148]	@ (8006ec8 <aBuff2int+0x128>)
 8006e34:	0092      	lsls	r2, r2, #2
 8006e36:	58d2      	ldr	r2, [r2, r3]
 8006e38:	2308      	movs	r3, #8
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7f9 f98a 	bl	8000158 <strcmp>
 8006e44:	1e03      	subs	r3, r0, #0
 8006e46:	d104      	bne.n	8006e52 <aBuff2int+0xb2>
          return i+1;
 8006e48:	193b      	adds	r3, r7, r4
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e035      	b.n	8006ebe <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8006e52:	210f      	movs	r1, #15
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	187b      	adds	r3, r7, r1
 8006e5a:	3201      	adds	r2, #1
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	230f      	movs	r3, #15
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b0b      	cmp	r3, #11
 8006e66:	d9e1      	bls.n	8006e2c <aBuff2int+0x8c>
 8006e68:	e022      	b.n	8006eb0 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006e6a:	230f      	movs	r3, #15
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	e018      	b.n	8006ea6 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006e74:	240f      	movs	r4, #15
 8006e76:	193b      	adds	r3, r7, r4
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <aBuff2int+0x12c>)
 8006e7c:	0092      	lsls	r2, r2, #2
 8006e7e:	58d2      	ldr	r2, [r2, r3]
 8006e80:	2308      	movs	r3, #8
 8006e82:	18fb      	adds	r3, r7, r3
 8006e84:	0011      	movs	r1, r2
 8006e86:	0018      	movs	r0, r3
 8006e88:	f7f9 f966 	bl	8000158 <strcmp>
 8006e8c:	1e03      	subs	r3, r0, #0
 8006e8e:	d104      	bne.n	8006e9a <aBuff2int+0xfa>
          return i+1;
 8006e90:	193b      	adds	r3, r7, r4
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	e011      	b.n	8006ebe <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006e9a:	210f      	movs	r1, #15
 8006e9c:	187b      	adds	r3, r7, r1
 8006e9e:	781a      	ldrb	r2, [r3, #0]
 8006ea0:	187b      	adds	r3, r7, r1
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	230f      	movs	r3, #15
 8006ea8:	18fb      	adds	r3, r7, r3
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b06      	cmp	r3, #6
 8006eae:	d9e1      	bls.n	8006e74 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f018 f918 	bl	801f0ea <atoi>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	b2db      	uxtb	r3, r3
}
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b005      	add	sp, #20
 8006ec4:	bd90      	pop	{r4, r7, pc}
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	20000054 	.word	0x20000054
 8006ecc:	20000038 	.word	0x20000038

08006ed0 <ParseTime>:

void ParseTime(char* buffer) {
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	b08b      	sub	sp, #44	@ 0x2c
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006ed8:	2408      	movs	r4, #8
 8006eda:	193a      	adds	r2, r7, r4
 8006edc:	260c      	movs	r6, #12
 8006ede:	19bb      	adds	r3, r7, r6
 8006ee0:	0011      	movs	r1, r2
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f000 f8f4 	bl	80070d0 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2219      	movs	r2, #25
 8006eec:	2118      	movs	r1, #24
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7ff ff56 	bl	8006da0 <aBuff2int>
 8006ef4:	0003      	movs	r3, r0
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	19bb      	adds	r3, r7, r6
 8006efa:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	221c      	movs	r2, #28
 8006f00:	211b      	movs	r1, #27
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7ff ff4c 	bl	8006da0 <aBuff2int>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	001a      	movs	r2, r3
 8006f0c:	19bb      	adds	r3, r7, r6
 8006f0e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	221f      	movs	r2, #31
 8006f14:	211e      	movs	r1, #30
 8006f16:	0018      	movs	r0, r3
 8006f18:	f7ff ff42 	bl	8006da0 <aBuff2int>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	001a      	movs	r2, r3
 8006f20:	19bb      	adds	r3, r7, r6
 8006f22:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	@ 0x24
 8006f28:	2123      	movs	r1, #35	@ 0x23
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f7ff ff38 	bl	8006da0 <aBuff2int>
 8006f30:	0003      	movs	r3, r0
 8006f32:	001a      	movs	r2, r3
 8006f34:	0025      	movs	r5, r4
 8006f36:	197b      	adds	r3, r7, r5
 8006f38:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2213      	movs	r2, #19
 8006f3e:	2111      	movs	r1, #17
 8006f40:	0018      	movs	r0, r3
 8006f42:	f7ff ff2d 	bl	8006da0 <aBuff2int>
 8006f46:	0003      	movs	r3, r0
 8006f48:	001a      	movs	r2, r3
 8006f4a:	197b      	adds	r3, r7, r5
 8006f4c:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2216      	movs	r2, #22
 8006f52:	2115      	movs	r1, #21
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7ff ff23 	bl	8006da0 <aBuff2int>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	197b      	adds	r3, r7, r5
 8006f60:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	220f      	movs	r2, #15
 8006f66:	210d      	movs	r1, #13
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7ff ff19 	bl	8006da0 <aBuff2int>
 8006f6e:	0003      	movs	r3, r0
 8006f70:	001a      	movs	r2, r3
 8006f72:	197b      	adds	r3, r7, r5
 8006f74:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006f76:	19bb      	adds	r3, r7, r6
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	001c      	movs	r4, r3
 8006f7c:	19bb      	adds	r3, r7, r6
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	0018      	movs	r0, r3
 8006f82:	19bb      	adds	r3, r7, r6
 8006f84:	789b      	ldrb	r3, [r3, #2]
 8006f86:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff8 <ParseTime+0x128>)
 8006f88:	491c      	ldr	r1, [pc, #112]	@ (8006ffc <ParseTime+0x12c>)
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	9000      	str	r0, [sp, #0]
 8006f8e:	0023      	movs	r3, r4
 8006f90:	2003      	movs	r0, #3
 8006f92:	f007 ff9d 	bl	800eed0 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8006f96:	197b      	adds	r3, r7, r5
 8006f98:	789b      	ldrb	r3, [r3, #2]
 8006f9a:	001c      	movs	r4, r3
 8006f9c:	197b      	adds	r3, r7, r5
 8006f9e:	785b      	ldrb	r3, [r3, #1]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	197b      	adds	r3, r7, r5
 8006fa4:	78db      	ldrb	r3, [r3, #3]
 8006fa6:	4a16      	ldr	r2, [pc, #88]	@ (8007000 <ParseTime+0x130>)
 8006fa8:	4914      	ldr	r1, [pc, #80]	@ (8006ffc <ParseTime+0x12c>)
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	9000      	str	r0, [sp, #0]
 8006fae:	0023      	movs	r3, r4
 8006fb0:	2003      	movs	r0, #3
 8006fb2:	f007 ff8d 	bl	800eed0 <CreateLine>
  RTC_SetTime(&currentTime);
 8006fb6:	19bb      	adds	r3, r7, r6
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f000 f825 	bl	8007008 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006fbe:	197b      	adds	r3, r7, r5
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 f847 	bl	8007054 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006fc6:	197b      	adds	r3, r7, r5
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d101      	bne.n	8006fd2 <ParseTime+0x102>
    reset_fanCleaningDone();
 8006fce:	f002 fdb7 	bl	8009b40 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8006fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007004 <ParseTime+0x134>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006fda:	230c      	movs	r3, #12
 8006fdc:	18fa      	adds	r2, r7, r3
 8006fde:	2308      	movs	r3, #8
 8006fe0:	18fb      	adds	r3, r7, r3
 8006fe2:	0011      	movs	r1, r2
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f000 fa3f 	bl	8007468 <makeTime>
 8006fea:	0002      	movs	r2, r0
 8006fec:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <ParseTime+0x134>)
 8006fee:	601a      	str	r2, [r3, #0]
  }
}
 8006ff0:	46c0      	nop			@ (mov r8, r8)
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	b009      	add	sp, #36	@ 0x24
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff8:	08024d90 	.word	0x08024d90
 8006ffc:	08024dc8 	.word	0x08024dc8
 8007000:	08024dcc 	.word	0x08024dcc
 8007004:	20000a7c 	.word	0x20000a7c

08007008 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007022:	4b09      	ldr	r3, [pc, #36]	@ (8007048 <RTC_SetTime+0x40>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	0018      	movs	r0, r3
 800702c:	f00f fcb4 	bl	8016998 <HAL_RTC_SetTime>
 8007030:	1e03      	subs	r3, r0, #0
 8007032:	d005      	beq.n	8007040 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8007034:	4a05      	ldr	r2, [pc, #20]	@ (800704c <RTC_SetTime+0x44>)
 8007036:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <RTC_SetTime+0x48>)
 8007038:	0019      	movs	r1, r3
 800703a:	2001      	movs	r0, #1
 800703c:	f007 ff48 	bl	800eed0 <CreateLine>
    }
}
 8007040:	46c0      	nop			@ (mov r8, r8)
 8007042:	46bd      	mov	sp, r7
 8007044:	b002      	add	sp, #8
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000a78 	.word	0x20000a78
 800704c:	08024e00 	.word	0x08024e00
 8007050:	08024e1c 	.word	0x08024e1c

08007054 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800705c:	4b16      	ldr	r3, [pc, #88]	@ (80070b8 <RTC_SetDate+0x64>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	0018      	movs	r0, r3
 8007066:	f00f fd9f 	bl	8016ba8 <HAL_RTC_SetDate>
 800706a:	1e03      	subs	r3, r0, #0
 800706c:	d005      	beq.n	800707a <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800706e:	4a13      	ldr	r2, [pc, #76]	@ (80070bc <RTC_SetDate+0x68>)
 8007070:	4b13      	ldr	r3, [pc, #76]	@ (80070c0 <RTC_SetDate+0x6c>)
 8007072:	0019      	movs	r1, r3
 8007074:	2001      	movs	r0, #1
 8007076:	f007 ff2b 	bl	800eed0 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800707a:	4b0f      	ldr	r3, [pc, #60]	@ (80070b8 <RTC_SetDate+0x64>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2101      	movs	r1, #1
 8007080:	0018      	movs	r0, r3
 8007082:	f010 f8d7 	bl	8017234 <HAL_RTCEx_BKUPRead>
 8007086:	0003      	movs	r3, r0
 8007088:	4a0e      	ldr	r2, [pc, #56]	@ (80070c4 <RTC_SetDate+0x70>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d010      	beq.n	80070b0 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800708e:	4a0e      	ldr	r2, [pc, #56]	@ (80070c8 <RTC_SetDate+0x74>)
 8007090:	4b0e      	ldr	r3, [pc, #56]	@ (80070cc <RTC_SetDate+0x78>)
 8007092:	0019      	movs	r1, r3
 8007094:	2003      	movs	r0, #3
 8007096:	f007 ff1b 	bl	800eed0 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800709a:	f00e fbfd 	bl	8015898 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800709e:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <RTC_SetDate+0x64>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a08      	ldr	r2, [pc, #32]	@ (80070c4 <RTC_SetDate+0x70>)
 80070a4:	2101      	movs	r1, #1
 80070a6:	0018      	movs	r0, r3
 80070a8:	f010 f8ac 	bl	8017204 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80070ac:	f00e fc02 	bl	80158b4 <HAL_PWR_DisableBkUpAccess>
    }
}
 80070b0:	46c0      	nop			@ (mov r8, r8)
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b002      	add	sp, #8
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	20000a78 	.word	0x20000a78
 80070bc:	08024e20 	.word	0x08024e20
 80070c0:	08024e1c 	.word	0x08024e1c
 80070c4:	0000bebe 	.word	0x0000bebe
 80070c8:	08024e3c 	.word	0x08024e3c
 80070cc:	08024dc8 	.word	0x08024dc8

080070d0 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80070d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 80070da:	250f      	movs	r5, #15
 80070dc:	197b      	adds	r3, r7, r5
 80070de:	2201      	movs	r2, #1
 80070e0:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 80070e2:	230e      	movs	r3, #14
 80070e4:	18fb      	adds	r3, r7, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 80070ea:	260c      	movs	r6, #12
 80070ec:	19bc      	adds	r4, r7, r6
 80070ee:	f006 ff81 	bl	800dff4 <powerCheck>
 80070f2:	0003      	movs	r3, r0
 80070f4:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 80070f6:	19bb      	adds	r3, r7, r6
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 80070fe:	197b      	adds	r3, r7, r5
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	197b      	adds	r3, r7, r5
 8007104:	3201      	adds	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8007108:	230d      	movs	r3, #13
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	e039      	b.n	8007186 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8007112:	4b23      	ldr	r3, [pc, #140]	@ (80071a0 <RTC_GetTime+0xd0>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	0018      	movs	r0, r3
 800711c:	f00f fce6 	bl	8016aec <HAL_RTC_GetTime>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d005      	beq.n	8007130 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8007124:	4a1f      	ldr	r2, [pc, #124]	@ (80071a4 <RTC_GetTime+0xd4>)
 8007126:	4b20      	ldr	r3, [pc, #128]	@ (80071a8 <RTC_GetTime+0xd8>)
 8007128:	0019      	movs	r1, r3
 800712a:	2001      	movs	r0, #1
 800712c:	f007 fed0 	bl	800eed0 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8007130:	4b1b      	ldr	r3, [pc, #108]	@ (80071a0 <RTC_GetTime+0xd0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	0018      	movs	r0, r3
 800713a:	f00f fdc9 	bl	8016cd0 <HAL_RTC_GetDate>
 800713e:	1e03      	subs	r3, r0, #0
 8007140:	d005      	beq.n	800714e <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8007142:	4a1a      	ldr	r2, [pc, #104]	@ (80071ac <RTC_GetTime+0xdc>)
 8007144:	4b18      	ldr	r3, [pc, #96]	@ (80071a8 <RTC_GetTime+0xd8>)
 8007146:	0019      	movs	r1, r3
 8007148:	2001      	movs	r0, #1
 800714a:	f007 fec1 	bl	800eed0 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800714e:	230c      	movs	r3, #12
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d110      	bne.n	800717a <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	210e      	movs	r1, #14
 800715e:	187a      	adds	r2, r7, r1
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d018      	beq.n	8007198 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8007166:	187b      	adds	r3, r7, r1
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	701a      	strb	r2, [r3, #0]
        t++;
 800716e:	210f      	movs	r1, #15
 8007170:	187b      	adds	r3, r7, r1
 8007172:	781a      	ldrb	r2, [r3, #0]
 8007174:	187b      	adds	r3, r7, r1
 8007176:	3201      	adds	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800717a:	210d      	movs	r1, #13
 800717c:	187b      	adds	r3, r7, r1
 800717e:	781a      	ldrb	r2, [r3, #0]
 8007180:	187b      	adds	r3, r7, r1
 8007182:	3201      	adds	r2, #1
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	230d      	movs	r3, #13
 8007188:	18fa      	adds	r2, r7, r3
 800718a:	230f      	movs	r3, #15
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d3bd      	bcc.n	8007112 <RTC_GetTime+0x42>
 8007196:	e000      	b.n	800719a <RTC_GetTime+0xca>
      }
      else {
        return;
 8007198:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800719a:	46bd      	mov	sp, r7
 800719c:	b005      	add	sp, #20
 800719e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a0:	20000a78 	.word	0x20000a78
 80071a4:	08024e54 	.word	0x08024e54
 80071a8:	08024e1c 	.word	0x08024e1c
 80071ac:	08024e70 	.word	0x08024e70

080071b0 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80071b6:	003a      	movs	r2, r7
 80071b8:	1d3b      	adds	r3, r7, #4
 80071ba:	0011      	movs	r1, r2
 80071bc:	0018      	movs	r0, r3
 80071be:	f7ff ff87 	bl	80070d0 <RTC_GetTime>
  return currentDate.WeekDay;
 80071c2:	003b      	movs	r3, r7
 80071c4:	781b      	ldrb	r3, [r3, #0]
}
 80071c6:	0018      	movs	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b006      	add	sp, #24
 80071cc:	bd80      	pop	{r7, pc}

080071ce <getPosixTime>:

uint32_t getPosixTime(void) {
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b086      	sub	sp, #24
 80071d2:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80071d4:	003a      	movs	r2, r7
 80071d6:	1d3b      	adds	r3, r7, #4
 80071d8:	0011      	movs	r1, r2
 80071da:	0018      	movs	r0, r3
 80071dc:	f7ff ff78 	bl	80070d0 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 80071e0:	1d3a      	adds	r2, r7, #4
 80071e2:	003b      	movs	r3, r7
 80071e4:	0011      	movs	r1, r2
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 f93e 	bl	8007468 <makeTime>
 80071ec:	0003      	movs	r3, r0
}
 80071ee:	0018      	movs	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b006      	add	sp, #24
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fa:	b08d      	sub	sp, #52	@ 0x34
 80071fc:	af04      	add	r7, sp, #16
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8007202:	240c      	movs	r4, #12
 8007204:	193a      	adds	r2, r7, r4
 8007206:	2508      	movs	r5, #8
 8007208:	1979      	adds	r1, r7, r5
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	0018      	movs	r0, r3
 800720e:	f000 f9f5 	bl	80075fc <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007212:	002a      	movs	r2, r5
 8007214:	18bb      	adds	r3, r7, r2
 8007216:	789b      	ldrb	r3, [r3, #2]
 8007218:	001e      	movs	r6, r3
 800721a:	18bb      	adds	r3, r7, r2
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	469c      	mov	ip, r3
 8007220:	18bb      	adds	r3, r7, r2
 8007222:	78db      	ldrb	r3, [r3, #3]
 8007224:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007226:	0021      	movs	r1, r4
 8007228:	187b      	adds	r3, r7, r1
 800722a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800722c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800722e:	187b      	adds	r3, r7, r1
 8007230:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007232:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8007234:	187b      	adds	r3, r7, r1
 8007236:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8007238:	4906      	ldr	r1, [pc, #24]	@ (8007254 <getUTCfromPosixTime+0x5c>)
 800723a:	6838      	ldr	r0, [r7, #0]
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	9502      	str	r5, [sp, #8]
 8007240:	9401      	str	r4, [sp, #4]
 8007242:	9200      	str	r2, [sp, #0]
 8007244:	4663      	mov	r3, ip
 8007246:	0032      	movs	r2, r6
 8007248:	f019 fb9a 	bl	8020980 <siprintf>
}
 800724c:	46c0      	nop			@ (mov r8, r8)
 800724e:	46bd      	mov	sp, r7
 8007250:	b009      	add	sp, #36	@ 0x24
 8007252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007254:	08024e8c 	.word	0x08024e8c

08007258 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8007260:	4b10      	ldr	r3, [pc, #64]	@ (80072a4 <RTC_SetWakeUpTimer+0x4c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	0018      	movs	r0, r3
 8007266:	f00f ff31 	bl	80170cc <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800726a:	4b0e      	ldr	r3, [pc, #56]	@ (80072a4 <RTC_SetWakeUpTimer+0x4c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	22ff      	movs	r2, #255	@ 0xff
 8007274:	401a      	ands	r2, r3
 8007276:	4b0b      	ldr	r3, [pc, #44]	@ (80072a4 <RTC_SetWakeUpTimer+0x4c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	490a      	ldr	r1, [pc, #40]	@ (80072a8 <RTC_SetWakeUpTimer+0x50>)
 800727e:	430a      	orrs	r2, r1
 8007280:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007282:	4b0a      	ldr	r3, [pc, #40]	@ (80072ac <RTC_SetWakeUpTimer+0x54>)
 8007284:	2280      	movs	r2, #128	@ 0x80
 8007286:	0352      	lsls	r2, r2, #13
 8007288:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <RTC_SetWakeUpTimer+0x4c>)
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3b01      	subs	r3, #1
 8007292:	2204      	movs	r2, #4
 8007294:	0019      	movs	r1, r3
 8007296:	f00f fe41 	bl	8016f1c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800729a:	46c0      	nop			@ (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b002      	add	sp, #8
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	20000a78 	.word	0x20000a78
 80072a8:	fffffb7f 	.word	0xfffffb7f
 80072ac:	40010400 	.word	0x40010400

080072b0 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80072b4:	4a0b      	ldr	r2, [pc, #44]	@ (80072e4 <Enter_Standby_Mode+0x34>)
 80072b6:	4b0c      	ldr	r3, [pc, #48]	@ (80072e8 <Enter_Standby_Mode+0x38>)
 80072b8:	0019      	movs	r1, r3
 80072ba:	2003      	movs	r0, #3
 80072bc:	f007 fe08 	bl	800eed0 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80072c0:	2064      	movs	r0, #100	@ 0x64
 80072c2:	f008 fa53 	bl	800f76c <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80072c6:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <Enter_Standby_Mode+0x3c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	0018      	movs	r0, r3
 80072cc:	f00f fefe 	bl	80170cc <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80072d0:	f000 febc 	bl	800804c <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80072d4:	f008 fa6e 	bl	800f7b4 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80072d8:	f00e fb58 	bl	801598c <HAL_PWR_EnterSTANDBYMode>
}
 80072dc:	46c0      	nop			@ (mov r8, r8)
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	46c0      	nop			@ (mov r8, r8)
 80072e4:	08024ee0 	.word	0x08024ee0
 80072e8:	08024dc8 	.word	0x08024dc8
 80072ec:	20000a78 	.word	0x20000a78

080072f0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	0002      	movs	r2, r0
 80072f8:	1dbb      	adds	r3, r7, #6
 80072fa:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 80072fc:	4b47      	ldr	r3, [pc, #284]	@ (800741c <Enter_Stop_Mode+0x12c>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8007304:	f002 fbf0 	bl	8009ae8 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8007308:	f7ff fbc0 	bl	8006a8c <ReadBatteryVoltage>
 800730c:	1c03      	adds	r3, r0, #0
 800730e:	1c18      	adds	r0, r3, #0
 8007310:	f7fc f8a8 	bl	8003464 <__aeabi_f2d>
 8007314:	0002      	movs	r2, r0
 8007316:	000b      	movs	r3, r1
 8007318:	4841      	ldr	r0, [pc, #260]	@ (8007420 <Enter_Stop_Mode+0x130>)
 800731a:	4942      	ldr	r1, [pc, #264]	@ (8007424 <Enter_Stop_Mode+0x134>)
 800731c:	9200      	str	r2, [sp, #0]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	0002      	movs	r2, r0
 8007322:	2002      	movs	r0, #2
 8007324:	f007 fdd4 	bl	800eed0 <CreateLine>
  powerDisplay(powerCheck());
 8007328:	f006 fe64 	bl	800dff4 <powerCheck>
 800732c:	0003      	movs	r3, r0
 800732e:	0018      	movs	r0, r3
 8007330:	f006 fe7c 	bl	800e02c <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8007334:	1dbb      	adds	r3, r7, #6
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	4a3b      	ldr	r2, [pc, #236]	@ (8007428 <Enter_Stop_Mode+0x138>)
 800733a:	493c      	ldr	r1, [pc, #240]	@ (800742c <Enter_Stop_Mode+0x13c>)
 800733c:	2003      	movs	r0, #3
 800733e:	f007 fdc7 	bl	800eed0 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8007342:	f7ff ff44 	bl	80071ce <getPosixTime>
 8007346:	0002      	movs	r2, r0
 8007348:	1dbb      	adds	r3, r7, #6
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	18d3      	adds	r3, r2, r3
 800734e:	4a38      	ldr	r2, [pc, #224]	@ (8007430 <Enter_Stop_Mode+0x140>)
 8007350:	0011      	movs	r1, r2
 8007352:	0018      	movs	r0, r3
 8007354:	f7ff ff50 	bl	80071f8 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8007358:	4b35      	ldr	r3, [pc, #212]	@ (8007430 <Enter_Stop_Mode+0x140>)
 800735a:	4a36      	ldr	r2, [pc, #216]	@ (8007434 <Enter_Stop_Mode+0x144>)
 800735c:	4931      	ldr	r1, [pc, #196]	@ (8007424 <Enter_Stop_Mode+0x134>)
 800735e:	2002      	movs	r0, #2
 8007360:	f007 fdb6 	bl	800eed0 <CreateLine>
  HAL_Delay(100);
 8007364:	2064      	movs	r0, #100	@ 0x64
 8007366:	f008 fa01 	bl	800f76c <HAL_Delay>
  HAL_SuspendTick();
 800736a:	f008 fa23 	bl	800f7b4 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800736e:	1dbb      	adds	r3, r7, #6
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	0018      	movs	r0, r3
 8007374:	f7ff ff70 	bl	8007258 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8007378:	2101      	movs	r1, #1
 800737a:	2001      	movs	r0, #1
 800737c:	f00e faaa 	bl	80158d4 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8007380:	f001 fb12 	bl	80089a8 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8007384:	f008 fa24 	bl	800f7d0 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8007388:	1dbb      	adds	r3, r7, #6
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	0018      	movs	r0, r3
 800738e:	f002 fb29 	bl	80099e4 <sen5x_enable>
 8007392:	1e03      	subs	r3, r0, #0
 8007394:	d01e      	beq.n	80073d4 <Enter_Stop_Mode+0xe4>
    showTime();
 8007396:	f7ff fc5f 	bl	8006c58 <showTime>
    set_light_on_state();
 800739a:	f003 f827 	bl	800a3ec <set_light_on_state>
    if (!userToggle) {
 800739e:	4b26      	ldr	r3, [pc, #152]	@ (8007438 <Enter_Stop_Mode+0x148>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2201      	movs	r2, #1
 80073a4:	4053      	eors	r3, r2
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d013      	beq.n	80073d4 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 80073ac:	201c      	movs	r0, #28
 80073ae:	f7ff ff53 	bl	8007258 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80073b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007428 <Enter_Stop_Mode+0x138>)
 80073b4:	491d      	ldr	r1, [pc, #116]	@ (800742c <Enter_Stop_Mode+0x13c>)
 80073b6:	231c      	movs	r3, #28
 80073b8:	2003      	movs	r0, #3
 80073ba:	f007 fd89 	bl	800eed0 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80073be:	2101      	movs	r1, #1
 80073c0:	2001      	movs	r0, #1
 80073c2:	f00e fa87 	bl	80158d4 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80073c6:	f001 faef 	bl	80089a8 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 80073ca:	f008 fa01 	bl	800f7d0 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 80073ce:	2000      	movs	r0, #0
 80073d0:	f002 fae6 	bl	80099a0 <setsen5xReadTimer>
    }
  }
  showTime();
 80073d4:	f7ff fc40 	bl	8006c58 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 80073d8:	f001 ff7c 	bl	80092d4 <ResetDBACalculator>
  ResetSGP40samplecounter();
 80073dc:	f004 fe66 	bl	800c0ac <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 80073e0:	2000      	movs	r0, #0
 80073e2:	f002 faef 	bl	80099c4 <setsen5xSamplecounter>
  setESPTimeStamp(4500);
 80073e6:	4b15      	ldr	r3, [pc, #84]	@ (800743c <Enter_Stop_Mode+0x14c>)
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7fc f93b 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 80073ee:	2000      	movs	r0, #0
 80073f0:	f004 fe4a 	bl	800c088 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 80073f4:	2000      	movs	r0, #0
 80073f6:	f007 ff2f 	bl	800f258 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 80073fa:	2000      	movs	r0, #0
 80073fc:	f001 ff58 	bl	80092b0 <setMICTimeStamp>
  ESPTransmitDone = false;
 8007400:	4b0f      	ldr	r3, [pc, #60]	@ (8007440 <Enter_Stop_Mode+0x150>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 3000;
 8007406:	f008 f9a7 	bl	800f758 <HAL_GetTick>
 800740a:	0003      	movs	r3, r0
 800740c:	4a0d      	ldr	r2, [pc, #52]	@ (8007444 <Enter_Stop_Mode+0x154>)
 800740e:	189a      	adds	r2, r3, r2
 8007410:	4b0d      	ldr	r3, [pc, #52]	@ (8007448 <Enter_Stop_Mode+0x158>)
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	46c0      	nop			@ (mov r8, r8)
 8007416:	46bd      	mov	sp, r7
 8007418:	b002      	add	sp, #8
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20000d69 	.word	0x20000d69
 8007420:	08024f04 	.word	0x08024f04
 8007424:	08024f1c 	.word	0x08024f1c
 8007428:	08024f20 	.word	0x08024f20
 800742c:	08024dc8 	.word	0x08024dc8
 8007430:	20000a80 	.word	0x20000a80
 8007434:	08024f44 	.word	0x08024f44
 8007438:	20001cfa 	.word	0x20001cfa
 800743c:	00001194 	.word	0x00001194
 8007440:	20000554 	.word	0x20000554
 8007444:	00000bb8 	.word	0x00000bb8
 8007448:	20000ccc 	.word	0x20000ccc

0800744c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8007454:	4b03      	ldr	r3, [pc, #12]	@ (8007464 <InitClock+0x18>)
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	601a      	str	r2, [r3, #0]
}
 800745a:	46c0      	nop			@ (mov r8, r8)
 800745c:	46bd      	mov	sp, r7
 800745e:	b002      	add	sp, #8
 8007460:	bd80      	pop	{r7, pc}
 8007462:	46c0      	nop			@ (mov r8, r8)
 8007464:	20000a78 	.word	0x20000a78

08007468 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	78db      	ldrb	r3, [r3, #3]
 8007476:	001a      	movs	r2, r3
 8007478:	0013      	movs	r3, r2
 800747a:	025b      	lsls	r3, r3, #9
 800747c:	189b      	adds	r3, r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	189b      	adds	r3, r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	189b      	adds	r3, r3, r2
 8007486:	011a      	lsls	r2, r3, #4
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	01d3      	lsls	r3, r2, #7
 800748c:	001a      	movs	r2, r3
 800748e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	e028      	b.n	80074e8 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4a53      	ldr	r2, [pc, #332]	@ (80075e8 <makeTime+0x180>)
 800749a:	4293      	cmp	r3, r2
 800749c:	db21      	blt.n	80074e2 <makeTime+0x7a>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a52      	ldr	r2, [pc, #328]	@ (80075ec <makeTime+0x184>)
 80074a2:	4694      	mov	ip, r2
 80074a4:	4463      	add	r3, ip
 80074a6:	001a      	movs	r2, r3
 80074a8:	2303      	movs	r3, #3
 80074aa:	4013      	ands	r3, r2
 80074ac:	d119      	bne.n	80074e2 <makeTime+0x7a>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4a4e      	ldr	r2, [pc, #312]	@ (80075ec <makeTime+0x184>)
 80074b2:	4694      	mov	ip, r2
 80074b4:	4463      	add	r3, ip
 80074b6:	2164      	movs	r1, #100	@ 0x64
 80074b8:	0018      	movs	r0, r3
 80074ba:	f7f8 ffe3 	bl	8000484 <__aeabi_idivmod>
 80074be:	1e0b      	subs	r3, r1, #0
 80074c0:	d10a      	bne.n	80074d8 <makeTime+0x70>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a49      	ldr	r2, [pc, #292]	@ (80075ec <makeTime+0x184>)
 80074c6:	4694      	mov	ip, r2
 80074c8:	4463      	add	r3, ip
 80074ca:	22c8      	movs	r2, #200	@ 0xc8
 80074cc:	0051      	lsls	r1, r2, #1
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7f8 ffd8 	bl	8000484 <__aeabi_idivmod>
 80074d4:	1e0b      	subs	r3, r1, #0
 80074d6:	d104      	bne.n	80074e2 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4a45      	ldr	r2, [pc, #276]	@ (80075f0 <makeTime+0x188>)
 80074dc:	4694      	mov	ip, r2
 80074de:	4463      	add	r3, ip
 80074e0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	78db      	ldrb	r3, [r3, #3]
 80074ec:	001a      	movs	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	dbd0      	blt.n	8007496 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 80074f4:	2301      	movs	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	e03c      	b.n	8007574 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d125      	bne.n	800754c <makeTime+0xe4>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	78db      	ldrb	r3, [r3, #3]
 8007504:	4a39      	ldr	r2, [pc, #228]	@ (80075ec <makeTime+0x184>)
 8007506:	4694      	mov	ip, r2
 8007508:	4463      	add	r3, ip
 800750a:	001a      	movs	r2, r3
 800750c:	2303      	movs	r3, #3
 800750e:	4013      	ands	r3, r2
 8007510:	d11c      	bne.n	800754c <makeTime+0xe4>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	78db      	ldrb	r3, [r3, #3]
 8007516:	4a35      	ldr	r2, [pc, #212]	@ (80075ec <makeTime+0x184>)
 8007518:	4694      	mov	ip, r2
 800751a:	4463      	add	r3, ip
 800751c:	2164      	movs	r1, #100	@ 0x64
 800751e:	0018      	movs	r0, r3
 8007520:	f7f8 ffb0 	bl	8000484 <__aeabi_idivmod>
 8007524:	1e0b      	subs	r3, r1, #0
 8007526:	d10b      	bne.n	8007540 <makeTime+0xd8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	78db      	ldrb	r3, [r3, #3]
 800752c:	4a2f      	ldr	r2, [pc, #188]	@ (80075ec <makeTime+0x184>)
 800752e:	4694      	mov	ip, r2
 8007530:	4463      	add	r3, ip
 8007532:	22c8      	movs	r2, #200	@ 0xc8
 8007534:	0051      	lsls	r1, r2, #1
 8007536:	0018      	movs	r0, r3
 8007538:	f7f8 ffa4 	bl	8000484 <__aeabi_idivmod>
 800753c:	1e0b      	subs	r3, r1, #0
 800753e:	d105      	bne.n	800754c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4a2c      	ldr	r2, [pc, #176]	@ (80075f4 <makeTime+0x18c>)
 8007544:	4694      	mov	ip, r2
 8007546:	4463      	add	r3, ip
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	e010      	b.n	800756e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3b01      	subs	r3, #1
 8007550:	4a29      	ldr	r2, [pc, #164]	@ (80075f8 <makeTime+0x190>)
 8007552:	5cd3      	ldrb	r3, [r2, r3]
 8007554:	001a      	movs	r2, r3
 8007556:	0013      	movs	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	189b      	adds	r3, r3, r2
 800755c:	011a      	lsls	r2, r3, #4
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	0113      	lsls	r3, r2, #4
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	01db      	lsls	r3, r3, #7
 8007566:	001a      	movs	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	189b      	adds	r3, r3, r2
 800756c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	001a      	movs	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4293      	cmp	r3, r2
 800757e:	dbbc      	blt.n	80074fa <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	789b      	ldrb	r3, [r3, #2]
 8007584:	3b01      	subs	r3, #1
 8007586:	001a      	movs	r2, r3
 8007588:	0013      	movs	r3, r2
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	189b      	adds	r3, r3, r2
 800758e:	011a      	lsls	r2, r3, #4
 8007590:	1ad2      	subs	r2, r2, r3
 8007592:	0113      	lsls	r3, r2, #4
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	001a      	movs	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	189b      	adds	r3, r3, r2
 800759e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	001a      	movs	r2, r3
 80075a6:	0013      	movs	r3, r2
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	011a      	lsls	r2, r3, #4
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	0113      	lsls	r3, r2, #4
 80075b2:	001a      	movs	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	001a      	movs	r2, r3
 80075c0:	0013      	movs	r3, r2
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	001a      	movs	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	189b      	adds	r3, r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	001a      	movs	r2, r3
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	189b      	adds	r3, r3, r2
 80075da:	60bb      	str	r3, [r7, #8]
  return seconds;
 80075dc:	68bb      	ldr	r3, [r7, #8]
}
 80075de:	0018      	movs	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	b004      	add	sp, #16
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	46c0      	nop			@ (mov r8, r8)
 80075e8:	fffff84f 	.word	0xfffff84f
 80075ec:	000007b2 	.word	0x000007b2
 80075f0:	00015180 	.word	0x00015180
 80075f4:	00263b80 	.word	0x00263b80
 80075f8:	080264e0 	.word	0x080264e0

080075fc <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80075fc:	b590      	push	{r4, r7, lr}
 80075fe:	b089      	sub	sp, #36	@ 0x24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	213c      	movs	r1, #60	@ 0x3c
 8007610:	0018      	movs	r0, r3
 8007612:	f7f8 fe4d 	bl	80002b0 <__aeabi_uidivmod>
 8007616:	000b      	movs	r3, r1
 8007618:	b2da      	uxtb	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	213c      	movs	r1, #60	@ 0x3c
 8007622:	0018      	movs	r0, r3
 8007624:	f7f8 fdbe 	bl	80001a4 <__udivsi3>
 8007628:	0003      	movs	r3, r0
 800762a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	213c      	movs	r1, #60	@ 0x3c
 8007630:	0018      	movs	r0, r3
 8007632:	f7f8 fe3d 	bl	80002b0 <__aeabi_uidivmod>
 8007636:	000b      	movs	r3, r1
 8007638:	b2da      	uxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	213c      	movs	r1, #60	@ 0x3c
 8007642:	0018      	movs	r0, r3
 8007644:	f7f8 fdae 	bl	80001a4 <__udivsi3>
 8007648:	0003      	movs	r3, r0
 800764a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2118      	movs	r1, #24
 8007650:	0018      	movs	r0, r3
 8007652:	f7f8 fe2d 	bl	80002b0 <__aeabi_uidivmod>
 8007656:	000b      	movs	r3, r1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2118      	movs	r1, #24
 8007662:	0018      	movs	r0, r3
 8007664:	f7f8 fd9e 	bl	80001a4 <__udivsi3>
 8007668:	0003      	movs	r3, r0
 800766a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	3b01      	subs	r3, #1
 8007670:	2107      	movs	r1, #7
 8007672:	0018      	movs	r0, r3
 8007674:	f7f8 fe1c 	bl	80002b0 <__aeabi_uidivmod>
 8007678:	000b      	movs	r3, r1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	3301      	adds	r3, #1
 800767e:	b2da      	uxtb	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	701a      	strb	r2, [r3, #0]
  year = 0;
 8007684:	231f      	movs	r3, #31
 8007686:	18fb      	adds	r3, r7, r3
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8007690:	e005      	b.n	800769e <breakPosixTime+0xa2>
    year++;
 8007692:	211f      	movs	r1, #31
 8007694:	187b      	adds	r3, r7, r1
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	187b      	adds	r3, r7, r1
 800769a:	3201      	adds	r2, #1
 800769c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800769e:	241f      	movs	r4, #31
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	4a64      	ldr	r2, [pc, #400]	@ (8007838 <breakPosixTime+0x23c>)
 80076a6:	4694      	mov	ip, r2
 80076a8:	4463      	add	r3, ip
 80076aa:	001a      	movs	r2, r3
 80076ac:	2303      	movs	r3, #3
 80076ae:	4013      	ands	r3, r2
 80076b0:	d119      	bne.n	80076e6 <breakPosixTime+0xea>
 80076b2:	193b      	adds	r3, r7, r4
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	4a60      	ldr	r2, [pc, #384]	@ (8007838 <breakPosixTime+0x23c>)
 80076b8:	4694      	mov	ip, r2
 80076ba:	4463      	add	r3, ip
 80076bc:	2164      	movs	r1, #100	@ 0x64
 80076be:	0018      	movs	r0, r3
 80076c0:	f7f8 fee0 	bl	8000484 <__aeabi_idivmod>
 80076c4:	1e0b      	subs	r3, r1, #0
 80076c6:	d10b      	bne.n	80076e0 <breakPosixTime+0xe4>
 80076c8:	193b      	adds	r3, r7, r4
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	4a5a      	ldr	r2, [pc, #360]	@ (8007838 <breakPosixTime+0x23c>)
 80076ce:	4694      	mov	ip, r2
 80076d0:	4463      	add	r3, ip
 80076d2:	22c8      	movs	r2, #200	@ 0xc8
 80076d4:	0051      	lsls	r1, r2, #1
 80076d6:	0018      	movs	r0, r3
 80076d8:	f7f8 fed4 	bl	8000484 <__aeabi_idivmod>
 80076dc:	1e0b      	subs	r3, r1, #0
 80076de:	d102      	bne.n	80076e6 <breakPosixTime+0xea>
 80076e0:	23b7      	movs	r3, #183	@ 0xb7
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	e001      	b.n	80076ea <breakPosixTime+0xee>
 80076e6:	236e      	movs	r3, #110	@ 0x6e
 80076e8:	33ff      	adds	r3, #255	@ 0xff
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	18d3      	adds	r3, r2, r3
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d9cc      	bls.n	8007692 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	241f      	movs	r4, #31
 80076fc:	193a      	adds	r2, r7, r4
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8007702:	193b      	adds	r3, r7, r4
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	4a4c      	ldr	r2, [pc, #304]	@ (8007838 <breakPosixTime+0x23c>)
 8007708:	4694      	mov	ip, r2
 800770a:	4463      	add	r3, ip
 800770c:	001a      	movs	r2, r3
 800770e:	2303      	movs	r3, #3
 8007710:	4013      	ands	r3, r2
 8007712:	d119      	bne.n	8007748 <breakPosixTime+0x14c>
 8007714:	193b      	adds	r3, r7, r4
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4a47      	ldr	r2, [pc, #284]	@ (8007838 <breakPosixTime+0x23c>)
 800771a:	4694      	mov	ip, r2
 800771c:	4463      	add	r3, ip
 800771e:	2164      	movs	r1, #100	@ 0x64
 8007720:	0018      	movs	r0, r3
 8007722:	f7f8 feaf 	bl	8000484 <__aeabi_idivmod>
 8007726:	1e0b      	subs	r3, r1, #0
 8007728:	d10b      	bne.n	8007742 <breakPosixTime+0x146>
 800772a:	193b      	adds	r3, r7, r4
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	4a42      	ldr	r2, [pc, #264]	@ (8007838 <breakPosixTime+0x23c>)
 8007730:	4694      	mov	ip, r2
 8007732:	4463      	add	r3, ip
 8007734:	22c8      	movs	r2, #200	@ 0xc8
 8007736:	0051      	lsls	r1, r2, #1
 8007738:	0018      	movs	r0, r3
 800773a:	f7f8 fea3 	bl	8000484 <__aeabi_idivmod>
 800773e:	1e0b      	subs	r3, r1, #0
 8007740:	d102      	bne.n	8007748 <breakPosixTime+0x14c>
 8007742:	23b7      	movs	r3, #183	@ 0xb7
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	e001      	b.n	800774c <breakPosixTime+0x150>
 8007748:	236e      	movs	r3, #110	@ 0x6e
 800774a:	33ff      	adds	r3, #255	@ 0xff
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	61bb      	str	r3, [r7, #24]

  days=0;
 800775a:	2300      	movs	r3, #0
 800775c:	617b      	str	r3, [r7, #20]
  month=0;
 800775e:	211e      	movs	r1, #30
 8007760:	187b      	adds	r3, r7, r1
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8007766:	231d      	movs	r3, #29
 8007768:	18fb      	adds	r3, r7, r3
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800776e:	187b      	adds	r3, r7, r1
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e048      	b.n	8007808 <breakPosixTime+0x20c>
    if (month==1) { // february
 8007776:	231e      	movs	r3, #30
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d12a      	bne.n	80077d6 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8007780:	241f      	movs	r4, #31
 8007782:	193b      	adds	r3, r7, r4
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	4a2c      	ldr	r2, [pc, #176]	@ (8007838 <breakPosixTime+0x23c>)
 8007788:	4694      	mov	ip, r2
 800778a:	4463      	add	r3, ip
 800778c:	001a      	movs	r2, r3
 800778e:	2303      	movs	r3, #3
 8007790:	4013      	ands	r3, r2
 8007792:	d11b      	bne.n	80077cc <breakPosixTime+0x1d0>
 8007794:	193b      	adds	r3, r7, r4
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	4a27      	ldr	r2, [pc, #156]	@ (8007838 <breakPosixTime+0x23c>)
 800779a:	4694      	mov	ip, r2
 800779c:	4463      	add	r3, ip
 800779e:	2164      	movs	r1, #100	@ 0x64
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7f8 fe6f 	bl	8000484 <__aeabi_idivmod>
 80077a6:	1e0b      	subs	r3, r1, #0
 80077a8:	d10b      	bne.n	80077c2 <breakPosixTime+0x1c6>
 80077aa:	193b      	adds	r3, r7, r4
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	4a22      	ldr	r2, [pc, #136]	@ (8007838 <breakPosixTime+0x23c>)
 80077b0:	4694      	mov	ip, r2
 80077b2:	4463      	add	r3, ip
 80077b4:	22c8      	movs	r2, #200	@ 0xc8
 80077b6:	0051      	lsls	r1, r2, #1
 80077b8:	0018      	movs	r0, r3
 80077ba:	f7f8 fe63 	bl	8000484 <__aeabi_idivmod>
 80077be:	1e0b      	subs	r3, r1, #0
 80077c0:	d104      	bne.n	80077cc <breakPosixTime+0x1d0>
        monthLength=29;
 80077c2:	231d      	movs	r3, #29
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	221d      	movs	r2, #29
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	e00c      	b.n	80077e6 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 80077cc:	231d      	movs	r3, #29
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	221c      	movs	r2, #28
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e007      	b.n	80077e6 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 80077d6:	231e      	movs	r3, #30
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	231d      	movs	r3, #29
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	4916      	ldr	r1, [pc, #88]	@ (800783c <breakPosixTime+0x240>)
 80077e2:	5c8a      	ldrb	r2, [r1, r2]
 80077e4:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 80077e6:	211d      	movs	r1, #29
 80077e8:	187b      	adds	r3, r7, r1
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d310      	bcc.n	8007814 <breakPosixTime+0x218>
      time -= monthLength;
 80077f2:	187b      	adds	r3, r7, r1
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	69ba      	ldr	r2, [r7, #24]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 80077fc:	211e      	movs	r1, #30
 80077fe:	187b      	adds	r3, r7, r1
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	187b      	adds	r3, r7, r1
 8007804:	3201      	adds	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	231e      	movs	r3, #30
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b0b      	cmp	r3, #11
 8007810:	d9b1      	bls.n	8007776 <breakPosixTime+0x17a>
 8007812:	e000      	b.n	8007816 <breakPosixTime+0x21a>
    } else {
        break;
 8007814:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007816:	231e      	movs	r3, #30
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	b2da      	uxtb	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3301      	adds	r3, #1
 800782a:	b2da      	uxtb	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	709a      	strb	r2, [r3, #2]
}
 8007830:	46c0      	nop			@ (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b009      	add	sp, #36	@ 0x24
 8007836:	bd90      	pop	{r4, r7, pc}
 8007838:	000007b2 	.word	0x000007b2
 800783c:	080264e0 	.word	0x080264e0

08007840 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007846:	003b      	movs	r3, r7
 8007848:	0018      	movs	r0, r3
 800784a:	2308      	movs	r3, #8
 800784c:	001a      	movs	r2, r3
 800784e:	2100      	movs	r1, #0
 8007850:	f019 f9fc 	bl	8020c4c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007854:	4b30      	ldr	r3, [pc, #192]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007856:	4a31      	ldr	r2, [pc, #196]	@ (800791c <MX_ADC_Init+0xdc>)
 8007858:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800785a:	4b2f      	ldr	r3, [pc, #188]	@ (8007918 <MX_ADC_Init+0xd8>)
 800785c:	2200      	movs	r2, #0
 800785e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007860:	4b2d      	ldr	r3, [pc, #180]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007862:	22c0      	movs	r2, #192	@ 0xc0
 8007864:	0612      	lsls	r2, r2, #24
 8007866:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007868:	4b2b      	ldr	r3, [pc, #172]	@ (8007918 <MX_ADC_Init+0xd8>)
 800786a:	2200      	movs	r2, #0
 800786c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800786e:	4b2a      	ldr	r3, [pc, #168]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007870:	2200      	movs	r2, #0
 8007872:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8007874:	4b28      	ldr	r3, [pc, #160]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007876:	2201      	movs	r2, #1
 8007878:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800787a:	4b27      	ldr	r3, [pc, #156]	@ (8007918 <MX_ADC_Init+0xd8>)
 800787c:	2200      	movs	r2, #0
 800787e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8007880:	4b25      	ldr	r3, [pc, #148]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007882:	2220      	movs	r2, #32
 8007884:	2100      	movs	r1, #0
 8007886:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8007888:	4b23      	ldr	r3, [pc, #140]	@ (8007918 <MX_ADC_Init+0xd8>)
 800788a:	2221      	movs	r2, #33	@ 0x21
 800788c:	2101      	movs	r1, #1
 800788e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007890:	4b21      	ldr	r3, [pc, #132]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007892:	2200      	movs	r2, #0
 8007894:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007896:	4b20      	ldr	r3, [pc, #128]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007898:	22c2      	movs	r2, #194	@ 0xc2
 800789a:	32ff      	adds	r2, #255	@ 0xff
 800789c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078a0:	222c      	movs	r2, #44	@ 0x2c
 80078a2:	2100      	movs	r1, #0
 80078a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80078a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078a8:	2204      	movs	r2, #4
 80078aa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80078ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80078b2:	4b19      	ldr	r3, [pc, #100]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80078b8:	4b17      	ldr	r3, [pc, #92]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80078be:	4b16      	ldr	r3, [pc, #88]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80078c4:	4b14      	ldr	r3, [pc, #80]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078c6:	0018      	movs	r0, r3
 80078c8:	f007 ffae 	bl	800f828 <HAL_ADC_Init>
 80078cc:	1e03      	subs	r3, r0, #0
 80078ce:	d001      	beq.n	80078d4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80078d0:	f001 f9b0 	bl	8008c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80078d4:	003b      	movs	r3, r7
 80078d6:	4a12      	ldr	r2, [pc, #72]	@ (8007920 <MX_ADC_Init+0xe0>)
 80078d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80078da:	003b      	movs	r3, r7
 80078dc:	2280      	movs	r2, #128	@ 0x80
 80078de:	0152      	lsls	r2, r2, #5
 80078e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80078e2:	003a      	movs	r2, r7
 80078e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <MX_ADC_Init+0xd8>)
 80078e6:	0011      	movs	r1, r2
 80078e8:	0018      	movs	r0, r3
 80078ea:	f008 fa0d 	bl	800fd08 <HAL_ADC_ConfigChannel>
 80078ee:	1e03      	subs	r3, r0, #0
 80078f0:	d001      	beq.n	80078f6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80078f2:	f001 f99f 	bl	8008c34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80078f6:	003b      	movs	r3, r7
 80078f8:	4a0a      	ldr	r2, [pc, #40]	@ (8007924 <MX_ADC_Init+0xe4>)
 80078fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80078fc:	003a      	movs	r2, r7
 80078fe:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <MX_ADC_Init+0xd8>)
 8007900:	0011      	movs	r1, r2
 8007902:	0018      	movs	r0, r3
 8007904:	f008 fa00 	bl	800fd08 <HAL_ADC_ConfigChannel>
 8007908:	1e03      	subs	r3, r0, #0
 800790a:	d001      	beq.n	8007910 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800790c:	f001 f992 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007910:	46c0      	nop			@ (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b002      	add	sp, #8
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20000a98 	.word	0x20000a98
 800791c:	40012400 	.word	0x40012400
 8007920:	38004000 	.word	0x38004000
 8007924:	3c008000 	.word	0x3c008000

08007928 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b089      	sub	sp, #36	@ 0x24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007930:	240c      	movs	r4, #12
 8007932:	193b      	adds	r3, r7, r4
 8007934:	0018      	movs	r0, r3
 8007936:	2314      	movs	r3, #20
 8007938:	001a      	movs	r2, r3
 800793a:	2100      	movs	r1, #0
 800793c:	f019 f986 	bl	8020c4c <memset>
  if(adcHandle->Instance==ADC1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a14      	ldr	r2, [pc, #80]	@ (8007998 <HAL_ADC_MspInit+0x70>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d121      	bne.n	800798e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800794a:	4b14      	ldr	r3, [pc, #80]	@ (800799c <HAL_ADC_MspInit+0x74>)
 800794c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800794e:	4b13      	ldr	r3, [pc, #76]	@ (800799c <HAL_ADC_MspInit+0x74>)
 8007950:	2180      	movs	r1, #128	@ 0x80
 8007952:	0089      	lsls	r1, r1, #2
 8007954:	430a      	orrs	r2, r1
 8007956:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007958:	4b10      	ldr	r3, [pc, #64]	@ (800799c <HAL_ADC_MspInit+0x74>)
 800795a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800795c:	4b0f      	ldr	r3, [pc, #60]	@ (800799c <HAL_ADC_MspInit+0x74>)
 800795e:	2104      	movs	r1, #4
 8007960:	430a      	orrs	r2, r1
 8007962:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007964:	4b0d      	ldr	r3, [pc, #52]	@ (800799c <HAL_ADC_MspInit+0x74>)
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	2204      	movs	r2, #4
 800796a:	4013      	ands	r3, r2
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007970:	193b      	adds	r3, r7, r4
 8007972:	2230      	movs	r2, #48	@ 0x30
 8007974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007976:	193b      	adds	r3, r7, r4
 8007978:	2203      	movs	r2, #3
 800797a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800797c:	193b      	adds	r3, r7, r4
 800797e:	2200      	movs	r2, #0
 8007980:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007982:	193b      	adds	r3, r7, r4
 8007984:	4a06      	ldr	r2, [pc, #24]	@ (80079a0 <HAL_ADC_MspInit+0x78>)
 8007986:	0019      	movs	r1, r3
 8007988:	0010      	movs	r0, r2
 800798a:	f008 ffdb 	bl	8010944 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800798e:	46c0      	nop			@ (mov r8, r8)
 8007990:	46bd      	mov	sp, r7
 8007992:	b009      	add	sp, #36	@ 0x24
 8007994:	bd90      	pop	{r4, r7, pc}
 8007996:	46c0      	nop			@ (mov r8, r8)
 8007998:	40012400 	.word	0x40012400
 800799c:	40021000 	.word	0x40021000
 80079a0:	50000800 	.word	0x50000800

080079a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80079aa:	4b10      	ldr	r3, [pc, #64]	@ (80079ec <MX_DMA_Init+0x48>)
 80079ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ae:	4b0f      	ldr	r3, [pc, #60]	@ (80079ec <MX_DMA_Init+0x48>)
 80079b0:	2101      	movs	r1, #1
 80079b2:	430a      	orrs	r2, r1
 80079b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80079b6:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <MX_DMA_Init+0x48>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ba:	2201      	movs	r2, #1
 80079bc:	4013      	ands	r3, r2
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80079c2:	2200      	movs	r2, #0
 80079c4:	2100      	movs	r1, #0
 80079c6:	200a      	movs	r0, #10
 80079c8:	f008 fb6a 	bl	80100a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80079cc:	200a      	movs	r0, #10
 80079ce:	f008 fb7c 	bl	80100ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80079d2:	2200      	movs	r2, #0
 80079d4:	2103      	movs	r1, #3
 80079d6:	200b      	movs	r0, #11
 80079d8:	f008 fb62 	bl	80100a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80079dc:	200b      	movs	r0, #11
 80079de:	f008 fb74 	bl	80100ca <HAL_NVIC_EnableIRQ>

}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	46bd      	mov	sp, r7
 80079e6:	b002      	add	sp, #8
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	46c0      	nop			@ (mov r8, r8)
 80079ec:	40021000 	.word	0x40021000

080079f0 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80079f0:	b590      	push	{r4, r7, lr}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	1dbb      	adds	r3, r7, #6
 80079fc:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 80079fe:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <WriteUint8ArrayEeprom+0x6c>)
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007a04:	f008 fede 	bl	80107c4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8007a08:	2316      	movs	r3, #22
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e015      	b.n	8007a3e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8007a12:	4b12      	ldr	r3, [pc, #72]	@ (8007a5c <WriteUint8ArrayEeprom+0x6c>)
 8007a14:	6819      	ldr	r1, [r3, #0]
 8007a16:	2416      	movs	r4, #22
 8007a18:	193b      	adds	r3, r7, r4
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	18d3      	adds	r3, r2, r3
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	001a      	movs	r2, r3
 8007a24:	2000      	movs	r0, #0
 8007a26:	f008 ff35 	bl	8010894 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <WriteUint8ArrayEeprom+0x6c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <WriteUint8ArrayEeprom+0x6c>)
 8007a32:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007a34:	193b      	adds	r3, r7, r4
 8007a36:	881a      	ldrh	r2, [r3, #0]
 8007a38:	193b      	adds	r3, r7, r4
 8007a3a:	3201      	adds	r2, #1
 8007a3c:	801a      	strh	r2, [r3, #0]
 8007a3e:	2316      	movs	r3, #22
 8007a40:	18fa      	adds	r2, r7, r3
 8007a42:	1dbb      	adds	r3, r7, #6
 8007a44:	8812      	ldrh	r2, [r2, #0]
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d3e2      	bcc.n	8007a12 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8007a4c:	f008 fee8 	bl	8010820 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 8007a50:	4b02      	ldr	r3, [pc, #8]	@ (8007a5c <WriteUint8ArrayEeprom+0x6c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
}
 8007a54:	0018      	movs	r0, r3
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b007      	add	sp, #28
 8007a5a:	bd90      	pop	{r4, r7, pc}
 8007a5c:	20000af4 	.word	0x20000af4

08007a60 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	0019      	movs	r1, r3
 8007a6c:	1dbb      	adds	r3, r7, #6
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	1d3b      	adds	r3, r7, #4
 8007a72:	1c0a      	adds	r2, r1, #0
 8007a74:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 8007a76:	1dba      	adds	r2, r7, #6
 8007a78:	1d3b      	adds	r3, r7, #4
 8007a7a:	8812      	ldrh	r2, [r2, #0]
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d806      	bhi.n	8007a90 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 8007a82:	1dbb      	adds	r3, r7, #6
 8007a84:	881a      	ldrh	r2, [r3, #0]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f7ff ffb0 	bl	80079f0 <WriteUint8ArrayEeprom>
    }
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b004      	add	sp, #16
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	1dbb      	adds	r3, r7, #6
 8007aa4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007aa6:	2316      	movs	r3, #22
 8007aa8:	18fb      	adds	r3, r7, r3
 8007aaa:	2200      	movs	r2, #0
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e010      	b.n	8007ad2 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8007ab0:	2016      	movs	r0, #22
 8007ab2:	183b      	adds	r3, r7, r0
 8007ab4:	881a      	ldrh	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	18d3      	adds	r3, r2, r3
 8007aba:	0019      	movs	r1, r3
 8007abc:	183b      	adds	r3, r7, r0
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	18d3      	adds	r3, r2, r3
 8007ac4:	780a      	ldrb	r2, [r1, #0]
 8007ac6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007ac8:	183b      	adds	r3, r7, r0
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	183b      	adds	r3, r7, r0
 8007ace:	3201      	adds	r2, #1
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	2316      	movs	r3, #22
 8007ad4:	18fa      	adds	r2, r7, r3
 8007ad6:	1dbb      	adds	r3, r7, #6
 8007ad8:	8812      	ldrh	r2, [r2, #0]
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d3e7      	bcc.n	8007ab0 <ReadUint8ArrayEEprom+0x18>
    }
}
 8007ae0:	46c0      	nop			@ (mov r8, r8)
 8007ae2:	46c0      	nop			@ (mov r8, r8)
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	b006      	add	sp, #24
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8007aea:	b590      	push	{r4, r7, lr}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	000a      	movs	r2, r1
 8007af4:	1cbb      	adds	r3, r7, #2
 8007af6:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007af8:	f008 fe64 	bl	80107c4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8007afc:	230e      	movs	r3, #14
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	2200      	movs	r2, #0
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	e00c      	b.n	8007b20 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8007b06:	240e      	movs	r4, #14
 8007b08:	193b      	adds	r3, r7, r4
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	18d3      	adds	r3, r2, r3
 8007b10:	0018      	movs	r0, r3
 8007b12:	f008 fe93 	bl	801083c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8007b16:	193b      	adds	r3, r7, r4
 8007b18:	193a      	adds	r2, r7, r4
 8007b1a:	8812      	ldrh	r2, [r2, #0]
 8007b1c:	3204      	adds	r2, #4
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	230e      	movs	r3, #14
 8007b22:	18fa      	adds	r2, r7, r3
 8007b24:	1cbb      	adds	r3, r7, #2
 8007b26:	8812      	ldrh	r2, [r2, #0]
 8007b28:	881b      	ldrh	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d3eb      	bcc.n	8007b06 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8007b2e:	f008 fe77 	bl	8010820 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8007b32:	46c0      	nop			@ (mov r8, r8)
 8007b34:	46bd      	mov	sp, r7
 8007b36:	b005      	add	sp, #20
 8007b38:	bd90      	pop	{r4, r7, pc}
	...

08007b3c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b4c:	d901      	bls.n	8007b52 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8007b4e:	237f      	movs	r3, #127	@ 0x7f
 8007b50:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007b52:	2017      	movs	r0, #23
 8007b54:	183b      	adds	r3, r7, r0
 8007b56:	490d      	ldr	r1, [pc, #52]	@ (8007b8c <accessLUT10log10+0x50>)
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	188a      	adds	r2, r1, r2
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007b60:	0001      	movs	r1, r0
 8007b62:	187b      	adds	r3, r7, r1
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2206      	movs	r2, #6
 8007b68:	4113      	asrs	r3, r2
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007b70:	187b      	adds	r3, r7, r1
 8007b72:	781a      	ldrb	r2, [r3, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2106      	movs	r1, #6
 8007b7a:	408b      	lsls	r3, r1
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	601a      	str	r2, [r3, #0]
}
 8007b82:	46c0      	nop			@ (mov r8, r8)
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b006      	add	sp, #24
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	46c0      	nop			@ (mov r8, r8)
 8007b8c:	080264ec 	.word	0x080264ec

08007b90 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007b90:	b5b0      	push	{r4, r5, r7, lr}
 8007b92:	b090      	sub	sp, #64	@ 0x40
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6138      	str	r0, [r7, #16]
 8007b98:	6179      	str	r1, [r7, #20]
 8007b9a:	60fa      	str	r2, [r7, #12]
 8007b9c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	001a      	movs	r2, r3
 8007ba2:	3a20      	subs	r2, #32
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	db03      	blt.n	8007bb0 <efficient10log10+0x20>
 8007ba8:	2101      	movs	r1, #1
 8007baa:	4091      	lsls	r1, r2
 8007bac:	000d      	movs	r5, r1
 8007bae:	e008      	b.n	8007bc2 <efficient10log10+0x32>
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	40d1      	lsrs	r1, r2
 8007bb8:	000a      	movs	r2, r1
 8007bba:	2100      	movs	r1, #0
 8007bbc:	4099      	lsls	r1, r3
 8007bbe:	000d      	movs	r5, r1
 8007bc0:	4315      	orrs	r5, r2
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	409a      	lsls	r2, r3
 8007bc6:	0014      	movs	r4, r2
 8007bc8:	2201      	movs	r2, #1
 8007bca:	4252      	negs	r2, r2
 8007bcc:	17d3      	asrs	r3, r2, #31
 8007bce:	1912      	adds	r2, r2, r4
 8007bd0:	416b      	adcs	r3, r5
 8007bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007bd6:	2336      	movs	r3, #54	@ 0x36
 8007bd8:	2208      	movs	r2, #8
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	19db      	adds	r3, r3, r7
 8007bde:	2200      	movs	r2, #0
 8007be0:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007be2:	e017      	b.n	8007c14 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	0852      	lsrs	r2, r2, #1
 8007bec:	603a      	str	r2, [r7, #0]
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	603a      	str	r2, [r7, #0]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	607b      	str	r3, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	687c      	ldr	r4, [r7, #4]
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	617c      	str	r4, [r7, #20]
        bShift++;
 8007c02:	2136      	movs	r1, #54	@ 0x36
 8007c04:	2008      	movs	r0, #8
 8007c06:	180b      	adds	r3, r1, r0
 8007c08:	19db      	adds	r3, r3, r7
 8007c0a:	881a      	ldrh	r2, [r3, #0]
 8007c0c:	180b      	adds	r3, r1, r0
 8007c0e:	19db      	adds	r3, r3, r7
 8007c10:	3201      	adds	r2, #1
 8007c12:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d8e3      	bhi.n	8007be4 <efficient10log10+0x54>
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d103      	bne.n	8007c2c <efficient10log10+0x9c>
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d8db      	bhi.n	8007be4 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	2308      	movs	r3, #8
 8007c30:	3b01      	subs	r3, #1
 8007c32:	2101      	movs	r1, #1
 8007c34:	4099      	lsls	r1, r3
 8007c36:	000b      	movs	r3, r1
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007c44:	231c      	movs	r3, #28
 8007c46:	2408      	movs	r4, #8
 8007c48:	191b      	adds	r3, r3, r4
 8007c4a:	19da      	adds	r2, r3, r7
 8007c4c:	2320      	movs	r3, #32
 8007c4e:	191b      	adds	r3, r3, r4
 8007c50:	19d9      	adds	r1, r3, r7
 8007c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7ff ff71 	bl	8007b3c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007c5a:	2215      	movs	r2, #21
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007c60:	2036      	movs	r0, #54	@ 0x36
 8007c62:	1902      	adds	r2, r0, r4
 8007c64:	19d2      	adds	r2, r2, r7
 8007c66:	8812      	ldrh	r2, [r2, #0]
 8007c68:	2103      	movs	r1, #3
 8007c6a:	434a      	muls	r2, r1
 8007c6c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007c6e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007c70:	0021      	movs	r1, r4
 8007c72:	1843      	adds	r3, r0, r1
 8007c74:	19db      	adds	r3, r3, r7
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	4353      	muls	r3, r2
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	4113      	asrs	r3, r2
 8007c80:	001a      	movs	r2, r3
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007c86:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007c88:	2314      	movs	r3, #20
 8007c8a:	185b      	adds	r3, r3, r1
 8007c8c:	19da      	adds	r2, r3, r7
 8007c8e:	2318      	movs	r3, #24
 8007c90:	185b      	adds	r3, r3, r1
 8007c92:	19db      	adds	r3, r3, r7
 8007c94:	0011      	movs	r1, r2
 8007c96:	0018      	movs	r0, r3
 8007c98:	f000 f80a 	bl	8007cb0 <correctIntFracNumber>
    integerPart[0] = intPart;
 8007c9c:	6a3a      	ldr	r2, [r7, #32]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8007ca2:	69fa      	ldr	r2, [r7, #28]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	601a      	str	r2, [r3, #0]
}
 8007ca8:	46c0      	nop			@ (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b010      	add	sp, #64	@ 0x40
 8007cae:	bdb0      	pop	{r4, r5, r7, pc}

08007cb0 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8007cba:	e00a      	b.n	8007cd2 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3b0a      	subs	r3, #10
 8007ccc:	001a      	movs	r2, r3
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b09      	cmp	r3, #9
 8007cd8:	dcf0      	bgt.n	8007cbc <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007cda:	e00a      	b.n	8007cf2 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330a      	adds	r3, #10
 8007cec:	001a      	movs	r2, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3309      	adds	r3, #9
 8007cf8:	dbf0      	blt.n	8007cdc <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da0f      	bge.n	8007d22 <correctIntFracNumber+0x72>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd0b      	ble.n	8007d22 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	1c5a      	adds	r2, r3, #1
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3b0a      	subs	r3, #10
 8007d1a:	001a      	movs	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007d20:	e012      	b.n	8007d48 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	dd0e      	ble.n	8007d48 <correctIntFracNumber+0x98>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da0a      	bge.n	8007d48 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1e5a      	subs	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	330a      	adds	r3, #10
 8007d42:	001a      	movs	r2, r3
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	601a      	str	r2, [r3, #0]
}
 8007d48:	46c0      	nop			@ (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b08b      	sub	sp, #44	@ 0x2c
 8007d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d56:	2414      	movs	r4, #20
 8007d58:	193b      	adds	r3, r7, r4
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	2314      	movs	r3, #20
 8007d5e:	001a      	movs	r2, r3
 8007d60:	2100      	movs	r1, #0
 8007d62:	f018 ff73 	bl	8020c4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d66:	4b8a      	ldr	r3, [pc, #552]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d6a:	4b89      	ldr	r3, [pc, #548]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d6c:	2104      	movs	r1, #4
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d72:	4b87      	ldr	r3, [pc, #540]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	2204      	movs	r2, #4
 8007d78:	4013      	ands	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d7e:	4b84      	ldr	r3, [pc, #528]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d82:	4b83      	ldr	r3, [pc, #524]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d84:	2180      	movs	r1, #128	@ 0x80
 8007d86:	430a      	orrs	r2, r1
 8007d88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d8a:	4b81      	ldr	r3, [pc, #516]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	2280      	movs	r2, #128	@ 0x80
 8007d90:	4013      	ands	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d96:	4b7e      	ldr	r3, [pc, #504]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007da2:	4b7b      	ldr	r3, [pc, #492]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	2201      	movs	r2, #1
 8007da8:	4013      	ands	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]
 8007dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dae:	4b78      	ldr	r3, [pc, #480]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db2:	4b77      	ldr	r3, [pc, #476]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007db4:	2102      	movs	r1, #2
 8007db6:	430a      	orrs	r2, r1
 8007db8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007dba:	4b75      	ldr	r3, [pc, #468]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	607b      	str	r3, [r7, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dc6:	4b72      	ldr	r3, [pc, #456]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dca:	4b71      	ldr	r3, [pc, #452]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007dcc:	2108      	movs	r1, #8
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8007f90 <MX_GPIO_Init+0x240>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	2208      	movs	r2, #8
 8007dd8:	4013      	ands	r3, r2
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007dde:	4b6d      	ldr	r3, [pc, #436]	@ (8007f94 <MX_GPIO_Init+0x244>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	2101      	movs	r1, #1
 8007de4:	0018      	movs	r0, r3
 8007de6:	f008 ff48 	bl	8010c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007dea:	4b6a      	ldr	r3, [pc, #424]	@ (8007f94 <MX_GPIO_Init+0x244>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	2102      	movs	r1, #2
 8007df0:	0018      	movs	r0, r3
 8007df2:	f008 ff42 	bl	8010c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007df6:	4968      	ldr	r1, [pc, #416]	@ (8007f98 <MX_GPIO_Init+0x248>)
 8007df8:	4b68      	ldr	r3, [pc, #416]	@ (8007f9c <MX_GPIO_Init+0x24c>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f008 ff3c 	bl	8010c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8007e02:	2380      	movs	r3, #128	@ 0x80
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	4866      	ldr	r0, [pc, #408]	@ (8007fa0 <MX_GPIO_Init+0x250>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	0019      	movs	r1, r3
 8007e0c:	f008 ff35 	bl	8010c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007e10:	2380      	movs	r3, #128	@ 0x80
 8007e12:	015b      	lsls	r3, r3, #5
 8007e14:	4862      	ldr	r0, [pc, #392]	@ (8007fa0 <MX_GPIO_Init+0x250>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	0019      	movs	r1, r3
 8007e1a:	f008 ff2e 	bl	8010c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007e1e:	193b      	adds	r3, r7, r4
 8007e20:	4a60      	ldr	r2, [pc, #384]	@ (8007fa4 <MX_GPIO_Init+0x254>)
 8007e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e24:	193b      	adds	r3, r7, r4
 8007e26:	2203      	movs	r2, #3
 8007e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e2a:	193b      	adds	r3, r7, r4
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e30:	193b      	adds	r3, r7, r4
 8007e32:	4a5b      	ldr	r2, [pc, #364]	@ (8007fa0 <MX_GPIO_Init+0x250>)
 8007e34:	0019      	movs	r1, r3
 8007e36:	0010      	movs	r0, r2
 8007e38:	f008 fd84 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007e3c:	193b      	adds	r3, r7, r4
 8007e3e:	2203      	movs	r2, #3
 8007e40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e42:	193b      	adds	r3, r7, r4
 8007e44:	2201      	movs	r2, #1
 8007e46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e48:	193b      	adds	r3, r7, r4
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e4e:	193b      	adds	r3, r7, r4
 8007e50:	2200      	movs	r2, #0
 8007e52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007e54:	193b      	adds	r3, r7, r4
 8007e56:	4a4f      	ldr	r2, [pc, #316]	@ (8007f94 <MX_GPIO_Init+0x244>)
 8007e58:	0019      	movs	r1, r3
 8007e5a:	0010      	movs	r0, r2
 8007e5c:	f008 fd72 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007e60:	193b      	adds	r3, r7, r4
 8007e62:	2270      	movs	r2, #112	@ 0x70
 8007e64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007e66:	193b      	adds	r3, r7, r4
 8007e68:	2203      	movs	r2, #3
 8007e6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6c:	193b      	adds	r3, r7, r4
 8007e6e:	2200      	movs	r2, #0
 8007e70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e72:	193a      	adds	r2, r7, r4
 8007e74:	23a0      	movs	r3, #160	@ 0xa0
 8007e76:	05db      	lsls	r3, r3, #23
 8007e78:	0011      	movs	r1, r2
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f008 fd62 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007e80:	193b      	adds	r3, r7, r4
 8007e82:	22c0      	movs	r2, #192	@ 0xc0
 8007e84:	0052      	lsls	r2, r2, #1
 8007e86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e88:	193b      	adds	r3, r7, r4
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8e:	193b      	adds	r3, r7, r4
 8007e90:	2200      	movs	r2, #0
 8007e92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e94:	193a      	adds	r2, r7, r4
 8007e96:	23a0      	movs	r3, #160	@ 0xa0
 8007e98:	05db      	lsls	r3, r3, #23
 8007e9a:	0011      	movs	r1, r2
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f008 fd51 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007ea2:	193b      	adds	r3, r7, r4
 8007ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8007f98 <MX_GPIO_Init+0x248>)
 8007ea6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ea8:	193b      	adds	r3, r7, r4
 8007eaa:	2201      	movs	r2, #1
 8007eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eae:	193b      	adds	r3, r7, r4
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb4:	193b      	adds	r3, r7, r4
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eba:	193b      	adds	r3, r7, r4
 8007ebc:	4a37      	ldr	r2, [pc, #220]	@ (8007f9c <MX_GPIO_Init+0x24c>)
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	0010      	movs	r0, r2
 8007ec2:	f008 fd3f 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8007ec6:	193b      	adds	r3, r7, r4
 8007ec8:	4a37      	ldr	r2, [pc, #220]	@ (8007fa8 <MX_GPIO_Init+0x258>)
 8007eca:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ecc:	193b      	adds	r3, r7, r4
 8007ece:	2203      	movs	r2, #3
 8007ed0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed2:	193b      	adds	r3, r7, r4
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ed8:	193b      	adds	r3, r7, r4
 8007eda:	4a30      	ldr	r2, [pc, #192]	@ (8007f9c <MX_GPIO_Init+0x24c>)
 8007edc:	0019      	movs	r1, r3
 8007ede:	0010      	movs	r0, r2
 8007ee0:	f008 fd30 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007ee4:	0021      	movs	r1, r4
 8007ee6:	187b      	adds	r3, r7, r1
 8007ee8:	2280      	movs	r2, #128	@ 0x80
 8007eea:	0092      	lsls	r2, r2, #2
 8007eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eee:	000c      	movs	r4, r1
 8007ef0:	193b      	adds	r3, r7, r4
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef6:	193b      	adds	r3, r7, r4
 8007ef8:	2200      	movs	r2, #0
 8007efa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007efc:	193b      	adds	r3, r7, r4
 8007efe:	4a28      	ldr	r2, [pc, #160]	@ (8007fa0 <MX_GPIO_Init+0x250>)
 8007f00:	0019      	movs	r1, r3
 8007f02:	0010      	movs	r0, r2
 8007f04:	f008 fd1e 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007f08:	193b      	adds	r3, r7, r4
 8007f0a:	2280      	movs	r2, #128	@ 0x80
 8007f0c:	0212      	lsls	r2, r2, #8
 8007f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007f10:	193b      	adds	r3, r7, r4
 8007f12:	2288      	movs	r2, #136	@ 0x88
 8007f14:	0352      	lsls	r2, r2, #13
 8007f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f18:	193b      	adds	r3, r7, r4
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007f1e:	193a      	adds	r2, r7, r4
 8007f20:	23a0      	movs	r3, #160	@ 0xa0
 8007f22:	05db      	lsls	r3, r3, #23
 8007f24:	0011      	movs	r1, r2
 8007f26:	0018      	movs	r0, r3
 8007f28:	f008 fd0c 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007f2c:	0021      	movs	r1, r4
 8007f2e:	187b      	adds	r3, r7, r1
 8007f30:	22c0      	movs	r2, #192	@ 0xc0
 8007f32:	0152      	lsls	r2, r2, #5
 8007f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f36:	000c      	movs	r4, r1
 8007f38:	193b      	adds	r3, r7, r4
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3e:	193b      	adds	r3, r7, r4
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f44:	193b      	adds	r3, r7, r4
 8007f46:	2200      	movs	r2, #0
 8007f48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f4a:	193b      	adds	r3, r7, r4
 8007f4c:	4a14      	ldr	r2, [pc, #80]	@ (8007fa0 <MX_GPIO_Init+0x250>)
 8007f4e:	0019      	movs	r1, r3
 8007f50:	0010      	movs	r0, r2
 8007f52:	f008 fcf7 	bl	8010944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007f56:	0021      	movs	r1, r4
 8007f58:	187b      	adds	r3, r7, r1
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f5e:	187b      	adds	r3, r7, r1
 8007f60:	2200      	movs	r2, #0
 8007f62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007f64:	187b      	adds	r3, r7, r1
 8007f66:	2201      	movs	r2, #1
 8007f68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007f6a:	187b      	adds	r3, r7, r1
 8007f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8007fac <MX_GPIO_Init+0x25c>)
 8007f6e:	0019      	movs	r1, r3
 8007f70:	0010      	movs	r0, r2
 8007f72:	f008 fce7 	bl	8010944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	2007      	movs	r0, #7
 8007f7c:	f008 f890 	bl	80100a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007f80:	2007      	movs	r0, #7
 8007f82:	f008 f8a2 	bl	80100ca <HAL_NVIC_EnableIRQ>

}
 8007f86:	46c0      	nop			@ (mov r8, r8)
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	b00b      	add	sp, #44	@ 0x2c
 8007f8c:	bd90      	pop	{r4, r7, pc}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	40021000 	.word	0x40021000
 8007f94:	50001c00 	.word	0x50001c00
 8007f98:	00000301 	.word	0x00000301
 8007f9c:	50000400 	.word	0x50000400
 8007fa0:	50000800 	.word	0x50000800
 8007fa4:	0000200c 	.word	0x0000200c
 8007fa8:	0000403e 	.word	0x0000403e
 8007fac:	50000c00 	.word	0x50000c00

08007fb0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f00f fa36 	bl	8017430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2108      	movs	r1, #8
 8007fc8:	0018      	movs	r0, r3
 8007fca:	f00f fa31 	bl	8017430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	210c      	movs	r1, #12
 8007fd2:	0018      	movs	r0, r3
 8007fd4:	f00f fa2c 	bl	8017430 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007fd8:	2380      	movs	r3, #128	@ 0x80
 8007fda:	05db      	lsls	r3, r3, #23
 8007fdc:	22fa      	movs	r2, #250	@ 0xfa
 8007fde:	0112      	lsls	r2, r2, #4
 8007fe0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007fe2:	2380      	movs	r3, #128	@ 0x80
 8007fe4:	05db      	lsls	r3, r3, #23
 8007fe6:	22fa      	movs	r2, #250	@ 0xfa
 8007fe8:	0112      	lsls	r2, r2, #4
 8007fea:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007fec:	2380      	movs	r3, #128	@ 0x80
 8007fee:	05db      	lsls	r3, r3, #23
 8007ff0:	22fa      	movs	r2, #250	@ 0xfa
 8007ff2:	0112      	lsls	r2, r2, #4
 8007ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007ff6:	2380      	movs	r3, #128	@ 0x80
 8007ff8:	05db      	lsls	r3, r3, #23
 8007ffa:	22fa      	movs	r2, #250	@ 0xfa
 8007ffc:	0112      	lsls	r2, r2, #4
 8007ffe:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2100      	movs	r1, #0
 8008004:	0018      	movs	r0, r3
 8008006:	f00f fa13 	bl	8017430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2104      	movs	r1, #4
 800800e:	0018      	movs	r0, r3
 8008010:	f00f fa0e 	bl	8017430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2108      	movs	r1, #8
 8008018:	0018      	movs	r0, r3
 800801a:	f00f fa09 	bl	8017430 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800801e:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <GPIO_InitPWMLEDs+0x98>)
 8008020:	22fa      	movs	r2, #250	@ 0xfa
 8008022:	0112      	lsls	r2, r2, #4
 8008024:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8008026:	4b08      	ldr	r3, [pc, #32]	@ (8008048 <GPIO_InitPWMLEDs+0x98>)
 8008028:	22fa      	movs	r2, #250	@ 0xfa
 800802a:	0112      	lsls	r2, r2, #4
 800802c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800802e:	4b06      	ldr	r3, [pc, #24]	@ (8008048 <GPIO_InitPWMLEDs+0x98>)
 8008030:	22fa      	movs	r2, #250	@ 0xfa
 8008032:	0112      	lsls	r2, r2, #4
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8008036:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <GPIO_InitPWMLEDs+0x98>)
 8008038:	22fa      	movs	r2, #250	@ 0xfa
 800803a:	0112      	lsls	r2, r2, #4
 800803c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800803e:	46c0      	nop			@ (mov r8, r8)
 8008040:	46bd      	mov	sp, r7
 8008042:	b002      	add	sp, #8
 8008044:	bd80      	pop	{r7, pc}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	40000400 	.word	0x40000400

0800804c <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	0018      	movs	r0, r3
 8008056:	2314      	movs	r3, #20
 8008058:	001a      	movs	r2, r3
 800805a:	2100      	movs	r1, #0
 800805c:	f018 fdf6 	bl	8020c4c <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8008060:	1d3b      	adds	r3, r7, #4
 8008062:	2205      	movs	r2, #5
 8008064:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008066:	1d3b      	adds	r3, r7, #4
 8008068:	2203      	movs	r2, #3
 800806a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806c:	1d3b      	adds	r3, r7, #4
 800806e:	2200      	movs	r2, #0
 8008070:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008072:	1d3a      	adds	r2, r7, #4
 8008074:	23a0      	movs	r3, #160	@ 0xa0
 8008076:	05db      	lsls	r3, r3, #23
 8008078:	0011      	movs	r1, r2
 800807a:	0018      	movs	r0, r3
 800807c:	f008 fc62 	bl	8010944 <HAL_GPIO_Init>
}
 8008080:	46c0      	nop			@ (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b006      	add	sp, #24
 8008086:	bd80      	pop	{r7, pc}

08008088 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800808c:	4b1b      	ldr	r3, [pc, #108]	@ (80080fc <MX_I2C1_Init+0x74>)
 800808e:	4a1c      	ldr	r2, [pc, #112]	@ (8008100 <MX_I2C1_Init+0x78>)
 8008090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8008092:	4b1a      	ldr	r3, [pc, #104]	@ (80080fc <MX_I2C1_Init+0x74>)
 8008094:	4a1b      	ldr	r2, [pc, #108]	@ (8008104 <MX_I2C1_Init+0x7c>)
 8008096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008098:	4b18      	ldr	r3, [pc, #96]	@ (80080fc <MX_I2C1_Init+0x74>)
 800809a:	2200      	movs	r2, #0
 800809c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800809e:	4b17      	ldr	r3, [pc, #92]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80080a4:	4b15      	ldr	r3, [pc, #84]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80080aa:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80080b0:	4b12      	ldr	r3, [pc, #72]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80080b6:	4b11      	ldr	r3, [pc, #68]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80080bc:	4b0f      	ldr	r3, [pc, #60]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080be:	2200      	movs	r2, #0
 80080c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80080c2:	4b0e      	ldr	r3, [pc, #56]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080c4:	0018      	movs	r0, r3
 80080c6:	f008 fe11 	bl	8010cec <HAL_I2C_Init>
 80080ca:	1e03      	subs	r3, r0, #0
 80080cc:	d001      	beq.n	80080d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80080ce:	f000 fdb1 	bl	8008c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80080d2:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080d4:	2100      	movs	r1, #0
 80080d6:	0018      	movs	r0, r3
 80080d8:	f00b f9e2 	bl	80134a0 <HAL_I2CEx_ConfigAnalogFilter>
 80080dc:	1e03      	subs	r3, r0, #0
 80080de:	d001      	beq.n	80080e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80080e0:	f000 fda8 	bl	8008c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80080e4:	4b05      	ldr	r3, [pc, #20]	@ (80080fc <MX_I2C1_Init+0x74>)
 80080e6:	2100      	movs	r1, #0
 80080e8:	0018      	movs	r0, r3
 80080ea:	f00b fa25 	bl	8013538 <HAL_I2CEx_ConfigDigitalFilter>
 80080ee:	1e03      	subs	r3, r0, #0
 80080f0:	d001      	beq.n	80080f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80080f2:	f000 fd9f 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80080f6:	46c0      	nop			@ (mov r8, r8)
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000af8 	.word	0x20000af8
 8008100:	40005400 	.word	0x40005400
 8008104:	00503d58 	.word	0x00503d58

08008108 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800810c:	4b1b      	ldr	r3, [pc, #108]	@ (800817c <MX_I2C2_Init+0x74>)
 800810e:	4a1c      	ldr	r2, [pc, #112]	@ (8008180 <MX_I2C2_Init+0x78>)
 8008110:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8008112:	4b1a      	ldr	r3, [pc, #104]	@ (800817c <MX_I2C2_Init+0x74>)
 8008114:	4a1b      	ldr	r2, [pc, #108]	@ (8008184 <MX_I2C2_Init+0x7c>)
 8008116:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008118:	4b18      	ldr	r3, [pc, #96]	@ (800817c <MX_I2C2_Init+0x74>)
 800811a:	2200      	movs	r2, #0
 800811c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800811e:	4b17      	ldr	r3, [pc, #92]	@ (800817c <MX_I2C2_Init+0x74>)
 8008120:	2201      	movs	r2, #1
 8008122:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008124:	4b15      	ldr	r3, [pc, #84]	@ (800817c <MX_I2C2_Init+0x74>)
 8008126:	2200      	movs	r2, #0
 8008128:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800812a:	4b14      	ldr	r3, [pc, #80]	@ (800817c <MX_I2C2_Init+0x74>)
 800812c:	2200      	movs	r2, #0
 800812e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008130:	4b12      	ldr	r3, [pc, #72]	@ (800817c <MX_I2C2_Init+0x74>)
 8008132:	2200      	movs	r2, #0
 8008134:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008136:	4b11      	ldr	r3, [pc, #68]	@ (800817c <MX_I2C2_Init+0x74>)
 8008138:	2200      	movs	r2, #0
 800813a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800813c:	4b0f      	ldr	r3, [pc, #60]	@ (800817c <MX_I2C2_Init+0x74>)
 800813e:	2200      	movs	r2, #0
 8008140:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008142:	4b0e      	ldr	r3, [pc, #56]	@ (800817c <MX_I2C2_Init+0x74>)
 8008144:	0018      	movs	r0, r3
 8008146:	f008 fdd1 	bl	8010cec <HAL_I2C_Init>
 800814a:	1e03      	subs	r3, r0, #0
 800814c:	d001      	beq.n	8008152 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800814e:	f000 fd71 	bl	8008c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008152:	4b0a      	ldr	r3, [pc, #40]	@ (800817c <MX_I2C2_Init+0x74>)
 8008154:	2100      	movs	r1, #0
 8008156:	0018      	movs	r0, r3
 8008158:	f00b f9a2 	bl	80134a0 <HAL_I2CEx_ConfigAnalogFilter>
 800815c:	1e03      	subs	r3, r0, #0
 800815e:	d001      	beq.n	8008164 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008160:	f000 fd68 	bl	8008c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008164:	4b05      	ldr	r3, [pc, #20]	@ (800817c <MX_I2C2_Init+0x74>)
 8008166:	2100      	movs	r1, #0
 8008168:	0018      	movs	r0, r3
 800816a:	f00b f9e5 	bl	8013538 <HAL_I2CEx_ConfigDigitalFilter>
 800816e:	1e03      	subs	r3, r0, #0
 8008170:	d001      	beq.n	8008176 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008172:	f000 fd5f 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008176:	46c0      	nop			@ (mov r8, r8)
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000b4c 	.word	0x20000b4c
 8008180:	40005800 	.word	0x40005800
 8008184:	00503d58 	.word	0x00503d58

08008188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008188:	b590      	push	{r4, r7, lr}
 800818a:	b08b      	sub	sp, #44	@ 0x2c
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008190:	2414      	movs	r4, #20
 8008192:	193b      	adds	r3, r7, r4
 8008194:	0018      	movs	r0, r3
 8008196:	2314      	movs	r3, #20
 8008198:	001a      	movs	r2, r3
 800819a:	2100      	movs	r1, #0
 800819c:	f018 fd56 	bl	8020c4c <memset>
  if(i2cHandle->Instance==I2C1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a5d      	ldr	r2, [pc, #372]	@ (800831c <HAL_I2C_MspInit+0x194>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d000      	beq.n	80081ac <HAL_I2C_MspInit+0x24>
 80081aa:	e083      	b.n	80082b4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80081ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b0:	4b5b      	ldr	r3, [pc, #364]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80081b2:	2102      	movs	r1, #2
 80081b4:	430a      	orrs	r2, r1
 80081b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80081b8:	4b59      	ldr	r3, [pc, #356]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80081ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081bc:	2202      	movs	r2, #2
 80081be:	4013      	ands	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081c4:	0021      	movs	r1, r4
 80081c6:	187b      	adds	r3, r7, r1
 80081c8:	22c0      	movs	r2, #192	@ 0xc0
 80081ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	2212      	movs	r2, #18
 80081d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d2:	187b      	adds	r3, r7, r1
 80081d4:	2200      	movs	r2, #0
 80081d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081d8:	187b      	adds	r3, r7, r1
 80081da:	2203      	movs	r2, #3
 80081dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80081de:	187b      	adds	r3, r7, r1
 80081e0:	2201      	movs	r2, #1
 80081e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081e4:	187b      	adds	r3, r7, r1
 80081e6:	4a4f      	ldr	r2, [pc, #316]	@ (8008324 <HAL_I2C_MspInit+0x19c>)
 80081e8:	0019      	movs	r1, r3
 80081ea:	0010      	movs	r0, r2
 80081ec:	f008 fbaa 	bl	8010944 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80081f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f4:	4b4a      	ldr	r3, [pc, #296]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80081f6:	2180      	movs	r1, #128	@ 0x80
 80081f8:	0389      	lsls	r1, r1, #14
 80081fa:	430a      	orrs	r2, r1
 80081fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80081fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008200:	4a4a      	ldr	r2, [pc, #296]	@ (800832c <HAL_I2C_MspInit+0x1a4>)
 8008202:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8008204:	4b48      	ldr	r3, [pc, #288]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008206:	2206      	movs	r2, #6
 8008208:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800820a:	4b47      	ldr	r3, [pc, #284]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 800820c:	2200      	movs	r2, #0
 800820e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008210:	4b45      	ldr	r3, [pc, #276]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008212:	2200      	movs	r2, #0
 8008214:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008216:	4b44      	ldr	r3, [pc, #272]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008218:	2280      	movs	r2, #128	@ 0x80
 800821a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800821c:	4b42      	ldr	r3, [pc, #264]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 800821e:	2200      	movs	r2, #0
 8008220:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008222:	4b41      	ldr	r3, [pc, #260]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008224:	2200      	movs	r2, #0
 8008226:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8008228:	4b3f      	ldr	r3, [pc, #252]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 800822a:	2200      	movs	r2, #0
 800822c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800822e:	4b3e      	ldr	r3, [pc, #248]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008230:	2200      	movs	r2, #0
 8008232:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8008234:	4b3c      	ldr	r3, [pc, #240]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008236:	0018      	movs	r0, r3
 8008238:	f007 ff68 	bl	801010c <HAL_DMA_Init>
 800823c:	1e03      	subs	r3, r0, #0
 800823e:	d001      	beq.n	8008244 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8008240:	f000 fcf8 	bl	8008c34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a38      	ldr	r2, [pc, #224]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 8008248:	63da      	str	r2, [r3, #60]	@ 0x3c
 800824a:	4b37      	ldr	r3, [pc, #220]	@ (8008328 <HAL_I2C_MspInit+0x1a0>)
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8008250:	4b37      	ldr	r3, [pc, #220]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008252:	4a38      	ldr	r2, [pc, #224]	@ (8008334 <HAL_I2C_MspInit+0x1ac>)
 8008254:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8008256:	4b36      	ldr	r3, [pc, #216]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008258:	2206      	movs	r2, #6
 800825a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800825c:	4b34      	ldr	r3, [pc, #208]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 800825e:	2210      	movs	r2, #16
 8008260:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008262:	4b33      	ldr	r3, [pc, #204]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008264:	2200      	movs	r2, #0
 8008266:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008268:	4b31      	ldr	r3, [pc, #196]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 800826a:	2280      	movs	r2, #128	@ 0x80
 800826c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800826e:	4b30      	ldr	r3, [pc, #192]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008270:	2200      	movs	r2, #0
 8008272:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008274:	4b2e      	ldr	r3, [pc, #184]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008276:	2200      	movs	r2, #0
 8008278:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800827a:	4b2d      	ldr	r3, [pc, #180]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 800827c:	2200      	movs	r2, #0
 800827e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008280:	4b2b      	ldr	r3, [pc, #172]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008282:	2200      	movs	r2, #0
 8008284:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008286:	4b2a      	ldr	r3, [pc, #168]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 8008288:	0018      	movs	r0, r3
 800828a:	f007 ff3f 	bl	801010c <HAL_DMA_Init>
 800828e:	1e03      	subs	r3, r0, #0
 8008290:	d001      	beq.n	8008296 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8008292:	f000 fccf 	bl	8008c34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a25      	ldr	r2, [pc, #148]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 800829a:	639a      	str	r2, [r3, #56]	@ 0x38
 800829c:	4b24      	ldr	r3, [pc, #144]	@ (8008330 <HAL_I2C_MspInit+0x1a8>)
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80082a2:	2200      	movs	r2, #0
 80082a4:	2100      	movs	r1, #0
 80082a6:	2017      	movs	r0, #23
 80082a8:	f007 fefa 	bl	80100a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80082ac:	2017      	movs	r0, #23
 80082ae:	f007 ff0c 	bl	80100ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80082b2:	e02e      	b.n	8008312 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008338 <HAL_I2C_MspInit+0x1b0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d129      	bne.n	8008312 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082be:	4b18      	ldr	r3, [pc, #96]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80082c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c2:	4b17      	ldr	r3, [pc, #92]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80082c4:	2102      	movs	r1, #2
 80082c6:	430a      	orrs	r2, r1
 80082c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80082ca:	4b15      	ldr	r3, [pc, #84]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 80082cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ce:	2202      	movs	r2, #2
 80082d0:	4013      	ands	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80082d6:	2114      	movs	r1, #20
 80082d8:	187b      	adds	r3, r7, r1
 80082da:	22c0      	movs	r2, #192	@ 0xc0
 80082dc:	0112      	lsls	r2, r2, #4
 80082de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	2212      	movs	r2, #18
 80082e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e6:	187b      	adds	r3, r7, r1
 80082e8:	2200      	movs	r2, #0
 80082ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082ec:	187b      	adds	r3, r7, r1
 80082ee:	2203      	movs	r2, #3
 80082f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80082f2:	187b      	adds	r3, r7, r1
 80082f4:	2206      	movs	r2, #6
 80082f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082f8:	187b      	adds	r3, r7, r1
 80082fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008324 <HAL_I2C_MspInit+0x19c>)
 80082fc:	0019      	movs	r1, r3
 80082fe:	0010      	movs	r0, r2
 8008300:	f008 fb20 	bl	8010944 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008304:	4b06      	ldr	r3, [pc, #24]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 8008306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008308:	4b05      	ldr	r3, [pc, #20]	@ (8008320 <HAL_I2C_MspInit+0x198>)
 800830a:	2180      	movs	r1, #128	@ 0x80
 800830c:	03c9      	lsls	r1, r1, #15
 800830e:	430a      	orrs	r2, r1
 8008310:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008312:	46c0      	nop			@ (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b00b      	add	sp, #44	@ 0x2c
 8008318:	bd90      	pop	{r4, r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	40005400 	.word	0x40005400
 8008320:	40021000 	.word	0x40021000
 8008324:	50000400 	.word	0x50000400
 8008328:	20000ba0 	.word	0x20000ba0
 800832c:	40020030 	.word	0x40020030
 8008330:	20000be8 	.word	0x20000be8
 8008334:	4002001c 	.word	0x4002001c
 8008338:	40005800 	.word	0x40005800

0800833c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8008340:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <MX_I2S2_Init+0x48>)
 8008342:	4a11      	ldr	r2, [pc, #68]	@ (8008388 <MX_I2S2_Init+0x4c>)
 8008344:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8008346:	4b0f      	ldr	r3, [pc, #60]	@ (8008384 <MX_I2S2_Init+0x48>)
 8008348:	22c0      	movs	r2, #192	@ 0xc0
 800834a:	0092      	lsls	r2, r2, #2
 800834c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800834e:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <MX_I2S2_Init+0x48>)
 8008350:	2200      	movs	r2, #0
 8008352:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8008354:	4b0b      	ldr	r3, [pc, #44]	@ (8008384 <MX_I2S2_Init+0x48>)
 8008356:	2203      	movs	r2, #3
 8008358:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800835a:	4b0a      	ldr	r3, [pc, #40]	@ (8008384 <MX_I2S2_Init+0x48>)
 800835c:	2200      	movs	r2, #0
 800835e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8008360:	4b08      	ldr	r3, [pc, #32]	@ (8008384 <MX_I2S2_Init+0x48>)
 8008362:	22fa      	movs	r2, #250	@ 0xfa
 8008364:	0192      	lsls	r2, r2, #6
 8008366:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8008368:	4b06      	ldr	r3, [pc, #24]	@ (8008384 <MX_I2S2_Init+0x48>)
 800836a:	2200      	movs	r2, #0
 800836c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800836e:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <MX_I2S2_Init+0x48>)
 8008370:	0018      	movs	r0, r3
 8008372:	f00b f92d 	bl	80135d0 <HAL_I2S_Init>
 8008376:	1e03      	subs	r3, r0, #0
 8008378:	d001      	beq.n	800837e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800837a:	f000 fc5b 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800837e:	46c0      	nop			@ (mov r8, r8)
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20000c30 	.word	0x20000c30
 8008388:	40003800 	.word	0x40003800

0800838c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800838c:	b590      	push	{r4, r7, lr}
 800838e:	b089      	sub	sp, #36	@ 0x24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008394:	240c      	movs	r4, #12
 8008396:	193b      	adds	r3, r7, r4
 8008398:	0018      	movs	r0, r3
 800839a:	2314      	movs	r3, #20
 800839c:	001a      	movs	r2, r3
 800839e:	2100      	movs	r1, #0
 80083a0:	f018 fc54 	bl	8020c4c <memset>
  if(i2sHandle->Instance==SPI2)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008460 <HAL_I2S_MspInit+0xd4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d154      	bne.n	8008458 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80083ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008464 <HAL_I2S_MspInit+0xd8>)
 80083b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008464 <HAL_I2S_MspInit+0xd8>)
 80083b4:	2180      	movs	r1, #128	@ 0x80
 80083b6:	01c9      	lsls	r1, r1, #7
 80083b8:	430a      	orrs	r2, r1
 80083ba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083bc:	4b29      	ldr	r3, [pc, #164]	@ (8008464 <HAL_I2S_MspInit+0xd8>)
 80083be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c0:	4b28      	ldr	r3, [pc, #160]	@ (8008464 <HAL_I2S_MspInit+0xd8>)
 80083c2:	2102      	movs	r1, #2
 80083c4:	430a      	orrs	r2, r1
 80083c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80083c8:	4b26      	ldr	r3, [pc, #152]	@ (8008464 <HAL_I2S_MspInit+0xd8>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	2202      	movs	r2, #2
 80083ce:	4013      	ands	r3, r2
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80083d4:	193b      	adds	r3, r7, r4
 80083d6:	22b0      	movs	r2, #176	@ 0xb0
 80083d8:	0212      	lsls	r2, r2, #8
 80083da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083dc:	0021      	movs	r1, r4
 80083de:	187b      	adds	r3, r7, r1
 80083e0:	2202      	movs	r2, #2
 80083e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e4:	187b      	adds	r3, r7, r1
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083ea:	187b      	adds	r3, r7, r1
 80083ec:	2200      	movs	r2, #0
 80083ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80083f0:	187b      	adds	r3, r7, r1
 80083f2:	2200      	movs	r2, #0
 80083f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083f6:	187b      	adds	r3, r7, r1
 80083f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008468 <HAL_I2S_MspInit+0xdc>)
 80083fa:	0019      	movs	r1, r3
 80083fc:	0010      	movs	r0, r2
 80083fe:	f008 faa1 	bl	8010944 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8008402:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008404:	4a1a      	ldr	r2, [pc, #104]	@ (8008470 <HAL_I2S_MspInit+0xe4>)
 8008406:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8008408:	4b18      	ldr	r3, [pc, #96]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 800840a:	2202      	movs	r2, #2
 800840c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800840e:	4b17      	ldr	r3, [pc, #92]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008410:	2200      	movs	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008414:	4b15      	ldr	r3, [pc, #84]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008416:	2200      	movs	r2, #0
 8008418:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800841a:	4b14      	ldr	r3, [pc, #80]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 800841c:	2280      	movs	r2, #128	@ 0x80
 800841e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008420:	4b12      	ldr	r3, [pc, #72]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008422:	2280      	movs	r2, #128	@ 0x80
 8008424:	0052      	lsls	r2, r2, #1
 8008426:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008428:	4b10      	ldr	r3, [pc, #64]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 800842a:	2280      	movs	r2, #128	@ 0x80
 800842c:	00d2      	lsls	r2, r2, #3
 800842e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8008430:	4b0e      	ldr	r3, [pc, #56]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008432:	2220      	movs	r2, #32
 8008434:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008438:	2200      	movs	r2, #0
 800843a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800843c:	4b0b      	ldr	r3, [pc, #44]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 800843e:	0018      	movs	r0, r3
 8008440:	f007 fe64 	bl	801010c <HAL_DMA_Init>
 8008444:	1e03      	subs	r3, r0, #0
 8008446:	d001      	beq.n	800844c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8008448:	f000 fbf4 	bl	8008c34 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a07      	ldr	r2, [pc, #28]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008450:	631a      	str	r2, [r3, #48]	@ 0x30
 8008452:	4b06      	ldr	r3, [pc, #24]	@ (800846c <HAL_I2S_MspInit+0xe0>)
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8008458:	46c0      	nop			@ (mov r8, r8)
 800845a:	46bd      	mov	sp, r7
 800845c:	b009      	add	sp, #36	@ 0x24
 800845e:	bd90      	pop	{r4, r7, pc}
 8008460:	40003800 	.word	0x40003800
 8008464:	40021000 	.word	0x40021000
 8008468:	50000400 	.word	0x50000400
 800846c:	20000c6c 	.word	0x20000c6c
 8008470:	40020044 	.word	0x40020044

08008474 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
  testDone = true;
 8008478:	4b1e      	ldr	r3, [pc, #120]	@ (80084f4 <SetTestDone+0x80>)
 800847a:	2201      	movs	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800847e:	23fa      	movs	r3, #250	@ 0xfa
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	0018      	movs	r0, r3
 8008484:	f007 f972 	bl	800f76c <HAL_Delay>
  SetDBLED(false, false, true);
 8008488:	2201      	movs	r2, #1
 800848a:	2100      	movs	r1, #0
 800848c:	2000      	movs	r0, #0
 800848e:	f005 fafb 	bl	800da88 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8008492:	4a19      	ldr	r2, [pc, #100]	@ (80084f8 <SetTestDone+0x84>)
 8008494:	23fa      	movs	r3, #250	@ 0xfa
 8008496:	0119      	lsls	r1, r3, #4
 8008498:	23fa      	movs	r3, #250	@ 0xfa
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	0018      	movs	r0, r3
 800849e:	f005 fabf 	bl	800da20 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80084a2:	4a15      	ldr	r2, [pc, #84]	@ (80084f8 <SetTestDone+0x84>)
 80084a4:	23fa      	movs	r3, #250	@ 0xfa
 80084a6:	0119      	lsls	r1, r3, #4
 80084a8:	23fa      	movs	r3, #250	@ 0xfa
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	0018      	movs	r0, r3
 80084ae:	f005 fb35 	bl	800db1c <SetVocLED>
  HAL_Delay(500);
 80084b2:	23fa      	movs	r3, #250	@ 0xfa
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	0018      	movs	r0, r3
 80084b8:	f007 f958 	bl	800f76c <HAL_Delay>
  SetDBLED(false, false, false);
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	2000      	movs	r0, #0
 80084c2:	f005 fae1 	bl	800da88 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80084c6:	23fa      	movs	r3, #250	@ 0xfa
 80084c8:	011a      	lsls	r2, r3, #4
 80084ca:	23fa      	movs	r3, #250	@ 0xfa
 80084cc:	0119      	lsls	r1, r3, #4
 80084ce:	23fa      	movs	r3, #250	@ 0xfa
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	0018      	movs	r0, r3
 80084d4:	f005 faa4 	bl	800da20 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 80084d8:	23fa      	movs	r3, #250	@ 0xfa
 80084da:	011a      	lsls	r2, r3, #4
 80084dc:	23fa      	movs	r3, #250	@ 0xfa
 80084de:	0119      	lsls	r1, r3, #4
 80084e0:	23fa      	movs	r3, #250	@ 0xfa
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	0018      	movs	r0, r3
 80084e6:	f005 fb19 	bl	800db1c <SetVocLED>
  InitDone();
 80084ea:	f005 f9ed 	bl	800d8c8 <InitDone>
}
 80084ee:	46c0      	nop			@ (mov r8, r8)
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20000cb4 	.word	0x20000cb4
 80084f8:	00000bb8 	.word	0x00000bb8

080084fc <FlashLEDs>:

void FlashLEDs(){
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8008502:	1dfb      	adds	r3, r7, #7
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e021      	b.n	800854e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800850a:	2201      	movs	r2, #1
 800850c:	2101      	movs	r1, #1
 800850e:	2001      	movs	r0, #1
 8008510:	f005 faba 	bl	800da88 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8008514:	4a12      	ldr	r2, [pc, #72]	@ (8008560 <FlashLEDs+0x64>)
 8008516:	23fa      	movs	r3, #250	@ 0xfa
 8008518:	0119      	lsls	r1, r3, #4
 800851a:	23fa      	movs	r3, #250	@ 0xfa
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	0018      	movs	r0, r3
 8008520:	f005 fa7e 	bl	800da20 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8008524:	4a0e      	ldr	r2, [pc, #56]	@ (8008560 <FlashLEDs+0x64>)
 8008526:	23fa      	movs	r3, #250	@ 0xfa
 8008528:	0119      	lsls	r1, r3, #4
 800852a:	23fa      	movs	r3, #250	@ 0xfa
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	0018      	movs	r0, r3
 8008530:	f005 faf4 	bl	800db1c <SetVocLED>
    HAL_Delay(250);
 8008534:	20fa      	movs	r0, #250	@ 0xfa
 8008536:	f007 f919 	bl	800f76c <HAL_Delay>
    SetLEDsOff();
 800853a:	f005 fc2f 	bl	800dd9c <SetLEDsOff>
    HAL_Delay(250);
 800853e:	20fa      	movs	r0, #250	@ 0xfa
 8008540:	f007 f914 	bl	800f76c <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8008544:	1dfb      	adds	r3, r7, #7
 8008546:	781a      	ldrb	r2, [r3, #0]
 8008548:	1dfb      	adds	r3, r7, #7
 800854a:	3201      	adds	r2, #1
 800854c:	701a      	strb	r2, [r3, #0]
 800854e:	1dfb      	adds	r3, r7, #7
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b04      	cmp	r3, #4
 8008554:	d9d9      	bls.n	800850a <FlashLEDs+0xe>
  }
}
 8008556:	46c0      	nop			@ (mov r8, r8)
 8008558:	46c0      	nop			@ (mov r8, r8)
 800855a:	46bd      	mov	sp, r7
 800855c:	b002      	add	sp, #8
 800855e:	bd80      	pop	{r7, pc}
 8008560:	00000bb8 	.word	0x00000bb8

08008564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800856a:	f007 f88f 	bl	800f68c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800856e:	f000 fa1b 	bl	80089a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008572:	f7ff fbed 	bl	8007d50 <MX_GPIO_Init>
  MX_DMA_Init();
 8008576:	f7ff fa15 	bl	80079a4 <MX_DMA_Init>
  MX_I2C1_Init();
 800857a:	f7ff fd85 	bl	8008088 <MX_I2C1_Init>
  MX_I2S2_Init();
 800857e:	f7ff fedd 	bl	800833c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8008582:	f006 fab7 	bl	800eaf4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8008586:	f7ff fdbf 	bl	8008108 <MX_I2C2_Init>
  MX_TIM2_Init();
 800858a:	f006 f8ab 	bl	800e6e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800858e:	f006 f91d 	bl	800e7cc <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8008592:	f006 fadf 	bl	800eb54 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8008596:	f7ff f953 	bl	8007840 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800859a:	f015 f843 	bl	801d624 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800859e:	f001 f957 	bl	8009850 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80085a2:	f006 fa71 	bl	800ea88 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80085a6:	f006 f98f 	bl	800e8c8 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80085aa:	4aca      	ldr	r2, [pc, #808]	@ (80088d4 <main+0x370>)
 80085ac:	4bca      	ldr	r3, [pc, #808]	@ (80088d8 <main+0x374>)
 80085ae:	0011      	movs	r1, r2
 80085b0:	0018      	movs	r0, r3
 80085b2:	f7ff fcfd 	bl	8007fb0 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 80085b6:	f006 fd0f 	bl	800efd8 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 80085ba:	f005 ff1b 	bl	800e3f4 <Battery_Upkeep>
 80085be:	0003      	movs	r3, r0
 80085c0:	001a      	movs	r2, r3
 80085c2:	4bc6      	ldr	r3, [pc, #792]	@ (80088dc <main+0x378>)
 80085c4:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 80085c6:	4bc5      	ldr	r3, [pc, #788]	@ (80088dc <main+0x378>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d113      	bne.n	80085f6 <main+0x92>
    SetAllREDLED();
 80085ce:	f005 fc01 	bl	800ddd4 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 80085d2:	f7fe fa5b 	bl	8006a8c <ReadBatteryVoltage>
 80085d6:	1c03      	adds	r3, r0, #0
 80085d8:	1c18      	adds	r0, r3, #0
 80085da:	f7fa ff43 	bl	8003464 <__aeabi_f2d>
 80085de:	0002      	movs	r2, r0
 80085e0:	000b      	movs	r3, r1
 80085e2:	48bf      	ldr	r0, [pc, #764]	@ (80088e0 <main+0x37c>)
 80085e4:	49bf      	ldr	r1, [pc, #764]	@ (80088e4 <main+0x380>)
 80085e6:	9200      	str	r2, [sp, #0]
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	0002      	movs	r2, r0
 80085ec:	2002      	movs	r0, #2
 80085ee:	f006 fc6f 	bl	800eed0 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 80085f2:	f7fe fe5d 	bl	80072b0 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 80085f6:	f7fe fb1f 	bl	8006c38 <UserButton_Pressed>
 80085fa:	1e03      	subs	r3, r0, #0
 80085fc:	d004      	beq.n	8008608 <main+0xa4>
    EnableESPProg();
 80085fe:	f015 f8e1 	bl	801d7c4 <EnableESPProg>
    ESP_Programming = true;
 8008602:	4bb9      	ldr	r3, [pc, #740]	@ (80088e8 <main+0x384>)
 8008604:	2201      	movs	r2, #1
 8008606:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8008608:	2003      	movs	r0, #3
 800860a:	f006 fccb 	bl	800efa4 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800860e:	49b7      	ldr	r1, [pc, #732]	@ (80088ec <main+0x388>)
 8008610:	4bb7      	ldr	r3, [pc, #732]	@ (80088f0 <main+0x38c>)
 8008612:	2201      	movs	r2, #1
 8008614:	0018      	movs	r0, r3
 8008616:	f00f fb6b 	bl	8017cf0 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800861a:	4bb6      	ldr	r3, [pc, #728]	@ (80088f4 <main+0x390>)
 800861c:	0018      	movs	r0, r3
 800861e:	f7fe ff15 	bl	800744c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8008622:	4ab5      	ldr	r2, [pc, #724]	@ (80088f8 <main+0x394>)
 8008624:	49b5      	ldr	r1, [pc, #724]	@ (80088fc <main+0x398>)
 8008626:	48b6      	ldr	r0, [pc, #728]	@ (8008900 <main+0x39c>)
 8008628:	230b      	movs	r3, #11
 800862a:	f004 fac3 	bl	800cbb4 <soundInit>
 800862e:	0003      	movs	r3, r0
 8008630:	001a      	movs	r2, r3
 8008632:	2301      	movs	r3, #1
 8008634:	4053      	eors	r3, r2
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800863c:	4ab1      	ldr	r2, [pc, #708]	@ (8008904 <main+0x3a0>)
 800863e:	4bb2      	ldr	r3, [pc, #712]	@ (8008908 <main+0x3a4>)
 8008640:	21fb      	movs	r1, #251	@ 0xfb
 8008642:	0018      	movs	r0, r3
 8008644:	f006 fcfc 	bl	800f040 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8008648:	4bb0      	ldr	r3, [pc, #704]	@ (800890c <main+0x3a8>)
 800864a:	4ab1      	ldr	r2, [pc, #708]	@ (8008910 <main+0x3ac>)
 800864c:	49ab      	ldr	r1, [pc, #684]	@ (80088fc <main+0x398>)
 800864e:	48b1      	ldr	r0, [pc, #708]	@ (8008914 <main+0x3b0>)
 8008650:	f000 fbb0 	bl	8008db4 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 8008654:	f007 f880 	bl	800f758 <HAL_GetTick>
 8008658:	0003      	movs	r3, r0
 800865a:	4aaf      	ldr	r2, [pc, #700]	@ (8008918 <main+0x3b4>)
 800865c:	189a      	adds	r2, r3, r2
 800865e:	4baf      	ldr	r3, [pc, #700]	@ (800891c <main+0x3b8>)
 8008660:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8008662:	f7fe fac9 	bl	8006bf8 <Check_USB_PowerOn>
 8008666:	0003      	movs	r3, r0
 8008668:	1e5a      	subs	r2, r3, #1
 800866a:	4193      	sbcs	r3, r2
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2201      	movs	r2, #1
 8008670:	4053      	eors	r3, r2
 8008672:	b2db      	uxtb	r3, r3
 8008674:	1c1a      	adds	r2, r3, #0
 8008676:	2301      	movs	r3, #1
 8008678:	4013      	ands	r3, r2
 800867a:	b2da      	uxtb	r2, r3
 800867c:	4ba8      	ldr	r3, [pc, #672]	@ (8008920 <main+0x3bc>)
 800867e:	701a      	strb	r2, [r3, #0]
  if (!priorUSBpluggedIn) {
 8008680:	4ba7      	ldr	r3, [pc, #668]	@ (8008920 <main+0x3bc>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2201      	movs	r2, #1
 8008686:	4053      	eors	r3, r2
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <main+0x132>
    printf_USB("input commmand followed by Enter or type Helpme\r\n");
 800868e:	4ba5      	ldr	r3, [pc, #660]	@ (8008924 <main+0x3c0>)
 8008690:	0018      	movs	r0, r3
 8008692:	f7fd ff63 	bl	800655c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8008696:	4ba4      	ldr	r3, [pc, #656]	@ (8008928 <main+0x3c4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	0018      	movs	r0, r3
 800869c:	f006 fbc2 	bl	800ee24 <TimestampIsReached>
 80086a0:	1e03      	subs	r3, r0, #0
 80086a2:	d00e      	beq.n	80086c2 <main+0x15e>
      charge = Battery_Upkeep();
 80086a4:	f005 fea6 	bl	800e3f4 <Battery_Upkeep>
 80086a8:	0003      	movs	r3, r0
 80086aa:	001a      	movs	r2, r3
 80086ac:	4b8b      	ldr	r3, [pc, #556]	@ (80088dc <main+0x378>)
 80086ae:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 80086b0:	f007 f852 	bl	800f758 <HAL_GetTick>
 80086b4:	0003      	movs	r3, r0
 80086b6:	4a9d      	ldr	r2, [pc, #628]	@ (800892c <main+0x3c8>)
 80086b8:	189a      	adds	r2, r3, r2
 80086ba:	4b9b      	ldr	r3, [pc, #620]	@ (8008928 <main+0x3c4>)
 80086bc:	601a      	str	r2, [r3, #0]
      showTime();
 80086be:	f7fe facb 	bl	8006c58 <showTime>

    }
    configCheck();
 80086c2:	f005 fcfb 	bl	800e0bc <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 80086c6:	4b9a      	ldr	r3, [pc, #616]	@ (8008930 <main+0x3cc>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 80086cc:	4b83      	ldr	r3, [pc, #524]	@ (80088dc <main+0x378>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d003      	beq.n	80086dc <main+0x178>
 80086d4:	4b81      	ldr	r3, [pc, #516]	@ (80088dc <main+0x378>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d104      	bne.n	80086e6 <main+0x182>
          FlashLEDs();
 80086dc:	f7ff ff0e 	bl	80084fc <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 80086e0:	4b94      	ldr	r3, [pc, #592]	@ (8008934 <main+0x3d0>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 80086e6:	4b7d      	ldr	r3, [pc, #500]	@ (80088dc <main+0x378>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d109      	bne.n	8008702 <main+0x19e>
 80086ee:	4b92      	ldr	r3, [pc, #584]	@ (8008938 <main+0x3d4>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b09      	cmp	r3, #9
 80086f4:	d105      	bne.n	8008702 <main+0x19e>
          batteryEmpty = true;
 80086f6:	4b91      	ldr	r3, [pc, #580]	@ (800893c <main+0x3d8>)
 80086f8:	2201      	movs	r2, #1
 80086fa:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 80086fc:	f7fe fdd8 	bl	80072b0 <Enter_Standby_Mode>
 8008700:	e002      	b.n	8008708 <main+0x1a4>
        }
        else{
          batteryEmpty = false;
 8008702:	4b8e      	ldr	r3, [pc, #568]	@ (800893c <main+0x3d8>)
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8008708:	4b8d      	ldr	r3, [pc, #564]	@ (8008940 <main+0x3dc>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d100      	bne.n	8008712 <main+0x1ae>
 8008710:	e0aa      	b.n	8008868 <main+0x304>
 8008712:	4b75      	ldr	r3, [pc, #468]	@ (80088e8 <main+0x384>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	2201      	movs	r2, #1
 8008718:	4053      	eors	r3, r2
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d100      	bne.n	8008722 <main+0x1be>
 8008720:	e0a2      	b.n	8008868 <main+0x304>
 8008722:	4b86      	ldr	r3, [pc, #536]	@ (800893c <main+0x3d8>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	2201      	movs	r2, #1
 8008728:	4053      	eors	r3, r2
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d100      	bne.n	8008732 <main+0x1ce>
 8008730:	e09a      	b.n	8008868 <main+0x304>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8008732:	4b7b      	ldr	r3, [pc, #492]	@ (8008920 <main+0x3bc>)
 8008734:	781a      	ldrb	r2, [r3, #0]
 8008736:	4b83      	ldr	r3, [pc, #524]	@ (8008944 <main+0x3e0>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d020      	beq.n	8008780 <main+0x21c>
        if (IsSGPPresent() && !usbPluggedIn) {
 800873e:	f000 facb 	bl	8008cd8 <IsSGPPresent>
 8008742:	1e03      	subs	r3, r0, #0
 8008744:	d009      	beq.n	800875a <main+0x1f6>
 8008746:	4b7f      	ldr	r3, [pc, #508]	@ (8008944 <main+0x3e0>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2201      	movs	r2, #1
 800874c:	4053      	eors	r3, r2
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <main+0x1f6>
          SetVOCSensorDIS_ENA(true);
 8008754:	2001      	movs	r0, #1
 8008756:	f000 fac9 	bl	8008cec <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800875a:	4b7b      	ldr	r3, [pc, #492]	@ (8008948 <main+0x3e4>)
 800875c:	791b      	ldrb	r3, [r3, #4]
 800875e:	2b34      	cmp	r3, #52	@ 0x34
 8008760:	d003      	beq.n	800876a <main+0x206>
 8008762:	4b79      	ldr	r3, [pc, #484]	@ (8008948 <main+0x3e4>)
 8008764:	791b      	ldrb	r3, [r3, #4]
 8008766:	2b35      	cmp	r3, #53	@ 0x35
 8008768:	d106      	bne.n	8008778 <main+0x214>
 800876a:	4b76      	ldr	r3, [pc, #472]	@ (8008944 <main+0x3e0>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <main+0x214>
          SetVOCSensorDIS_ENA(false);
 8008772:	2000      	movs	r0, #0
 8008774:	f000 faba 	bl	8008cec <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8008778:	4b72      	ldr	r3, [pc, #456]	@ (8008944 <main+0x3e0>)
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	4b68      	ldr	r3, [pc, #416]	@ (8008920 <main+0x3bc>)
 800877e:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8008780:	4b72      	ldr	r3, [pc, #456]	@ (800894c <main+0x3e8>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d00d      	beq.n	80087a4 <main+0x240>
 8008788:	4b70      	ldr	r3, [pc, #448]	@ (800894c <main+0x3e8>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d009      	beq.n	80087a4 <main+0x240>
 8008790:	4b68      	ldr	r3, [pc, #416]	@ (8008934 <main+0x3d0>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <main+0x240>
        HIDSstate = HIDS_Upkeep();
 8008798:	f006 febe 	bl	800f518 <HIDS_Upkeep>
 800879c:	0003      	movs	r3, r0
 800879e:	001a      	movs	r2, r3
 80087a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008950 <main+0x3ec>)
 80087a2:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 80087a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008950 <main+0x3ec>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d00d      	beq.n	80087c8 <main+0x264>
 80087ac:	4b68      	ldr	r3, [pc, #416]	@ (8008950 <main+0x3ec>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d009      	beq.n	80087c8 <main+0x264>
 80087b4:	4b5f      	ldr	r3, [pc, #380]	@ (8008934 <main+0x3d0>)
 80087b6:	785b      	ldrb	r3, [r3, #1]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <main+0x264>
        SGPstate = SGP_Upkeep();
 80087bc:	f004 f860 	bl	800c880 <SGP_Upkeep>
 80087c0:	0003      	movs	r3, r0
 80087c2:	001a      	movs	r2, r3
 80087c4:	4b61      	ldr	r3, [pc, #388]	@ (800894c <main+0x3e8>)
 80087c6:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 80087c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008934 <main+0x3d0>)
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <main+0x278>
        MICstate = Mic_Upkeep();
 80087d0:	f000 ff2a 	bl	8009628 <Mic_Upkeep>
 80087d4:	0003      	movs	r3, r0
 80087d6:	001a      	movs	r2, r3
 80087d8:	4b5e      	ldr	r3, [pc, #376]	@ (8008954 <main+0x3f0>)
 80087da:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 80087dc:	4b3f      	ldr	r3, [pc, #252]	@ (80088dc <main+0x378>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d803      	bhi.n	80087ec <main+0x288>
 80087e4:	4b52      	ldr	r3, [pc, #328]	@ (8008930 <main+0x3cc>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <main+0x2b6>
 80087ec:	4b51      	ldr	r3, [pc, #324]	@ (8008934 <main+0x3d0>)
 80087ee:	789b      	ldrb	r3, [r3, #2]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d012      	beq.n	800881a <main+0x2b6>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 80087f4:	f001 f8ba 	bl	800996c <sen5x_Get_sen5x_enable_state>
 80087f8:	0003      	movs	r3, r0
 80087fa:	001a      	movs	r2, r3
 80087fc:	2301      	movs	r3, #1
 80087fe:	4053      	eors	r3, r2
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <main+0x2b0>
 8008806:	4b4f      	ldr	r3, [pc, #316]	@ (8008944 <main+0x3e0>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d002      	beq.n	8008814 <main+0x2b0>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800880e:	2000      	movs	r0, #0
 8008810:	f001 f8e8 	bl	80099e4 <sen5x_enable>
        }
        sen5x_statemachine();
 8008814:	f001 fe28 	bl	800a468 <sen5x_statemachine>
 8008818:	e020      	b.n	800885c <main+0x2f8>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800881a:	4b30      	ldr	r3, [pc, #192]	@ (80088dc <main+0x378>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d81c      	bhi.n	800885c <main+0x2f8>
 8008822:	4b43      	ldr	r3, [pc, #268]	@ (8008930 <main+0x3cc>)
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2201      	movs	r2, #1
 8008828:	4053      	eors	r3, r2
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d015      	beq.n	800885c <main+0x2f8>
 8008830:	4b40      	ldr	r3, [pc, #256]	@ (8008934 <main+0x3d0>)
 8008832:	789b      	ldrb	r3, [r3, #2]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d011      	beq.n	800885c <main+0x2f8>
        Info("Battery level insufficient for sen5x operation");
 8008838:	4a47      	ldr	r2, [pc, #284]	@ (8008958 <main+0x3f4>)
 800883a:	4b2a      	ldr	r3, [pc, #168]	@ (80088e4 <main+0x380>)
 800883c:	0019      	movs	r1, r3
 800883e:	2002      	movs	r0, #2
 8008840:	f006 fb46 	bl	800eed0 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8008844:	4b3b      	ldr	r3, [pc, #236]	@ (8008934 <main+0x3d0>)
 8008846:	2200      	movs	r2, #0
 8008848:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800884a:	4b44      	ldr	r3, [pc, #272]	@ (800895c <main+0x3f8>)
 800884c:	2200      	movs	r2, #0
 800884e:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8008850:	4b43      	ldr	r3, [pc, #268]	@ (8008960 <main+0x3fc>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <main+0x2f8>
          sen5x_Power_Off();
 8008858:	f001 f946 	bl	8009ae8 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800885c:	f7fc ff0e 	bl	800567c <ESP_Upkeep>
 8008860:	0003      	movs	r3, r0
 8008862:	001a      	movs	r2, r3
 8008864:	4b34      	ldr	r3, [pc, #208]	@ (8008938 <main+0x3d4>)
 8008866:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8008868:	4b35      	ldr	r3, [pc, #212]	@ (8008940 <main+0x3dc>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2201      	movs	r2, #1
 800886e:	4053      	eors	r3, r2
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00f      	beq.n	8008896 <main+0x332>
 8008876:	4b1c      	ldr	r3, [pc, #112]	@ (80088e8 <main+0x384>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2201      	movs	r2, #1
 800887c:	4053      	eors	r3, r2
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d008      	beq.n	8008896 <main+0x332>
 8008884:	4b2d      	ldr	r3, [pc, #180]	@ (800893c <main+0x3d8>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2201      	movs	r2, #1
 800888a:	4053      	eors	r3, r2
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <main+0x332>
      Device_Test();  // for device with startup time
 8008892:	f000 fbd5 	bl	8009040 <Device_Test>
    }
    if (!usbPluggedIn) {
 8008896:	4b2b      	ldr	r3, [pc, #172]	@ (8008944 <main+0x3e0>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2201      	movs	r2, #1
 800889c:	4053      	eors	r3, r2
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d06a      	beq.n	800897a <main+0x416>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 80088a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008964 <main+0x400>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2201      	movs	r2, #1
 80088aa:	4053      	eors	r3, r2
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d063      	beq.n	800897a <main+0x416>
 80088b2:	f000 fc43 	bl	800913c <AllDevicesReady>
 80088b6:	1e03      	subs	r3, r0, #0
 80088b8:	d05f      	beq.n	800897a <main+0x416>
 80088ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008968 <main+0x404>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d05b      	beq.n	800897a <main+0x416>
        EnabledConnectedDevices();
 80088c2:	f000 fca3 	bl	800920c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 80088c6:	4b29      	ldr	r3, [pc, #164]	@ (800896c <main+0x408>)
 80088c8:	789b      	ldrb	r3, [r3, #2]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d050      	beq.n	8008970 <main+0x40c>
 80088ce:	23d7      	movs	r3, #215	@ 0xd7
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	e04f      	b.n	8008974 <main+0x410>
 80088d4:	20001d58 	.word	0x20001d58
 80088d8:	20001d18 	.word	0x20001d18
 80088dc:	20000cd0 	.word	0x20000cd0
 80088e0:	08024f64 	.word	0x08024f64
 80088e4:	08024f7c 	.word	0x08024f7c
 80088e8:	20000cb5 	.word	0x20000cb5
 80088ec:	20000cbc 	.word	0x20000cbc
 80088f0:	20001e90 	.word	0x20001e90
 80088f4:	20000d44 	.word	0x20000d44
 80088f8:	20001d98 	.word	0x20001d98
 80088fc:	20000c30 	.word	0x20000c30
 8008900:	20000c6c 	.word	0x20000c6c
 8008904:	08024f80 	.word	0x08024f80
 8008908:	080265bc 	.word	0x080265bc
 800890c:	20001f48 	.word	0x20001f48
 8008910:	20000a98 	.word	0x20000a98
 8008914:	20000af8 	.word	0x20000af8
 8008918:	000061a8 	.word	0x000061a8
 800891c:	20000ccc 	.word	0x20000ccc
 8008920:	20000cb7 	.word	0x20000cb7
 8008924:	08024f94 	.word	0x08024f94
 8008928:	20000088 	.word	0x20000088
 800892c:	0000c350 	.word	0x0000c350
 8008930:	20000084 	.word	0x20000084
 8008934:	20000cd4 	.word	0x20000cd4
 8008938:	20000cbb 	.word	0x20000cbb
 800893c:	20000cb6 	.word	0x20000cb6
 8008940:	20000cb4 	.word	0x20000cb4
 8008944:	20001cf9 	.word	0x20001cf9
 8008948:	20000d6c 	.word	0x20000d6c
 800894c:	20000cb8 	.word	0x20000cb8
 8008950:	20000cb9 	.word	0x20000cb9
 8008954:	20000cba 	.word	0x20000cba
 8008958:	08024fc8 	.word	0x08024fc8
 800895c:	20000d6a 	.word	0x20000d6a
 8008960:	20000d69 	.word	0x20000d69
 8008964:	20001cfa 	.word	0x20001cfa
 8008968:	20000554 	.word	0x20000554
 800896c:	20000cd8 	.word	0x20000cd8
 8008970:	23dc      	movs	r3, #220	@ 0xdc
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	0018      	movs	r0, r3
 8008976:	f7fe fcbb 	bl	80072f0 <Enter_Stop_Mode>
    if (len > 0) {
      check_cli_command();
    }

#endif
    if (Check_USB_PowerOn() && !ReconfigSet) {
 800897a:	f7fe f93d 	bl	8006bf8 <Check_USB_PowerOn>
 800897e:	1e03      	subs	r3, r0, #0
 8008980:	d100      	bne.n	8008984 <main+0x420>
 8008982:	e688      	b.n	8008696 <main+0x132>
 8008984:	4b07      	ldr	r3, [pc, #28]	@ (80089a4 <main+0x440>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2201      	movs	r2, #1
 800898a:	4053      	eors	r3, r2
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d100      	bne.n	8008994 <main+0x430>
 8008992:	e680      	b.n	8008696 <main+0x132>
      Process_USB_input(GetUsbRxPointer());
 8008994:	f014 ff20 	bl	801d7d8 <GetUsbRxPointer>
 8008998:	0003      	movs	r3, r0
 800899a:	0018      	movs	r0, r3
 800899c:	f7fd ff48 	bl	8006830 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 80089a0:	e679      	b.n	8008696 <main+0x132>
 80089a2:	46c0      	nop			@ (mov r8, r8)
 80089a4:	2000054f 	.word	0x2000054f

080089a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089a8:	b590      	push	{r4, r7, lr}
 80089aa:	b09d      	sub	sp, #116	@ 0x74
 80089ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089ae:	2438      	movs	r4, #56	@ 0x38
 80089b0:	193b      	adds	r3, r7, r4
 80089b2:	0018      	movs	r0, r3
 80089b4:	2338      	movs	r3, #56	@ 0x38
 80089b6:	001a      	movs	r2, r3
 80089b8:	2100      	movs	r1, #0
 80089ba:	f018 f947 	bl	8020c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089be:	2324      	movs	r3, #36	@ 0x24
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	0018      	movs	r0, r3
 80089c4:	2314      	movs	r3, #20
 80089c6:	001a      	movs	r2, r3
 80089c8:	2100      	movs	r1, #0
 80089ca:	f018 f93f 	bl	8020c4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80089ce:	003b      	movs	r3, r7
 80089d0:	0018      	movs	r0, r3
 80089d2:	2324      	movs	r3, #36	@ 0x24
 80089d4:	001a      	movs	r2, r3
 80089d6:	2100      	movs	r1, #0
 80089d8:	f018 f938 	bl	8020c4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80089dc:	4b34      	ldr	r3, [pc, #208]	@ (8008ab0 <SystemClock_Config+0x108>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a34      	ldr	r2, [pc, #208]	@ (8008ab4 <SystemClock_Config+0x10c>)
 80089e2:	401a      	ands	r2, r3
 80089e4:	4b32      	ldr	r3, [pc, #200]	@ (8008ab0 <SystemClock_Config+0x108>)
 80089e6:	2180      	movs	r1, #128	@ 0x80
 80089e8:	0109      	lsls	r1, r1, #4
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80089ee:	f00c ff53 	bl	8015898 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80089f2:	4b31      	ldr	r3, [pc, #196]	@ (8008ab8 <SystemClock_Config+0x110>)
 80089f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f6:	4a2f      	ldr	r2, [pc, #188]	@ (8008ab4 <SystemClock_Config+0x10c>)
 80089f8:	401a      	ands	r2, r3
 80089fa:	4b2f      	ldr	r3, [pc, #188]	@ (8008ab8 <SystemClock_Config+0x110>)
 80089fc:	2180      	movs	r1, #128	@ 0x80
 80089fe:	0149      	lsls	r1, r1, #5
 8008a00:	430a      	orrs	r2, r1
 8008a02:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008a04:	193b      	adds	r3, r7, r4
 8008a06:	2226      	movs	r2, #38	@ 0x26
 8008a08:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008a0a:	193b      	adds	r3, r7, r4
 8008a0c:	2280      	movs	r2, #128	@ 0x80
 8008a0e:	0052      	lsls	r2, r2, #1
 8008a10:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a12:	0021      	movs	r1, r4
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	2201      	movs	r2, #1
 8008a18:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	2210      	movs	r2, #16
 8008a1e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008a20:	187b      	adds	r3, r7, r1
 8008a22:	2201      	movs	r2, #1
 8008a24:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	2200      	movs	r2, #0
 8008a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a2c:	187b      	adds	r3, r7, r1
 8008a2e:	0018      	movs	r0, r3
 8008a30:	f00c ffc2 	bl	80159b8 <HAL_RCC_OscConfig>
 8008a34:	1e03      	subs	r3, r0, #0
 8008a36:	d001      	beq.n	8008a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008a38:	f000 f8fc 	bl	8008c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a3c:	2124      	movs	r1, #36	@ 0x24
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	220f      	movs	r2, #15
 8008a42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008a44:	187b      	adds	r3, r7, r1
 8008a46:	2201      	movs	r2, #1
 8008a48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008a50:	187b      	adds	r3, r7, r1
 8008a52:	2200      	movs	r2, #0
 8008a54:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a56:	187b      	adds	r3, r7, r1
 8008a58:	2200      	movs	r2, #0
 8008a5a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	2100      	movs	r1, #0
 8008a60:	0018      	movs	r0, r3
 8008a62:	f00d fb7d 	bl	8016160 <HAL_RCC_ClockConfig>
 8008a66:	1e03      	subs	r3, r0, #0
 8008a68:	d001      	beq.n	8008a6e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008a6a:	f000 f8e3 	bl	8008c34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8008a6e:	003b      	movs	r3, r7
 8008a70:	226d      	movs	r2, #109	@ 0x6d
 8008a72:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008a74:	003b      	movs	r3, r7
 8008a76:	2200      	movs	r2, #0
 8008a78:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008a7a:	003b      	movs	r3, r7
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008a80:	003b      	movs	r3, r7
 8008a82:	2200      	movs	r2, #0
 8008a84:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008a86:	003b      	movs	r3, r7
 8008a88:	2280      	movs	r2, #128	@ 0x80
 8008a8a:	0252      	lsls	r2, r2, #9
 8008a8c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008a8e:	003b      	movs	r3, r7
 8008a90:	2280      	movs	r2, #128	@ 0x80
 8008a92:	04d2      	lsls	r2, r2, #19
 8008a94:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008a96:	003b      	movs	r3, r7
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f00d fd85 	bl	80165a8 <HAL_RCCEx_PeriphCLKConfig>
 8008a9e:	1e03      	subs	r3, r0, #0
 8008aa0:	d001      	beq.n	8008aa6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8008aa2:	f000 f8c7 	bl	8008c34 <Error_Handler>
  }
}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b01d      	add	sp, #116	@ 0x74
 8008aac:	bd90      	pop	{r4, r7, pc}
 8008aae:	46c0      	nop			@ (mov r8, r8)
 8008ab0:	40007000 	.word	0x40007000
 8008ab4:	ffffe7ff 	.word	0xffffe7ff
 8008ab8:	40021000 	.word	0x40021000

08008abc <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 8008ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8008b80 <check_cli_command+0xc4>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	3b61      	subs	r3, #97	@ 0x61
 8008ac6:	2b13      	cmp	r3, #19
 8008ac8:	d830      	bhi.n	8008b2c <check_cli_command+0x70>
 8008aca:	009a      	lsls	r2, r3, #2
 8008acc:	4b2d      	ldr	r3, [pc, #180]	@ (8008b84 <check_cli_command+0xc8>)
 8008ace:	18d3      	adds	r3, r2, r3
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8008b88 <check_cli_command+0xcc>)
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f017 ff48 	bl	802096c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8008adc:	2003      	movs	r0, #3
 8008ade:	f006 fa61 	bl	800efa4 <SetVerboseLevel>
      break;
 8008ae2:	e04a      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008ae4:	f7fa fdb4 	bl	8003650 <forceNTPupdate>
    break;
 8008ae8:	e047      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8008aea:	4b28      	ldr	r3, [pc, #160]	@ (8008b8c <check_cli_command+0xd0>)
 8008aec:	0018      	movs	r0, r3
 8008aee:	f017 ff3d 	bl	802096c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008af2:	2002      	movs	r0, #2
 8008af4:	f006 fa56 	bl	800efa4 <SetVerboseLevel>
      break;
 8008af8:	e03f      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8008afa:	4b25      	ldr	r3, [pc, #148]	@ (8008b90 <check_cli_command+0xd4>)
 8008afc:	0018      	movs	r0, r3
 8008afe:	f017 ff35 	bl	802096c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008b02:	2001      	movs	r0, #1
 8008b04:	f006 fa4e 	bl	800efa4 <SetVerboseLevel>
      break;
 8008b08:	e037      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8008b0a:	4b22      	ldr	r3, [pc, #136]	@ (8008b94 <check_cli_command+0xd8>)
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f017 ff2d 	bl	802096c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8008b12:	2000      	movs	r0, #0
 8008b14:	f006 fa46 	bl	800efa4 <SetVerboseLevel>
      break;
 8008b18:	e02f      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8008b1a:	f006 fe1d 	bl	800f758 <HAL_GetTick>
 8008b1e:	0002      	movs	r2, r0
 8008b20:	4b1d      	ldr	r3, [pc, #116]	@ (8008b98 <check_cli_command+0xdc>)
 8008b22:	601a      	str	r2, [r3, #0]
      break;
 8008b24:	e029      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8008b26:	f7fe f897 	bl	8006c58 <showTime>
      break;
 8008b2a:	e026      	b.n	8008b7a <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8008b9c <check_cli_command+0xe0>)
 8008b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba0 <check_cli_command+0xe4>)
 8008b30:	0019      	movs	r1, r3
 8008b32:	2001      	movs	r0, #1
 8008b34:	f006 f9cc 	bl	800eed0 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008b38:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba4 <check_cli_command+0xe8>)
 8008b3a:	0018      	movs	r0, r3
 8008b3c:	f017 ff16 	bl	802096c <puts>
      printf("a - VerboseLevel set to all\r\n");
 8008b40:	4b19      	ldr	r3, [pc, #100]	@ (8008ba8 <check_cli_command+0xec>)
 8008b42:	0018      	movs	r0, r3
 8008b44:	f017 ff12 	bl	802096c <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008b48:	4b18      	ldr	r3, [pc, #96]	@ (8008bac <check_cli_command+0xf0>)
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f017 ff0e 	bl	802096c <puts>
      printf("i - VerboseLevel set to info\r\n");
 8008b50:	4b17      	ldr	r3, [pc, #92]	@ (8008bb0 <check_cli_command+0xf4>)
 8008b52:	0018      	movs	r0, r3
 8008b54:	f017 ff0a 	bl	802096c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008b58:	4b16      	ldr	r3, [pc, #88]	@ (8008bb4 <check_cli_command+0xf8>)
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f017 ff06 	bl	802096c <puts>
      printf("n - VerboseLevel set to none\r\n");
 8008b60:	4b15      	ldr	r3, [pc, #84]	@ (8008bb8 <check_cli_command+0xfc>)
 8008b62:	0018      	movs	r0, r3
 8008b64:	f017 ff02 	bl	802096c <puts>
      printf("s - Start particle measurement\r\n");
 8008b68:	4b14      	ldr	r3, [pc, #80]	@ (8008bbc <check_cli_command+0x100>)
 8008b6a:	0018      	movs	r0, r3
 8008b6c:	f017 fefe 	bl	802096c <puts>
      printf("t - Show actual systemtime\r\n");
 8008b70:	4b13      	ldr	r3, [pc, #76]	@ (8008bc0 <check_cli_command+0x104>)
 8008b72:	0018      	movs	r0, r3
 8008b74:	f017 fefa 	bl	802096c <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008b78:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000cbc 	.word	0x20000cbc
 8008b84:	0802656c 	.word	0x0802656c
 8008b88:	08024ff8 	.word	0x08024ff8
 8008b8c:	08025014 	.word	0x08025014
 8008b90:	08025030 	.word	0x08025030
 8008b94:	08025050 	.word	0x08025050
 8008b98:	20000d78 	.word	0x20000d78
 8008b9c:	0802506c 	.word	0x0802506c
 8008ba0:	0802509c 	.word	0x0802509c
 8008ba4:	080250a0 	.word	0x080250a0
 8008ba8:	080250b8 	.word	0x080250b8
 8008bac:	080250d8 	.word	0x080250d8
 8008bb0:	080250fc 	.word	0x080250fc
 8008bb4:	0802511c 	.word	0x0802511c
 8008bb8:	08025140 	.word	0x08025140
 8008bbc:	08025160 	.word	0x08025160
 8008bc0:	08025180 	.word	0x08025180

08008bc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008bcc:	4908      	ldr	r1, [pc, #32]	@ (8008bf0 <HAL_UART_RxCpltCallback+0x2c>)
 8008bce:	4b09      	ldr	r3, [pc, #36]	@ (8008bf4 <HAL_UART_RxCpltCallback+0x30>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f00f f88c 	bl	8017cf0 <HAL_UART_Receive_IT>
  check_cli_command();
 8008bd8:	f7ff ff70 	bl	8008abc <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8008bdc:	4904      	ldr	r1, [pc, #16]	@ (8008bf0 <HAL_UART_RxCpltCallback+0x2c>)
 8008bde:	4b05      	ldr	r3, [pc, #20]	@ (8008bf4 <HAL_UART_RxCpltCallback+0x30>)
 8008be0:	2201      	movs	r2, #1
 8008be2:	0018      	movs	r0, r3
 8008be4:	f00f f884 	bl	8017cf0 <HAL_UART_Receive_IT>
}
 8008be8:	46c0      	nop			@ (mov r8, r8)
 8008bea:	46bd      	mov	sp, r7
 8008bec:	b002      	add	sp, #8
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000cbc 	.word	0x20000cbc
 8008bf4:	20001e90 	.word	0x20001e90

08008bf8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	0002      	movs	r2, r0
 8008c00:	1dbb      	adds	r3, r7, #6
 8008c02:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008c04:	1dbb      	adds	r3, r7, #6
 8008c06:	881a      	ldrh	r2, [r3, #0]
 8008c08:	2380      	movs	r3, #128	@ 0x80
 8008c0a:	021b      	lsls	r3, r3, #8
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d10b      	bne.n	8008c28 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008c10:	f005 fc04 	bl	800e41c <setuserToggle>
    if (GetPMSensorPresence()) {
 8008c14:	f000 f84c 	bl	8008cb0 <GetPMSensorPresence>
 8008c18:	1e03      	subs	r3, r0, #0
 8008c1a:	d005      	beq.n	8008c28 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008c1c:	4b04      	ldr	r3, [pc, #16]	@ (8008c30 <HAL_GPIO_EXTI_Callback+0x38>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 8008c22:	2000      	movs	r0, #0
 8008c24:	f000 feac 	bl	8009980 <sen5x_Set_sen5x_state>
    }
  }
}
 8008c28:	46c0      	nop			@ (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000cd4 	.word	0x20000cd4

08008c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008c38:	b672      	cpsid	i
}
 8008c3a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008c3c:	4a05      	ldr	r2, [pc, #20]	@ (8008c54 <Error_Handler+0x20>)
 8008c3e:	4b06      	ldr	r3, [pc, #24]	@ (8008c58 <Error_Handler+0x24>)
 8008c40:	0019      	movs	r1, r3
 8008c42:	2001      	movs	r0, #1
 8008c44:	f006 f944 	bl	800eed0 <CreateLine>
    HAL_Delay(2500);
 8008c48:	4b04      	ldr	r3, [pc, #16]	@ (8008c5c <Error_Handler+0x28>)
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f006 fd8e 	bl	800f76c <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 8008c50:	46c0      	nop			@ (mov r8, r8)
 8008c52:	e7f3      	b.n	8008c3c <Error_Handler+0x8>
 8008c54:	0802519c 	.word	0x0802519c
 8008c58:	0802509c 	.word	0x0802509c
 8008c5c:	000009c4 	.word	0x000009c4

08008c60 <testInit>:
#include "display.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008c64:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <testInit+0x48>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca8 <testInit+0x48>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8008c70:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <testInit+0x48>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8008c76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca8 <testInit+0x48>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ca8 <testInit+0x48>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 8008c82:	4b09      	ldr	r3, [pc, #36]	@ (8008ca8 <testInit+0x48>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 8008c88:	4b08      	ldr	r3, [pc, #32]	@ (8008cac <testInit+0x4c>)
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 8008c8e:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <testInit+0x4c>)
 8008c90:	2201      	movs	r2, #1
 8008c92:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 8008c94:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <testInit+0x4c>)
 8008c96:	2201      	movs	r2, #1
 8008c98:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 8008c9a:	4b04      	ldr	r3, [pc, #16]	@ (8008cac <testInit+0x4c>)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	70da      	strb	r2, [r3, #3]
}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	20000cd8 	.word	0x20000cd8
 8008cac:	20000cd4 	.word	0x20000cd4

08008cb0 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008cb4:	4b02      	ldr	r3, [pc, #8]	@ (8008cc0 <GetPMSensorPresence+0x10>)
 8008cb6:	789b      	ldrb	r3, [r3, #2]
}
 8008cb8:	0018      	movs	r0, r3
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	20000cd8 	.word	0x20000cd8

08008cc4 <DisablePMSensor>:

void DisablePMSensor() {
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 8008cc8:	4b02      	ldr	r3, [pc, #8]	@ (8008cd4 <DisablePMSensor+0x10>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	709a      	strb	r2, [r3, #2]
}
 8008cce:	46c0      	nop			@ (mov r8, r8)
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000cd8 	.word	0x20000cd8

08008cd8 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 8008cdc:	4b02      	ldr	r3, [pc, #8]	@ (8008ce8 <IsSGPPresent+0x10>)
 8008cde:	785b      	ldrb	r3, [r3, #1]
}
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	46c0      	nop			@ (mov r8, r8)
 8008ce8:	20000cd8 	.word	0x20000cd8

08008cec <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	0002      	movs	r2, r0
 8008cf4:	1dfb      	adds	r3, r7, #7
 8008cf6:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8008d28 <SetVOCSensorDIS_ENA+0x3c>)
 8008cfa:	1dfa      	adds	r2, r7, #7
 8008cfc:	7812      	ldrb	r2, [r2, #0]
 8008cfe:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 8008d00:	4b0a      	ldr	r3, [pc, #40]	@ (8008d2c <SetVOCSensorDIS_ENA+0x40>)
 8008d02:	1dfa      	adds	r2, r7, #7
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 8008d08:	1dfb      	adds	r3, r7, #7
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <SetVOCSensorDIS_ENA+0x28>
 8008d10:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <SetVOCSensorDIS_ENA+0x44>)
 8008d12:	e000      	b.n	8008d16 <SetVOCSensorDIS_ENA+0x2a>
 8008d14:	4b07      	ldr	r3, [pc, #28]	@ (8008d34 <SetVOCSensorDIS_ENA+0x48>)
 8008d16:	4a08      	ldr	r2, [pc, #32]	@ (8008d38 <SetVOCSensorDIS_ENA+0x4c>)
 8008d18:	4908      	ldr	r1, [pc, #32]	@ (8008d3c <SetVOCSensorDIS_ENA+0x50>)
 8008d1a:	2003      	movs	r0, #3
 8008d1c:	f006 f8d8 	bl	800eed0 <CreateLine>
}
 8008d20:	46c0      	nop			@ (mov r8, r8)
 8008d22:	46bd      	mov	sp, r7
 8008d24:	b002      	add	sp, #8
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000cd8 	.word	0x20000cd8
 8008d2c:	20000cd4 	.word	0x20000cd4
 8008d30:	080251c8 	.word	0x080251c8
 8008d34:	080251d0 	.word	0x080251d0
 8008d38:	080251dc 	.word	0x080251dc
 8008d3c:	080251f0 	.word	0x080251f0

08008d40 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008d44:	4b02      	ldr	r3, [pc, #8]	@ (8008d50 <IsPMSensorEnabled+0x10>)
 8008d46:	789b      	ldrb	r3, [r3, #2]
}
 8008d48:	0018      	movs	r0, r3
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	46c0      	nop			@ (mov r8, r8)
 8008d50:	20000cd4 	.word	0x20000cd4

08008d54 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	0002      	movs	r2, r0
 8008d5c:	1dfb      	adds	r3, r7, #7
 8008d5e:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 8008d60:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <SetVOCSensorStatus+0x24>)
 8008d62:	795b      	ldrb	r3, [r3, #5]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 8008d68:	4b04      	ldr	r3, [pc, #16]	@ (8008d7c <SetVOCSensorStatus+0x28>)
 8008d6a:	1dfa      	adds	r2, r7, #7
 8008d6c:	7812      	ldrb	r2, [r2, #0]
 8008d6e:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 8008d70:	46c0      	nop			@ (mov r8, r8)
 8008d72:	46bd      	mov	sp, r7
 8008d74:	b002      	add	sp, #8
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000cd8 	.word	0x20000cd8
 8008d7c:	20000cd4 	.word	0x20000cd4

08008d80 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	0002      	movs	r2, r0
 8008d88:	1dfb      	adds	r3, r7, #7
 8008d8a:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 8008d8c:	4b03      	ldr	r3, [pc, #12]	@ (8008d9c <SetPMSensorStatus+0x1c>)
 8008d8e:	1dfa      	adds	r2, r7, #7
 8008d90:	7812      	ldrb	r2, [r2, #0]
 8008d92:	709a      	strb	r2, [r3, #2]
}
 8008d94:	46c0      	nop			@ (mov r8, r8)
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000cd4 	.word	0x20000cd4

08008da0 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 8008da4:	4b02      	ldr	r3, [pc, #8]	@ (8008db0 <SetESPMeasurementDone+0x10>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	711a      	strb	r2, [r3, #4]
}
 8008daa:	46c0      	nop			@ (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000cd8 	.word	0x20000cd8

08008db4 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  testInit();
 8008dc2:	f7ff ff4d 	bl	8008c60 <testInit>
  I2CSensors_Init(sensorI2C);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f7fd f903 	bl	8005fd4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 8008dce:	f006 fab1 	bl	800f334 <HIDS_DeviceConnected>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	001a      	movs	r2, r3
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4053      	eors	r3, r2
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008de0:	4a7f      	ldr	r2, [pc, #508]	@ (8008fe0 <Device_Init+0x22c>)
 8008de2:	4b80      	ldr	r3, [pc, #512]	@ (8008fe4 <Device_Init+0x230>)
 8008de4:	0019      	movs	r1, r3
 8008de6:	2001      	movs	r0, #1
 8008de8:	f006 f872 	bl	800eed0 <CreateLine>
     SensorProbe.HT_Present = false;
 8008dec:	4b7e      	ldr	r3, [pc, #504]	@ (8008fe8 <Device_Init+0x234>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8008df2:	4b7e      	ldr	r3, [pc, #504]	@ (8008fec <Device_Init+0x238>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e008      	b.n	8008e0c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8008dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8008fe8 <Device_Init+0x234>)
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008e00:	4a7b      	ldr	r2, [pc, #492]	@ (8008ff0 <Device_Init+0x23c>)
 8008e02:	4b7c      	ldr	r3, [pc, #496]	@ (8008ff4 <Device_Init+0x240>)
 8008e04:	0019      	movs	r1, r3
 8008e06:	2003      	movs	r0, #3
 8008e08:	f006 f862 	bl	800eed0 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008e0c:	f003 fb2e 	bl	800c46c <SGP_DeviceConnected>
 8008e10:	0003      	movs	r3, r0
 8008e12:	001a      	movs	r2, r3
 8008e14:	2301      	movs	r3, #1
 8008e16:	4053      	eors	r3, r2
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008e1e:	4b72      	ldr	r3, [pc, #456]	@ (8008fe8 <Device_Init+0x234>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008e24:	4a74      	ldr	r2, [pc, #464]	@ (8008ff8 <Device_Init+0x244>)
 8008e26:	4b6f      	ldr	r3, [pc, #444]	@ (8008fe4 <Device_Init+0x230>)
 8008e28:	0019      	movs	r1, r3
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	f006 f850 	bl	800eed0 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008e30:	4b6e      	ldr	r3, [pc, #440]	@ (8008fec <Device_Init+0x238>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	705a      	strb	r2, [r3, #1]
 8008e36:	e00b      	b.n	8008e50 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008e38:	4b6b      	ldr	r3, [pc, #428]	@ (8008fe8 <Device_Init+0x234>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 8008e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8008fe8 <Device_Init+0x234>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008e44:	4a6d      	ldr	r2, [pc, #436]	@ (8008ffc <Device_Init+0x248>)
 8008e46:	4b6b      	ldr	r3, [pc, #428]	@ (8008ff4 <Device_Init+0x240>)
 8008e48:	0019      	movs	r1, r3
 8008e4a:	2003      	movs	r0, #3
 8008e4c:	f006 f840 	bl	800eed0 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008e50:	4b65      	ldr	r3, [pc, #404]	@ (8008fe8 <Device_Init+0x234>)
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <Device_Init+0xb8>
 8008e58:	4b63      	ldr	r3, [pc, #396]	@ (8008fe8 <Device_Init+0x234>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <Device_Init+0xb8>
    SetDBLED(false, true, false);
 8008e60:	2200      	movs	r2, #0
 8008e62:	2101      	movs	r1, #1
 8008e64:	2000      	movs	r0, #0
 8008e66:	f004 fe0f 	bl	800da88 <SetDBLED>
 8008e6a:	e018      	b.n	8008e9e <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2100      	movs	r1, #0
 8008e70:	2001      	movs	r0, #1
 8008e72:	f004 fe09 	bl	800da88 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008e76:	4b62      	ldr	r3, [pc, #392]	@ (8009000 <Device_Init+0x24c>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f007 fefc 	bl	8010c7a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008e82:	2380      	movs	r3, #128	@ 0x80
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	485e      	ldr	r0, [pc, #376]	@ (8009000 <Device_Init+0x24c>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	0019      	movs	r1, r3
 8008e8c:	f007 fef5 	bl	8010c7a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	485a      	ldr	r0, [pc, #360]	@ (8009000 <Device_Init+0x24c>)
 8008e96:	2201      	movs	r2, #1
 8008e98:	0019      	movs	r1, r3
 8008e9a:	f007 feee 	bl	8010c7a <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8008e9e:	4b53      	ldr	r3, [pc, #332]	@ (8008fec <Device_Init+0x238>)
 8008ea0:	78db      	ldrb	r3, [r3, #3]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d028      	beq.n	8008ef8 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 8008ea6:	4a57      	ldr	r2, [pc, #348]	@ (8009004 <Device_Init+0x250>)
 8008ea8:	4b57      	ldr	r3, [pc, #348]	@ (8009008 <Device_Init+0x254>)
 8008eaa:	0019      	movs	r1, r3
 8008eac:	2002      	movs	r0, #2
 8008eae:	f006 f80f 	bl	800eed0 <CreateLine>
    if (!enableMicrophone(true)) {
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	f003 fee6 	bl	800cc84 <enableMicrophone>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	001a      	movs	r2, r3
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4053      	eors	r3, r2
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00c      	beq.n	8008ee0 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 8008ec6:	4a51      	ldr	r2, [pc, #324]	@ (800900c <Device_Init+0x258>)
 8008ec8:	4b46      	ldr	r3, [pc, #280]	@ (8008fe4 <Device_Init+0x230>)
 8008eca:	0019      	movs	r1, r3
 8008ecc:	2001      	movs	r0, #1
 8008ece:	f005 ffff 	bl	800eed0 <CreateLine>
      SensorProbe.MIC_Present = false;
 8008ed2:	4b45      	ldr	r3, [pc, #276]	@ (8008fe8 <Device_Init+0x234>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008ed8:	4b44      	ldr	r3, [pc, #272]	@ (8008fec <Device_Init+0x238>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	70da      	strb	r2, [r3, #3]
 8008ede:	e00b      	b.n	8008ef8 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008ee0:	4b41      	ldr	r3, [pc, #260]	@ (8008fe8 <Device_Init+0x234>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008ee6:	4b41      	ldr	r3, [pc, #260]	@ (8008fec <Device_Init+0x238>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8008eec:	4a48      	ldr	r2, [pc, #288]	@ (8009010 <Device_Init+0x25c>)
 8008eee:	4b41      	ldr	r3, [pc, #260]	@ (8008ff4 <Device_Init+0x240>)
 8008ef0:	0019      	movs	r1, r3
 8008ef2:	2003      	movs	r0, #3
 8008ef4:	f005 ffec 	bl	800eed0 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8008ef8:	f000 fe2c 	bl	8009b54 <probe_sen5x>
 8008efc:	1e03      	subs	r3, r0, #0
 8008efe:	d122      	bne.n	8008f46 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008f00:	4a44      	ldr	r2, [pc, #272]	@ (8009014 <Device_Init+0x260>)
 8008f02:	4b3c      	ldr	r3, [pc, #240]	@ (8008ff4 <Device_Init+0x240>)
 8008f04:	0019      	movs	r1, r3
 8008f06:	2003      	movs	r0, #3
 8008f08:	f005 ffe2 	bl	800eed0 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008f0c:	4b36      	ldr	r3, [pc, #216]	@ (8008fe8 <Device_Init+0x234>)
 8008f0e:	2201      	movs	r2, #1
 8008f10:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008f12:	4b36      	ldr	r3, [pc, #216]	@ (8008fec <Device_Init+0x238>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008f18:	4b3f      	ldr	r3, [pc, #252]	@ (8009018 <Device_Init+0x264>)
 8008f1a:	791b      	ldrb	r3, [r3, #4]
 8008f1c:	2b34      	cmp	r3, #52	@ 0x34
 8008f1e:	d003      	beq.n	8008f28 <Device_Init+0x174>
 8008f20:	4b3d      	ldr	r3, [pc, #244]	@ (8009018 <Device_Init+0x264>)
 8008f22:	791b      	ldrb	r3, [r3, #4]
 8008f24:	2b35      	cmp	r3, #53	@ 0x35
 8008f26:	d11c      	bne.n	8008f62 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008f28:	4a3c      	ldr	r2, [pc, #240]	@ (800901c <Device_Init+0x268>)
 8008f2a:	4b37      	ldr	r3, [pc, #220]	@ (8009008 <Device_Init+0x254>)
 8008f2c:	0019      	movs	r1, r3
 8008f2e:	2002      	movs	r0, #2
 8008f30:	f005 ffce 	bl	800eed0 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008f34:	4b2d      	ldr	r3, [pc, #180]	@ (8008fec <Device_Init+0x238>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 8008f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe8 <Device_Init+0x234>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8008f40:	f003 fc78 	bl	800c834 <SGP_SoftReset>
 8008f44:	e00d      	b.n	8008f62 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008f46:	f000 fdcf 	bl	8009ae8 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008f4a:	4a35      	ldr	r2, [pc, #212]	@ (8009020 <Device_Init+0x26c>)
 8008f4c:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <Device_Init+0x240>)
 8008f4e:	0019      	movs	r1, r3
 8008f50:	2003      	movs	r0, #3
 8008f52:	f005 ffbd 	bl	800eed0 <CreateLine>
    SensorProbe.PM_Present = false;
 8008f56:	4b24      	ldr	r3, [pc, #144]	@ (8008fe8 <Device_Init+0x234>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008f5c:	4b23      	ldr	r3, [pc, #140]	@ (8008fec <Device_Init+0x238>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8008f62:	4b21      	ldr	r3, [pc, #132]	@ (8008fe8 <Device_Init+0x234>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <Device_Init+0x1ba>
 8008f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8009024 <Device_Init+0x270>)
 8008f6c:	e000      	b.n	8008f70 <Device_Init+0x1bc>
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8009028 <Device_Init+0x274>)
 8008f70:	4a2e      	ldr	r2, [pc, #184]	@ (800902c <Device_Init+0x278>)
 8008f72:	4925      	ldr	r1, [pc, #148]	@ (8009008 <Device_Init+0x254>)
 8008f74:	2002      	movs	r0, #2
 8008f76:	f005 ffab 	bl	800eed0 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe8 <Device_Init+0x234>)
 8008f7c:	785b      	ldrb	r3, [r3, #1]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <Device_Init+0x1d2>
 8008f82:	4b28      	ldr	r3, [pc, #160]	@ (8009024 <Device_Init+0x270>)
 8008f84:	e000      	b.n	8008f88 <Device_Init+0x1d4>
 8008f86:	4b28      	ldr	r3, [pc, #160]	@ (8009028 <Device_Init+0x274>)
 8008f88:	4a29      	ldr	r2, [pc, #164]	@ (8009030 <Device_Init+0x27c>)
 8008f8a:	491f      	ldr	r1, [pc, #124]	@ (8009008 <Device_Init+0x254>)
 8008f8c:	2002      	movs	r0, #2
 8008f8e:	f005 ff9f 	bl	800eed0 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8008f92:	4b15      	ldr	r3, [pc, #84]	@ (8008fe8 <Device_Init+0x234>)
 8008f94:	789b      	ldrb	r3, [r3, #2]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <Device_Init+0x1ea>
 8008f9a:	4b22      	ldr	r3, [pc, #136]	@ (8009024 <Device_Init+0x270>)
 8008f9c:	e000      	b.n	8008fa0 <Device_Init+0x1ec>
 8008f9e:	4b22      	ldr	r3, [pc, #136]	@ (8009028 <Device_Init+0x274>)
 8008fa0:	4a24      	ldr	r2, [pc, #144]	@ (8009034 <Device_Init+0x280>)
 8008fa2:	4919      	ldr	r1, [pc, #100]	@ (8009008 <Device_Init+0x254>)
 8008fa4:	2002      	movs	r0, #2
 8008fa6:	f005 ff93 	bl	800eed0 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8008faa:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe8 <Device_Init+0x234>)
 8008fac:	78db      	ldrb	r3, [r3, #3]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <Device_Init+0x202>
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8009024 <Device_Init+0x270>)
 8008fb4:	e000      	b.n	8008fb8 <Device_Init+0x204>
 8008fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8009028 <Device_Init+0x274>)
 8008fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8009038 <Device_Init+0x284>)
 8008fba:	4913      	ldr	r1, [pc, #76]	@ (8009008 <Device_Init+0x254>)
 8008fbc:	2002      	movs	r0, #2
 8008fbe:	f005 ff87 	bl	800eed0 <CreateLine>
  ESP_Init(espUart);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f7fa fcfb 	bl	80039c0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8008fca:	4a1c      	ldr	r2, [pc, #112]	@ (800903c <Device_Init+0x288>)
 8008fcc:	4b09      	ldr	r3, [pc, #36]	@ (8008ff4 <Device_Init+0x240>)
 8008fce:	0019      	movs	r1, r3
 8008fd0:	2003      	movs	r0, #3
 8008fd2:	f005 ff7d 	bl	800eed0 <CreateLine>
}
 8008fd6:	46c0      	nop			@ (mov r8, r8)
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	b004      	add	sp, #16
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	46c0      	nop			@ (mov r8, r8)
 8008fe0:	080251f4 	.word	0x080251f4
 8008fe4:	08025224 	.word	0x08025224
 8008fe8:	20000cd8 	.word	0x20000cd8
 8008fec:	20000cd4 	.word	0x20000cd4
 8008ff0:	08025228 	.word	0x08025228
 8008ff4:	080251f0 	.word	0x080251f0
 8008ff8:	08025254 	.word	0x08025254
 8008ffc:	08025270 	.word	0x08025270
 8009000:	50000400 	.word	0x50000400
 8009004:	08025288 	.word	0x08025288
 8009008:	080252ac 	.word	0x080252ac
 800900c:	080252b0 	.word	0x080252b0
 8009010:	080252dc 	.word	0x080252dc
 8009014:	08025308 	.word	0x08025308
 8009018:	20000d6c 	.word	0x20000d6c
 800901c:	08025320 	.word	0x08025320
 8009020:	08025370 	.word	0x08025370
 8009024:	08025394 	.word	0x08025394
 8009028:	08025398 	.word	0x08025398
 800902c:	0802539c 	.word	0x0802539c
 8009030:	080253b8 	.word	0x080253b8
 8009034:	080253d4 	.word	0x080253d4
 8009038:	080253f0 	.word	0x080253f0
 800903c:	0802540c 	.word	0x0802540c

08009040 <Device_Test>:

void Device_Test(){
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8009044:	4b34      	ldr	r3, [pc, #208]	@ (8009118 <Device_Test+0xd8>)
 8009046:	78db      	ldrb	r3, [r3, #3]
 8009048:	2201      	movs	r2, #1
 800904a:	4053      	eors	r3, r2
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d027      	beq.n	80090a2 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8009052:	f000 fab9 	bl	80095c8 <MIC_TestMeasurementDone>
 8009056:	1e03      	subs	r3, r0, #0
 8009058:	d011      	beq.n	800907e <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800905a:	4b2f      	ldr	r3, [pc, #188]	@ (8009118 <Device_Test+0xd8>)
 800905c:	2201      	movs	r2, #1
 800905e:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8009060:	4b2e      	ldr	r3, [pc, #184]	@ (800911c <Device_Test+0xdc>)
 8009062:	2201      	movs	r2, #1
 8009064:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8009066:	f004 fc93 	bl	800d990 <Calculate_LED_ON>
 800906a:	0003      	movs	r3, r0
 800906c:	0019      	movs	r1, r3
 800906e:	23fa      	movs	r3, #250	@ 0xfa
 8009070:	011a      	lsls	r2, r3, #4
 8009072:	23fa      	movs	r3, #250	@ 0xfa
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	0018      	movs	r0, r3
 8009078:	f004 fcd2 	bl	800da20 <SetStatusLED>
 800907c:	e011      	b.n	80090a2 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800907e:	f003 fddd 	bl	800cc3c <micSettlingComplete>
 8009082:	1e03      	subs	r3, r0, #0
 8009084:	d00d      	beq.n	80090a2 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8009086:	4b25      	ldr	r3, [pc, #148]	@ (800911c <Device_Test+0xdc>)
 8009088:	2201      	movs	r2, #1
 800908a:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800908c:	f004 fc80 	bl	800d990 <Calculate_LED_ON>
 8009090:	0003      	movs	r3, r0
 8009092:	0018      	movs	r0, r3
 8009094:	23fa      	movs	r3, #250	@ 0xfa
 8009096:	011a      	lsls	r2, r3, #4
 8009098:	23fa      	movs	r3, #250	@ 0xfa
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	0019      	movs	r1, r3
 800909e:	f004 fcbf 	bl	800da20 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80090a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009118 <Device_Test+0xd8>)
 80090a4:	791b      	ldrb	r3, [r3, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	4053      	eors	r3, r2
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d001      	beq.n	80090b4 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80090b0:	f7fc f9ca 	bl	8005448 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80090b4:	4b18      	ldr	r3, [pc, #96]	@ (8009118 <Device_Test+0xd8>)
 80090b6:	791b      	ldrb	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <Device_Test+0x84>
 80090bc:	4b16      	ldr	r3, [pc, #88]	@ (8009118 <Device_Test+0xd8>)
 80090be:	78db      	ldrb	r3, [r3, #3]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d106      	bne.n	80090d2 <Device_Test+0x92>
 80090c4:	4b16      	ldr	r3, [pc, #88]	@ (8009120 <Device_Test+0xe0>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	0018      	movs	r0, r3
 80090ca:	f005 feab 	bl	800ee24 <TimestampIsReached>
 80090ce:	1e03      	subs	r3, r0, #0
 80090d0:	d01f      	beq.n	8009112 <Device_Test+0xd2>
    Info("Test completed");
 80090d2:	4a14      	ldr	r2, [pc, #80]	@ (8009124 <Device_Test+0xe4>)
 80090d4:	4b14      	ldr	r3, [pc, #80]	@ (8009128 <Device_Test+0xe8>)
 80090d6:	0019      	movs	r1, r3
 80090d8:	2002      	movs	r0, #2
 80090da:	f005 fef9 	bl	800eed0 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 80090de:	4b0e      	ldr	r3, [pc, #56]	@ (8009118 <Device_Test+0xd8>)
 80090e0:	791b      	ldrb	r3, [r3, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <Device_Test+0xaa>
 80090e6:	4b11      	ldr	r3, [pc, #68]	@ (800912c <Device_Test+0xec>)
 80090e8:	e000      	b.n	80090ec <Device_Test+0xac>
 80090ea:	4b11      	ldr	r3, [pc, #68]	@ (8009130 <Device_Test+0xf0>)
 80090ec:	4a11      	ldr	r2, [pc, #68]	@ (8009134 <Device_Test+0xf4>)
 80090ee:	490e      	ldr	r1, [pc, #56]	@ (8009128 <Device_Test+0xe8>)
 80090f0:	2002      	movs	r0, #2
 80090f2:	f005 feed 	bl	800eed0 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 80090f6:	4b08      	ldr	r3, [pc, #32]	@ (8009118 <Device_Test+0xd8>)
 80090f8:	78db      	ldrb	r3, [r3, #3]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <Device_Test+0xc2>
 80090fe:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <Device_Test+0xec>)
 8009100:	e000      	b.n	8009104 <Device_Test+0xc4>
 8009102:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <Device_Test+0xf0>)
 8009104:	4a0c      	ldr	r2, [pc, #48]	@ (8009138 <Device_Test+0xf8>)
 8009106:	4908      	ldr	r1, [pc, #32]	@ (8009128 <Device_Test+0xe8>)
 8009108:	2002      	movs	r0, #2
 800910a:	f005 fee1 	bl	800eed0 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800910e:	f7ff f9b1 	bl	8008474 <SetTestDone>
  }
}
 8009112:	46c0      	nop			@ (mov r8, r8)
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000cd8 	.word	0x20000cd8
 800911c:	20000cd4 	.word	0x20000cd4
 8009120:	20000ccc 	.word	0x20000ccc
 8009124:	08025430 	.word	0x08025430
 8009128:	080252ac 	.word	0x080252ac
 800912c:	08025440 	.word	0x08025440
 8009130:	08025448 	.word	0x08025448
 8009134:	08025450 	.word	0x08025450
 8009138:	08025464 	.word	0x08025464

0800913c <AllDevicesReady>:

bool AllDevicesReady() {
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8009140:	4b2a      	ldr	r3, [pc, #168]	@ (80091ec <AllDevicesReady+0xb0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	0018      	movs	r0, r3
 8009146:	f005 fe6d 	bl	800ee24 <TimestampIsReached>
 800914a:	1e03      	subs	r3, r0, #0
 800914c:	d04a      	beq.n	80091e4 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800914e:	4b28      	ldr	r3, [pc, #160]	@ (80091f0 <AllDevicesReady+0xb4>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d102      	bne.n	800915c <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8009156:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <AllDevicesReady+0xb8>)
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800915c:	4b26      	ldr	r3, [pc, #152]	@ (80091f8 <AllDevicesReady+0xbc>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	2b07      	cmp	r3, #7
 8009162:	d006      	beq.n	8009172 <AllDevicesReady+0x36>
 8009164:	4b25      	ldr	r3, [pc, #148]	@ (80091fc <AllDevicesReady+0xc0>)
 8009166:	795b      	ldrb	r3, [r3, #5]
 8009168:	2201      	movs	r2, #1
 800916a:	4053      	eors	r3, r2
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8009172:	4b20      	ldr	r3, [pc, #128]	@ (80091f4 <AllDevicesReady+0xb8>)
 8009174:	2200      	movs	r2, #0
 8009176:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8009178:	4b21      	ldr	r3, [pc, #132]	@ (8009200 <AllDevicesReady+0xc4>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d102      	bne.n	8009186 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8009180:	4b1c      	ldr	r3, [pc, #112]	@ (80091f4 <AllDevicesReady+0xb8>)
 8009182:	2200      	movs	r2, #0
 8009184:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8009186:	4b1f      	ldr	r3, [pc, #124]	@ (8009204 <AllDevicesReady+0xc8>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b03      	cmp	r3, #3
 800918c:	d102      	bne.n	8009194 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 800918e:	4b19      	ldr	r3, [pc, #100]	@ (80091f4 <AllDevicesReady+0xb8>)
 8009190:	2200      	movs	r2, #0
 8009192:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8009194:	4b1c      	ldr	r3, [pc, #112]	@ (8009208 <AllDevicesReady+0xcc>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b09      	cmp	r3, #9
 800919a:	d123      	bne.n	80091e4 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 800919c:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <AllDevicesReady+0xb8>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2201      	movs	r2, #1
 80091a2:	4053      	eors	r3, r2
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d016      	beq.n	80091d8 <AllDevicesReady+0x9c>
 80091aa:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <AllDevicesReady+0xb8>)
 80091ac:	785b      	ldrb	r3, [r3, #1]
 80091ae:	2201      	movs	r2, #1
 80091b0:	4053      	eors	r3, r2
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00f      	beq.n	80091d8 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80091b8:	4b0e      	ldr	r3, [pc, #56]	@ (80091f4 <AllDevicesReady+0xb8>)
 80091ba:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80091bc:	2201      	movs	r2, #1
 80091be:	4053      	eors	r3, r2
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d008      	beq.n	80091d8 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80091c6:	4b0b      	ldr	r3, [pc, #44]	@ (80091f4 <AllDevicesReady+0xb8>)
 80091c8:	78db      	ldrb	r3, [r3, #3]
 80091ca:	2201      	movs	r2, #1
 80091cc:	4053      	eors	r3, r2
 80091ce:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <AllDevicesReady+0x9c>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <AllDevicesReady+0x9e>
 80091d8:	2300      	movs	r3, #0
 80091da:	1c1a      	adds	r2, r3, #0
 80091dc:	2301      	movs	r3, #1
 80091de:	4013      	ands	r3, r2
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e000      	b.n	80091e6 <AllDevicesReady+0xaa>
    }
  }
  return false;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	0018      	movs	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000ccc 	.word	0x20000ccc
 80091f0:	20000cb9 	.word	0x20000cb9
 80091f4:	20000cd4 	.word	0x20000cd4
 80091f8:	20000cb8 	.word	0x20000cb8
 80091fc:	20000cd8 	.word	0x20000cd8
 8009200:	2000008d 	.word	0x2000008d
 8009204:	20000cba 	.word	0x20000cba
 8009208:	20000cbb 	.word	0x20000cbb

0800920c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8009210:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <EnabledConnectedDevices+0x4c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8009218:	4b10      	ldr	r3, [pc, #64]	@ (800925c <EnabledConnectedDevices+0x50>)
 800921a:	2201      	movs	r2, #1
 800921c:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800921e:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <EnabledConnectedDevices+0x4c>)
 8009220:	785b      	ldrb	r3, [r3, #1]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <EnabledConnectedDevices+0x28>
 8009226:	4b0c      	ldr	r3, [pc, #48]	@ (8009258 <EnabledConnectedDevices+0x4c>)
 8009228:	795b      	ldrb	r3, [r3, #5]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800922e:	4b0b      	ldr	r3, [pc, #44]	@ (800925c <EnabledConnectedDevices+0x50>)
 8009230:	2201      	movs	r2, #1
 8009232:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8009234:	4b08      	ldr	r3, [pc, #32]	@ (8009258 <EnabledConnectedDevices+0x4c>)
 8009236:	789b      	ldrb	r3, [r3, #2]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 800923c:	4b07      	ldr	r3, [pc, #28]	@ (800925c <EnabledConnectedDevices+0x50>)
 800923e:	2201      	movs	r2, #1
 8009240:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8009242:	4b05      	ldr	r3, [pc, #20]	@ (8009258 <EnabledConnectedDevices+0x4c>)
 8009244:	78db      	ldrb	r3, [r3, #3]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 800924a:	4b04      	ldr	r3, [pc, #16]	@ (800925c <EnabledConnectedDevices+0x50>)
 800924c:	2201      	movs	r2, #1
 800924e:	70da      	strb	r2, [r3, #3]
  }
}
 8009250:	46c0      	nop			@ (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	20000cd8 	.word	0x20000cd8
 800925c:	20000cd4 	.word	0x20000cd4

08009260 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8009264:	4a0a      	ldr	r2, [pc, #40]	@ (8009290 <DisableConnectedDevices+0x30>)
 8009266:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <DisableConnectedDevices+0x34>)
 8009268:	0019      	movs	r1, r3
 800926a:	2003      	movs	r0, #3
 800926c:	f005 fe30 	bl	800eed0 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8009270:	4b09      	ldr	r3, [pc, #36]	@ (8009298 <DisableConnectedDevices+0x38>)
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8009276:	4b08      	ldr	r3, [pc, #32]	@ (8009298 <DisableConnectedDevices+0x38>)
 8009278:	2200      	movs	r2, #0
 800927a:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 800927c:	4b06      	ldr	r3, [pc, #24]	@ (8009298 <DisableConnectedDevices+0x38>)
 800927e:	2200      	movs	r2, #0
 8009280:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8009282:	4b05      	ldr	r3, [pc, #20]	@ (8009298 <DisableConnectedDevices+0x38>)
 8009284:	2200      	movs	r2, #0
 8009286:	70da      	strb	r2, [r3, #3]
}
 8009288:	46c0      	nop			@ (mov r8, r8)
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	46c0      	nop			@ (mov r8, r8)
 8009290:	08025478 	.word	0x08025478
 8009294:	080251f0 	.word	0x080251f0
 8009298:	20000cd4 	.word	0x20000cd4

0800929c <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80092a0:	4b02      	ldr	r3, [pc, #8]	@ (80092ac <ResetdBAmax+0x10>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	46c0      	nop			@ (mov r8, r8)
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20000d24 	.word	0x20000d24

080092b0 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80092b8:	f006 fa4e 	bl	800f758 <HAL_GetTick>
 80092bc:	0002      	movs	r2, r0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	18d2      	adds	r2, r2, r3
 80092c2:	4b03      	ldr	r3, [pc, #12]	@ (80092d0 <setMICTimeStamp+0x20>)
 80092c4:	601a      	str	r2, [r3, #0]
}
 80092c6:	46c0      	nop			@ (mov r8, r8)
 80092c8:	46bd      	mov	sp, r7
 80092ca:	b002      	add	sp, #8
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	46c0      	nop			@ (mov r8, r8)
 80092d0:	20000d2c 	.word	0x20000d2c

080092d4 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  counter = 0;
 80092d8:	4b05      	ldr	r3, [pc, #20]	@ (80092f0 <ResetDBACalculator+0x1c>)
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80092de:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <ResetDBACalculator+0x20>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80092e4:	4b04      	ldr	r3, [pc, #16]	@ (80092f8 <ResetDBACalculator+0x24>)
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]
}
 80092ea:	46c0      	nop			@ (mov r8, r8)
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	20000d28 	.word	0x20000d28
 80092f4:	2000008c 	.word	0x2000008c
 80092f8:	20000d29 	.word	0x20000d29

080092fc <MIC_Print>:

void MIC_Print(void) {
 80092fc:	b5b0      	push	{r4, r5, r7, lr}
 80092fe:	b08a      	sub	sp, #40	@ 0x28
 8009300:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8009302:	4b9f      	ldr	r3, [pc, #636]	@ (8009580 <MIC_Print+0x284>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b9f      	ldr	r3, [pc, #636]	@ (8009584 <MIC_Print+0x288>)
 8009308:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800930a:	4b9f      	ldr	r3, [pc, #636]	@ (8009588 <MIC_Print+0x28c>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	001a      	movs	r2, r3
 8009310:	4b9c      	ldr	r3, [pc, #624]	@ (8009584 <MIC_Print+0x288>)
 8009312:	6819      	ldr	r1, [r3, #0]
 8009314:	4b9d      	ldr	r3, [pc, #628]	@ (800958c <MIC_Print+0x290>)
 8009316:	0092      	lsls	r2, r2, #2
 8009318:	50d1      	str	r1, [r2, r3]
  counter++;
 800931a:	4b9b      	ldr	r3, [pc, #620]	@ (8009588 <MIC_Print+0x28c>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b99      	ldr	r3, [pc, #612]	@ (8009588 <MIC_Print+0x28c>)
 8009324:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8009326:	4b98      	ldr	r3, [pc, #608]	@ (8009588 <MIC_Print+0x28c>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b09      	cmp	r3, #9
 800932c:	d80b      	bhi.n	8009346 <MIC_Print+0x4a>
 800932e:	4b98      	ldr	r3, [pc, #608]	@ (8009590 <MIC_Print+0x294>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2201      	movs	r2, #1
 8009334:	4053      	eors	r3, r2
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <MIC_Print+0x4a>
    denominator = counter;
 800933c:	4b92      	ldr	r3, [pc, #584]	@ (8009588 <MIC_Print+0x28c>)
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	4b94      	ldr	r3, [pc, #592]	@ (8009594 <MIC_Print+0x298>)
 8009342:	701a      	strb	r2, [r3, #0]
 8009344:	e005      	b.n	8009352 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8009346:	4b93      	ldr	r3, [pc, #588]	@ (8009594 <MIC_Print+0x298>)
 8009348:	220a      	movs	r2, #10
 800934a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800934c:	4b90      	ldr	r3, [pc, #576]	@ (8009590 <MIC_Print+0x294>)
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8009352:	4b91      	ldr	r3, [pc, #580]	@ (8009598 <MIC_Print+0x29c>)
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8009358:	230f      	movs	r3, #15
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	2200      	movs	r2, #0
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	e042      	b.n	80093e8 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8009362:	240f      	movs	r4, #15
 8009364:	193b      	adds	r3, r7, r4
 8009366:	781a      	ldrb	r2, [r3, #0]
 8009368:	4b88      	ldr	r3, [pc, #544]	@ (800958c <MIC_Print+0x290>)
 800936a:	0092      	lsls	r2, r2, #2
 800936c:	58d2      	ldr	r2, [r2, r3]
 800936e:	4b8a      	ldr	r3, [pc, #552]	@ (8009598 <MIC_Print+0x29c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	1c19      	adds	r1, r3, #0
 8009374:	1c10      	adds	r0, r2, #0
 8009376:	f7f7 faa3 	bl	80008c0 <__aeabi_fadd>
 800937a:	1c03      	adds	r3, r0, #0
 800937c:	1c1a      	adds	r2, r3, #0
 800937e:	4b86      	ldr	r3, [pc, #536]	@ (8009598 <MIC_Print+0x29c>)
 8009380:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8009382:	193b      	adds	r3, r7, r4
 8009384:	781a      	ldrb	r2, [r3, #0]
 8009386:	4b81      	ldr	r3, [pc, #516]	@ (800958c <MIC_Print+0x290>)
 8009388:	0092      	lsls	r2, r2, #2
 800938a:	58d2      	ldr	r2, [r2, r3]
 800938c:	4b83      	ldr	r3, [pc, #524]	@ (800959c <MIC_Print+0x2a0>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	1c19      	adds	r1, r3, #0
 8009392:	1c10      	adds	r0, r2, #0
 8009394:	f7f7 f8e0 	bl	8000558 <__aeabi_fcmpgt>
 8009398:	1e03      	subs	r3, r0, #0
 800939a:	d006      	beq.n	80093aa <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800939c:	193b      	adds	r3, r7, r4
 800939e:	781a      	ldrb	r2, [r3, #0]
 80093a0:	4b7a      	ldr	r3, [pc, #488]	@ (800958c <MIC_Print+0x290>)
 80093a2:	0092      	lsls	r2, r2, #2
 80093a4:	58d2      	ldr	r2, [r2, r3]
 80093a6:	4b7d      	ldr	r3, [pc, #500]	@ (800959c <MIC_Print+0x2a0>)
 80093a8:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80093aa:	4b7b      	ldr	r3, [pc, #492]	@ (8009598 <MIC_Print+0x29c>)
 80093ac:	681c      	ldr	r4, [r3, #0]
 80093ae:	4b79      	ldr	r3, [pc, #484]	@ (8009594 <MIC_Print+0x298>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	0018      	movs	r0, r3
 80093b4:	f7f8 f958 	bl	8001668 <__aeabi_ui2f>
 80093b8:	1c03      	adds	r3, r0, #0
 80093ba:	1c19      	adds	r1, r3, #0
 80093bc:	1c20      	adds	r0, r4, #0
 80093be:	f7f7 fc09 	bl	8000bd4 <__aeabi_fdiv>
 80093c2:	1c03      	adds	r3, r0, #0
 80093c4:	1c1a      	adds	r2, r3, #0
 80093c6:	4b76      	ldr	r3, [pc, #472]	@ (80095a0 <MIC_Print+0x2a4>)
 80093c8:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 80093ca:	4b6e      	ldr	r3, [pc, #440]	@ (8009584 <MIC_Print+0x288>)
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	4b73      	ldr	r3, [pc, #460]	@ (800959c <MIC_Print+0x2a0>)
 80093d0:	6819      	ldr	r1, [r3, #0]
 80093d2:	4b73      	ldr	r3, [pc, #460]	@ (80095a0 <MIC_Print+0x2a4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	1c1a      	adds	r2, r3, #0
 80093d8:	f7fa fa12 	bl	8003800 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80093dc:	210f      	movs	r1, #15
 80093de:	187b      	adds	r3, r7, r1
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	187b      	adds	r3, r7, r1
 80093e4:	3201      	adds	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	4b6a      	ldr	r3, [pc, #424]	@ (8009594 <MIC_Print+0x298>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	220f      	movs	r2, #15
 80093ee:	18ba      	adds	r2, r7, r2
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d3b5      	bcc.n	8009362 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 80093f6:	4b63      	ldr	r3, [pc, #396]	@ (8009584 <MIC_Print+0x288>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	1c18      	adds	r0, r3, #0
 80093fc:	f7fa f832 	bl	8003464 <__aeabi_f2d>
 8009400:	6038      	str	r0, [r7, #0]
 8009402:	6079      	str	r1, [r7, #4]
 8009404:	4b65      	ldr	r3, [pc, #404]	@ (800959c <MIC_Print+0x2a0>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	1c18      	adds	r0, r3, #0
 800940a:	f7fa f82b 	bl	8003464 <__aeabi_f2d>
 800940e:	0004      	movs	r4, r0
 8009410:	000d      	movs	r5, r1
 8009412:	4b63      	ldr	r3, [pc, #396]	@ (80095a0 <MIC_Print+0x2a4>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	1c18      	adds	r0, r3, #0
 8009418:	f7fa f824 	bl	8003464 <__aeabi_f2d>
 800941c:	0002      	movs	r2, r0
 800941e:	000b      	movs	r3, r1
 8009420:	4960      	ldr	r1, [pc, #384]	@ (80095a4 <MIC_Print+0x2a8>)
 8009422:	9204      	str	r2, [sp, #16]
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	9402      	str	r4, [sp, #8]
 8009428:	9503      	str	r5, [sp, #12]
 800942a:	4b5f      	ldr	r3, [pc, #380]	@ (80095a8 <MIC_Print+0x2ac>)
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	0008      	movs	r0, r1
 8009434:	f017 fa34 	bl	80208a0 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8009438:	4b53      	ldr	r3, [pc, #332]	@ (8009588 <MIC_Print+0x28c>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b0a      	cmp	r3, #10
 800943e:	d902      	bls.n	8009446 <MIC_Print+0x14a>
    counter = 0;
 8009440:	4b51      	ldr	r3, [pc, #324]	@ (8009588 <MIC_Print+0x28c>)
 8009442:	2200      	movs	r2, #0
 8009444:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8009446:	4b4f      	ldr	r3, [pc, #316]	@ (8009584 <MIC_Print+0x288>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4958      	ldr	r1, [pc, #352]	@ (80095ac <MIC_Print+0x2b0>)
 800944c:	1c18      	adds	r0, r3, #0
 800944e:	f7f7 f88d 	bl	800056c <__aeabi_fcmpge>
 8009452:	1e03      	subs	r3, r0, #0
 8009454:	d004      	beq.n	8009460 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8009456:	2201      	movs	r2, #1
 8009458:	2101      	movs	r1, #1
 800945a:	2001      	movs	r0, #1
 800945c:	f004 fb14 	bl	800da88 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8009460:	4b48      	ldr	r3, [pc, #288]	@ (8009584 <MIC_Print+0x288>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4952      	ldr	r1, [pc, #328]	@ (80095b0 <MIC_Print+0x2b4>)
 8009466:	1c18      	adds	r0, r3, #0
 8009468:	f7f7 f880 	bl	800056c <__aeabi_fcmpge>
 800946c:	1e03      	subs	r3, r0, #0
 800946e:	d00c      	beq.n	800948a <MIC_Print+0x18e>
 8009470:	4b44      	ldr	r3, [pc, #272]	@ (8009584 <MIC_Print+0x288>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	494d      	ldr	r1, [pc, #308]	@ (80095ac <MIC_Print+0x2b0>)
 8009476:	1c18      	adds	r0, r3, #0
 8009478:	f7f7 f85a 	bl	8000530 <__aeabi_fcmplt>
 800947c:	1e03      	subs	r3, r0, #0
 800947e:	d004      	beq.n	800948a <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8009480:	2200      	movs	r2, #0
 8009482:	2100      	movs	r1, #0
 8009484:	2001      	movs	r0, #1
 8009486:	f004 faff 	bl	800da88 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800948a:	4b3e      	ldr	r3, [pc, #248]	@ (8009584 <MIC_Print+0x288>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4949      	ldr	r1, [pc, #292]	@ (80095b4 <MIC_Print+0x2b8>)
 8009490:	1c18      	adds	r0, r3, #0
 8009492:	f7f7 f86b 	bl	800056c <__aeabi_fcmpge>
 8009496:	1e03      	subs	r3, r0, #0
 8009498:	d00c      	beq.n	80094b4 <MIC_Print+0x1b8>
 800949a:	4b3a      	ldr	r3, [pc, #232]	@ (8009584 <MIC_Print+0x288>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4944      	ldr	r1, [pc, #272]	@ (80095b0 <MIC_Print+0x2b4>)
 80094a0:	1c18      	adds	r0, r3, #0
 80094a2:	f7f7 f845 	bl	8000530 <__aeabi_fcmplt>
 80094a6:	1e03      	subs	r3, r0, #0
 80094a8:	d004      	beq.n	80094b4 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 80094aa:	2200      	movs	r2, #0
 80094ac:	2101      	movs	r1, #1
 80094ae:	2001      	movs	r0, #1
 80094b0:	f004 faea 	bl	800da88 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80094b4:	4b33      	ldr	r3, [pc, #204]	@ (8009584 <MIC_Print+0x288>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	493f      	ldr	r1, [pc, #252]	@ (80095b8 <MIC_Print+0x2bc>)
 80094ba:	1c18      	adds	r0, r3, #0
 80094bc:	f7f7 f856 	bl	800056c <__aeabi_fcmpge>
 80094c0:	1e03      	subs	r3, r0, #0
 80094c2:	d00c      	beq.n	80094de <MIC_Print+0x1e2>
 80094c4:	4b2f      	ldr	r3, [pc, #188]	@ (8009584 <MIC_Print+0x288>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	493a      	ldr	r1, [pc, #232]	@ (80095b4 <MIC_Print+0x2b8>)
 80094ca:	1c18      	adds	r0, r3, #0
 80094cc:	f7f7 f830 	bl	8000530 <__aeabi_fcmplt>
 80094d0:	1e03      	subs	r3, r0, #0
 80094d2:	d004      	beq.n	80094de <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 80094d4:	2200      	movs	r2, #0
 80094d6:	2101      	movs	r1, #1
 80094d8:	2000      	movs	r0, #0
 80094da:	f004 fad5 	bl	800da88 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80094de:	4b29      	ldr	r3, [pc, #164]	@ (8009584 <MIC_Print+0x288>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4936      	ldr	r1, [pc, #216]	@ (80095bc <MIC_Print+0x2c0>)
 80094e4:	1c18      	adds	r0, r3, #0
 80094e6:	f7f7 f841 	bl	800056c <__aeabi_fcmpge>
 80094ea:	1e03      	subs	r3, r0, #0
 80094ec:	d00c      	beq.n	8009508 <MIC_Print+0x20c>
 80094ee:	4b25      	ldr	r3, [pc, #148]	@ (8009584 <MIC_Print+0x288>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4931      	ldr	r1, [pc, #196]	@ (80095b8 <MIC_Print+0x2bc>)
 80094f4:	1c18      	adds	r0, r3, #0
 80094f6:	f7f7 f81b 	bl	8000530 <__aeabi_fcmplt>
 80094fa:	1e03      	subs	r3, r0, #0
 80094fc:	d004      	beq.n	8009508 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 80094fe:	2201      	movs	r2, #1
 8009500:	2101      	movs	r1, #1
 8009502:	2000      	movs	r0, #0
 8009504:	f004 fac0 	bl	800da88 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8009508:	4b1e      	ldr	r3, [pc, #120]	@ (8009584 <MIC_Print+0x288>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	492c      	ldr	r1, [pc, #176]	@ (80095c0 <MIC_Print+0x2c4>)
 800950e:	1c18      	adds	r0, r3, #0
 8009510:	f7f7 f82c 	bl	800056c <__aeabi_fcmpge>
 8009514:	1e03      	subs	r3, r0, #0
 8009516:	d00c      	beq.n	8009532 <MIC_Print+0x236>
 8009518:	4b1a      	ldr	r3, [pc, #104]	@ (8009584 <MIC_Print+0x288>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4927      	ldr	r1, [pc, #156]	@ (80095bc <MIC_Print+0x2c0>)
 800951e:	1c18      	adds	r0, r3, #0
 8009520:	f7f7 f806 	bl	8000530 <__aeabi_fcmplt>
 8009524:	1e03      	subs	r3, r0, #0
 8009526:	d004      	beq.n	8009532 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8009528:	2201      	movs	r2, #1
 800952a:	2100      	movs	r1, #0
 800952c:	2000      	movs	r0, #0
 800952e:	f004 faab 	bl	800da88 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8009532:	4b14      	ldr	r3, [pc, #80]	@ (8009584 <MIC_Print+0x288>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4923      	ldr	r1, [pc, #140]	@ (80095c4 <MIC_Print+0x2c8>)
 8009538:	1c18      	adds	r0, r3, #0
 800953a:	f7f7 f817 	bl	800056c <__aeabi_fcmpge>
 800953e:	1e03      	subs	r3, r0, #0
 8009540:	d00c      	beq.n	800955c <MIC_Print+0x260>
 8009542:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <MIC_Print+0x288>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	491e      	ldr	r1, [pc, #120]	@ (80095c0 <MIC_Print+0x2c4>)
 8009548:	1c18      	adds	r0, r3, #0
 800954a:	f7f6 fff1 	bl	8000530 <__aeabi_fcmplt>
 800954e:	1e03      	subs	r3, r0, #0
 8009550:	d004      	beq.n	800955c <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8009552:	2201      	movs	r2, #1
 8009554:	2100      	movs	r1, #0
 8009556:	2001      	movs	r0, #1
 8009558:	f004 fa96 	bl	800da88 <SetDBLED>
  }
  if(dBA < 35){//off
 800955c:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <MIC_Print+0x288>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4918      	ldr	r1, [pc, #96]	@ (80095c4 <MIC_Print+0x2c8>)
 8009562:	1c18      	adds	r0, r3, #0
 8009564:	f7f6 ffe4 	bl	8000530 <__aeabi_fcmplt>
 8009568:	1e03      	subs	r3, r0, #0
 800956a:	d100      	bne.n	800956e <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800956c:	e004      	b.n	8009578 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800956e:	2200      	movs	r2, #0
 8009570:	2100      	movs	r1, #0
 8009572:	2000      	movs	r0, #0
 8009574:	f004 fa88 	bl	800da88 <SetDBLED>
}
 8009578:	46c0      	nop			@ (mov r8, r8)
 800957a:	46bd      	mov	sp, r7
 800957c:	b004      	add	sp, #16
 800957e:	bdb0      	pop	{r4, r5, r7, pc}
 8009580:	20000d20 	.word	0x20000d20
 8009584:	20000cec 	.word	0x20000cec
 8009588:	20000d28 	.word	0x20000d28
 800958c:	20000cf0 	.word	0x20000cf0
 8009590:	20000d29 	.word	0x20000d29
 8009594:	2000008c 	.word	0x2000008c
 8009598:	20000d1c 	.word	0x20000d1c
 800959c:	20000d24 	.word	0x20000d24
 80095a0:	20000d18 	.word	0x20000d18
 80095a4:	0802548c 	.word	0x0802548c
 80095a8:	20000ce0 	.word	0x20000ce0
 80095ac:	42b40000 	.word	0x42b40000
 80095b0:	42a00000 	.word	0x42a00000
 80095b4:	428c0000 	.word	0x428c0000
 80095b8:	42700000 	.word	0x42700000
 80095bc:	42480000 	.word	0x42480000
 80095c0:	42200000 	.word	0x42200000
 80095c4:	420c0000 	.word	0x420c0000

080095c8 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80095ce:	4b11      	ldr	r3, [pc, #68]	@ (8009614 <MIC_TestMeasurementDone+0x4c>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	4a10      	ldr	r2, [pc, #64]	@ (8009618 <MIC_TestMeasurementDone+0x50>)
 80095d6:	4911      	ldr	r1, [pc, #68]	@ (800961c <MIC_TestMeasurementDone+0x54>)
 80095d8:	2002      	movs	r0, #2
 80095da:	f005 fc79 	bl	800eed0 <CreateLine>
  if(DataReady) {
 80095de:	4b0d      	ldr	r3, [pc, #52]	@ (8009614 <MIC_TestMeasurementDone+0x4c>)
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d010      	beq.n	800960a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80095e8:	1dfb      	adds	r3, r7, #7
 80095ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009620 <MIC_TestMeasurementDone+0x58>)
 80095ec:	7812      	ldrb	r2, [r2, #0]
 80095ee:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80095f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009620 <MIC_TestMeasurementDone+0x58>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	4a0b      	ldr	r2, [pc, #44]	@ (8009624 <MIC_TestMeasurementDone+0x5c>)
 80095f8:	4908      	ldr	r1, [pc, #32]	@ (800961c <MIC_TestMeasurementDone+0x54>)
 80095fa:	2002      	movs	r0, #2
 80095fc:	f005 fc68 	bl	800eed0 <CreateLine>
    ResetMICIndicator();
 8009600:	f004 fb30 	bl	800dc64 <ResetMICIndicator>
    return Check;
 8009604:	1dfb      	adds	r3, r7, #7
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	e000      	b.n	800960c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800960a:	2300      	movs	r3, #0
}
 800960c:	0018      	movs	r0, r3
 800960e:	46bd      	mov	sp, r7
 8009610:	b002      	add	sp, #8
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20000e5d 	.word	0x20000e5d
 8009618:	080254d4 	.word	0x080254d4
 800961c:	08025500 	.word	0x08025500
 8009620:	20000e5e 	.word	0x20000e5e
 8009624:	08025504 	.word	0x08025504

08009628 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800962e:	4b78      	ldr	r3, [pc, #480]	@ (8009810 <Mic_Upkeep+0x1e8>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b03      	cmp	r3, #3
 8009634:	d100      	bne.n	8009638 <Mic_Upkeep+0x10>
 8009636:	e0b8      	b.n	80097aa <Mic_Upkeep+0x182>
 8009638:	dd00      	ble.n	800963c <Mic_Upkeep+0x14>
 800963a:	e0d3      	b.n	80097e4 <Mic_Upkeep+0x1bc>
 800963c:	2b02      	cmp	r3, #2
 800963e:	d037      	beq.n	80096b0 <Mic_Upkeep+0x88>
 8009640:	dd00      	ble.n	8009644 <Mic_Upkeep+0x1c>
 8009642:	e0cf      	b.n	80097e4 <Mic_Upkeep+0x1bc>
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <Mic_Upkeep+0x26>
 8009648:	2b01      	cmp	r3, #1
 800964a:	d014      	beq.n	8009676 <Mic_Upkeep+0x4e>
 800964c:	e0ca      	b.n	80097e4 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800964e:	2001      	movs	r0, #1
 8009650:	f003 fb18 	bl	800cc84 <enableMicrophone>
 8009654:	0003      	movs	r3, r0
 8009656:	001a      	movs	r2, r3
 8009658:	2301      	movs	r3, #1
 800965a:	4053      	eors	r3, r2
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8009662:	4a6c      	ldr	r2, [pc, #432]	@ (8009814 <Mic_Upkeep+0x1ec>)
 8009664:	4b6c      	ldr	r3, [pc, #432]	@ (8009818 <Mic_Upkeep+0x1f0>)
 8009666:	217f      	movs	r1, #127	@ 0x7f
 8009668:	0018      	movs	r0, r3
 800966a:	f005 fce9 	bl	800f040 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800966e:	4b68      	ldr	r3, [pc, #416]	@ (8009810 <Mic_Upkeep+0x1e8>)
 8009670:	2201      	movs	r2, #1
 8009672:	701a      	strb	r2, [r3, #0]
    break;
 8009674:	e0c5      	b.n	8009802 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8009676:	f003 fae1 	bl	800cc3c <micSettlingComplete>
 800967a:	1e03      	subs	r3, r0, #0
 800967c:	d105      	bne.n	800968a <Mic_Upkeep+0x62>
 800967e:	4b67      	ldr	r3, [pc, #412]	@ (800981c <Mic_Upkeep+0x1f4>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d100      	bne.n	800968a <Mic_Upkeep+0x62>
 8009688:	e0b6      	b.n	80097f8 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800968a:	f003 fb65 	bl	800cd58 <startSPLcalculation>
 800968e:	0003      	movs	r3, r0
 8009690:	001a      	movs	r2, r3
 8009692:	2301      	movs	r3, #1
 8009694:	4053      	eors	r3, r2
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d005      	beq.n	80096a8 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800969c:	4a5d      	ldr	r2, [pc, #372]	@ (8009814 <Mic_Upkeep+0x1ec>)
 800969e:	4b5e      	ldr	r3, [pc, #376]	@ (8009818 <Mic_Upkeep+0x1f0>)
 80096a0:	2188      	movs	r1, #136	@ 0x88
 80096a2:	0018      	movs	r0, r3
 80096a4:	f005 fccc 	bl	800f040 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80096a8:	4b59      	ldr	r3, [pc, #356]	@ (8009810 <Mic_Upkeep+0x1e8>)
 80096aa:	2202      	movs	r2, #2
 80096ac:	701a      	strb	r2, [r3, #0]
    }
    break;
 80096ae:	e0a3      	b.n	80097f8 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80096b0:	4b5b      	ldr	r3, [pc, #364]	@ (8009820 <Mic_Upkeep+0x1f8>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	2101      	movs	r1, #1
 80096b6:	0018      	movs	r0, r3
 80096b8:	f003 f9a2 	bl	800ca00 <getSoundData>
 80096bc:	1e03      	subs	r3, r0, #0
 80096be:	d100      	bne.n	80096c2 <Mic_Upkeep+0x9a>
 80096c0:	e09c      	b.n	80097fc <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80096c2:	f003 fa9b 	bl	800cbfc <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80096c6:	4b56      	ldr	r3, [pc, #344]	@ (8009820 <Mic_Upkeep+0x1f8>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	001a      	movs	r2, r3
 80096cc:	4b54      	ldr	r3, [pc, #336]	@ (8009820 <Mic_Upkeep+0x1f8>)
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	4954      	ldr	r1, [pc, #336]	@ (8009824 <Mic_Upkeep+0x1fc>)
 80096d2:	0038      	movs	r0, r7
 80096d4:	f017 f954 	bl	8020980 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80096d8:	4b51      	ldr	r3, [pc, #324]	@ (8009820 <Mic_Upkeep+0x1f8>)
 80096da:	89db      	ldrh	r3, [r3, #14]
 80096dc:	001a      	movs	r2, r3
 80096de:	4b50      	ldr	r3, [pc, #320]	@ (8009820 <Mic_Upkeep+0x1f8>)
 80096e0:	7c1b      	ldrb	r3, [r3, #16]
 80096e2:	4951      	ldr	r1, [pc, #324]	@ (8009828 <Mic_Upkeep+0x200>)
 80096e4:	4851      	ldr	r0, [pc, #324]	@ (800982c <Mic_Upkeep+0x204>)
 80096e6:	f017 f94b 	bl	8020980 <siprintf>
      dBValue = atof(dBbuffer);
 80096ea:	003b      	movs	r3, r7
 80096ec:	0018      	movs	r0, r3
 80096ee:	f015 fcf7 	bl	801f0e0 <atof>
 80096f2:	0002      	movs	r2, r0
 80096f4:	000b      	movs	r3, r1
 80096f6:	0010      	movs	r0, r2
 80096f8:	0019      	movs	r1, r3
 80096fa:	f7f9 fefb 	bl	80034f4 <__aeabi_d2f>
 80096fe:	1c02      	adds	r2, r0, #0
 8009700:	4b4b      	ldr	r3, [pc, #300]	@ (8009830 <Mic_Upkeep+0x208>)
 8009702:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8009704:	4b4a      	ldr	r3, [pc, #296]	@ (8009830 <Mic_Upkeep+0x208>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	494a      	ldr	r1, [pc, #296]	@ (8009834 <Mic_Upkeep+0x20c>)
 800970a:	1c18      	adds	r0, r3, #0
 800970c:	f7f7 fc48 	bl	8000fa0 <__aeabi_fmul>
 8009710:	1c03      	adds	r3, r0, #0
 8009712:	1c18      	adds	r0, r3, #0
 8009714:	f7f9 fea6 	bl	8003464 <__aeabi_f2d>
 8009718:	2200      	movs	r2, #0
 800971a:	4b47      	ldr	r3, [pc, #284]	@ (8009838 <Mic_Upkeep+0x210>)
 800971c:	f7f7 ffe6 	bl	80016ec <__aeabi_dadd>
 8009720:	0002      	movs	r2, r0
 8009722:	000b      	movs	r3, r1
 8009724:	0010      	movs	r0, r2
 8009726:	0019      	movs	r1, r3
 8009728:	f7f9 fe0e 	bl	8003348 <__aeabi_d2iz>
 800972c:	0003      	movs	r3, r0
 800972e:	0018      	movs	r0, r3
 8009730:	f7f9 fe46 	bl	80033c0 <__aeabi_i2d>
 8009734:	2200      	movs	r2, #0
 8009736:	4b41      	ldr	r3, [pc, #260]	@ (800983c <Mic_Upkeep+0x214>)
 8009738:	f7f8 fb3c 	bl	8001db4 <__aeabi_ddiv>
 800973c:	0002      	movs	r2, r0
 800973e:	000b      	movs	r3, r1
 8009740:	0010      	movs	r0, r2
 8009742:	0019      	movs	r1, r3
 8009744:	f7f9 fed6 	bl	80034f4 <__aeabi_d2f>
 8009748:	1c02      	adds	r2, r0, #0
 800974a:	4b39      	ldr	r3, [pc, #228]	@ (8009830 <Mic_Upkeep+0x208>)
 800974c:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800974e:	f7ff fdd5 	bl	80092fc <MIC_Print>
      if (!startSPLcalculation()) {
 8009752:	f003 fb01 	bl	800cd58 <startSPLcalculation>
 8009756:	0003      	movs	r3, r0
 8009758:	001a      	movs	r2, r3
 800975a:	2301      	movs	r3, #1
 800975c:	4053      	eors	r3, r2
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8009764:	4a2b      	ldr	r2, [pc, #172]	@ (8009814 <Mic_Upkeep+0x1ec>)
 8009766:	4b2c      	ldr	r3, [pc, #176]	@ (8009818 <Mic_Upkeep+0x1f0>)
 8009768:	2198      	movs	r1, #152	@ 0x98
 800976a:	0018      	movs	r0, r3
 800976c:	f005 fc68 	bl	800f040 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8009770:	2000      	movs	r0, #0
 8009772:	f003 fa87 	bl	800cc84 <enableMicrophone>
 8009776:	0003      	movs	r3, r0
 8009778:	001a      	movs	r2, r3
 800977a:	2301      	movs	r3, #1
 800977c:	4053      	eors	r3, r2
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d005      	beq.n	8009790 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8009784:	4a23      	ldr	r2, [pc, #140]	@ (8009814 <Mic_Upkeep+0x1ec>)
 8009786:	4b24      	ldr	r3, [pc, #144]	@ (8009818 <Mic_Upkeep+0x1f0>)
 8009788:	219b      	movs	r1, #155	@ 0x9b
 800978a:	0018      	movs	r0, r3
 800978c:	f005 fc58 	bl	800f040 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8009790:	f005 ffe2 	bl	800f758 <HAL_GetTick>
 8009794:	0003      	movs	r3, r0
 8009796:	4a2a      	ldr	r2, [pc, #168]	@ (8009840 <Mic_Upkeep+0x218>)
 8009798:	189a      	adds	r2, r3, r2
 800979a:	4b2a      	ldr	r3, [pc, #168]	@ (8009844 <Mic_Upkeep+0x21c>)
 800979c:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800979e:	4b1c      	ldr	r3, [pc, #112]	@ (8009810 <Mic_Upkeep+0x1e8>)
 80097a0:	2203      	movs	r2, #3
 80097a2:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80097a4:	f004 fa5e 	bl	800dc64 <ResetMICIndicator>
    }
    break;
 80097a8:	e028      	b.n	80097fc <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80097aa:	4b26      	ldr	r3, [pc, #152]	@ (8009844 <Mic_Upkeep+0x21c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	0018      	movs	r0, r3
 80097b0:	f005 fb38 	bl	800ee24 <TimestampIsReached>
 80097b4:	1e03      	subs	r3, r0, #0
 80097b6:	d023      	beq.n	8009800 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80097b8:	2001      	movs	r0, #1
 80097ba:	f003 fa63 	bl	800cc84 <enableMicrophone>
 80097be:	0003      	movs	r3, r0
 80097c0:	001a      	movs	r2, r3
 80097c2:	2301      	movs	r3, #1
 80097c4:	4053      	eors	r3, r2
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d005      	beq.n	80097d8 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80097cc:	4a11      	ldr	r2, [pc, #68]	@ (8009814 <Mic_Upkeep+0x1ec>)
 80097ce:	4b12      	ldr	r3, [pc, #72]	@ (8009818 <Mic_Upkeep+0x1f0>)
 80097d0:	21a6      	movs	r1, #166	@ 0xa6
 80097d2:	0018      	movs	r0, r3
 80097d4:	f005 fc34 	bl	800f040 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80097d8:	4b0d      	ldr	r3, [pc, #52]	@ (8009810 <Mic_Upkeep+0x1e8>)
 80097da:	2201      	movs	r2, #1
 80097dc:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80097de:	f004 f9ff 	bl	800dbe0 <SetMICIndicator>
    }
    break;
 80097e2:	e00d      	b.n	8009800 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 80097e4:	4a18      	ldr	r2, [pc, #96]	@ (8009848 <Mic_Upkeep+0x220>)
 80097e6:	4b19      	ldr	r3, [pc, #100]	@ (800984c <Mic_Upkeep+0x224>)
 80097e8:	0019      	movs	r1, r3
 80097ea:	2003      	movs	r0, #3
 80097ec:	f005 fb70 	bl	800eed0 <CreateLine>
    MicState = MIC_STATE_INIT;
 80097f0:	4b07      	ldr	r3, [pc, #28]	@ (8009810 <Mic_Upkeep+0x1e8>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
    break;
 80097f6:	e004      	b.n	8009802 <Mic_Upkeep+0x1da>
    break;
 80097f8:	46c0      	nop			@ (mov r8, r8)
 80097fa:	e002      	b.n	8009802 <Mic_Upkeep+0x1da>
    break;
 80097fc:	46c0      	nop			@ (mov r8, r8)
 80097fe:	e000      	b.n	8009802 <Mic_Upkeep+0x1da>
    break;
 8009800:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8009802:	4b03      	ldr	r3, [pc, #12]	@ (8009810 <Mic_Upkeep+0x1e8>)
 8009804:	781b      	ldrb	r3, [r3, #0]
}
 8009806:	0018      	movs	r0, r3
 8009808:	46bd      	mov	sp, r7
 800980a:	b002      	add	sp, #8
 800980c:	bd80      	pop	{r7, pc}
 800980e:	46c0      	nop			@ (mov r8, r8)
 8009810:	20000d42 	.word	0x20000d42
 8009814:	0802551c 	.word	0x0802551c
 8009818:	080265c4 	.word	0x080265c4
 800981c:	20000e5d 	.word	0x20000e5d
 8009820:	20000d30 	.word	0x20000d30
 8009824:	08025538 	.word	0x08025538
 8009828:	08025540 	.word	0x08025540
 800982c:	20000ce0 	.word	0x20000ce0
 8009830:	20000d20 	.word	0x20000d20
 8009834:	42c80000 	.word	0x42c80000
 8009838:	3fe00000 	.word	0x3fe00000
 800983c:	40590000 	.word	0x40590000
 8009840:	000002f3 	.word	0x000002f3
 8009844:	20000d2c 	.word	0x20000d2c
 8009848:	08025548 	.word	0x08025548
 800984c:	08025568 	.word	0x08025568

08009850 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009856:	1d3b      	adds	r3, r7, #4
 8009858:	0018      	movs	r0, r3
 800985a:	2314      	movs	r3, #20
 800985c:	001a      	movs	r2, r3
 800985e:	2100      	movs	r1, #0
 8009860:	f017 f9f4 	bl	8020c4c <memset>
  RTC_DateTypeDef sDate = {0};
 8009864:	003b      	movs	r3, r7
 8009866:	2200      	movs	r2, #0
 8009868:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800986a:	4b2e      	ldr	r3, [pc, #184]	@ (8009924 <MX_RTC_Init+0xd4>)
 800986c:	4a2e      	ldr	r2, [pc, #184]	@ (8009928 <MX_RTC_Init+0xd8>)
 800986e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009870:	4b2c      	ldr	r3, [pc, #176]	@ (8009924 <MX_RTC_Init+0xd4>)
 8009872:	2200      	movs	r2, #0
 8009874:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009876:	4b2b      	ldr	r3, [pc, #172]	@ (8009924 <MX_RTC_Init+0xd4>)
 8009878:	227f      	movs	r2, #127	@ 0x7f
 800987a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800987c:	4b29      	ldr	r3, [pc, #164]	@ (8009924 <MX_RTC_Init+0xd4>)
 800987e:	22ff      	movs	r2, #255	@ 0xff
 8009880:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009882:	4b28      	ldr	r3, [pc, #160]	@ (8009924 <MX_RTC_Init+0xd4>)
 8009884:	2200      	movs	r2, #0
 8009886:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8009888:	4b26      	ldr	r3, [pc, #152]	@ (8009924 <MX_RTC_Init+0xd4>)
 800988a:	2200      	movs	r2, #0
 800988c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800988e:	4b25      	ldr	r3, [pc, #148]	@ (8009924 <MX_RTC_Init+0xd4>)
 8009890:	2200      	movs	r2, #0
 8009892:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009894:	4b23      	ldr	r3, [pc, #140]	@ (8009924 <MX_RTC_Init+0xd4>)
 8009896:	2200      	movs	r2, #0
 8009898:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800989a:	4b22      	ldr	r3, [pc, #136]	@ (8009924 <MX_RTC_Init+0xd4>)
 800989c:	0018      	movs	r0, r3
 800989e:	f00c ffdf 	bl	8016860 <HAL_RTC_Init>
 80098a2:	1e03      	subs	r3, r0, #0
 80098a4:	d001      	beq.n	80098aa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80098a6:	f7ff f9c5 	bl	8008c34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80098aa:	1d3b      	adds	r3, r7, #4
 80098ac:	220d      	movs	r2, #13
 80098ae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80098b0:	1d3b      	adds	r3, r7, #4
 80098b2:	2200      	movs	r2, #0
 80098b4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80098b6:	1d3b      	adds	r3, r7, #4
 80098b8:	2200      	movs	r2, #0
 80098ba:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80098bc:	1d3b      	adds	r3, r7, #4
 80098be:	2200      	movs	r2, #0
 80098c0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80098c2:	1d3b      	adds	r3, r7, #4
 80098c4:	2200      	movs	r2, #0
 80098c6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80098c8:	1d39      	adds	r1, r7, #4
 80098ca:	4b16      	ldr	r3, [pc, #88]	@ (8009924 <MX_RTC_Init+0xd4>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	0018      	movs	r0, r3
 80098d0:	f00d f862 	bl	8016998 <HAL_RTC_SetTime>
 80098d4:	1e03      	subs	r3, r0, #0
 80098d6:	d001      	beq.n	80098dc <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80098d8:	f7ff f9ac 	bl	8008c34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80098dc:	003b      	movs	r3, r7
 80098de:	2206      	movs	r2, #6
 80098e0:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80098e2:	003b      	movs	r3, r7
 80098e4:	2211      	movs	r2, #17
 80098e6:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 80098e8:	003b      	movs	r3, r7
 80098ea:	2217      	movs	r2, #23
 80098ec:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 80098ee:	003b      	movs	r3, r7
 80098f0:	2218      	movs	r2, #24
 80098f2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80098f4:	0039      	movs	r1, r7
 80098f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009924 <MX_RTC_Init+0xd4>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	0018      	movs	r0, r3
 80098fc:	f00d f954 	bl	8016ba8 <HAL_RTC_SetDate>
 8009900:	1e03      	subs	r3, r0, #0
 8009902:	d001      	beq.n	8009908 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009904:	f7ff f996 	bl	8008c34 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8009908:	4b06      	ldr	r3, [pc, #24]	@ (8009924 <MX_RTC_Init+0xd4>)
 800990a:	2200      	movs	r2, #0
 800990c:	2100      	movs	r1, #0
 800990e:	0018      	movs	r0, r3
 8009910:	f00d fb04 	bl	8016f1c <HAL_RTCEx_SetWakeUpTimer_IT>
 8009914:	1e03      	subs	r3, r0, #0
 8009916:	d001      	beq.n	800991c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8009918:	f7ff f98c 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800991c:	46c0      	nop			@ (mov r8, r8)
 800991e:	46bd      	mov	sp, r7
 8009920:	b006      	add	sp, #24
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000d44 	.word	0x20000d44
 8009928:	40002800 	.word	0x40002800

0800992c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a0a      	ldr	r2, [pc, #40]	@ (8009964 <HAL_RTC_MspInit+0x38>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d10e      	bne.n	800995c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800993e:	4b0a      	ldr	r3, [pc, #40]	@ (8009968 <HAL_RTC_MspInit+0x3c>)
 8009940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009942:	4b09      	ldr	r3, [pc, #36]	@ (8009968 <HAL_RTC_MspInit+0x3c>)
 8009944:	2180      	movs	r1, #128	@ 0x80
 8009946:	02c9      	lsls	r1, r1, #11
 8009948:	430a      	orrs	r2, r1
 800994a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800994c:	2200      	movs	r2, #0
 800994e:	2100      	movs	r1, #0
 8009950:	2002      	movs	r0, #2
 8009952:	f006 fba5 	bl	80100a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8009956:	2002      	movs	r0, #2
 8009958:	f006 fbb7 	bl	80100ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800995c:	46c0      	nop			@ (mov r8, r8)
 800995e:	46bd      	mov	sp, r7
 8009960:	b002      	add	sp, #8
 8009962:	bd80      	pop	{r7, pc}
 8009964:	40002800 	.word	0x40002800
 8009968:	40021000 	.word	0x40021000

0800996c <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8009970:	4b02      	ldr	r3, [pc, #8]	@ (800997c <sen5x_Get_sen5x_enable_state+0x10>)
 8009972:	781b      	ldrb	r3, [r3, #0]
}
 8009974:	0018      	movs	r0, r3
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	46c0      	nop			@ (mov r8, r8)
 800997c:	20000d6b 	.word	0x20000d6b

08009980 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	0002      	movs	r2, r0
 8009988:	1dfb      	adds	r3, r7, #7
 800998a:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800998c:	4b03      	ldr	r3, [pc, #12]	@ (800999c <sen5x_Set_sen5x_state+0x1c>)
 800998e:	1dfa      	adds	r2, r7, #7
 8009990:	7812      	ldrb	r2, [r2, #0]
 8009992:	701a      	strb	r2, [r3, #0]
}
 8009994:	46c0      	nop			@ (mov r8, r8)
 8009996:	46bd      	mov	sp, r7
 8009998:	b002      	add	sp, #8
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000d6b 	.word	0x20000d6b

080099a0 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 80099a8:	f005 fed6 	bl	800f758 <HAL_GetTick>
 80099ac:	0002      	movs	r2, r0
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	18d2      	adds	r2, r2, r3
 80099b2:	4b03      	ldr	r3, [pc, #12]	@ (80099c0 <setsen5xReadTimer+0x20>)
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	46c0      	nop			@ (mov r8, r8)
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	46c0      	nop			@ (mov r8, r8)
 80099c0:	20000d78 	.word	0x20000d78

080099c4 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	0002      	movs	r2, r0
 80099cc:	1dfb      	adds	r3, r7, #7
 80099ce:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 80099d0:	4b03      	ldr	r3, [pc, #12]	@ (80099e0 <setsen5xSamplecounter+0x1c>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	701a      	strb	r2, [r3, #0]
}
 80099d6:	46c0      	nop			@ (mov r8, r8)
 80099d8:	46bd      	mov	sp, r7
 80099da:	b002      	add	sp, #8
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	46c0      	nop			@ (mov r8, r8)
 80099e0:	20000d74 	.word	0x20000d74

080099e4 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 80099ec:	f7ff f9a8 	bl	8008d40 <IsPMSensorEnabled>
 80099f0:	1e03      	subs	r3, r0, #0
 80099f2:	d02c      	beq.n	8009a4e <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 80099f4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a6c <sen5x_enable+0x88>)
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	1e5a      	subs	r2, r3, #1
 80099fa:	4193      	sbcs	r3, r2
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2201      	movs	r2, #1
 8009a00:	4053      	eors	r3, r2
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	1c1a      	adds	r2, r3, #0
 8009a06:	2301      	movs	r3, #1
 8009a08:	4013      	ands	r3, r2
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	4b17      	ldr	r3, [pc, #92]	@ (8009a6c <sen5x_enable+0x88>)
 8009a0e:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8009a10:	4b16      	ldr	r3, [pc, #88]	@ (8009a6c <sen5x_enable+0x88>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 8009a18:	2000      	movs	r0, #0
 8009a1a:	f7ff ffc1 	bl	80099a0 <setsen5xReadTimer>
 8009a1e:	e009      	b.n	8009a34 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009a20:	f005 fe9a 	bl	800f758 <HAL_GetTick>
 8009a24:	0002      	movs	r2, r0
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2164      	movs	r1, #100	@ 0x64
 8009a2a:	434b      	muls	r3, r1
 8009a2c:	18d3      	adds	r3, r2, r3
 8009a2e:	0018      	movs	r0, r3
 8009a30:	f7ff ffb6 	bl	80099a0 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 8009a34:	4b0d      	ldr	r3, [pc, #52]	@ (8009a6c <sen5x_enable+0x88>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <sen5x_enable+0x5c>
 8009a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a70 <sen5x_enable+0x8c>)
 8009a3e:	e000      	b.n	8009a42 <sen5x_enable+0x5e>
 8009a40:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <sen5x_enable+0x90>)
 8009a42:	4a0d      	ldr	r2, [pc, #52]	@ (8009a78 <sen5x_enable+0x94>)
 8009a44:	490d      	ldr	r1, [pc, #52]	@ (8009a7c <sen5x_enable+0x98>)
 8009a46:	2002      	movs	r0, #2
 8009a48:	f005 fa42 	bl	800eed0 <CreateLine>
 8009a4c:	e005      	b.n	8009a5a <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 8009a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a80 <sen5x_enable+0x9c>)
 8009a50:	4b0a      	ldr	r3, [pc, #40]	@ (8009a7c <sen5x_enable+0x98>)
 8009a52:	0019      	movs	r1, r3
 8009a54:	2002      	movs	r0, #2
 8009a56:	f005 fa3b 	bl	800eed0 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8009a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <sen5x_enable+0xa0>)
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009a60:	4b02      	ldr	r3, [pc, #8]	@ (8009a6c <sen5x_enable+0x88>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
}
 8009a64:	0018      	movs	r0, r3
 8009a66:	46bd      	mov	sp, r7
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	20000d6b 	.word	0x20000d6b
 8009a70:	0802556c 	.word	0x0802556c
 8009a74:	08025574 	.word	0x08025574
 8009a78:	08025580 	.word	0x08025580
 8009a7c:	0802559c 	.word	0x0802559c
 8009a80:	080255a0 	.word	0x080255a0
 8009a84:	2000008d 	.word	0x2000008d

08009a88 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8009a8c:	2380      	movs	r3, #128	@ 0x80
 8009a8e:	015b      	lsls	r3, r3, #5
 8009a90:	480f      	ldr	r0, [pc, #60]	@ (8009ad0 <sen5x_Power_On+0x48>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	0019      	movs	r1, r3
 8009a96:	f007 f8f0 	bl	8010c7a <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 8009a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8009ad4 <sen5x_Power_On+0x4c>)
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ad8 <sen5x_Power_On+0x50>)
 8009a9e:	0019      	movs	r1, r3
 8009aa0:	2003      	movs	r0, #3
 8009aa2:	f005 fa15 	bl	800eed0 <CreateLine>
  HAL_Delay(150);
 8009aa6:	2096      	movs	r0, #150	@ 0x96
 8009aa8:	f005 fe60 	bl	800f76c <HAL_Delay>
  if (sen5x_device_reset()) {
 8009aac:	f001 f990 	bl	800add0 <sen5x_device_reset>
 8009ab0:	1e03      	subs	r3, r0, #0
 8009ab2:	d006      	beq.n	8009ac2 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 8009ab4:	4a09      	ldr	r2, [pc, #36]	@ (8009adc <sen5x_Power_On+0x54>)
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <sen5x_Power_On+0x58>)
 8009ab8:	0019      	movs	r1, r3
 8009aba:	2001      	movs	r0, #1
 8009abc:	f005 fa08 	bl	800eed0 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 8009ac0:	e002      	b.n	8009ac8 <sen5x_Power_On+0x40>
    sen5x_On = true;
 8009ac2:	4b08      	ldr	r3, [pc, #32]	@ (8009ae4 <sen5x_Power_On+0x5c>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	701a      	strb	r2, [r3, #0]
}
 8009ac8:	46c0      	nop			@ (mov r8, r8)
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	46c0      	nop			@ (mov r8, r8)
 8009ad0:	50000800 	.word	0x50000800
 8009ad4:	080255c0 	.word	0x080255c0
 8009ad8:	080255dc 	.word	0x080255dc
 8009adc:	080255e0 	.word	0x080255e0
 8009ae0:	08025608 	.word	0x08025608
 8009ae4:	20000d69 	.word	0x20000d69

08009ae8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009aec:	4b0e      	ldr	r3, [pc, #56]	@ (8009b28 <sen5x_Power_Off+0x40>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d006      	beq.n	8009b02 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009af4:	4a0d      	ldr	r2, [pc, #52]	@ (8009b2c <sen5x_Power_Off+0x44>)
 8009af6:	4b0e      	ldr	r3, [pc, #56]	@ (8009b30 <sen5x_Power_Off+0x48>)
 8009af8:	0019      	movs	r1, r3
 8009afa:	2003      	movs	r0, #3
 8009afc:	f005 f9e8 	bl	800eed0 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 8009b00:	e00f      	b.n	8009b22 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 8009b02:	4a0c      	ldr	r2, [pc, #48]	@ (8009b34 <sen5x_Power_Off+0x4c>)
 8009b04:	4b0a      	ldr	r3, [pc, #40]	@ (8009b30 <sen5x_Power_Off+0x48>)
 8009b06:	0019      	movs	r1, r3
 8009b08:	2003      	movs	r0, #3
 8009b0a:	f005 f9e1 	bl	800eed0 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009b0e:	2380      	movs	r3, #128	@ 0x80
 8009b10:	015b      	lsls	r3, r3, #5
 8009b12:	4809      	ldr	r0, [pc, #36]	@ (8009b38 <sen5x_Power_Off+0x50>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	0019      	movs	r1, r3
 8009b18:	f007 f8af 	bl	8010c7a <HAL_GPIO_WritePin>
      sen5x_On = false;
 8009b1c:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <sen5x_Power_Off+0x54>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	701a      	strb	r2, [r3, #0]
}
 8009b22:	46c0      	nop			@ (mov r8, r8)
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000d6a 	.word	0x20000d6a
 8009b2c:	0802560c 	.word	0x0802560c
 8009b30:	080255dc 	.word	0x080255dc
 8009b34:	0802563c 	.word	0x0802563c
 8009b38:	50000800 	.word	0x50000800
 8009b3c:	20000d69 	.word	0x20000d69

08009b40 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009b44:	4b02      	ldr	r3, [pc, #8]	@ (8009b50 <reset_fanCleaningDone+0x10>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
}
 8009b4a:	46c0      	nop			@ (mov r8, r8)
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	20000d68 	.word	0x20000d68

08009b54 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b56:	b093      	sub	sp, #76	@ 0x4c
 8009b58:	af04      	add	r7, sp, #16
  int16_t error = 0;
 8009b5a:	2436      	movs	r4, #54	@ 0x36
 8009b5c:	193b      	adds	r3, r7, r4
 8009b5e:	2200      	movs	r2, #0
 8009b60:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8009b62:	2335      	movs	r3, #53	@ 0x35
 8009b64:	18fb      	adds	r3, r7, r3
 8009b66:	2220      	movs	r2, #32
 8009b68:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009b6a:	2334      	movs	r3, #52	@ 0x34
 8009b6c:	18fb      	adds	r3, r7, r3
 8009b6e:	2220      	movs	r2, #32
 8009b70:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8009b72:	f7ff ff89 	bl	8009a88 <sen5x_Power_On>
  error = sen5x_device_reset();
 8009b76:	0025      	movs	r5, r4
 8009b78:	193c      	adds	r4, r7, r4
 8009b7a:	f001 f929 	bl	800add0 <sen5x_device_reset>
 8009b7e:	0003      	movs	r3, r0
 8009b80:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009b82:	002c      	movs	r4, r5
 8009b84:	193b      	adds	r3, r7, r4
 8009b86:	2200      	movs	r2, #0
 8009b88:	5e9b      	ldrsh	r3, [r3, r2]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00b      	beq.n	8009ba6 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8009b8e:	193b      	adds	r3, r7, r4
 8009b90:	2200      	movs	r2, #0
 8009b92:	5e9b      	ldrsh	r3, [r3, r2]
 8009b94:	4a75      	ldr	r2, [pc, #468]	@ (8009d6c <probe_sen5x+0x218>)
 8009b96:	4976      	ldr	r1, [pc, #472]	@ (8009d70 <probe_sen5x+0x21c>)
 8009b98:	2001      	movs	r0, #1
 8009b9a:	f005 f999 	bl	800eed0 <CreateLine>
      return error;
 8009b9e:	193b      	adds	r3, r7, r4
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ba4:	e0de      	b.n	8009d64 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8009ba6:	2536      	movs	r5, #54	@ 0x36
 8009ba8:	197c      	adds	r4, r7, r5
 8009baa:	2335      	movs	r3, #53	@ 0x35
 8009bac:	18fb      	adds	r3, r7, r3
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	230c      	movs	r3, #12
 8009bb2:	18fb      	adds	r3, r7, r3
 8009bb4:	0011      	movs	r1, r2
 8009bb6:	0018      	movs	r0, r3
 8009bb8:	f000 fff6 	bl	800aba8 <sen5x_get_serial_number>
 8009bbc:	0003      	movs	r3, r0
 8009bbe:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009bc0:	197b      	adds	r3, r7, r5
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8009bca:	197b      	adds	r3, r7, r5
 8009bcc:	2200      	movs	r2, #0
 8009bce:	5e9a      	ldrsh	r2, [r3, r2]
 8009bd0:	4b68      	ldr	r3, [pc, #416]	@ (8009d74 <probe_sen5x+0x220>)
 8009bd2:	0011      	movs	r1, r2
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f016 fe63 	bl	80208a0 <iprintf>
      return error;
 8009bda:	197b      	adds	r3, r7, r5
 8009bdc:	2200      	movs	r2, #0
 8009bde:	5e9b      	ldrsh	r3, [r3, r2]
 8009be0:	e0c0      	b.n	8009d64 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8009be2:	230c      	movs	r3, #12
 8009be4:	18fa      	adds	r2, r7, r3
 8009be6:	4b64      	ldr	r3, [pc, #400]	@ (8009d78 <probe_sen5x+0x224>)
 8009be8:	0011      	movs	r1, r2
 8009bea:	0018      	movs	r0, r3
 8009bec:	f016 fe58 	bl	80208a0 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009bf0:	2536      	movs	r5, #54	@ 0x36
 8009bf2:	197c      	adds	r4, r7, r5
 8009bf4:	2334      	movs	r3, #52	@ 0x34
 8009bf6:	18fb      	adds	r3, r7, r3
 8009bf8:	781a      	ldrb	r2, [r3, #0]
 8009bfa:	4b60      	ldr	r3, [pc, #384]	@ (8009d7c <probe_sen5x+0x228>)
 8009bfc:	0011      	movs	r1, r2
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f000 ff7c 	bl	800aafc <sen5x_get_product_name>
 8009c04:	0003      	movs	r3, r0
 8009c06:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009c08:	197b      	adds	r3, r7, r5
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00b      	beq.n	8009c2a <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8009c12:	197b      	adds	r3, r7, r5
 8009c14:	2200      	movs	r2, #0
 8009c16:	5e9a      	ldrsh	r2, [r3, r2]
 8009c18:	4b59      	ldr	r3, [pc, #356]	@ (8009d80 <probe_sen5x+0x22c>)
 8009c1a:	0011      	movs	r1, r2
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	f016 fe3f 	bl	80208a0 <iprintf>
      return error;
 8009c22:	197b      	adds	r3, r7, r5
 8009c24:	2200      	movs	r2, #0
 8009c26:	5e9b      	ldrsh	r3, [r3, r2]
 8009c28:	e09c      	b.n	8009d64 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009c2a:	4a54      	ldr	r2, [pc, #336]	@ (8009d7c <probe_sen5x+0x228>)
 8009c2c:	4b55      	ldr	r3, [pc, #340]	@ (8009d84 <probe_sen5x+0x230>)
 8009c2e:	0011      	movs	r1, r2
 8009c30:	0018      	movs	r0, r3
 8009c32:	f016 fe35 	bl	80208a0 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009c36:	2636      	movs	r6, #54	@ 0x36
 8009c38:	19bc      	adds	r4, r7, r6
 8009c3a:	2308      	movs	r3, #8
 8009c3c:	18fd      	adds	r5, r7, r3
 8009c3e:	2309      	movs	r3, #9
 8009c40:	18fa      	adds	r2, r7, r3
 8009c42:	230a      	movs	r3, #10
 8009c44:	18f9      	adds	r1, r7, r3
 8009c46:	230b      	movs	r3, #11
 8009c48:	18f8      	adds	r0, r7, r3
 8009c4a:	1d7b      	adds	r3, r7, #5
 8009c4c:	9302      	str	r3, [sp, #8]
 8009c4e:	1dbb      	adds	r3, r7, #6
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	1dfb      	adds	r3, r7, #7
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	002b      	movs	r3, r5
 8009c58:	f000 fffc 	bl	800ac54 <sen5x_get_version>
 8009c5c:	0003      	movs	r3, r0
 8009c5e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009c60:	19bb      	adds	r3, r7, r6
 8009c62:	2200      	movs	r2, #0
 8009c64:	5e9b      	ldrsh	r3, [r3, r2]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009c6a:	19bb      	adds	r3, r7, r6
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	5e9a      	ldrsh	r2, [r3, r2]
 8009c70:	4b45      	ldr	r3, [pc, #276]	@ (8009d88 <probe_sen5x+0x234>)
 8009c72:	0011      	movs	r1, r2
 8009c74:	0018      	movs	r0, r3
 8009c76:	f016 fe13 	bl	80208a0 <iprintf>
      return error;
 8009c7a:	19bb      	adds	r3, r7, r6
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c80:	e070      	b.n	8009d64 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8009c82:	230b      	movs	r3, #11
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	0019      	movs	r1, r3
 8009c8a:	230a      	movs	r3, #10
 8009c8c:	18fb      	adds	r3, r7, r3
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	001a      	movs	r2, r3
 8009c92:	2308      	movs	r3, #8
 8009c94:	18fb      	adds	r3, r7, r3
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	001c      	movs	r4, r3
 8009c9a:	1dfb      	adds	r3, r7, #7
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	483b      	ldr	r0, [pc, #236]	@ (8009d8c <probe_sen5x+0x238>)
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	0023      	movs	r3, r4
 8009ca4:	f016 fdfc 	bl	80208a0 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 8009cac:	262e      	movs	r6, #46	@ 0x2e
 8009cae:	19bb      	adds	r3, r7, r6
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8009cb4:	232c      	movs	r3, #44	@ 0x2c
 8009cb6:	18fb      	adds	r3, r7, r3
 8009cb8:	2200      	movs	r2, #0
 8009cba:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8009cbc:	4934      	ldr	r1, [pc, #208]	@ (8009d90 <probe_sen5x+0x23c>)
 8009cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cc0:	f7f7 f96e 	bl	8000fa0 <__aeabi_fmul>
 8009cc4:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8009cc6:	1c18      	adds	r0, r3, #0
 8009cc8:	f7f7 fc62 	bl	8001590 <__aeabi_f2iz>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	b218      	sxth	r0, r3
 8009cd0:	2536      	movs	r5, #54	@ 0x36
 8009cd2:	197c      	adds	r4, r7, r5
 8009cd4:	232c      	movs	r3, #44	@ 0x2c
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	881a      	ldrh	r2, [r3, #0]
 8009cda:	19bb      	adds	r3, r7, r6
 8009cdc:	2100      	movs	r1, #0
 8009cde:	5e5b      	ldrsh	r3, [r3, r1]
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	f000 fea7 	bl	800aa34 <sen5x_set_temperature_offset_parameters>
 8009ce6:	0003      	movs	r3, r0
 8009ce8:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009cea:	197b      	adds	r3, r7, r5
 8009cec:	2200      	movs	r2, #0
 8009cee:	5e9b      	ldrsh	r3, [r3, r2]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00b      	beq.n	8009d0c <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009cf4:	197b      	adds	r3, r7, r5
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	5e9b      	ldrsh	r3, [r3, r2]
 8009cfa:	4a26      	ldr	r2, [pc, #152]	@ (8009d94 <probe_sen5x+0x240>)
 8009cfc:	491c      	ldr	r1, [pc, #112]	@ (8009d70 <probe_sen5x+0x21c>)
 8009cfe:	2001      	movs	r0, #1
 8009d00:	f005 f8e6 	bl	800eed0 <CreateLine>
      return error;
 8009d04:	197b      	adds	r3, r7, r5
 8009d06:	2200      	movs	r2, #0
 8009d08:	5e9b      	ldrsh	r3, [r3, r2]
 8009d0a:	e02b      	b.n	8009d64 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d0e:	f7f9 fba9 	bl	8003464 <__aeabi_f2d>
 8009d12:	0002      	movs	r2, r0
 8009d14:	000b      	movs	r3, r1
 8009d16:	4820      	ldr	r0, [pc, #128]	@ (8009d98 <probe_sen5x+0x244>)
 8009d18:	4920      	ldr	r1, [pc, #128]	@ (8009d9c <probe_sen5x+0x248>)
 8009d1a:	9200      	str	r2, [sp, #0]
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	0002      	movs	r2, r0
 8009d20:	2002      	movs	r0, #2
 8009d22:	f005 f8d5 	bl	800eed0 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 8009d26:	f7fc ff67 	bl	8006bf8 <Check_USB_PowerOn>
 8009d2a:	0003      	movs	r3, r0
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4053      	eors	r3, r2
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 8009d38:	f7ff fed6 	bl	8009ae8 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 8009d3c:	f005 fd0c 	bl	800f758 <HAL_GetTick>
 8009d40:	0003      	movs	r3, r0
 8009d42:	22fa      	movs	r2, #250	@ 0xfa
 8009d44:	00d2      	lsls	r2, r2, #3
 8009d46:	189a      	adds	r2, r3, r2
 8009d48:	4b15      	ldr	r3, [pc, #84]	@ (8009da0 <probe_sen5x+0x24c>)
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	e006      	b.n	8009d5c <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 8009d4e:	f005 fd03 	bl	800f758 <HAL_GetTick>
 8009d52:	0003      	movs	r3, r0
 8009d54:	4a13      	ldr	r2, [pc, #76]	@ (8009da4 <probe_sen5x+0x250>)
 8009d56:	189a      	adds	r2, r3, r2
 8009d58:	4b11      	ldr	r3, [pc, #68]	@ (8009da0 <probe_sen5x+0x24c>)
 8009d5a:	601a      	str	r2, [r3, #0]
  }
  return error;
 8009d5c:	2336      	movs	r3, #54	@ 0x36
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	2200      	movs	r2, #0
 8009d62:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009d64:	0018      	movs	r0, r3
 8009d66:	46bd      	mov	sp, r7
 8009d68:	b00f      	add	sp, #60	@ 0x3c
 8009d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d6c:	08025658 	.word	0x08025658
 8009d70:	08025608 	.word	0x08025608
 8009d74:	08025684 	.word	0x08025684
 8009d78:	080256b4 	.word	0x080256b4
 8009d7c:	20000d6c 	.word	0x20000d6c
 8009d80:	080256c8 	.word	0x080256c8
 8009d84:	080256f8 	.word	0x080256f8
 8009d88:	0802570c 	.word	0x0802570c
 8009d8c:	08025738 	.word	0x08025738
 8009d90:	43480000 	.word	0x43480000
 8009d94:	0802575c 	.word	0x0802575c
 8009d98:	0802579c 	.word	0x0802579c
 8009d9c:	0802559c 	.word	0x0802559c
 8009da0:	20000d78 	.word	0x20000d78
 8009da4:	00006d60 	.word	0x00006d60

08009da8 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8009da8:	b590      	push	{r4, r7, lr}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8009dae:	1dbb      	adds	r3, r7, #6
 8009db0:	2200      	movs	r2, #0
 8009db2:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 8009db4:	4b1b      	ldr	r3, [pc, #108]	@ (8009e24 <sen5x_lightup_measurement+0x7c>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 8009dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8009e28 <sen5x_lightup_measurement+0x80>)
 8009dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8009e2c <sen5x_lightup_measurement+0x84>)
 8009dc0:	0019      	movs	r1, r3
 8009dc2:	2002      	movs	r0, #2
 8009dc4:	f005 f884 	bl	800eed0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009dc8:	1dbc      	adds	r4, r7, #6
 8009dca:	f000 fcbf 	bl	800a74c <sen5x_start_measurement_without_pm>
 8009dce:	0003      	movs	r3, r0
 8009dd0:	8023      	strh	r3, [r4, #0]
 8009dd2:	e00a      	b.n	8009dea <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 8009dd4:	4a16      	ldr	r2, [pc, #88]	@ (8009e30 <sen5x_lightup_measurement+0x88>)
 8009dd6:	4b15      	ldr	r3, [pc, #84]	@ (8009e2c <sen5x_lightup_measurement+0x84>)
 8009dd8:	0019      	movs	r1, r3
 8009dda:	2002      	movs	r0, #2
 8009ddc:	f005 f878 	bl	800eed0 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 8009de0:	1dbc      	adds	r4, r7, #6
 8009de2:	f000 fc85 	bl	800a6f0 <sen5x_start_measurement>
 8009de6:	0003      	movs	r3, r0
 8009de8:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 8009dea:	1dbb      	adds	r3, r7, #6
 8009dec:	2200      	movs	r2, #0
 8009dee:	5e9b      	ldrsh	r3, [r3, r2]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009df4:	1dbb      	adds	r3, r7, #6
 8009df6:	2200      	movs	r2, #0
 8009df8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8009e34 <sen5x_lightup_measurement+0x8c>)
 8009dfc:	490e      	ldr	r1, [pc, #56]	@ (8009e38 <sen5x_lightup_measurement+0x90>)
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f005 f866 	bl	800eed0 <CreateLine>
 8009e04:	e007      	b.n	8009e16 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009e06:	f7fc ff27 	bl	8006c58 <showTime>
    Info("sen5x_start_measurement executed");
 8009e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e3c <sen5x_lightup_measurement+0x94>)
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <sen5x_lightup_measurement+0x84>)
 8009e0e:	0019      	movs	r1, r3
 8009e10:	2002      	movs	r0, #2
 8009e12:	f005 f85d 	bl	800eed0 <CreateLine>
  }
  return error;
 8009e16:	1dbb      	adds	r3, r7, #6
 8009e18:	2200      	movs	r2, #0
 8009e1a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	b003      	add	sp, #12
 8009e22:	bd90      	pop	{r4, r7, pc}
 8009e24:	20000d6a 	.word	0x20000d6a
 8009e28:	080257d4 	.word	0x080257d4
 8009e2c:	0802559c 	.word	0x0802559c
 8009e30:	08025800 	.word	0x08025800
 8009e34:	08025820 	.word	0x08025820
 8009e38:	08025608 	.word	0x08025608
 8009e3c:	08025850 	.word	0x08025850

08009e40 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
  int16_t error = 0;
 8009e46:	1dbb      	adds	r3, r7, #6
 8009e48:	2200      	movs	r2, #0
 8009e4a:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009e4c:	4b21      	ldr	r3, [pc, #132]	@ (8009ed4 <sen5x_extinguish_measurement+0x94>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d01e      	beq.n	8009e92 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 8009e54:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <sen5x_extinguish_measurement+0x98>)
 8009e56:	4b21      	ldr	r3, [pc, #132]	@ (8009edc <sen5x_extinguish_measurement+0x9c>)
 8009e58:	0019      	movs	r1, r3
 8009e5a:	2002      	movs	r0, #2
 8009e5c:	f005 f838 	bl	800eed0 <CreateLine>
    Info("PM measurement is disabled");
 8009e60:	4a1f      	ldr	r2, [pc, #124]	@ (8009ee0 <sen5x_extinguish_measurement+0xa0>)
 8009e62:	4b1e      	ldr	r3, [pc, #120]	@ (8009edc <sen5x_extinguish_measurement+0x9c>)
 8009e64:	0019      	movs	r1, r3
 8009e66:	2002      	movs	r0, #2
 8009e68:	f005 f832 	bl	800eed0 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009e6c:	1dbc      	adds	r4, r7, #6
 8009e6e:	f000 fc6d 	bl	800a74c <sen5x_start_measurement_without_pm>
 8009e72:	0003      	movs	r3, r0
 8009e74:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e76:	1dbb      	adds	r3, r7, #6
 8009e78:	2200      	movs	r2, #0
 8009e7a:	5e9b      	ldrsh	r3, [r3, r2]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d022      	beq.n	8009ec6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009e80:	1dbb      	adds	r3, r7, #6
 8009e82:	2200      	movs	r2, #0
 8009e84:	5e9b      	ldrsh	r3, [r3, r2]
 8009e86:	4a17      	ldr	r2, [pc, #92]	@ (8009ee4 <sen5x_extinguish_measurement+0xa4>)
 8009e88:	4917      	ldr	r1, [pc, #92]	@ (8009ee8 <sen5x_extinguish_measurement+0xa8>)
 8009e8a:	2001      	movs	r0, #1
 8009e8c:	f005 f820 	bl	800eed0 <CreateLine>
 8009e90:	e019      	b.n	8009ec6 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 8009e92:	1dbc      	adds	r4, r7, #6
 8009e94:	f000 fc88 	bl	800a7a8 <sen5x_stop_measurement>
 8009e98:	0003      	movs	r3, r0
 8009e9a:	8023      	strh	r3, [r4, #0]
    showTime();
 8009e9c:	f7fc fedc 	bl	8006c58 <showTime>
    Info("sen5x_stop_measurement executed");
 8009ea0:	4a12      	ldr	r2, [pc, #72]	@ (8009eec <sen5x_extinguish_measurement+0xac>)
 8009ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8009edc <sen5x_extinguish_measurement+0x9c>)
 8009ea4:	0019      	movs	r1, r3
 8009ea6:	2002      	movs	r0, #2
 8009ea8:	f005 f812 	bl	800eed0 <CreateLine>
    if (error) {
 8009eac:	1dbb      	adds	r3, r7, #6
 8009eae:	2200      	movs	r2, #0
 8009eb0:	5e9b      	ldrsh	r3, [r3, r2]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d007      	beq.n	8009ec6 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 8009eb6:	1dbb      	adds	r3, r7, #6
 8009eb8:	2200      	movs	r2, #0
 8009eba:	5e9b      	ldrsh	r3, [r3, r2]
 8009ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef0 <sen5x_extinguish_measurement+0xb0>)
 8009ebe:	490a      	ldr	r1, [pc, #40]	@ (8009ee8 <sen5x_extinguish_measurement+0xa8>)
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f005 f805 	bl	800eed0 <CreateLine>
    }
  }
  return error;
 8009ec6:	1dbb      	adds	r3, r7, #6
 8009ec8:	2200      	movs	r2, #0
 8009eca:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009ecc:	0018      	movs	r0, r3
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bd90      	pop	{r4, r7, pc}
 8009ed4:	20000d6a 	.word	0x20000d6a
 8009ed8:	08025874 	.word	0x08025874
 8009edc:	0802559c 	.word	0x0802559c
 8009ee0:	080258ac 	.word	0x080258ac
 8009ee4:	080258c8 	.word	0x080258c8
 8009ee8:	08025608 	.word	0x08025608
 8009eec:	08025908 	.word	0x08025908
 8009ef0:	08025928 	.word	0x08025928

08009ef4 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ef6:	b08d      	sub	sp, #52	@ 0x34
 8009ef8:	af04      	add	r7, sp, #16
 8009efa:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009efc:	261e      	movs	r6, #30
 8009efe:	19bb      	adds	r3, r7, r6
 8009f00:	2200      	movs	r2, #0
 8009f02:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009f04:	19bc      	adds	r4, r7, r6
 8009f06:	2316      	movs	r3, #22
 8009f08:	18fd      	adds	r5, r7, r3
 8009f0a:	2318      	movs	r3, #24
 8009f0c:	18fa      	adds	r2, r7, r3
 8009f0e:	231a      	movs	r3, #26
 8009f10:	18f9      	adds	r1, r7, r3
 8009f12:	231c      	movs	r3, #28
 8009f14:	18f8      	adds	r0, r7, r3
 8009f16:	230e      	movs	r3, #14
 8009f18:	18fb      	adds	r3, r7, r3
 8009f1a:	9303      	str	r3, [sp, #12]
 8009f1c:	2310      	movs	r3, #16
 8009f1e:	18fb      	adds	r3, r7, r3
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	2312      	movs	r3, #18
 8009f24:	18fb      	adds	r3, r7, r3
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	2314      	movs	r3, #20
 8009f2a:	18fb      	adds	r3, r7, r3
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	002b      	movs	r3, r5
 8009f30:	f000 fcbc 	bl	800a8ac <sen5x_read_measured_values>
 8009f34:	0003      	movs	r3, r0
 8009f36:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009f38:	19bb      	adds	r3, r7, r6
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	5e9b      	ldrsh	r3, [r3, r2]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <sen5x_read_measurement+0x56>
    return error;
 8009f42:	19bb      	adds	r3, r7, r6
 8009f44:	2200      	movs	r2, #0
 8009f46:	5e9b      	ldrsh	r3, [r3, r2]
 8009f48:	e02c      	b.n	8009fa4 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009f4a:	231c      	movs	r3, #28
 8009f4c:	18fb      	adds	r3, r7, r3
 8009f4e:	881a      	ldrh	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009f54:	231a      	movs	r3, #26
 8009f56:	18fb      	adds	r3, r7, r3
 8009f58:	881a      	ldrh	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009f5e:	2318      	movs	r3, #24
 8009f60:	18fb      	adds	r3, r7, r3
 8009f62:	881a      	ldrh	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009f68:	2316      	movs	r3, #22
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	881a      	ldrh	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009f72:	2314      	movs	r3, #20
 8009f74:	18fb      	adds	r3, r7, r3
 8009f76:	2200      	movs	r2, #0
 8009f78:	5e9a      	ldrsh	r2, [r3, r2]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009f7e:	2312      	movs	r3, #18
 8009f80:	18fb      	adds	r3, r7, r3
 8009f82:	2200      	movs	r2, #0
 8009f84:	5e9a      	ldrsh	r2, [r3, r2]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009f8a:	2310      	movs	r3, #16
 8009f8c:	18fb      	adds	r3, r7, r3
 8009f8e:	2200      	movs	r2, #0
 8009f90:	5e9a      	ldrsh	r2, [r3, r2]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8009f96:	230e      	movs	r3, #14
 8009f98:	18fb      	adds	r3, r7, r3
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	5e9a      	ldrsh	r2, [r3, r2]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	81da      	strh	r2, [r3, #14]
  return 0;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	b009      	add	sp, #36	@ 0x24
 8009faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fac <sen5x_printvalues>:

void sen5x_printvalues(void) {
 8009fac:	b580      	push	{r7, lr}
 8009fae:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 8009fb0:	4b63      	ldr	r3, [pc, #396]	@ (800a140 <sen5x_printvalues+0x194>)
 8009fb2:	881b      	ldrh	r3, [r3, #0]
 8009fb4:	4a63      	ldr	r2, [pc, #396]	@ (800a144 <sen5x_printvalues+0x198>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d013      	beq.n	8009fe2 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8009fba:	4b61      	ldr	r3, [pc, #388]	@ (800a140 <sen5x_printvalues+0x194>)
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	f7f7 fb06 	bl	80015d0 <__aeabi_i2f>
 8009fc4:	1c03      	adds	r3, r0, #0
 8009fc6:	4960      	ldr	r1, [pc, #384]	@ (800a148 <sen5x_printvalues+0x19c>)
 8009fc8:	1c18      	adds	r0, r3, #0
 8009fca:	f7f6 fe03 	bl	8000bd4 <__aeabi_fdiv>
 8009fce:	1c03      	adds	r3, r0, #0
 8009fd0:	1c18      	adds	r0, r3, #0
 8009fd2:	f7f9 fa47 	bl	8003464 <__aeabi_f2d>
 8009fd6:	0002      	movs	r2, r0
 8009fd8:	000b      	movs	r3, r1
 8009fda:	495c      	ldr	r1, [pc, #368]	@ (800a14c <sen5x_printvalues+0x1a0>)
 8009fdc:	0008      	movs	r0, r1
 8009fde:	f016 fc5f 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009fe2:	4b57      	ldr	r3, [pc, #348]	@ (800a140 <sen5x_printvalues+0x194>)
 8009fe4:	885b      	ldrh	r3, [r3, #2]
 8009fe6:	4a57      	ldr	r2, [pc, #348]	@ (800a144 <sen5x_printvalues+0x198>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d013      	beq.n	800a014 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009fec:	4b54      	ldr	r3, [pc, #336]	@ (800a140 <sen5x_printvalues+0x194>)
 8009fee:	885b      	ldrh	r3, [r3, #2]
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	f7f7 faed 	bl	80015d0 <__aeabi_i2f>
 8009ff6:	1c03      	adds	r3, r0, #0
 8009ff8:	4953      	ldr	r1, [pc, #332]	@ (800a148 <sen5x_printvalues+0x19c>)
 8009ffa:	1c18      	adds	r0, r3, #0
 8009ffc:	f7f6 fdea 	bl	8000bd4 <__aeabi_fdiv>
 800a000:	1c03      	adds	r3, r0, #0
 800a002:	1c18      	adds	r0, r3, #0
 800a004:	f7f9 fa2e 	bl	8003464 <__aeabi_f2d>
 800a008:	0002      	movs	r2, r0
 800a00a:	000b      	movs	r3, r1
 800a00c:	4950      	ldr	r1, [pc, #320]	@ (800a150 <sen5x_printvalues+0x1a4>)
 800a00e:	0008      	movs	r0, r1
 800a010:	f016 fc46 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800a014:	4b4a      	ldr	r3, [pc, #296]	@ (800a140 <sen5x_printvalues+0x194>)
 800a016:	889b      	ldrh	r3, [r3, #4]
 800a018:	4a4a      	ldr	r2, [pc, #296]	@ (800a144 <sen5x_printvalues+0x198>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d013      	beq.n	800a046 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800a01e:	4b48      	ldr	r3, [pc, #288]	@ (800a140 <sen5x_printvalues+0x194>)
 800a020:	889b      	ldrh	r3, [r3, #4]
 800a022:	0018      	movs	r0, r3
 800a024:	f7f7 fad4 	bl	80015d0 <__aeabi_i2f>
 800a028:	1c03      	adds	r3, r0, #0
 800a02a:	4947      	ldr	r1, [pc, #284]	@ (800a148 <sen5x_printvalues+0x19c>)
 800a02c:	1c18      	adds	r0, r3, #0
 800a02e:	f7f6 fdd1 	bl	8000bd4 <__aeabi_fdiv>
 800a032:	1c03      	adds	r3, r0, #0
 800a034:	1c18      	adds	r0, r3, #0
 800a036:	f7f9 fa15 	bl	8003464 <__aeabi_f2d>
 800a03a:	0002      	movs	r2, r0
 800a03c:	000b      	movs	r3, r1
 800a03e:	4945      	ldr	r1, [pc, #276]	@ (800a154 <sen5x_printvalues+0x1a8>)
 800a040:	0008      	movs	r0, r1
 800a042:	f016 fc2d 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800a046:	4b3e      	ldr	r3, [pc, #248]	@ (800a140 <sen5x_printvalues+0x194>)
 800a048:	88db      	ldrh	r3, [r3, #6]
 800a04a:	4a3e      	ldr	r2, [pc, #248]	@ (800a144 <sen5x_printvalues+0x198>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d013      	beq.n	800a078 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800a050:	4b3b      	ldr	r3, [pc, #236]	@ (800a140 <sen5x_printvalues+0x194>)
 800a052:	88db      	ldrh	r3, [r3, #6]
 800a054:	0018      	movs	r0, r3
 800a056:	f7f7 fabb 	bl	80015d0 <__aeabi_i2f>
 800a05a:	1c03      	adds	r3, r0, #0
 800a05c:	493a      	ldr	r1, [pc, #232]	@ (800a148 <sen5x_printvalues+0x19c>)
 800a05e:	1c18      	adds	r0, r3, #0
 800a060:	f7f6 fdb8 	bl	8000bd4 <__aeabi_fdiv>
 800a064:	1c03      	adds	r3, r0, #0
 800a066:	1c18      	adds	r0, r3, #0
 800a068:	f7f9 f9fc 	bl	8003464 <__aeabi_f2d>
 800a06c:	0002      	movs	r2, r0
 800a06e:	000b      	movs	r3, r1
 800a070:	4939      	ldr	r1, [pc, #228]	@ (800a158 <sen5x_printvalues+0x1ac>)
 800a072:	0008      	movs	r0, r1
 800a074:	f016 fc14 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800a078:	4b31      	ldr	r3, [pc, #196]	@ (800a140 <sen5x_printvalues+0x194>)
 800a07a:	2208      	movs	r2, #8
 800a07c:	5e9b      	ldrsh	r3, [r3, r2]
 800a07e:	4a37      	ldr	r2, [pc, #220]	@ (800a15c <sen5x_printvalues+0x1b0>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d014      	beq.n	800a0ae <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800a084:	4b2e      	ldr	r3, [pc, #184]	@ (800a140 <sen5x_printvalues+0x194>)
 800a086:	2208      	movs	r2, #8
 800a088:	5e9b      	ldrsh	r3, [r3, r2]
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7f7 faa0 	bl	80015d0 <__aeabi_i2f>
 800a090:	1c03      	adds	r3, r0, #0
 800a092:	4933      	ldr	r1, [pc, #204]	@ (800a160 <sen5x_printvalues+0x1b4>)
 800a094:	1c18      	adds	r0, r3, #0
 800a096:	f7f6 fd9d 	bl	8000bd4 <__aeabi_fdiv>
 800a09a:	1c03      	adds	r3, r0, #0
 800a09c:	1c18      	adds	r0, r3, #0
 800a09e:	f7f9 f9e1 	bl	8003464 <__aeabi_f2d>
 800a0a2:	0002      	movs	r2, r0
 800a0a4:	000b      	movs	r3, r1
 800a0a6:	492f      	ldr	r1, [pc, #188]	@ (800a164 <sen5x_printvalues+0x1b8>)
 800a0a8:	0008      	movs	r0, r1
 800a0aa:	f016 fbf9 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800a0ae:	4b24      	ldr	r3, [pc, #144]	@ (800a140 <sen5x_printvalues+0x194>)
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	5e9b      	ldrsh	r3, [r3, r2]
 800a0b4:	4a29      	ldr	r2, [pc, #164]	@ (800a15c <sen5x_printvalues+0x1b0>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d014      	beq.n	800a0e4 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800a0ba:	4b21      	ldr	r3, [pc, #132]	@ (800a140 <sen5x_printvalues+0x194>)
 800a0bc:	220a      	movs	r2, #10
 800a0be:	5e9b      	ldrsh	r3, [r3, r2]
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7f7 fa85 	bl	80015d0 <__aeabi_i2f>
 800a0c6:	1c03      	adds	r3, r0, #0
 800a0c8:	4927      	ldr	r1, [pc, #156]	@ (800a168 <sen5x_printvalues+0x1bc>)
 800a0ca:	1c18      	adds	r0, r3, #0
 800a0cc:	f7f6 fd82 	bl	8000bd4 <__aeabi_fdiv>
 800a0d0:	1c03      	adds	r3, r0, #0
 800a0d2:	1c18      	adds	r0, r3, #0
 800a0d4:	f7f9 f9c6 	bl	8003464 <__aeabi_f2d>
 800a0d8:	0002      	movs	r2, r0
 800a0da:	000b      	movs	r3, r1
 800a0dc:	4923      	ldr	r1, [pc, #140]	@ (800a16c <sen5x_printvalues+0x1c0>)
 800a0de:	0008      	movs	r0, r1
 800a0e0:	f016 fbde 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800a0e4:	4b16      	ldr	r3, [pc, #88]	@ (800a140 <sen5x_printvalues+0x194>)
 800a0e6:	220c      	movs	r2, #12
 800a0e8:	5e9b      	ldrsh	r3, [r3, r2]
 800a0ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a15c <sen5x_printvalues+0x1b0>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00e      	beq.n	800a10e <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800a0f0:	4b13      	ldr	r3, [pc, #76]	@ (800a140 <sen5x_printvalues+0x194>)
 800a0f2:	220c      	movs	r2, #12
 800a0f4:	5e9b      	ldrsh	r3, [r3, r2]
 800a0f6:	210a      	movs	r1, #10
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	f7f6 f8dd 	bl	80002b8 <__divsi3>
 800a0fe:	0003      	movs	r3, r0
 800a100:	b21b      	sxth	r3, r3
 800a102:	001a      	movs	r2, r3
 800a104:	4b1a      	ldr	r3, [pc, #104]	@ (800a170 <sen5x_printvalues+0x1c4>)
 800a106:	0011      	movs	r1, r2
 800a108:	0018      	movs	r0, r3
 800a10a:	f016 fbc9 	bl	80208a0 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <sen5x_printvalues+0x194>)
 800a110:	220e      	movs	r2, #14
 800a112:	5e9b      	ldrsh	r3, [r3, r2]
 800a114:	4a11      	ldr	r2, [pc, #68]	@ (800a15c <sen5x_printvalues+0x1b0>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00e      	beq.n	800a138 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800a11a:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <sen5x_printvalues+0x194>)
 800a11c:	220e      	movs	r2, #14
 800a11e:	5e9b      	ldrsh	r3, [r3, r2]
 800a120:	210a      	movs	r1, #10
 800a122:	0018      	movs	r0, r3
 800a124:	f7f6 f8c8 	bl	80002b8 <__divsi3>
 800a128:	0003      	movs	r3, r0
 800a12a:	b21b      	sxth	r3, r3
 800a12c:	001a      	movs	r2, r3
 800a12e:	4b11      	ldr	r3, [pc, #68]	@ (800a174 <sen5x_printvalues+0x1c8>)
 800a130:	0011      	movs	r1, r2
 800a132:	0018      	movs	r0, r3
 800a134:	f016 fbb4 	bl	80208a0 <iprintf>
  }
}
 800a138:	46c0      	nop			@ (mov r8, r8)
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	46c0      	nop			@ (mov r8, r8)
 800a140:	20000d7c 	.word	0x20000d7c
 800a144:	0000ffff 	.word	0x0000ffff
 800a148:	41200000 	.word	0x41200000
 800a14c:	08025958 	.word	0x08025958
 800a150:	08025984 	.word	0x08025984
 800a154:	080259b0 	.word	0x080259b0
 800a158:	080259dc 	.word	0x080259dc
 800a15c:	00007fff 	.word	0x00007fff
 800a160:	42c80000 	.word	0x42c80000
 800a164:	08025a08 	.word	0x08025a08
 800a168:	43480000 	.word	0x43480000
 800a16c:	08025a2c 	.word	0x08025a2c
 800a170:	08025a54 	.word	0x08025a54
 800a174:	08025a6c 	.word	0x08025a6c

0800a178 <sen5xStore>:

void sen5xStore() {
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800a17c:	4b2e      	ldr	r3, [pc, #184]	@ (800a238 <sen5xStore+0xc0>)
 800a17e:	885b      	ldrh	r3, [r3, #2]
 800a180:	4a2e      	ldr	r2, [pc, #184]	@ (800a23c <sen5xStore+0xc4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d004      	beq.n	800a190 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800a186:	4b2c      	ldr	r3, [pc, #176]	@ (800a238 <sen5xStore+0xc0>)
 800a188:	885b      	ldrh	r3, [r3, #2]
 800a18a:	0018      	movs	r0, r3
 800a18c:	f7f9 fb4e 	bl	800382c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800a190:	4b29      	ldr	r3, [pc, #164]	@ (800a238 <sen5xStore+0xc0>)
 800a192:	88db      	ldrh	r3, [r3, #6]
 800a194:	4a29      	ldr	r2, [pc, #164]	@ (800a23c <sen5xStore+0xc4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d004      	beq.n	800a1a4 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800a19a:	4b27      	ldr	r3, [pc, #156]	@ (800a238 <sen5xStore+0xc0>)
 800a19c:	88db      	ldrh	r3, [r3, #6]
 800a19e:	0018      	movs	r0, r3
 800a1a0:	f7f9 fb70 	bl	8003884 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800a1a4:	4b26      	ldr	r3, [pc, #152]	@ (800a240 <sen5xStore+0xc8>)
 800a1a6:	791b      	ldrb	r3, [r3, #4]
 800a1a8:	2b34      	cmp	r3, #52	@ 0x34
 800a1aa:	d003      	beq.n	800a1b4 <sen5xStore+0x3c>
 800a1ac:	4b24      	ldr	r3, [pc, #144]	@ (800a240 <sen5xStore+0xc8>)
 800a1ae:	791b      	ldrb	r3, [r3, #4]
 800a1b0:	2b35      	cmp	r3, #53	@ 0x35
 800a1b2:	d13d      	bne.n	800a230 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800a1b4:	4b23      	ldr	r3, [pc, #140]	@ (800a244 <sen5xStore+0xcc>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4053      	eors	r3, r2
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <sen5xStore+0x52>
 800a1c2:	4b21      	ldr	r3, [pc, #132]	@ (800a248 <sen5xStore+0xd0>)
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d032      	beq.n	800a230 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800a1ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a238 <sen5xStore+0xc0>)
 800a1cc:	220c      	movs	r2, #12
 800a1ce:	5e9b      	ldrsh	r3, [r3, r2]
 800a1d0:	4a1e      	ldr	r2, [pc, #120]	@ (800a24c <sen5xStore+0xd4>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d019      	beq.n	800a20a <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800a1d6:	4b18      	ldr	r3, [pc, #96]	@ (800a238 <sen5xStore+0xc0>)
 800a1d8:	220c      	movs	r2, #12
 800a1da:	5e9b      	ldrsh	r3, [r3, r2]
 800a1dc:	210a      	movs	r1, #10
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7f6 f86a 	bl	80002b8 <__divsi3>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	b21b      	sxth	r3, r3
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f003 fe20 	bl	800de30 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800a1f0:	4b11      	ldr	r3, [pc, #68]	@ (800a238 <sen5xStore+0xc0>)
 800a1f2:	220c      	movs	r2, #12
 800a1f4:	5e9b      	ldrsh	r3, [r3, r2]
 800a1f6:	210a      	movs	r1, #10
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f7f6 f85d 	bl	80002b8 <__divsi3>
 800a1fe:	0003      	movs	r3, r0
 800a200:	b21b      	sxth	r3, r3
 800a202:	b29b      	uxth	r3, r3
 800a204:	0018      	movs	r0, r3
 800a206:	f7f9 fae1 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800a20a:	4b0b      	ldr	r3, [pc, #44]	@ (800a238 <sen5xStore+0xc0>)
 800a20c:	220e      	movs	r2, #14
 800a20e:	5e9b      	ldrsh	r3, [r3, r2]
 800a210:	4a0e      	ldr	r2, [pc, #56]	@ (800a24c <sen5xStore+0xd4>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00c      	beq.n	800a230 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800a216:	4b08      	ldr	r3, [pc, #32]	@ (800a238 <sen5xStore+0xc0>)
 800a218:	220e      	movs	r2, #14
 800a21a:	5e9b      	ldrsh	r3, [r3, r2]
 800a21c:	210a      	movs	r1, #10
 800a21e:	0018      	movs	r0, r3
 800a220:	f7f6 f84a 	bl	80002b8 <__divsi3>
 800a224:	0003      	movs	r3, r0
 800a226:	b21b      	sxth	r3, r3
 800a228:	b29b      	uxth	r3, r3
 800a22a:	0018      	movs	r0, r3
 800a22c:	f7f9 fb56 	bl	80038dc <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800a230:	46c0      	nop			@ (mov r8, r8)
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	46c0      	nop			@ (mov r8, r8)
 800a238:	20000d7c 	.word	0x20000d7c
 800a23c:	0000ffff 	.word	0x0000ffff
 800a240:	20000d6c 	.word	0x20000d6c
 800a244:	20000d6a 	.word	0x20000d6a
 800a248:	20001cf9 	.word	0x20001cf9
 800a24c:	00007fff 	.word	0x00007fff

0800a250 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800a250:	b590      	push	{r4, r7, lr}
 800a252:	b085      	sub	sp, #20
 800a254:	af02      	add	r7, sp, #8
 800a256:	6039      	str	r1, [r7, #0]
 800a258:	0011      	movs	r1, r2
 800a25a:	1dfb      	adds	r3, r7, #7
 800a25c:	1c02      	adds	r2, r0, #0
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	1d3b      	adds	r3, r7, #4
 800a262:	1c0a      	adds	r2, r1, #0
 800a264:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800a266:	1dfb      	adds	r3, r7, #7
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	18db      	adds	r3, r3, r3
 800a26e:	b299      	uxth	r1, r3
 800a270:	1d3b      	adds	r3, r7, #4
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	4805      	ldr	r0, [pc, #20]	@ (800a28c <sensirion_i2c_hal_read+0x3c>)
 800a278:	2464      	movs	r4, #100	@ 0x64
 800a27a:	9400      	str	r4, [sp, #0]
 800a27c:	f006 fed4 	bl	8011028 <HAL_I2C_Master_Receive>
 800a280:	0003      	movs	r3, r0
 800a282:	b25b      	sxtb	r3, r3
}
 800a284:	0018      	movs	r0, r3
 800a286:	46bd      	mov	sp, r7
 800a288:	b003      	add	sp, #12
 800a28a:	bd90      	pop	{r4, r7, pc}
 800a28c:	20000b4c 	.word	0x20000b4c

0800a290 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b085      	sub	sp, #20
 800a294:	af02      	add	r7, sp, #8
 800a296:	6039      	str	r1, [r7, #0]
 800a298:	0011      	movs	r1, r2
 800a29a:	1dfb      	adds	r3, r7, #7
 800a29c:	1c02      	adds	r2, r0, #0
 800a29e:	701a      	strb	r2, [r3, #0]
 800a2a0:	1d3b      	adds	r3, r7, #4
 800a2a2:	1c0a      	adds	r2, r1, #0
 800a2a4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800a2a6:	1dfb      	adds	r3, r7, #7
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	18db      	adds	r3, r3, r3
 800a2ae:	b299      	uxth	r1, r3
 800a2b0:	1d3b      	adds	r3, r7, #4
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	4805      	ldr	r0, [pc, #20]	@ (800a2cc <sensirion_i2c_hal_write+0x3c>)
 800a2b8:	2464      	movs	r4, #100	@ 0x64
 800a2ba:	9400      	str	r4, [sp, #0]
 800a2bc:	f006 fdac 	bl	8010e18 <HAL_I2C_Master_Transmit>
 800a2c0:	0003      	movs	r3, r0
 800a2c2:	b25b      	sxtb	r3, r3
}
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	b003      	add	sp, #12
 800a2ca:	bd90      	pop	{r4, r7, pc}
 800a2cc:	20000b4c 	.word	0x20000b4c

0800a2d0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	22fa      	movs	r2, #250	@ 0xfa
 800a2dc:	0091      	lsls	r1, r2, #2
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f7f5 ff60 	bl	80001a4 <__udivsi3>
 800a2e4:	0003      	movs	r3, r0
 800a2e6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	22fa      	movs	r2, #250	@ 0xfa
 800a2ec:	0091      	lsls	r1, r2, #2
 800a2ee:	0018      	movs	r0, r3
 800a2f0:	f7f5 ffde 	bl	80002b0 <__aeabi_uidivmod>
 800a2f4:	1e0b      	subs	r3, r1, #0
 800a2f6:	d002      	beq.n	800a2fe <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	0018      	movs	r0, r3
 800a302:	f005 fa33 	bl	800f76c <HAL_Delay>
}
 800a306:	46c0      	nop			@ (mov r8, r8)
 800a308:	46bd      	mov	sp, r7
 800a30a:	b004      	add	sp, #16
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800a31a:	1d3b      	adds	r3, r7, #4
 800a31c:	0018      	movs	r0, r3
 800a31e:	f000 fd05 	bl	800ad2c <sen5x_read_device_status>
 800a322:	1e03      	subs	r3, r0, #0
 800a324:	d007      	beq.n	800a336 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800a326:	4a28      	ldr	r2, [pc, #160]	@ (800a3c8 <sen5x_check_for_errors+0xb8>)
 800a328:	4b28      	ldr	r3, [pc, #160]	@ (800a3cc <sen5x_check_for_errors+0xbc>)
 800a32a:	0019      	movs	r1, r3
 800a32c:	2001      	movs	r0, #1
 800a32e:	f004 fdcf 	bl	800eed0 <CreateLine>
    return true;
 800a332:	2301      	movs	r3, #1
 800a334:	e043      	b.n	800a3be <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <sen5x_check_for_errors+0x30>
    return false;
 800a33c:	2300      	movs	r3, #0
 800a33e:	e03e      	b.n	800a3be <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	2380      	movs	r3, #128	@ 0x80
 800a344:	039b      	lsls	r3, r3, #14
 800a346:	4013      	ands	r3, r2
 800a348:	d005      	beq.n	800a356 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800a34a:	4a21      	ldr	r2, [pc, #132]	@ (800a3d0 <sen5x_check_for_errors+0xc0>)
 800a34c:	4b21      	ldr	r3, [pc, #132]	@ (800a3d4 <sen5x_check_for_errors+0xc4>)
 800a34e:	0019      	movs	r1, r3
 800a350:	2003      	movs	r0, #3
 800a352:	f004 fdbd 	bl	800eed0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	2380      	movs	r3, #128	@ 0x80
 800a35a:	031b      	lsls	r3, r3, #12
 800a35c:	4013      	ands	r3, r2
 800a35e:	d005      	beq.n	800a36c <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800a360:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d8 <sen5x_check_for_errors+0xc8>)
 800a362:	4b1c      	ldr	r3, [pc, #112]	@ (800a3d4 <sen5x_check_for_errors+0xc4>)
 800a364:	0019      	movs	r1, r3
 800a366:	2003      	movs	r0, #3
 800a368:	f004 fdb2 	bl	800eed0 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2280      	movs	r2, #128	@ 0x80
 800a370:	4013      	ands	r3, r2
 800a372:	d005      	beq.n	800a380 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800a374:	4a19      	ldr	r2, [pc, #100]	@ (800a3dc <sen5x_check_for_errors+0xcc>)
 800a376:	4b17      	ldr	r3, [pc, #92]	@ (800a3d4 <sen5x_check_for_errors+0xc4>)
 800a378:	0019      	movs	r1, r3
 800a37a:	2003      	movs	r0, #3
 800a37c:	f004 fda8 	bl	800eed0 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2240      	movs	r2, #64	@ 0x40
 800a384:	4013      	ands	r3, r2
 800a386:	d005      	beq.n	800a394 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800a388:	4a15      	ldr	r2, [pc, #84]	@ (800a3e0 <sen5x_check_for_errors+0xd0>)
 800a38a:	4b12      	ldr	r3, [pc, #72]	@ (800a3d4 <sen5x_check_for_errors+0xc4>)
 800a38c:	0019      	movs	r1, r3
 800a38e:	2003      	movs	r0, #3
 800a390:	f004 fd9e 	bl	800eed0 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	4013      	ands	r3, r2
 800a39a:	d005      	beq.n	800a3a8 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800a39c:	4a11      	ldr	r2, [pc, #68]	@ (800a3e4 <sen5x_check_for_errors+0xd4>)
 800a39e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3d4 <sen5x_check_for_errors+0xc4>)
 800a3a0:	0019      	movs	r1, r3
 800a3a2:	2003      	movs	r0, #3
 800a3a4:	f004 fd94 	bl	800eed0 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2210      	movs	r2, #16
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	d005      	beq.n	800a3bc <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800a3b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3e8 <sen5x_check_for_errors+0xd8>)
 800a3b2:	4b08      	ldr	r3, [pc, #32]	@ (800a3d4 <sen5x_check_for_errors+0xc4>)
 800a3b4:	0019      	movs	r1, r3
 800a3b6:	2003      	movs	r0, #3
 800a3b8:	f004 fd8a 	bl	800eed0 <CreateLine>
  }
  return 1;
 800a3bc:	2301      	movs	r3, #1
}
 800a3be:	0018      	movs	r0, r3
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	b002      	add	sp, #8
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	46c0      	nop			@ (mov r8, r8)
 800a3c8:	08025a84 	.word	0x08025a84
 800a3cc:	08025608 	.word	0x08025608
 800a3d0:	08025ab0 	.word	0x08025ab0
 800a3d4:	080255dc 	.word	0x080255dc
 800a3d8:	08025ad0 	.word	0x08025ad0
 800a3dc:	08025aec 	.word	0x08025aec
 800a3e0:	08025b10 	.word	0x08025b10
 800a3e4:	08025b30 	.word	0x08025b30
 800a3e8:	08025b44 	.word	0x08025b44

0800a3ec <set_light_on_state>:

void set_light_on_state(void) {
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800a3f0:	4b15      	ldr	r3, [pc, #84]	@ (800a448 <set_light_on_state+0x5c>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	4053      	eors	r3, r2
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d008      	beq.n	800a410 <set_light_on_state+0x24>
    sen5x_Power_On();
 800a3fe:	f7ff fb43 	bl	8009a88 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800a402:	4a12      	ldr	r2, [pc, #72]	@ (800a44c <set_light_on_state+0x60>)
 800a404:	4b12      	ldr	r3, [pc, #72]	@ (800a450 <set_light_on_state+0x64>)
 800a406:	0019      	movs	r1, r3
 800a408:	2003      	movs	r0, #3
 800a40a:	f004 fd61 	bl	800eed0 <CreateLine>
 800a40e:	e00a      	b.n	800a426 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800a410:	f005 f9a2 	bl	800f758 <HAL_GetTick>
 800a414:	0002      	movs	r2, r0
 800a416:	4b0f      	ldr	r3, [pc, #60]	@ (800a454 <set_light_on_state+0x68>)
 800a418:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800a41a:	4a0f      	ldr	r2, [pc, #60]	@ (800a458 <set_light_on_state+0x6c>)
 800a41c:	4b0c      	ldr	r3, [pc, #48]	@ (800a450 <set_light_on_state+0x64>)
 800a41e:	0019      	movs	r1, r3
 800a420:	2003      	movs	r0, #3
 800a422:	f004 fd55 	bl	800eed0 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800a426:	f7ff fcbf 	bl	8009da8 <sen5x_lightup_measurement>
 800a42a:	1e03      	subs	r3, r0, #0
 800a42c:	d005      	beq.n	800a43a <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800a42e:	4a0b      	ldr	r2, [pc, #44]	@ (800a45c <set_light_on_state+0x70>)
 800a430:	4b0b      	ldr	r3, [pc, #44]	@ (800a460 <set_light_on_state+0x74>)
 800a432:	0019      	movs	r1, r3
 800a434:	2001      	movs	r0, #1
 800a436:	f004 fd4b 	bl	800eed0 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800a43a:	4b0a      	ldr	r3, [pc, #40]	@ (800a464 <set_light_on_state+0x78>)
 800a43c:	2203      	movs	r2, #3
 800a43e:	701a      	strb	r2, [r3, #0]
}
 800a440:	46c0      	nop			@ (mov r8, r8)
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	46c0      	nop			@ (mov r8, r8)
 800a448:	20000d69 	.word	0x20000d69
 800a44c:	08025b80 	.word	0x08025b80
 800a450:	080255dc 	.word	0x080255dc
 800a454:	20000d78 	.word	0x20000d78
 800a458:	08025bac 	.word	0x08025bac
 800a45c:	08025bc4 	.word	0x08025bc4
 800a460:	08025608 	.word	0x08025608
 800a464:	2000008d 	.word	0x2000008d

0800a468 <sen5x_statemachine>:

void sen5x_statemachine() {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800a46e:	1dfb      	adds	r3, r7, #7
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800a474:	4b88      	ldr	r3, [pc, #544]	@ (800a698 <sen5x_statemachine+0x230>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	0018      	movs	r0, r3
 800a47a:	f004 fcd3 	bl	800ee24 <TimestampIsReached>
 800a47e:	1e03      	subs	r3, r0, #0
 800a480:	d100      	bne.n	800a484 <sen5x_statemachine+0x1c>
 800a482:	e105      	b.n	800a690 <sen5x_statemachine+0x228>
    switch (PMsamplesState) {
 800a484:	4b85      	ldr	r3, [pc, #532]	@ (800a69c <sen5x_statemachine+0x234>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	2b05      	cmp	r3, #5
 800a48a:	d900      	bls.n	800a48e <sen5x_statemachine+0x26>
 800a48c:	e100      	b.n	800a690 <sen5x_statemachine+0x228>
 800a48e:	009a      	lsls	r2, r3, #2
 800a490:	4b83      	ldr	r3, [pc, #524]	@ (800a6a0 <sen5x_statemachine+0x238>)
 800a492:	18d3      	adds	r3, r2, r3
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800a498:	4a82      	ldr	r2, [pc, #520]	@ (800a6a4 <sen5x_statemachine+0x23c>)
 800a49a:	4b83      	ldr	r3, [pc, #524]	@ (800a6a8 <sen5x_statemachine+0x240>)
 800a49c:	0019      	movs	r1, r3
 800a49e:	2001      	movs	r0, #1
 800a4a0:	f004 fd16 	bl	800eed0 <CreateLine>
      SetPMSensorStatus(false);
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f7fe fc6b 	bl	8008d80 <SetPMSensorStatus>
      DisablePMSensor();
 800a4aa:	f7fe fc0b 	bl	8008cc4 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 800a4ae:	f005 f953 	bl	800f758 <HAL_GetTick>
 800a4b2:	0003      	movs	r3, r0
 800a4b4:	4a7d      	ldr	r2, [pc, #500]	@ (800a6ac <sen5x_statemachine+0x244>)
 800a4b6:	189a      	adds	r2, r3, r2
 800a4b8:	4b77      	ldr	r3, [pc, #476]	@ (800a698 <sen5x_statemachine+0x230>)
 800a4ba:	601a      	str	r2, [r3, #0]
      break;
 800a4bc:	e0e8      	b.n	800a690 <sen5x_statemachine+0x228>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 800a4be:	f005 f94b 	bl	800f758 <HAL_GetTick>
 800a4c2:	0003      	movs	r3, r0
 800a4c4:	4a7a      	ldr	r2, [pc, #488]	@ (800a6b0 <sen5x_statemachine+0x248>)
 800a4c6:	189a      	adds	r2, r3, r2
 800a4c8:	4b73      	ldr	r3, [pc, #460]	@ (800a698 <sen5x_statemachine+0x230>)
 800a4ca:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800a4cc:	f7ff ff8e 	bl	800a3ec <set_light_on_state>
      break;
 800a4d0:	e0de      	b.n	800a690 <sen5x_statemachine+0x228>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800a4d2:	4b72      	ldr	r3, [pc, #456]	@ (800a69c <sen5x_statemachine+0x234>)
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800a4d8:	4b76      	ldr	r3, [pc, #472]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	2b05      	cmp	r3, #5
 800a4de:	d905      	bls.n	800a4ec <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800a4e0:	4b6e      	ldr	r3, [pc, #440]	@ (800a69c <sen5x_statemachine+0x234>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a4e6:	f7ff faff 	bl	8009ae8 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800a4ea:	e0ce      	b.n	800a68a <sen5x_statemachine+0x222>
        if (sen5x_check_for_errors()) {
 800a4ec:	f7ff ff10 	bl	800a310 <sen5x_check_for_errors>
 800a4f0:	1e03      	subs	r3, r0, #0
 800a4f2:	d021      	beq.n	800a538 <sen5x_statemachine+0xd0>
          if (sen5x_device_reset()) {
 800a4f4:	f000 fc6c 	bl	800add0 <sen5x_device_reset>
 800a4f8:	1e03      	subs	r3, r0, #0
 800a4fa:	d00f      	beq.n	800a51c <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800a4fc:	4a6e      	ldr	r2, [pc, #440]	@ (800a6b8 <sen5x_statemachine+0x250>)
 800a4fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a6a8 <sen5x_statemachine+0x240>)
 800a500:	0019      	movs	r1, r3
 800a502:	2001      	movs	r0, #1
 800a504:	f004 fce4 	bl	800eed0 <CreateLine>
            sen5xErrors++;
 800a508:	4b6a      	ldr	r3, [pc, #424]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	3301      	adds	r3, #1
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	4b68      	ldr	r3, [pc, #416]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a512:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800a514:	4b61      	ldr	r3, [pc, #388]	@ (800a69c <sen5x_statemachine+0x234>)
 800a516:	2203      	movs	r2, #3
 800a518:	701a      	strb	r2, [r3, #0]
 800a51a:	e005      	b.n	800a528 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800a51c:	4a67      	ldr	r2, [pc, #412]	@ (800a6bc <sen5x_statemachine+0x254>)
 800a51e:	4b68      	ldr	r3, [pc, #416]	@ (800a6c0 <sen5x_statemachine+0x258>)
 800a520:	0019      	movs	r1, r3
 800a522:	2002      	movs	r0, #2
 800a524:	f004 fcd4 	bl	800eed0 <CreateLine>
          sen5xReadTimer = HAL_GetTick() + 200;
 800a528:	f005 f916 	bl	800f758 <HAL_GetTick>
 800a52c:	0003      	movs	r3, r0
 800a52e:	33c8      	adds	r3, #200	@ 0xc8
 800a530:	001a      	movs	r2, r3
 800a532:	4b59      	ldr	r3, [pc, #356]	@ (800a698 <sen5x_statemachine+0x230>)
 800a534:	601a      	str	r2, [r3, #0]
      break;
 800a536:	e0a8      	b.n	800a68a <sen5x_statemachine+0x222>
          if (sen5xErrors != 0) {
 800a538:	4b5e      	ldr	r3, [pc, #376]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d100      	bne.n	800a542 <sen5x_statemachine+0xda>
 800a540:	e0a3      	b.n	800a68a <sen5x_statemachine+0x222>
            sen5xErrors = 0;
 800a542:	4b5c      	ldr	r3, [pc, #368]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800a548:	4a5e      	ldr	r2, [pc, #376]	@ (800a6c4 <sen5x_statemachine+0x25c>)
 800a54a:	4b5f      	ldr	r3, [pc, #380]	@ (800a6c8 <sen5x_statemachine+0x260>)
 800a54c:	0019      	movs	r1, r3
 800a54e:	2003      	movs	r0, #3
 800a550:	f004 fcbe 	bl	800eed0 <CreateLine>
      break;
 800a554:	e099      	b.n	800a68a <sen5x_statemachine+0x222>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800a556:	1dfb      	adds	r3, r7, #7
 800a558:	0018      	movs	r0, r3
 800a55a:	f000 f955 	bl	800a808 <sen5x_read_data_ready>
      if (data_ready) {
 800a55e:	1dfb      	adds	r3, r7, #7
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d031      	beq.n	800a5ca <sen5x_statemachine+0x162>
        SetPMIndicator();
 800a566:	f003 fbd3 	bl	800dd10 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800a56a:	4b58      	ldr	r3, [pc, #352]	@ (800a6cc <sen5x_statemachine+0x264>)
 800a56c:	0018      	movs	r0, r3
 800a56e:	f7ff fcc1 	bl	8009ef4 <sen5x_read_measurement>
 800a572:	1e03      	subs	r3, r0, #0
 800a574:	d00b      	beq.n	800a58e <sen5x_statemachine+0x126>
          Error("Error executing sen5x_read_measured_values()");
 800a576:	4a56      	ldr	r2, [pc, #344]	@ (800a6d0 <sen5x_statemachine+0x268>)
 800a578:	4b4b      	ldr	r3, [pc, #300]	@ (800a6a8 <sen5x_statemachine+0x240>)
 800a57a:	0019      	movs	r1, r3
 800a57c:	2001      	movs	r0, #1
 800a57e:	f004 fca7 	bl	800eed0 <CreateLine>
          sen5xErrors++;
 800a582:	4b4c      	ldr	r3, [pc, #304]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	3301      	adds	r3, #1
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	4b4a      	ldr	r3, [pc, #296]	@ (800a6b4 <sen5x_statemachine+0x24c>)
 800a58c:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800a58e:	4b51      	ldr	r3, [pc, #324]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	3301      	adds	r3, #1
 800a594:	b2da      	uxtb	r2, r3
 800a596:	4b4f      	ldr	r3, [pc, #316]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a598:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800a59a:	4b4e      	ldr	r3, [pc, #312]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b1f      	cmp	r3, #31
 800a5a0:	d102      	bne.n	800a5a8 <sen5x_statemachine+0x140>
          sen5xSamples = 0;  // enable display on serial
 800a5a2:	4b4c      	ldr	r3, [pc, #304]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800a5a8:	4b4a      	ldr	r3, [pc, #296]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d901      	bls.n	800a5b4 <sen5x_statemachine+0x14c>
          sen5xStore();
 800a5b0:	f7ff fde2 	bl	800a178 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800a5b4:	4b47      	ldr	r3, [pc, #284]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d106      	bne.n	800a5ca <sen5x_statemachine+0x162>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800a5bc:	f7ff fcf6 	bl	8009fac <sen5x_printvalues>
#else
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
          HAL_Delay(1000);
 800a5c0:	23fa      	movs	r3, #250	@ 0xfa
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f005 f8d1 	bl	800f76c <HAL_Delay>
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800a5ca:	4b43      	ldr	r3, [pc, #268]	@ (800a6d8 <sen5x_statemachine+0x270>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <sen5x_statemachine+0x172>
 800a5d2:	4b40      	ldr	r3, [pc, #256]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d959      	bls.n	800a68e <sen5x_statemachine+0x226>
        PMsamplesState = CLEAN_FAN;
 800a5da:	4b30      	ldr	r3, [pc, #192]	@ (800a69c <sen5x_statemachine+0x234>)
 800a5dc:	2204      	movs	r2, #4
 800a5de:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a5e0:	e055      	b.n	800a68e <sen5x_statemachine+0x226>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 800a5e2:	f7fc fde5 	bl	80071b0 <RTC_GetWeekday>
 800a5e6:	0003      	movs	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d118      	bne.n	800a61e <sen5x_statemachine+0x1b6>
 800a5ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a6dc <sen5x_statemachine+0x274>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	4053      	eors	r3, r2
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d011      	beq.n	800a61e <sen5x_statemachine+0x1b6>
        sen5x_start_fan_cleaning();
 800a5fa:	f000 f9eb 	bl	800a9d4 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800a5fe:	4a38      	ldr	r2, [pc, #224]	@ (800a6e0 <sen5x_statemachine+0x278>)
 800a600:	4b2f      	ldr	r3, [pc, #188]	@ (800a6c0 <sen5x_statemachine+0x258>)
 800a602:	0019      	movs	r1, r3
 800a604:	2002      	movs	r0, #2
 800a606:	f004 fc63 	bl	800eed0 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 800a60a:	f005 f8a5 	bl	800f758 <HAL_GetTick>
 800a60e:	0003      	movs	r3, r0
 800a610:	4a34      	ldr	r2, [pc, #208]	@ (800a6e4 <sen5x_statemachine+0x27c>)
 800a612:	189a      	adds	r2, r3, r2
 800a614:	4b20      	ldr	r3, [pc, #128]	@ (800a698 <sen5x_statemachine+0x230>)
 800a616:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800a618:	4b30      	ldr	r3, [pc, #192]	@ (800a6dc <sen5x_statemachine+0x274>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 800a61e:	4b1f      	ldr	r3, [pc, #124]	@ (800a69c <sen5x_statemachine+0x234>)
 800a620:	2205      	movs	r2, #5
 800a622:	701a      	strb	r2, [r3, #0]
      break;
 800a624:	e034      	b.n	800a690 <sen5x_statemachine+0x228>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800a626:	4b2c      	ldr	r3, [pc, #176]	@ (800a6d8 <sen5x_statemachine+0x270>)
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2201      	movs	r2, #1
 800a62c:	4053      	eors	r3, r2
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01c      	beq.n	800a66e <sen5x_statemachine+0x206>
 800a634:	4b2c      	ldr	r3, [pc, #176]	@ (800a6e8 <sen5x_statemachine+0x280>)
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2201      	movs	r2, #1
 800a63a:	4053      	eors	r3, r2
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d015      	beq.n	800a66e <sen5x_statemachine+0x206>
        if (sen5x_extinguish_measurement()) {
 800a642:	f7ff fbfd 	bl	8009e40 <sen5x_extinguish_measurement>
 800a646:	1e03      	subs	r3, r0, #0
 800a648:	d005      	beq.n	800a656 <sen5x_statemachine+0x1ee>
          Error("Error executing sen5x_extinguish_measurement()");
 800a64a:	4a28      	ldr	r2, [pc, #160]	@ (800a6ec <sen5x_statemachine+0x284>)
 800a64c:	4b16      	ldr	r3, [pc, #88]	@ (800a6a8 <sen5x_statemachine+0x240>)
 800a64e:	0019      	movs	r1, r3
 800a650:	2001      	movs	r0, #1
 800a652:	f004 fc3d 	bl	800eed0 <CreateLine>
        }
        sen5xSamples = 0;
 800a656:	4b1f      	ldr	r3, [pc, #124]	@ (800a6d4 <sen5x_statemachine+0x26c>)
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a65c:	f7ff fa44 	bl	8009ae8 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800a660:	2000      	movs	r0, #0
 800a662:	f7fe fb8d 	bl	8008d80 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800a666:	4b0d      	ldr	r3, [pc, #52]	@ (800a69c <sen5x_statemachine+0x234>)
 800a668:	2201      	movs	r2, #1
 800a66a:	701a      	strb	r2, [r3, #0]
 800a66c:	e002      	b.n	800a674 <sen5x_statemachine+0x20c>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800a66e:	4b0b      	ldr	r3, [pc, #44]	@ (800a69c <sen5x_statemachine+0x234>)
 800a670:	2203      	movs	r2, #3
 800a672:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800a674:	f003 fb72 	bl	800dd5c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 800a678:	f005 f86e 	bl	800f758 <HAL_GetTick>
 800a67c:	0003      	movs	r3, r0
 800a67e:	22fa      	movs	r2, #250	@ 0xfa
 800a680:	0092      	lsls	r2, r2, #2
 800a682:	189a      	adds	r2, r3, r2
 800a684:	4b04      	ldr	r3, [pc, #16]	@ (800a698 <sen5x_statemachine+0x230>)
 800a686:	601a      	str	r2, [r3, #0]
    }
  }
}
 800a688:	e002      	b.n	800a690 <sen5x_statemachine+0x228>
      break;
 800a68a:	46c0      	nop			@ (mov r8, r8)
 800a68c:	e000      	b.n	800a690 <sen5x_statemachine+0x228>
      break;
 800a68e:	46c0      	nop			@ (mov r8, r8)
}
 800a690:	46c0      	nop			@ (mov r8, r8)
 800a692:	46bd      	mov	sp, r7
 800a694:	b002      	add	sp, #8
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000d78 	.word	0x20000d78
 800a69c:	2000008d 	.word	0x2000008d
 800a6a0:	080265d0 	.word	0x080265d0
 800a6a4:	08025bf0 	.word	0x08025bf0
 800a6a8:	08025608 	.word	0x08025608
 800a6ac:	002fefd8 	.word	0x002fefd8
 800a6b0:	00005910 	.word	0x00005910
 800a6b4:	20000d75 	.word	0x20000d75
 800a6b8:	08025c20 	.word	0x08025c20
 800a6bc:	08025c38 	.word	0x08025c38
 800a6c0:	0802559c 	.word	0x0802559c
 800a6c4:	08025c50 	.word	0x08025c50
 800a6c8:	080255dc 	.word	0x080255dc
 800a6cc:	20000d7c 	.word	0x20000d7c
 800a6d0:	08025c64 	.word	0x08025c64
 800a6d4:	20000d74 	.word	0x20000d74
 800a6d8:	20001cf9 	.word	0x20001cf9
 800a6dc:	20000d68 	.word	0x20000d68
 800a6e0:	08025c94 	.word	0x08025c94
 800a6e4:	00002710 	.word	0x00002710
 800a6e8:	20001cfa 	.word	0x20001cfa
 800a6ec:	08025cac 	.word	0x08025cac

0800a6f0 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800a6f0:	b590      	push	{r4, r7, lr}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a6f6:	1dbb      	adds	r3, r7, #6
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800a6fc:	1dbc      	adds	r4, r7, #6
 800a6fe:	1dbb      	adds	r3, r7, #6
 800a700:	8819      	ldrh	r1, [r3, #0]
 800a702:	003b      	movs	r3, r7
 800a704:	2221      	movs	r2, #33	@ 0x21
 800a706:	0018      	movs	r0, r3
 800a708:	f001 fb56 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800a70c:	0003      	movs	r3, r0
 800a70e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a710:	1d3c      	adds	r4, r7, #4
 800a712:	1dbb      	adds	r3, r7, #6
 800a714:	881a      	ldrh	r2, [r3, #0]
 800a716:	003b      	movs	r3, r7
 800a718:	0019      	movs	r1, r3
 800a71a:	2069      	movs	r0, #105	@ 0x69
 800a71c:	f001 fbd0 	bl	800bec0 <sensirion_i2c_write_data>
 800a720:	0003      	movs	r3, r0
 800a722:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a724:	1d3b      	adds	r3, r7, #4
 800a726:	2200      	movs	r2, #0
 800a728:	5e9b      	ldrsh	r3, [r3, r2]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <sen5x_start_measurement+0x46>
        return error;
 800a72e:	1d3b      	adds	r3, r7, #4
 800a730:	2200      	movs	r2, #0
 800a732:	5e9b      	ldrsh	r3, [r3, r2]
 800a734:	e004      	b.n	800a740 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a736:	4b04      	ldr	r3, [pc, #16]	@ (800a748 <sen5x_start_measurement+0x58>)
 800a738:	0018      	movs	r0, r3
 800a73a:	f7ff fdc9 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	0018      	movs	r0, r3
 800a742:	46bd      	mov	sp, r7
 800a744:	b003      	add	sp, #12
 800a746:	bd90      	pop	{r4, r7, pc}
 800a748:	0000c350 	.word	0x0000c350

0800a74c <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800a74c:	b590      	push	{r4, r7, lr}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a752:	1dbb      	adds	r3, r7, #6
 800a754:	2200      	movs	r2, #0
 800a756:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800a758:	1dbc      	adds	r4, r7, #6
 800a75a:	1dbb      	adds	r3, r7, #6
 800a75c:	8819      	ldrh	r1, [r3, #0]
 800a75e:	003b      	movs	r3, r7
 800a760:	2237      	movs	r2, #55	@ 0x37
 800a762:	0018      	movs	r0, r3
 800a764:	f001 fb28 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800a768:	0003      	movs	r3, r0
 800a76a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a76c:	1d3c      	adds	r4, r7, #4
 800a76e:	1dbb      	adds	r3, r7, #6
 800a770:	881a      	ldrh	r2, [r3, #0]
 800a772:	003b      	movs	r3, r7
 800a774:	0019      	movs	r1, r3
 800a776:	2069      	movs	r0, #105	@ 0x69
 800a778:	f001 fba2 	bl	800bec0 <sensirion_i2c_write_data>
 800a77c:	0003      	movs	r3, r0
 800a77e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a780:	1d3b      	adds	r3, r7, #4
 800a782:	2200      	movs	r2, #0
 800a784:	5e9b      	ldrsh	r3, [r3, r2]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <sen5x_start_measurement_without_pm+0x46>
        return error;
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	2200      	movs	r2, #0
 800a78e:	5e9b      	ldrsh	r3, [r3, r2]
 800a790:	e004      	b.n	800a79c <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a792:	4b04      	ldr	r3, [pc, #16]	@ (800a7a4 <sen5x_start_measurement_without_pm+0x58>)
 800a794:	0018      	movs	r0, r3
 800a796:	f7ff fd9b 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	0018      	movs	r0, r3
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	b003      	add	sp, #12
 800a7a2:	bd90      	pop	{r4, r7, pc}
 800a7a4:	0000c350 	.word	0x0000c350

0800a7a8 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a7ae:	1dbb      	adds	r3, r7, #6
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800a7b4:	1dbc      	adds	r4, r7, #6
 800a7b6:	2382      	movs	r3, #130	@ 0x82
 800a7b8:	005a      	lsls	r2, r3, #1
 800a7ba:	1dbb      	adds	r3, r7, #6
 800a7bc:	8819      	ldrh	r1, [r3, #0]
 800a7be:	003b      	movs	r3, r7
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f001 faf9 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800a7c6:	0003      	movs	r3, r0
 800a7c8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a7ca:	1d3c      	adds	r4, r7, #4
 800a7cc:	1dbb      	adds	r3, r7, #6
 800a7ce:	881a      	ldrh	r2, [r3, #0]
 800a7d0:	003b      	movs	r3, r7
 800a7d2:	0019      	movs	r1, r3
 800a7d4:	2069      	movs	r0, #105	@ 0x69
 800a7d6:	f001 fb73 	bl	800bec0 <sensirion_i2c_write_data>
 800a7da:	0003      	movs	r3, r0
 800a7dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a7de:	1d3b      	adds	r3, r7, #4
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	5e9b      	ldrsh	r3, [r3, r2]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <sen5x_stop_measurement+0x48>
        return error;
 800a7e8:	1d3b      	adds	r3, r7, #4
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a7ee:	e004      	b.n	800a7fa <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a7f0:	4b04      	ldr	r3, [pc, #16]	@ (800a804 <sen5x_stop_measurement+0x5c>)
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f7ff fd6c 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	0018      	movs	r0, r3
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	b003      	add	sp, #12
 800a800:	bd90      	pop	{r4, r7, pc}
 800a802:	46c0      	nop			@ (mov r8, r8)
 800a804:	00030d40 	.word	0x00030d40

0800a808 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800a808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800a810:	250e      	movs	r5, #14
 800a812:	197b      	adds	r3, r7, r5
 800a814:	2200      	movs	r2, #0
 800a816:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800a818:	197c      	adds	r4, r7, r5
 800a81a:	4a22      	ldr	r2, [pc, #136]	@ (800a8a4 <sen5x_read_data_ready+0x9c>)
 800a81c:	197b      	adds	r3, r7, r5
 800a81e:	8819      	ldrh	r1, [r3, #0]
 800a820:	2308      	movs	r3, #8
 800a822:	18fb      	adds	r3, r7, r3
 800a824:	0018      	movs	r0, r3
 800a826:	f001 fac7 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800a82a:	0003      	movs	r3, r0
 800a82c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a82e:	260c      	movs	r6, #12
 800a830:	19bc      	adds	r4, r7, r6
 800a832:	197b      	adds	r3, r7, r5
 800a834:	881a      	ldrh	r2, [r3, #0]
 800a836:	2308      	movs	r3, #8
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	0019      	movs	r1, r3
 800a83c:	2069      	movs	r0, #105	@ 0x69
 800a83e:	f001 fb3f 	bl	800bec0 <sensirion_i2c_write_data>
 800a842:	0003      	movs	r3, r0
 800a844:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a846:	19bb      	adds	r3, r7, r6
 800a848:	2200      	movs	r2, #0
 800a84a:	5e9b      	ldrsh	r3, [r3, r2]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d003      	beq.n	800a858 <sen5x_read_data_ready+0x50>
        return error;
 800a850:	19bb      	adds	r3, r7, r6
 800a852:	2200      	movs	r2, #0
 800a854:	5e9b      	ldrsh	r3, [r3, r2]
 800a856:	e020      	b.n	800a89a <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a858:	4b13      	ldr	r3, [pc, #76]	@ (800a8a8 <sen5x_read_data_ready+0xa0>)
 800a85a:	0018      	movs	r0, r3
 800a85c:	f7ff fd38 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800a860:	250c      	movs	r5, #12
 800a862:	197c      	adds	r4, r7, r5
 800a864:	2308      	movs	r3, #8
 800a866:	18fb      	adds	r3, r7, r3
 800a868:	2202      	movs	r2, #2
 800a86a:	0019      	movs	r1, r3
 800a86c:	2069      	movs	r0, #105	@ 0x69
 800a86e:	f001 fb3f 	bl	800bef0 <sensirion_i2c_read_data_inplace>
 800a872:	0003      	movs	r3, r0
 800a874:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a876:	197b      	adds	r3, r7, r5
 800a878:	2200      	movs	r2, #0
 800a87a:	5e9b      	ldrsh	r3, [r3, r2]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <sen5x_read_data_ready+0x80>
        return error;
 800a880:	197b      	adds	r3, r7, r5
 800a882:	2200      	movs	r2, #0
 800a884:	5e9b      	ldrsh	r3, [r3, r2]
 800a886:	e008      	b.n	800a89a <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a888:	2308      	movs	r3, #8
 800a88a:	18fb      	adds	r3, r7, r3
 800a88c:	785b      	ldrb	r3, [r3, #1]
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	4193      	sbcs	r3, r2
 800a892:	b2da      	uxtb	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	0018      	movs	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	b005      	add	sp, #20
 800a8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a2:	46c0      	nop			@ (mov r8, r8)
 800a8a4:	00000202 	.word	0x00000202
 800a8a8:	00004e20 	.word	0x00004e20

0800a8ac <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ae:	b08d      	sub	sp, #52	@ 0x34
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a8ba:	252e      	movs	r5, #46	@ 0x2e
 800a8bc:	197b      	adds	r3, r7, r5
 800a8be:	2200      	movs	r2, #0
 800a8c0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a8c2:	197c      	adds	r4, r7, r5
 800a8c4:	23f1      	movs	r3, #241	@ 0xf1
 800a8c6:	009a      	lsls	r2, r3, #2
 800a8c8:	197b      	adds	r3, r7, r5
 800a8ca:	8819      	ldrh	r1, [r3, #0]
 800a8cc:	2314      	movs	r3, #20
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f001 fa71 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800a8d6:	0003      	movs	r3, r0
 800a8d8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a8da:	262c      	movs	r6, #44	@ 0x2c
 800a8dc:	19bc      	adds	r4, r7, r6
 800a8de:	197b      	adds	r3, r7, r5
 800a8e0:	881a      	ldrh	r2, [r3, #0]
 800a8e2:	2314      	movs	r3, #20
 800a8e4:	18fb      	adds	r3, r7, r3
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	2069      	movs	r0, #105	@ 0x69
 800a8ea:	f001 fae9 	bl	800bec0 <sensirion_i2c_write_data>
 800a8ee:	0003      	movs	r3, r0
 800a8f0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a8f2:	19bb      	adds	r3, r7, r6
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	5e9b      	ldrsh	r3, [r3, r2]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <sen5x_read_measured_values+0x58>
        return error;
 800a8fc:	19bb      	adds	r3, r7, r6
 800a8fe:	2200      	movs	r2, #0
 800a900:	5e9b      	ldrsh	r3, [r3, r2]
 800a902:	e060      	b.n	800a9c6 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a904:	4b32      	ldr	r3, [pc, #200]	@ (800a9d0 <sen5x_read_measured_values+0x124>)
 800a906:	0018      	movs	r0, r3
 800a908:	f7ff fce2 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a90c:	252c      	movs	r5, #44	@ 0x2c
 800a90e:	197c      	adds	r4, r7, r5
 800a910:	2314      	movs	r3, #20
 800a912:	18fb      	adds	r3, r7, r3
 800a914:	2210      	movs	r2, #16
 800a916:	0019      	movs	r1, r3
 800a918:	2069      	movs	r0, #105	@ 0x69
 800a91a:	f001 fae9 	bl	800bef0 <sensirion_i2c_read_data_inplace>
 800a91e:	0003      	movs	r3, r0
 800a920:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a922:	197b      	adds	r3, r7, r5
 800a924:	2200      	movs	r2, #0
 800a926:	5e9b      	ldrsh	r3, [r3, r2]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <sen5x_read_measured_values+0x88>
        return error;
 800a92c:	197b      	adds	r3, r7, r5
 800a92e:	2200      	movs	r2, #0
 800a930:	5e9b      	ldrsh	r3, [r3, r2]
 800a932:	e048      	b.n	800a9c6 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a934:	2414      	movs	r4, #20
 800a936:	193b      	adds	r3, r7, r4
 800a938:	0018      	movs	r0, r3
 800a93a:	f000 fa79 	bl	800ae30 <sensirion_common_bytes_to_uint16_t>
 800a93e:	0003      	movs	r3, r0
 800a940:	001a      	movs	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a946:	193b      	adds	r3, r7, r4
 800a948:	3302      	adds	r3, #2
 800a94a:	0018      	movs	r0, r3
 800a94c:	f000 fa70 	bl	800ae30 <sensirion_common_bytes_to_uint16_t>
 800a950:	0003      	movs	r3, r0
 800a952:	001a      	movs	r2, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a958:	193b      	adds	r3, r7, r4
 800a95a:	3304      	adds	r3, #4
 800a95c:	0018      	movs	r0, r3
 800a95e:	f000 fa67 	bl	800ae30 <sensirion_common_bytes_to_uint16_t>
 800a962:	0003      	movs	r3, r0
 800a964:	001a      	movs	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a96a:	193b      	adds	r3, r7, r4
 800a96c:	3306      	adds	r3, #6
 800a96e:	0018      	movs	r0, r3
 800a970:	f000 fa5e 	bl	800ae30 <sensirion_common_bytes_to_uint16_t>
 800a974:	0003      	movs	r3, r0
 800a976:	001a      	movs	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a97c:	193b      	adds	r3, r7, r4
 800a97e:	3308      	adds	r3, #8
 800a980:	0018      	movs	r0, r3
 800a982:	f000 fa81 	bl	800ae88 <sensirion_common_bytes_to_int16_t>
 800a986:	0003      	movs	r3, r0
 800a988:	001a      	movs	r2, r3
 800a98a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a98c:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a98e:	193b      	adds	r3, r7, r4
 800a990:	330a      	adds	r3, #10
 800a992:	0018      	movs	r0, r3
 800a994:	f000 fa78 	bl	800ae88 <sensirion_common_bytes_to_int16_t>
 800a998:	0003      	movs	r3, r0
 800a99a:	001a      	movs	r2, r3
 800a99c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a99e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a9a0:	193b      	adds	r3, r7, r4
 800a9a2:	330c      	adds	r3, #12
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	f000 fa6f 	bl	800ae88 <sensirion_common_bytes_to_int16_t>
 800a9aa:	0003      	movs	r3, r0
 800a9ac:	001a      	movs	r2, r3
 800a9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9b0:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a9b2:	193b      	adds	r3, r7, r4
 800a9b4:	330e      	adds	r3, #14
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	f000 fa66 	bl	800ae88 <sensirion_common_bytes_to_int16_t>
 800a9bc:	0003      	movs	r3, r0
 800a9be:	001a      	movs	r2, r3
 800a9c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9c2:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	0018      	movs	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	b00d      	add	sp, #52	@ 0x34
 800a9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ce:	46c0      	nop			@ (mov r8, r8)
 800a9d0:	00004e20 	.word	0x00004e20

0800a9d4 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a9d4:	b590      	push	{r4, r7, lr}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a9da:	1dbb      	adds	r3, r7, #6
 800a9dc:	2200      	movs	r2, #0
 800a9de:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a9e0:	1dbc      	adds	r4, r7, #6
 800a9e2:	4a12      	ldr	r2, [pc, #72]	@ (800aa2c <sen5x_start_fan_cleaning+0x58>)
 800a9e4:	1dbb      	adds	r3, r7, #6
 800a9e6:	8819      	ldrh	r1, [r3, #0]
 800a9e8:	003b      	movs	r3, r7
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f001 f9e4 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800a9f0:	0003      	movs	r3, r0
 800a9f2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a9f4:	1d3c      	adds	r4, r7, #4
 800a9f6:	1dbb      	adds	r3, r7, #6
 800a9f8:	881a      	ldrh	r2, [r3, #0]
 800a9fa:	003b      	movs	r3, r7
 800a9fc:	0019      	movs	r1, r3
 800a9fe:	2069      	movs	r0, #105	@ 0x69
 800aa00:	f001 fa5e 	bl	800bec0 <sensirion_i2c_write_data>
 800aa04:	0003      	movs	r3, r0
 800aa06:	8023      	strh	r3, [r4, #0]
    if (error) {
 800aa08:	1d3b      	adds	r3, r7, #4
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	5e9b      	ldrsh	r3, [r3, r2]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <sen5x_start_fan_cleaning+0x46>
        return error;
 800aa12:	1d3b      	adds	r3, r7, #4
 800aa14:	2200      	movs	r2, #0
 800aa16:	5e9b      	ldrsh	r3, [r3, r2]
 800aa18:	e004      	b.n	800aa24 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800aa1a:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <sen5x_start_fan_cleaning+0x5c>)
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f7ff fc57 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	0018      	movs	r0, r3
 800aa26:	46bd      	mov	sp, r7
 800aa28:	b003      	add	sp, #12
 800aa2a:	bd90      	pop	{r4, r7, pc}
 800aa2c:	00005607 	.word	0x00005607
 800aa30:	00004e20 	.word	0x00004e20

0800aa34 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	0004      	movs	r4, r0
 800aa3c:	0008      	movs	r0, r1
 800aa3e:	0011      	movs	r1, r2
 800aa40:	1dbb      	adds	r3, r7, #6
 800aa42:	1c22      	adds	r2, r4, #0
 800aa44:	801a      	strh	r2, [r3, #0]
 800aa46:	1d3b      	adds	r3, r7, #4
 800aa48:	1c02      	adds	r2, r0, #0
 800aa4a:	801a      	strh	r2, [r3, #0]
 800aa4c:	1cbb      	adds	r3, r7, #2
 800aa4e:	1c0a      	adds	r2, r1, #0
 800aa50:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800aa52:	2516      	movs	r5, #22
 800aa54:	197b      	adds	r3, r7, r5
 800aa56:	2200      	movs	r2, #0
 800aa58:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800aa5a:	197c      	adds	r4, r7, r5
 800aa5c:	4a25      	ldr	r2, [pc, #148]	@ (800aaf4 <sen5x_set_temperature_offset_parameters+0xc0>)
 800aa5e:	197b      	adds	r3, r7, r5
 800aa60:	8819      	ldrh	r1, [r3, #0]
 800aa62:	2608      	movs	r6, #8
 800aa64:	19bb      	adds	r3, r7, r6
 800aa66:	0018      	movs	r0, r3
 800aa68:	f001 f9a6 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800aa6c:	0003      	movs	r3, r0
 800aa6e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800aa70:	197c      	adds	r4, r7, r5
 800aa72:	1dbb      	adds	r3, r7, #6
 800aa74:	2200      	movs	r2, #0
 800aa76:	5e9a      	ldrsh	r2, [r3, r2]
 800aa78:	197b      	adds	r3, r7, r5
 800aa7a:	8819      	ldrh	r1, [r3, #0]
 800aa7c:	19bb      	adds	r3, r7, r6
 800aa7e:	0018      	movs	r0, r3
 800aa80:	f001 fa05 	bl	800be8e <sensirion_i2c_add_int16_t_to_buffer>
 800aa84:	0003      	movs	r3, r0
 800aa86:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800aa88:	197c      	adds	r4, r7, r5
 800aa8a:	1d3b      	adds	r3, r7, #4
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	5e9a      	ldrsh	r2, [r3, r2]
 800aa90:	197b      	adds	r3, r7, r5
 800aa92:	8819      	ldrh	r1, [r3, #0]
 800aa94:	19bb      	adds	r3, r7, r6
 800aa96:	0018      	movs	r0, r3
 800aa98:	f001 f9f9 	bl	800be8e <sensirion_i2c_add_int16_t_to_buffer>
 800aa9c:	0003      	movs	r3, r0
 800aa9e:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800aaa0:	197c      	adds	r4, r7, r5
 800aaa2:	1cbb      	adds	r3, r7, #2
 800aaa4:	881a      	ldrh	r2, [r3, #0]
 800aaa6:	197b      	adds	r3, r7, r5
 800aaa8:	8819      	ldrh	r1, [r3, #0]
 800aaaa:	19bb      	adds	r3, r7, r6
 800aaac:	0018      	movs	r0, r3
 800aaae:	f001 f9af 	bl	800be10 <sensirion_i2c_add_uint16_t_to_buffer>
 800aab2:	0003      	movs	r3, r0
 800aab4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800aab6:	2214      	movs	r2, #20
 800aab8:	18bc      	adds	r4, r7, r2
 800aaba:	197b      	adds	r3, r7, r5
 800aabc:	881a      	ldrh	r2, [r3, #0]
 800aabe:	19bb      	adds	r3, r7, r6
 800aac0:	0019      	movs	r1, r3
 800aac2:	2069      	movs	r0, #105	@ 0x69
 800aac4:	f001 f9fc 	bl	800bec0 <sensirion_i2c_write_data>
 800aac8:	0003      	movs	r3, r0
 800aaca:	8023      	strh	r3, [r4, #0]
    if (error) {
 800aacc:	2214      	movs	r2, #20
 800aace:	18bb      	adds	r3, r7, r2
 800aad0:	2100      	movs	r1, #0
 800aad2:	5e5b      	ldrsh	r3, [r3, r1]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800aad8:	18bb      	adds	r3, r7, r2
 800aada:	2200      	movs	r2, #0
 800aadc:	5e9b      	ldrsh	r3, [r3, r2]
 800aade:	e004      	b.n	800aaea <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800aae0:	4b05      	ldr	r3, [pc, #20]	@ (800aaf8 <sen5x_set_temperature_offset_parameters+0xc4>)
 800aae2:	0018      	movs	r0, r3
 800aae4:	f7ff fbf4 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	0018      	movs	r0, r3
 800aaec:	46bd      	mov	sp, r7
 800aaee:	b007      	add	sp, #28
 800aaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaf2:	46c0      	nop			@ (mov r8, r8)
 800aaf4:	000060b2 	.word	0x000060b2
 800aaf8:	00004e20 	.word	0x00004e20

0800aafc <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aafe:	b091      	sub	sp, #68	@ 0x44
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	000a      	movs	r2, r1
 800ab06:	1cfb      	adds	r3, r7, #3
 800ab08:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ab0a:	253e      	movs	r5, #62	@ 0x3e
 800ab0c:	197b      	adds	r3, r7, r5
 800ab0e:	2200      	movs	r2, #0
 800ab10:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800ab12:	197c      	adds	r4, r7, r5
 800ab14:	4a22      	ldr	r2, [pc, #136]	@ (800aba0 <sen5x_get_product_name+0xa4>)
 800ab16:	197b      	adds	r3, r7, r5
 800ab18:	8819      	ldrh	r1, [r3, #0]
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	18fb      	adds	r3, r7, r3
 800ab1e:	0018      	movs	r0, r3
 800ab20:	f001 f94a 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800ab24:	0003      	movs	r3, r0
 800ab26:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ab28:	263c      	movs	r6, #60	@ 0x3c
 800ab2a:	19bc      	adds	r4, r7, r6
 800ab2c:	197b      	adds	r3, r7, r5
 800ab2e:	881a      	ldrh	r2, [r3, #0]
 800ab30:	230c      	movs	r3, #12
 800ab32:	18fb      	adds	r3, r7, r3
 800ab34:	0019      	movs	r1, r3
 800ab36:	2069      	movs	r0, #105	@ 0x69
 800ab38:	f001 f9c2 	bl	800bec0 <sensirion_i2c_write_data>
 800ab3c:	0003      	movs	r3, r0
 800ab3e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ab40:	19bb      	adds	r3, r7, r6
 800ab42:	2200      	movs	r2, #0
 800ab44:	5e9b      	ldrsh	r3, [r3, r2]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <sen5x_get_product_name+0x56>
        return error;
 800ab4a:	19bb      	adds	r3, r7, r6
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ab50:	e021      	b.n	800ab96 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ab52:	4b14      	ldr	r3, [pc, #80]	@ (800aba4 <sen5x_get_product_name+0xa8>)
 800ab54:	0018      	movs	r0, r3
 800ab56:	f7ff fbbb 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ab5a:	253c      	movs	r5, #60	@ 0x3c
 800ab5c:	197c      	adds	r4, r7, r5
 800ab5e:	230c      	movs	r3, #12
 800ab60:	18fb      	adds	r3, r7, r3
 800ab62:	2220      	movs	r2, #32
 800ab64:	0019      	movs	r1, r3
 800ab66:	2069      	movs	r0, #105	@ 0x69
 800ab68:	f001 f9c2 	bl	800bef0 <sensirion_i2c_read_data_inplace>
 800ab6c:	0003      	movs	r3, r0
 800ab6e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ab70:	197b      	adds	r3, r7, r5
 800ab72:	2200      	movs	r2, #0
 800ab74:	5e9b      	ldrsh	r3, [r3, r2]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <sen5x_get_product_name+0x86>
        return error;
 800ab7a:	197b      	adds	r3, r7, r5
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	5e9b      	ldrsh	r3, [r3, r2]
 800ab80:	e009      	b.n	800ab96 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800ab82:	1cfb      	adds	r3, r7, #3
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	6879      	ldr	r1, [r7, #4]
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	18fb      	adds	r3, r7, r3
 800ab8e:	0018      	movs	r0, r3
 800ab90:	f000 f988 	bl	800aea4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	0018      	movs	r0, r3
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	b011      	add	sp, #68	@ 0x44
 800ab9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab9e:	46c0      	nop			@ (mov r8, r8)
 800aba0:	0000d014 	.word	0x0000d014
 800aba4:	0000c350 	.word	0x0000c350

0800aba8 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800aba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abaa:	b091      	sub	sp, #68	@ 0x44
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	000a      	movs	r2, r1
 800abb2:	1cfb      	adds	r3, r7, #3
 800abb4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800abb6:	253e      	movs	r5, #62	@ 0x3e
 800abb8:	197b      	adds	r3, r7, r5
 800abba:	2200      	movs	r2, #0
 800abbc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800abbe:	197c      	adds	r4, r7, r5
 800abc0:	4a22      	ldr	r2, [pc, #136]	@ (800ac4c <sen5x_get_serial_number+0xa4>)
 800abc2:	197b      	adds	r3, r7, r5
 800abc4:	8819      	ldrh	r1, [r3, #0]
 800abc6:	230c      	movs	r3, #12
 800abc8:	18fb      	adds	r3, r7, r3
 800abca:	0018      	movs	r0, r3
 800abcc:	f001 f8f4 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800abd0:	0003      	movs	r3, r0
 800abd2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800abd4:	263c      	movs	r6, #60	@ 0x3c
 800abd6:	19bc      	adds	r4, r7, r6
 800abd8:	197b      	adds	r3, r7, r5
 800abda:	881a      	ldrh	r2, [r3, #0]
 800abdc:	230c      	movs	r3, #12
 800abde:	18fb      	adds	r3, r7, r3
 800abe0:	0019      	movs	r1, r3
 800abe2:	2069      	movs	r0, #105	@ 0x69
 800abe4:	f001 f96c 	bl	800bec0 <sensirion_i2c_write_data>
 800abe8:	0003      	movs	r3, r0
 800abea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800abec:	19bb      	adds	r3, r7, r6
 800abee:	2200      	movs	r2, #0
 800abf0:	5e9b      	ldrsh	r3, [r3, r2]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <sen5x_get_serial_number+0x56>
        return error;
 800abf6:	19bb      	adds	r3, r7, r6
 800abf8:	2200      	movs	r2, #0
 800abfa:	5e9b      	ldrsh	r3, [r3, r2]
 800abfc:	e021      	b.n	800ac42 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800abfe:	4b14      	ldr	r3, [pc, #80]	@ (800ac50 <sen5x_get_serial_number+0xa8>)
 800ac00:	0018      	movs	r0, r3
 800ac02:	f7ff fb65 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ac06:	253c      	movs	r5, #60	@ 0x3c
 800ac08:	197c      	adds	r4, r7, r5
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	18fb      	adds	r3, r7, r3
 800ac0e:	2220      	movs	r2, #32
 800ac10:	0019      	movs	r1, r3
 800ac12:	2069      	movs	r0, #105	@ 0x69
 800ac14:	f001 f96c 	bl	800bef0 <sensirion_i2c_read_data_inplace>
 800ac18:	0003      	movs	r3, r0
 800ac1a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ac1c:	197b      	adds	r3, r7, r5
 800ac1e:	2200      	movs	r2, #0
 800ac20:	5e9b      	ldrsh	r3, [r3, r2]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <sen5x_get_serial_number+0x86>
        return error;
 800ac26:	197b      	adds	r3, r7, r5
 800ac28:	2200      	movs	r2, #0
 800ac2a:	5e9b      	ldrsh	r3, [r3, r2]
 800ac2c:	e009      	b.n	800ac42 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800ac2e:	1cfb      	adds	r3, r7, #3
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	230c      	movs	r3, #12
 800ac38:	18fb      	adds	r3, r7, r3
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	f000 f932 	bl	800aea4 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	0018      	movs	r0, r3
 800ac44:	46bd      	mov	sp, r7
 800ac46:	b011      	add	sp, #68	@ 0x44
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	46c0      	nop			@ (mov r8, r8)
 800ac4c:	0000d033 	.word	0x0000d033
 800ac50:	0000c350 	.word	0x0000c350

0800ac54 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac56:	b089      	sub	sp, #36	@ 0x24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
 800ac60:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800ac62:	251e      	movs	r5, #30
 800ac64:	197b      	adds	r3, r7, r5
 800ac66:	2200      	movs	r2, #0
 800ac68:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800ac6a:	197c      	adds	r4, r7, r5
 800ac6c:	23d1      	movs	r3, #209	@ 0xd1
 800ac6e:	021a      	lsls	r2, r3, #8
 800ac70:	197b      	adds	r3, r7, r5
 800ac72:	8819      	ldrh	r1, [r3, #0]
 800ac74:	2310      	movs	r3, #16
 800ac76:	18fb      	adds	r3, r7, r3
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f001 f89d 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ac82:	261c      	movs	r6, #28
 800ac84:	19bc      	adds	r4, r7, r6
 800ac86:	197b      	adds	r3, r7, r5
 800ac88:	881a      	ldrh	r2, [r3, #0]
 800ac8a:	2310      	movs	r3, #16
 800ac8c:	18fb      	adds	r3, r7, r3
 800ac8e:	0019      	movs	r1, r3
 800ac90:	2069      	movs	r0, #105	@ 0x69
 800ac92:	f001 f915 	bl	800bec0 <sensirion_i2c_write_data>
 800ac96:	0003      	movs	r3, r0
 800ac98:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ac9a:	19bb      	adds	r3, r7, r6
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	5e9b      	ldrsh	r3, [r3, r2]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d003      	beq.n	800acac <sen5x_get_version+0x58>
        return error;
 800aca4:	19bb      	adds	r3, r7, r6
 800aca6:	2200      	movs	r2, #0
 800aca8:	5e9b      	ldrsh	r3, [r3, r2]
 800acaa:	e038      	b.n	800ad1e <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800acac:	4b1e      	ldr	r3, [pc, #120]	@ (800ad28 <sen5x_get_version+0xd4>)
 800acae:	0018      	movs	r0, r3
 800acb0:	f7ff fb0e 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800acb4:	251c      	movs	r5, #28
 800acb6:	197c      	adds	r4, r7, r5
 800acb8:	2310      	movs	r3, #16
 800acba:	18fb      	adds	r3, r7, r3
 800acbc:	2208      	movs	r2, #8
 800acbe:	0019      	movs	r1, r3
 800acc0:	2069      	movs	r0, #105	@ 0x69
 800acc2:	f001 f915 	bl	800bef0 <sensirion_i2c_read_data_inplace>
 800acc6:	0003      	movs	r3, r0
 800acc8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800acca:	197b      	adds	r3, r7, r5
 800accc:	2200      	movs	r2, #0
 800acce:	5e9b      	ldrsh	r3, [r3, r2]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <sen5x_get_version+0x88>
        return error;
 800acd4:	197b      	adds	r3, r7, r5
 800acd6:	2200      	movs	r2, #0
 800acd8:	5e9b      	ldrsh	r3, [r3, r2]
 800acda:	e020      	b.n	800ad1e <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800acdc:	2110      	movs	r1, #16
 800acde:	187b      	adds	r3, r7, r1
 800ace0:	781a      	ldrb	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800ace6:	187b      	adds	r3, r7, r1
 800ace8:	785a      	ldrb	r2, [r3, #1]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800acee:	187b      	adds	r3, r7, r1
 800acf0:	789b      	ldrb	r3, [r3, #2]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	4193      	sbcs	r3, r2
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800acfc:	187b      	adds	r3, r7, r1
 800acfe:	78da      	ldrb	r2, [r3, #3]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800ad04:	187b      	adds	r3, r7, r1
 800ad06:	791a      	ldrb	r2, [r3, #4]
 800ad08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800ad0c:	187b      	adds	r3, r7, r1
 800ad0e:	795a      	ldrb	r2, [r3, #5]
 800ad10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad12:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800ad14:	187b      	adds	r3, r7, r1
 800ad16:	799a      	ldrb	r2, [r3, #6]
 800ad18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad1a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	0018      	movs	r0, r3
 800ad20:	46bd      	mov	sp, r7
 800ad22:	b009      	add	sp, #36	@ 0x24
 800ad24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	00004e20 	.word	0x00004e20

0800ad2c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800ad34:	2516      	movs	r5, #22
 800ad36:	197b      	adds	r3, r7, r5
 800ad38:	2200      	movs	r2, #0
 800ad3a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800ad3c:	197c      	adds	r4, r7, r5
 800ad3e:	4a22      	ldr	r2, [pc, #136]	@ (800adc8 <sen5x_read_device_status+0x9c>)
 800ad40:	197b      	adds	r3, r7, r5
 800ad42:	8819      	ldrh	r1, [r3, #0]
 800ad44:	230c      	movs	r3, #12
 800ad46:	18fb      	adds	r3, r7, r3
 800ad48:	0018      	movs	r0, r3
 800ad4a:	f001 f835 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800ad4e:	0003      	movs	r3, r0
 800ad50:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ad52:	2614      	movs	r6, #20
 800ad54:	19bc      	adds	r4, r7, r6
 800ad56:	197b      	adds	r3, r7, r5
 800ad58:	881a      	ldrh	r2, [r3, #0]
 800ad5a:	230c      	movs	r3, #12
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	0019      	movs	r1, r3
 800ad60:	2069      	movs	r0, #105	@ 0x69
 800ad62:	f001 f8ad 	bl	800bec0 <sensirion_i2c_write_data>
 800ad66:	0003      	movs	r3, r0
 800ad68:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ad6a:	19bb      	adds	r3, r7, r6
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	5e9b      	ldrsh	r3, [r3, r2]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d003      	beq.n	800ad7c <sen5x_read_device_status+0x50>
        return error;
 800ad74:	19bb      	adds	r3, r7, r6
 800ad76:	2200      	movs	r2, #0
 800ad78:	5e9b      	ldrsh	r3, [r3, r2]
 800ad7a:	e020      	b.n	800adbe <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ad7c:	4b13      	ldr	r3, [pc, #76]	@ (800adcc <sen5x_read_device_status+0xa0>)
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f7ff faa6 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800ad84:	2514      	movs	r5, #20
 800ad86:	197c      	adds	r4, r7, r5
 800ad88:	230c      	movs	r3, #12
 800ad8a:	18fb      	adds	r3, r7, r3
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	0019      	movs	r1, r3
 800ad90:	2069      	movs	r0, #105	@ 0x69
 800ad92:	f001 f8ad 	bl	800bef0 <sensirion_i2c_read_data_inplace>
 800ad96:	0003      	movs	r3, r0
 800ad98:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ad9a:	197b      	adds	r3, r7, r5
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	5e9b      	ldrsh	r3, [r3, r2]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d003      	beq.n	800adac <sen5x_read_device_status+0x80>
        return error;
 800ada4:	197b      	adds	r3, r7, r5
 800ada6:	2200      	movs	r2, #0
 800ada8:	5e9b      	ldrsh	r3, [r3, r2]
 800adaa:	e008      	b.n	800adbe <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800adac:	230c      	movs	r3, #12
 800adae:	18fb      	adds	r3, r7, r3
 800adb0:	0018      	movs	r0, r3
 800adb2:	f000 f850 	bl	800ae56 <sensirion_common_bytes_to_uint32_t>
 800adb6:	0002      	movs	r2, r0
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	0018      	movs	r0, r3
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b007      	add	sp, #28
 800adc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc6:	46c0      	nop			@ (mov r8, r8)
 800adc8:	0000d206 	.word	0x0000d206
 800adcc:	00004e20 	.word	0x00004e20

0800add0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800add0:	b590      	push	{r4, r7, lr}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800add6:	1dbb      	adds	r3, r7, #6
 800add8:	2200      	movs	r2, #0
 800adda:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800addc:	1dbc      	adds	r4, r7, #6
 800adde:	4a12      	ldr	r2, [pc, #72]	@ (800ae28 <sen5x_device_reset+0x58>)
 800ade0:	1dbb      	adds	r3, r7, #6
 800ade2:	8819      	ldrh	r1, [r3, #0]
 800ade4:	003b      	movs	r3, r7
 800ade6:	0018      	movs	r0, r3
 800ade8:	f000 ffe6 	bl	800bdb8 <sensirion_i2c_add_command_to_buffer>
 800adec:	0003      	movs	r3, r0
 800adee:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800adf0:	1d3c      	adds	r4, r7, #4
 800adf2:	1dbb      	adds	r3, r7, #6
 800adf4:	881a      	ldrh	r2, [r3, #0]
 800adf6:	003b      	movs	r3, r7
 800adf8:	0019      	movs	r1, r3
 800adfa:	2069      	movs	r0, #105	@ 0x69
 800adfc:	f001 f860 	bl	800bec0 <sensirion_i2c_write_data>
 800ae00:	0003      	movs	r3, r0
 800ae02:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ae04:	1d3b      	adds	r3, r7, #4
 800ae06:	2200      	movs	r2, #0
 800ae08:	5e9b      	ldrsh	r3, [r3, r2]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <sen5x_device_reset+0x46>
        return error;
 800ae0e:	1d3b      	adds	r3, r7, #4
 800ae10:	2200      	movs	r2, #0
 800ae12:	5e9b      	ldrsh	r3, [r3, r2]
 800ae14:	e004      	b.n	800ae20 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800ae16:	4b05      	ldr	r3, [pc, #20]	@ (800ae2c <sen5x_device_reset+0x5c>)
 800ae18:	0018      	movs	r0, r3
 800ae1a:	f7ff fa59 	bl	800a2d0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	0018      	movs	r0, r3
 800ae22:	46bd      	mov	sp, r7
 800ae24:	b003      	add	sp, #12
 800ae26:	bd90      	pop	{r4, r7, pc}
 800ae28:	0000d304 	.word	0x0000d304
 800ae2c:	00030d40 	.word	0x00030d40

0800ae30 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	021b      	lsls	r3, r3, #8
 800ae3e:	b21a      	sxth	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3301      	adds	r3, #1
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	b21b      	sxth	r3, r3
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	b21b      	sxth	r3, r3
 800ae4c:	b29b      	uxth	r3, r3
}
 800ae4e:	0018      	movs	r0, r3
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b002      	add	sp, #8
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	061a      	lsls	r2, r3, #24
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3301      	adds	r3, #1
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	041b      	lsls	r3, r3, #16
 800ae6c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	3302      	adds	r3, #2
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800ae76:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	3203      	adds	r2, #3
 800ae7c:	7812      	ldrb	r2, [r2, #0]
 800ae7e:	4313      	orrs	r3, r2
}
 800ae80:	0018      	movs	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b002      	add	sp, #8
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	0018      	movs	r0, r3
 800ae94:	f7ff ffcc 	bl	800ae30 <sensirion_common_bytes_to_uint16_t>
 800ae98:	0003      	movs	r3, r0
 800ae9a:	b21b      	sxth	r3, r3
}
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	b002      	add	sp, #8
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	1dbb      	adds	r3, r7, #6
 800aeb0:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800aeb2:	2316      	movs	r3, #22
 800aeb4:	18fb      	adds	r3, r7, r3
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	801a      	strh	r2, [r3, #0]
 800aeba:	e00f      	b.n	800aedc <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800aebc:	2016      	movs	r0, #22
 800aebe:	183b      	adds	r3, r7, r0
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	18d2      	adds	r2, r2, r3
 800aec6:	183b      	adds	r3, r7, r0
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	68b9      	ldr	r1, [r7, #8]
 800aecc:	18cb      	adds	r3, r1, r3
 800aece:	7812      	ldrb	r2, [r2, #0]
 800aed0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800aed2:	183b      	adds	r3, r7, r0
 800aed4:	881a      	ldrh	r2, [r3, #0]
 800aed6:	183b      	adds	r3, r7, r0
 800aed8:	3201      	adds	r2, #1
 800aeda:	801a      	strh	r2, [r3, #0]
 800aedc:	2316      	movs	r3, #22
 800aede:	18fa      	adds	r2, r7, r3
 800aee0:	1dbb      	adds	r3, r7, #6
 800aee2:	8812      	ldrh	r2, [r2, #0]
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d3e8      	bcc.n	800aebc <sensirion_common_copy_bytes+0x18>
    }
}
 800aeea:	46c0      	nop			@ (mov r8, r8)
 800aeec:	46c0      	nop			@ (mov r8, r8)
 800aeee:	46bd      	mov	sp, r7
 800aef0:	b006      	add	sp, #24
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d113      	bne.n	800af3a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	22fe      	movs	r2, #254	@ 0xfe
 800af16:	0592      	lsls	r2, r2, #22
 800af18:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4a1a      	ldr	r2, [pc, #104]	@ (800af88 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800af1e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4a1a      	ldr	r2, [pc, #104]	@ (800af8c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800af24:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	4a19      	ldr	r2, [pc, #100]	@ (800af90 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800af2a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4a19      	ldr	r2, [pc, #100]	@ (800af94 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800af30:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	4a18      	ldr	r2, [pc, #96]	@ (800af98 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800af36:	61da      	str	r2, [r3, #28]
 800af38:	e011      	b.n	800af5e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	4a17      	ldr	r2, [pc, #92]	@ (800af9c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800af3e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4a17      	ldr	r2, [pc, #92]	@ (800afa0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800af44:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	4a16      	ldr	r2, [pc, #88]	@ (800afa4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800af4a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4a16      	ldr	r2, [pc, #88]	@ (800afa8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800af50:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4a15      	ldr	r2, [pc, #84]	@ (800afac <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800af56:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4a15      	ldr	r2, [pc, #84]	@ (800afb0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800af5c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	4a14      	ldr	r2, [pc, #80]	@ (800afb4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800af62:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4a14      	ldr	r2, [pc, #80]	@ (800afb8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800af68:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	4a12      	ldr	r2, [pc, #72]	@ (800afb8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800af6e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4a12      	ldr	r2, [pc, #72]	@ (800afbc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800af74:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	0018      	movs	r0, r3
 800af7a:	f000 f833 	bl	800afe4 <GasIndexAlgorithm_reset>
}
 800af7e:	46c0      	nop			@ (mov r8, r8)
 800af80:	46bd      	mov	sp, r7
 800af82:	b004      	add	sp, #16
 800af84:	bd80      	pop	{r7, pc}
 800af86:	46c0      	nop			@ (mov r8, r8)
 800af88:	00002710 	.word	0x00002710
 800af8c:	44340000 	.word	0x44340000
 800af90:	46859800 	.word	0x46859800
 800af94:	46a05000 	.word	0x46a05000
 800af98:	41f00000 	.word	0x41f00000
 800af9c:	42c80000 	.word	0x42c80000
 800afa0:	00004e20 	.word	0x00004e20
 800afa4:	43340000 	.word	0x43340000
 800afa8:	4528c000 	.word	0x4528c000
 800afac:	45a32000 	.word	0x45a32000
 800afb0:	43aa0000 	.word	0x43aa0000
 800afb4:	43660000 	.word	0x43660000
 800afb8:	41400000 	.word	0x41400000
 800afbc:	42480000 	.word	0x42480000

0800afc0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800afca:	4a05      	ldr	r2, [pc, #20]	@ (800afe0 <GasIndexAlgorithm_init+0x20>)
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	0018      	movs	r0, r3
 800afd2:	f7ff ff8f 	bl	800aef4 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800afd6:	46c0      	nop			@ (mov r8, r8)
 800afd8:	46bd      	mov	sp, r7
 800afda:	b002      	add	sp, #8
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	46c0      	nop			@ (mov r8, r8)
 800afe0:	44610000 	.word	0x44610000

0800afe4 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2200      	movs	r2, #0
 800affc:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	0018      	movs	r0, r3
 800b002:	f000 f805 	bl	800b010 <GasIndexAlgorithm__init_instances>
}
 800b006:	46c0      	nop			@ (mov r8, r8)
 800b008:	46bd      	mov	sp, r7
 800b00a:	b002      	add	sp, #8
 800b00c:	bd80      	pop	{r7, pc}
	...

0800b010 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	0018      	movs	r0, r3
 800b01c:	f000 f8e8 	bl	800b1f0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	0018      	movs	r0, r3
 800b024:	f000 f9a6 	bl	800b374 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800b028:	1c04      	adds	r4, r0, #0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	0018      	movs	r0, r3
 800b02e:	f000 f9ab 	bl	800b388 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800b032:	1c02      	adds	r2, r0, #0
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	1c21      	adds	r1, r4, #0
 800b038:	0018      	movs	r0, r3
 800b03a:	f000 fc3b 	bl	800b8b4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d107      	bne.n	800b056 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800b046:	23fe      	movs	r3, #254	@ 0xfe
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	4a0a      	ldr	r2, [pc, #40]	@ (800b074 <GasIndexAlgorithm__init_instances+0x64>)
 800b04c:	490a      	ldr	r1, [pc, #40]	@ (800b078 <GasIndexAlgorithm__init_instances+0x68>)
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fc86 	bl	800b960 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800b054:	e005      	b.n	800b062 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800b056:	4b09      	ldr	r3, [pc, #36]	@ (800b07c <GasIndexAlgorithm__init_instances+0x6c>)
 800b058:	4a09      	ldr	r2, [pc, #36]	@ (800b080 <GasIndexAlgorithm__init_instances+0x70>)
 800b05a:	490a      	ldr	r1, [pc, #40]	@ (800b084 <GasIndexAlgorithm__init_instances+0x74>)
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fc7f 	bl	800b960 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	0018      	movs	r0, r3
 800b066:	f000 fd35 	bl	800bad4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800b06a:	46c0      	nop			@ (mov r8, r8)
 800b06c:	46bd      	mov	sp, r7
 800b06e:	b003      	add	sp, #12
 800b070:	bd90      	pop	{r4, r7, pc}
 800b072:	46c0      	nop			@ (mov r8, r8)
 800b074:	bc257a78 	.word	0xbc257a78
 800b078:	44198000 	.word	0x44198000
 800b07c:	42c80000 	.word	0x42c80000
 800b080:	bbd4fdf4 	.word	0xbbd4fdf4
 800b084:	43550000 	.word	0x43550000

0800b088 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800b088:	b590      	push	{r4, r7, lr}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b098:	4952      	ldr	r1, [pc, #328]	@ (800b1e4 <GasIndexAlgorithm_process+0x15c>)
 800b09a:	1c18      	adds	r0, r3, #0
 800b09c:	f7f5 fa52 	bl	8000544 <__aeabi_fcmple>
 800b0a0:	1e03      	subs	r3, r0, #0
 800b0a2:	d00c      	beq.n	800b0be <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	1c19      	adds	r1, r3, #0
 800b0ae:	1c10      	adds	r0, r2, #0
 800b0b0:	f7f5 fc06 	bl	80008c0 <__aeabi_fadd>
 800b0b4:	1c03      	adds	r3, r0, #0
 800b0b6:	1c1a      	adds	r2, r3, #0
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0bc:	e080      	b.n	800b1c0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dd25      	ble.n	800b110 <GasIndexAlgorithm_process+0x88>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	4a48      	ldr	r2, [pc, #288]	@ (800b1e8 <GasIndexAlgorithm_process+0x160>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	dc21      	bgt.n	800b110 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	dc04      	bgt.n	800b0e0 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	60bb      	str	r3, [r7, #8]
 800b0de:	e00d      	b.n	800b0fc <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	4a41      	ldr	r2, [pc, #260]	@ (800b1ec <GasIndexAlgorithm_process+0x164>)
 800b0e6:	4694      	mov	ip, r2
 800b0e8:	4463      	add	r3, ip
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	dd05      	ble.n	800b0fc <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	4a3d      	ldr	r2, [pc, #244]	@ (800b1ec <GasIndexAlgorithm_process+0x164>)
 800b0f6:	4694      	mov	ip, r2
 800b0f8:	4463      	add	r3, ip
 800b0fa:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	0018      	movs	r0, r3
 800b106:	f7f6 fa63 	bl	80015d0 <__aeabi_i2f>
 800b10a:	1c02      	adds	r2, r0, #0
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d005      	beq.n	800b124 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	0018      	movs	r0, r3
 800b11c:	f000 f945 	bl	800b3aa <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800b120:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800b122:	d014      	beq.n	800b14e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	1c11      	adds	r1, r2, #0
 800b12c:	0018      	movs	r0, r3
 800b12e:	f000 fbd1 	bl	800b8d4 <GasIndexAlgorithm__mox_model__process>
 800b132:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	1c11      	adds	r1, r2, #0
 800b140:	0018      	movs	r0, r3
 800b142:	f000 fc25 	bl	800b990 <GasIndexAlgorithm__sigmoid_scaled__process>
 800b146:	1c02      	adds	r2, r0, #0
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b14c:	e003      	b.n	800b156 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	689a      	ldr	r2, [r3, #8]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	1c11      	adds	r1, r2, #0
 800b15e:	0018      	movs	r0, r3
 800b160:	f000 fcec 	bl	800bb3c <GasIndexAlgorithm__adaptive_lowpass__process>
 800b164:	1c02      	adds	r2, r0, #0
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16e:	21fc      	movs	r1, #252	@ 0xfc
 800b170:	0589      	lsls	r1, r1, #22
 800b172:	1c18      	adds	r0, r3, #0
 800b174:	f7f5 f9dc 	bl	8000530 <__aeabi_fcmplt>
 800b178:	1e03      	subs	r3, r0, #0
 800b17a:	d003      	beq.n	800b184 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	22fc      	movs	r2, #252	@ 0xfc
 800b180:	0592      	lsls	r2, r2, #22
 800b182:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b188:	2100      	movs	r1, #0
 800b18a:	1c18      	adds	r0, r3, #0
 800b18c:	f7f5 f9e4 	bl	8000558 <__aeabi_fcmpgt>
 800b190:	1e03      	subs	r3, r0, #0
 800b192:	d015      	beq.n	800b1c0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	1c11      	adds	r1, r2, #0
 800b19c:	0018      	movs	r0, r3
 800b19e:	f000 fa4f 	bl	800b640 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	f000 f8e5 	bl	800b374 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800b1aa:	1c04      	adds	r4, r0, #0
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	f000 f8ea 	bl	800b388 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800b1b4:	1c02      	adds	r2, r0, #0
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	1c21      	adds	r1, r4, #0
 800b1ba:	0018      	movs	r0, r3
 800b1bc:	f000 fb7a 	bl	800b8b4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c4:	21fc      	movs	r1, #252	@ 0xfc
 800b1c6:	0589      	lsls	r1, r1, #22
 800b1c8:	1c18      	adds	r0, r3, #0
 800b1ca:	f7f5 fb79 	bl	80008c0 <__aeabi_fadd>
 800b1ce:	1c03      	adds	r3, r0, #0
 800b1d0:	1c18      	adds	r0, r3, #0
 800b1d2:	f7f6 f9dd 	bl	8001590 <__aeabi_f2iz>
 800b1d6:	0002      	movs	r2, r0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	601a      	str	r2, [r3, #0]
    return;
 800b1dc:	46c0      	nop			@ (mov r8, r8)
}
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	b005      	add	sp, #20
 800b1e2:	bd90      	pop	{r4, r7, pc}
 800b1e4:	42340000 	.word	0x42340000
 800b1e8:	0000fde7 	.word	0x0000fde7
 800b1ec:	00007fff 	.word	0x00007fff

0800b1f0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b1f0:	b5b0      	push	{r4, r5, r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	223c      	movs	r2, #60	@ 0x3c
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4952      	ldr	r1, [pc, #328]	@ (800b364 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b21a:	1c18      	adds	r0, r3, #0
 800b21c:	f7f5 fcda 	bl	8000bd4 <__aeabi_fdiv>
 800b220:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800b222:	2188      	movs	r1, #136	@ 0x88
 800b224:	05c9      	lsls	r1, r1, #23
 800b226:	1c18      	adds	r0, r3, #0
 800b228:	f7f5 feba 	bl	8000fa0 <__aeabi_fmul>
 800b22c:	1c03      	adds	r3, r0, #0
 800b22e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	494a      	ldr	r1, [pc, #296]	@ (800b364 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b23a:	1c18      	adds	r0, r3, #0
 800b23c:	f7f5 fcca 	bl	8000bd4 <__aeabi_fdiv>
 800b240:	1c03      	adds	r3, r0, #0
 800b242:	1c19      	adds	r1, r3, #0
 800b244:	1c20      	adds	r0, r4, #0
 800b246:	f7f5 fb3b 	bl	80008c0 <__aeabi_fadd>
 800b24a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800b24c:	1c19      	adds	r1, r3, #0
 800b24e:	1c28      	adds	r0, r5, #0
 800b250:	f7f5 fcc0 	bl	8000bd4 <__aeabi_fdiv>
 800b254:	1c03      	adds	r3, r0, #0
 800b256:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	4940      	ldr	r1, [pc, #256]	@ (800b364 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b262:	1c18      	adds	r0, r3, #0
 800b264:	f7f5 fcb6 	bl	8000bd4 <__aeabi_fdiv>
 800b268:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b26a:	2185      	movs	r1, #133	@ 0x85
 800b26c:	05c9      	lsls	r1, r1, #23
 800b26e:	1c18      	adds	r0, r3, #0
 800b270:	f7f5 fe96 	bl	8000fa0 <__aeabi_fmul>
 800b274:	1c03      	adds	r3, r0, #0
 800b276:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	4938      	ldr	r1, [pc, #224]	@ (800b364 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800b282:	1c18      	adds	r0, r3, #0
 800b284:	f7f5 fca6 	bl	8000bd4 <__aeabi_fdiv>
 800b288:	1c03      	adds	r3, r0, #0
 800b28a:	1c19      	adds	r1, r3, #0
 800b28c:	1c20      	adds	r0, r4, #0
 800b28e:	f7f5 fb17 	bl	80008c0 <__aeabi_fadd>
 800b292:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800b294:	1c19      	adds	r1, r3, #0
 800b296:	1c28      	adds	r0, r5, #0
 800b298:	f7f5 fc9c 	bl	8000bd4 <__aeabi_fdiv>
 800b29c:	1c03      	adds	r3, r0, #0
 800b29e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d118      	bne.n	800b2de <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800b2b0:	2188      	movs	r1, #136	@ 0x88
 800b2b2:	05c9      	lsls	r1, r1, #23
 800b2b4:	1c18      	adds	r0, r3, #0
 800b2b6:	f7f5 fe73 	bl	8000fa0 <__aeabi_fmul>
 800b2ba:	1c03      	adds	r3, r0, #0
 800b2bc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800b2c2:	4929      	ldr	r1, [pc, #164]	@ (800b368 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800b2c4:	1c18      	adds	r0, r3, #0
 800b2c6:	f7f5 fafb 	bl	80008c0 <__aeabi_fadd>
 800b2ca:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800b2cc:	1c19      	adds	r1, r3, #0
 800b2ce:	1c20      	adds	r0, r4, #0
 800b2d0:	f7f5 fc80 	bl	8000bd4 <__aeabi_fdiv>
 800b2d4:	1c03      	adds	r3, r0, #0
 800b2d6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	655a      	str	r2, [r3, #84]	@ 0x54
 800b2dc:	e017      	b.n	800b30e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800b2e2:	2188      	movs	r1, #136	@ 0x88
 800b2e4:	05c9      	lsls	r1, r1, #23
 800b2e6:	1c18      	adds	r0, r3, #0
 800b2e8:	f7f5 fe5a 	bl	8000fa0 <__aeabi_fmul>
 800b2ec:	1c03      	adds	r3, r0, #0
 800b2ee:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800b2f4:	491d      	ldr	r1, [pc, #116]	@ (800b36c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800b2f6:	1c18      	adds	r0, r3, #0
 800b2f8:	f7f5 fae2 	bl	80008c0 <__aeabi_fadd>
 800b2fc:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800b2fe:	1c19      	adds	r1, r3, #0
 800b300:	1c20      	adds	r0, r4, #0
 800b302:	f7f5 fc67 	bl	8000bd4 <__aeabi_fdiv>
 800b306:	1c03      	adds	r3, r0, #0
 800b308:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b312:	2185      	movs	r1, #133	@ 0x85
 800b314:	05c9      	lsls	r1, r1, #23
 800b316:	1c18      	adds	r0, r3, #0
 800b318:	f7f5 fe42 	bl	8000fa0 <__aeabi_fmul>
 800b31c:	1c03      	adds	r3, r0, #0
 800b31e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	4912      	ldr	r1, [pc, #72]	@ (800b370 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800b326:	1c18      	adds	r0, r3, #0
 800b328:	f7f5 faca 	bl	80008c0 <__aeabi_fadd>
 800b32c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800b32e:	1c19      	adds	r1, r3, #0
 800b330:	1c20      	adds	r0, r4, #0
 800b332:	f7f5 fc4f 	bl	8000bd4 <__aeabi_fdiv>
 800b336:	1c03      	adds	r3, r0, #0
 800b338:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800b35c:	46c0      	nop			@ (mov r8, r8)
 800b35e:	46bd      	mov	sp, r7
 800b360:	b002      	add	sp, #8
 800b362:	bdb0      	pop	{r4, r5, r7, pc}
 800b364:	45610000 	.word	0x45610000
 800b368:	44960000 	.word	0x44960000
 800b36c:	41a00000 	.word	0x41a00000
 800b370:	451c4000 	.word	0x451c4000

0800b374 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800b380:	1c18      	adds	r0, r3, #0
 800b382:	46bd      	mov	sp, r7
 800b384:	b002      	add	sp, #8
 800b386:	bd80      	pop	{r7, pc}

0800b388 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800b398:	1c19      	adds	r1, r3, #0
 800b39a:	1c10      	adds	r0, r2, #0
 800b39c:	f7f5 fa90 	bl	80008c0 <__aeabi_fadd>
 800b3a0:	1c03      	adds	r3, r0, #0
}
 800b3a2:	1c18      	adds	r0, r3, #0
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	b002      	add	sp, #8
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	223c      	movs	r2, #60	@ 0x3c
 800b3b6:	5c9b      	ldrb	r3, [r3, r2]
}
 800b3b8:	0018      	movs	r0, r3
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	b002      	add	sp, #8
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800b3c0:	b5b0      	push	{r4, r5, r7, lr}
 800b3c2:	b08c      	sub	sp, #48	@ 0x30
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800b3cc:	1c19      	adds	r1, r3, #0
 800b3ce:	4895      	ldr	r0, [pc, #596]	@ (800b624 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800b3d0:	f7f5 ff24 	bl	800121c <__aeabi_fsub>
 800b3d4:	1c03      	adds	r3, r0, #0
 800b3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3dc:	1c19      	adds	r1, r3, #0
 800b3de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b3e0:	f7f5 f8ba 	bl	8000558 <__aeabi_fcmpgt>
 800b3e4:	1e03      	subs	r3, r0, #0
 800b3e6:	d00b      	beq.n	800b400 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800b3f0:	1c19      	adds	r1, r3, #0
 800b3f2:	1c10      	adds	r0, r2, #0
 800b3f4:	f7f5 fa64 	bl	80008c0 <__aeabi_fadd>
 800b3f8:	1c03      	adds	r3, r0, #0
 800b3fa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b404:	1c19      	adds	r1, r3, #0
 800b406:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b408:	f7f5 f8a6 	bl	8000558 <__aeabi_fcmpgt>
 800b40c:	1e03      	subs	r3, r0, #0
 800b40e:	d00b      	beq.n	800b428 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800b418:	1c19      	adds	r1, r3, #0
 800b41a:	1c10      	adds	r0, r2, #0
 800b41c:	f7f5 fa50 	bl	80008c0 <__aeabi_fadd>
 800b420:	1c03      	adds	r3, r0, #0
 800b422:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6959      	ldr	r1, [r3, #20]
 800b42c:	4a7e      	ldr	r2, [pc, #504]	@ (800b628 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	0018      	movs	r0, r3
 800b432:	f000 f9f1 	bl	800b818 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	1c11      	adds	r1, r2, #0
 800b43e:	0018      	movs	r0, r3
 800b440:	f000 f9fa 	bl	800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b444:	1c03      	adds	r3, r0, #0
 800b446:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800b454:	1c19      	adds	r1, r3, #0
 800b456:	1c10      	adds	r0, r2, #0
 800b458:	f7f5 fee0 	bl	800121c <__aeabi_fsub>
 800b45c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800b45e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b460:	1c18      	adds	r0, r3, #0
 800b462:	f7f5 fd9d 	bl	8000fa0 <__aeabi_fmul>
 800b466:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800b468:	1c19      	adds	r1, r3, #0
 800b46a:	1c20      	adds	r0, r4, #0
 800b46c:	f7f5 fa28 	bl	80008c0 <__aeabi_fadd>
 800b470:	1c03      	adds	r3, r0, #0
 800b472:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800b47c:	1c19      	adds	r1, r3, #0
 800b47e:	486b      	ldr	r0, [pc, #428]	@ (800b62c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800b480:	f7f5 fecc 	bl	800121c <__aeabi_fsub>
 800b484:	1c03      	adds	r3, r0, #0
 800b486:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	1c11      	adds	r1, r2, #0
 800b490:	0018      	movs	r0, r3
 800b492:	f000 f9d1 	bl	800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b496:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800b498:	1c19      	adds	r1, r3, #0
 800b49a:	1c28      	adds	r0, r5, #0
 800b49c:	f7f5 fd80 	bl	8000fa0 <__aeabi_fmul>
 800b4a0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800b4a2:	1c19      	adds	r1, r3, #0
 800b4a4:	1c20      	adds	r0, r4, #0
 800b4a6:	f7f5 fa0b 	bl	80008c0 <__aeabi_fadd>
 800b4aa:	1c03      	adds	r3, r0, #0
 800b4ac:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b4ae:	4a60      	ldr	r2, [pc, #384]	@ (800b630 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800b4b0:	6a39      	ldr	r1, [r7, #32]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	f000 f9af 	bl	800b818 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	1c11      	adds	r1, r2, #0
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f000 f9b8 	bl	800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b4c8:	1c03      	adds	r3, r0, #0
 800b4ca:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800b4cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4ce:	69f8      	ldr	r0, [r7, #28]
 800b4d0:	f7f5 fd66 	bl	8000fa0 <__aeabi_fmul>
 800b4d4:	1c03      	adds	r3, r0, #0
 800b4d6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6999      	ldr	r1, [r3, #24]
 800b4e0:	4a51      	ldr	r2, [pc, #324]	@ (800b628 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f000 f997 	bl	800b818 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	1c11      	adds	r1, r2, #0
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f000 f9a0 	bl	800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b4f8:	1c03      	adds	r3, r0, #0
 800b4fa:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800b508:	1c19      	adds	r1, r3, #0
 800b50a:	1c10      	adds	r0, r2, #0
 800b50c:	f7f5 fe86 	bl	800121c <__aeabi_fsub>
 800b510:	1c03      	adds	r3, r0, #0
 800b512:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800b514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b516:	69b8      	ldr	r0, [r7, #24]
 800b518:	f7f5 fe80 	bl	800121c <__aeabi_fsub>
 800b51c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800b51e:	1c19      	adds	r1, r3, #0
 800b520:	1c28      	adds	r0, r5, #0
 800b522:	f7f5 fd3d 	bl	8000fa0 <__aeabi_fmul>
 800b526:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800b528:	1c19      	adds	r1, r3, #0
 800b52a:	1c20      	adds	r0, r4, #0
 800b52c:	f7f5 f9c8 	bl	80008c0 <__aeabi_fadd>
 800b530:	1c03      	adds	r3, r0, #0
 800b532:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800b53c:	1c19      	adds	r1, r3, #0
 800b53e:	483b      	ldr	r0, [pc, #236]	@ (800b62c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800b540:	f7f5 fe6c 	bl	800121c <__aeabi_fsub>
 800b544:	1c03      	adds	r3, r0, #0
 800b546:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	1c11      	adds	r1, r2, #0
 800b550:	0018      	movs	r0, r3
 800b552:	f000 f971 	bl	800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b556:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800b558:	1c19      	adds	r1, r3, #0
 800b55a:	1c28      	adds	r0, r5, #0
 800b55c:	f7f5 fd20 	bl	8000fa0 <__aeabi_fmul>
 800b560:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800b562:	1c19      	adds	r1, r3, #0
 800b564:	1c20      	adds	r0, r4, #0
 800b566:	f7f5 f9ab 	bl	80008c0 <__aeabi_fadd>
 800b56a:	1c03      	adds	r3, r0, #0
 800b56c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800b56e:	4a30      	ldr	r2, [pc, #192]	@ (800b630 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800b570:	6939      	ldr	r1, [r7, #16]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	0018      	movs	r0, r3
 800b576:	f000 f94f 	bl	800b818 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	1c11      	adds	r1, r2, #0
 800b582:	0018      	movs	r0, r3
 800b584:	f000 f958 	bl	800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800b588:	1c03      	adds	r3, r0, #0
 800b58a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800b58c:	6979      	ldr	r1, [r7, #20]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7f5 fd06 	bl	8000fa0 <__aeabi_fmul>
 800b594:	1c03      	adds	r3, r0, #0
 800b596:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	4923      	ldr	r1, [pc, #140]	@ (800b634 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800b5a6:	1c18      	adds	r0, r3, #0
 800b5a8:	f7f5 fb14 	bl	8000bd4 <__aeabi_fdiv>
 800b5ac:	1c03      	adds	r3, r0, #0
 800b5ae:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800b5b0:	69f9      	ldr	r1, [r7, #28]
 800b5b2:	20fe      	movs	r0, #254	@ 0xfe
 800b5b4:	0580      	lsls	r0, r0, #22
 800b5b6:	f7f5 fe31 	bl	800121c <__aeabi_fsub>
 800b5ba:	1c03      	adds	r3, r0, #0
 800b5bc:	491e      	ldr	r1, [pc, #120]	@ (800b638 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800b5be:	1c18      	adds	r0, r3, #0
 800b5c0:	f7f5 fcee 	bl	8000fa0 <__aeabi_fmul>
 800b5c4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800b5c6:	491d      	ldr	r1, [pc, #116]	@ (800b63c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800b5c8:	1c18      	adds	r0, r3, #0
 800b5ca:	f7f5 fe27 	bl	800121c <__aeabi_fsub>
 800b5ce:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800b5d0:	1c19      	adds	r1, r3, #0
 800b5d2:	1c28      	adds	r0, r5, #0
 800b5d4:	f7f5 fce4 	bl	8000fa0 <__aeabi_fmul>
 800b5d8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800b5da:	1c19      	adds	r1, r3, #0
 800b5dc:	1c20      	adds	r0, r4, #0
 800b5de:	f7f5 f96f 	bl	80008c0 <__aeabi_fadd>
 800b5e2:	1c03      	adds	r3, r0, #0
 800b5e4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	1c18      	adds	r0, r3, #0
 800b5f2:	f7f4 ff9d 	bl	8000530 <__aeabi_fcmplt>
 800b5f6:	1e03      	subs	r3, r0, #0
 800b5f8:	d002      	beq.n	800b600 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b608:	1c19      	adds	r1, r3, #0
 800b60a:	1c10      	adds	r0, r2, #0
 800b60c:	f7f4 ffa4 	bl	8000558 <__aeabi_fcmpgt>
 800b610:	1e03      	subs	r3, r0, #0
 800b612:	d100      	bne.n	800b616 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800b614:	e002      	b.n	800b61c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b61c:	46c0      	nop			@ (mov r8, r8)
 800b61e:	46bd      	mov	sp, r7
 800b620:	b00c      	add	sp, #48	@ 0x30
 800b622:	bdb0      	pop	{r4, r5, r7, pc}
 800b624:	46fffe00 	.word	0x46fffe00
 800b628:	3c23d70a 	.word	0x3c23d70a
 800b62c:	43ff0000 	.word	0x43ff0000
 800b630:	3db851ec 	.word	0x3db851ec
 800b634:	42700000 	.word	0x42700000
 800b638:	3fa66666 	.word	0x3fa66666
 800b63c:	3e99999a 	.word	0x3e99999a

0800b640 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	223c      	movs	r2, #60	@ 0x3c
 800b64e:	5c9b      	ldrb	r3, [r3, r2]
 800b650:	2201      	movs	r2, #1
 800b652:	4053      	eors	r3, r2
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	223c      	movs	r2, #60	@ 0x3c
 800b65e:	2101      	movs	r1, #1
 800b660:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800b66e:	e0c8      	b.n	800b802 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b674:	4965      	ldr	r1, [pc, #404]	@ (800b80c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800b676:	1c18      	adds	r0, r3, #0
 800b678:	f7f4 ff78 	bl	800056c <__aeabi_fcmpge>
 800b67c:	1e03      	subs	r3, r0, #0
 800b67e:	d107      	bne.n	800b690 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b684:	4962      	ldr	r1, [pc, #392]	@ (800b810 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800b686:	1c18      	adds	r0, r3, #0
 800b688:	f7f4 ff5c 	bl	8000544 <__aeabi_fcmple>
 800b68c:	1e03      	subs	r3, r0, #0
 800b68e:	d00e      	beq.n	800b6ae <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b698:	1c19      	adds	r1, r3, #0
 800b69a:	1c10      	adds	r0, r2, #0
 800b69c:	f7f5 f910 	bl	80008c0 <__aeabi_fadd>
 800b6a0:	1c03      	adds	r3, r0, #0
 800b6a2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b2:	1c19      	adds	r1, r3, #0
 800b6b4:	6838      	ldr	r0, [r7, #0]
 800b6b6:	f7f5 fdb1 	bl	800121c <__aeabi_fsub>
 800b6ba:	1c03      	adds	r3, r0, #0
 800b6bc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	0018      	movs	r0, r3
 800b6c2:	f7ff fe7d 	bl	800b3c0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ca:	1c19      	adds	r1, r3, #0
 800b6cc:	6838      	ldr	r0, [r7, #0]
 800b6ce:	f7f5 fda5 	bl	800121c <__aeabi_fsub>
 800b6d2:	1c03      	adds	r3, r0, #0
 800b6d4:	2185      	movs	r1, #133	@ 0x85
 800b6d6:	05c9      	lsls	r1, r1, #23
 800b6d8:	1c18      	adds	r0, r3, #0
 800b6da:	f7f5 fa7b 	bl	8000bd4 <__aeabi_fdiv>
 800b6de:	1c03      	adds	r3, r0, #0
 800b6e0:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7f4 ff23 	bl	8000530 <__aeabi_fcmplt>
 800b6ea:	1e03      	subs	r3, r0, #0
 800b6ec:	d008      	beq.n	800b700 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6f2:	68f9      	ldr	r1, [r7, #12]
 800b6f4:	1c18      	adds	r0, r3, #0
 800b6f6:	f7f5 fd91 	bl	800121c <__aeabi_fsub>
 800b6fa:	1c03      	adds	r3, r0, #0
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	e007      	b.n	800b710 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b704:	1c19      	adds	r1, r3, #0
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7f5 f8da 	bl	80008c0 <__aeabi_fadd>
 800b70c:	1c03      	adds	r3, r0, #0
 800b70e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800b710:	23fe      	movs	r3, #254	@ 0xfe
 800b712:	059b      	lsls	r3, r3, #22
 800b714:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800b716:	493f      	ldr	r1, [pc, #252]	@ (800b814 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b718:	6978      	ldr	r0, [r7, #20]
 800b71a:	f7f4 ff1d 	bl	8000558 <__aeabi_fcmpgt>
 800b71e:	1e03      	subs	r3, r0, #0
 800b720:	d010      	beq.n	800b744 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800b722:	493c      	ldr	r1, [pc, #240]	@ (800b814 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b724:	6978      	ldr	r0, [r7, #20]
 800b726:	f7f5 fa55 	bl	8000bd4 <__aeabi_fdiv>
 800b72a:	1c03      	adds	r3, r0, #0
 800b72c:	1c1c      	adds	r4, r3, #0
 800b72e:	4939      	ldr	r1, [pc, #228]	@ (800b814 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b730:	6978      	ldr	r0, [r7, #20]
 800b732:	f7f5 fa4f 	bl	8000bd4 <__aeabi_fdiv>
 800b736:	1c03      	adds	r3, r0, #0
 800b738:	1c19      	adds	r1, r3, #0
 800b73a:	1c20      	adds	r0, r4, #0
 800b73c:	f7f5 fc30 	bl	8000fa0 <__aeabi_fmul>
 800b740:	1c03      	adds	r3, r0, #0
 800b742:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800b748:	1c19      	adds	r1, r3, #0
 800b74a:	2085      	movs	r0, #133	@ 0x85
 800b74c:	05c0      	lsls	r0, r0, #23
 800b74e:	f7f5 fd65 	bl	800121c <__aeabi_fsub>
 800b752:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800b754:	6939      	ldr	r1, [r7, #16]
 800b756:	1c18      	adds	r0, r3, #0
 800b758:	f7f5 fc22 	bl	8000fa0 <__aeabi_fmul>
 800b75c:	1c03      	adds	r3, r0, #0
 800b75e:	1c18      	adds	r0, r3, #0
 800b760:	f018 f83e 	bl	80237e0 <sqrtf>
 800b764:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b76e:	2185      	movs	r1, #133	@ 0x85
 800b770:	05c9      	lsls	r1, r1, #23
 800b772:	6938      	ldr	r0, [r7, #16]
 800b774:	f7f5 fc14 	bl	8000fa0 <__aeabi_fmul>
 800b778:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800b77a:	1c19      	adds	r1, r3, #0
 800b77c:	1c28      	adds	r0, r5, #0
 800b77e:	f7f5 fa29 	bl	8000bd4 <__aeabi_fdiv>
 800b782:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b784:	1c19      	adds	r1, r3, #0
 800b786:	1c20      	adds	r0, r4, #0
 800b788:	f7f5 fc0a 	bl	8000fa0 <__aeabi_fmul>
 800b78c:	1c03      	adds	r3, r0, #0
 800b78e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b794:	68f9      	ldr	r1, [r7, #12]
 800b796:	1c18      	adds	r0, r3, #0
 800b798:	f7f5 fc02 	bl	8000fa0 <__aeabi_fmul>
 800b79c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800b79e:	6939      	ldr	r1, [r7, #16]
 800b7a0:	1c18      	adds	r0, r3, #0
 800b7a2:	f7f5 fa17 	bl	8000bd4 <__aeabi_fdiv>
 800b7a6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800b7a8:	68f9      	ldr	r1, [r7, #12]
 800b7aa:	1c18      	adds	r0, r3, #0
 800b7ac:	f7f5 fbf8 	bl	8000fa0 <__aeabi_fmul>
 800b7b0:	1c03      	adds	r3, r0, #0
             sqrtf(
 800b7b2:	1c19      	adds	r1, r3, #0
 800b7b4:	1c20      	adds	r0, r4, #0
 800b7b6:	f7f5 f883 	bl	80008c0 <__aeabi_fadd>
 800b7ba:	1c03      	adds	r3, r0, #0
 800b7bc:	1c18      	adds	r0, r3, #0
 800b7be:	f018 f80f 	bl	80237e0 <sqrtf>
 800b7c2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b7c4:	1c19      	adds	r1, r3, #0
 800b7c6:	1c30      	adds	r0, r6, #0
 800b7c8:	f7f5 fbea 	bl	8000fa0 <__aeabi_fmul>
 800b7cc:	1c03      	adds	r3, r0, #0
 800b7ce:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7dc:	68f9      	ldr	r1, [r7, #12]
 800b7de:	1c18      	adds	r0, r3, #0
 800b7e0:	f7f5 fbde 	bl	8000fa0 <__aeabi_fmul>
 800b7e4:	1c03      	adds	r3, r0, #0
 800b7e6:	2182      	movs	r1, #130	@ 0x82
 800b7e8:	05c9      	lsls	r1, r1, #23
 800b7ea:	1c18      	adds	r0, r3, #0
 800b7ec:	f7f5 f9f2 	bl	8000bd4 <__aeabi_fdiv>
 800b7f0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800b7f2:	1c19      	adds	r1, r3, #0
 800b7f4:	1c20      	adds	r0, r4, #0
 800b7f6:	f7f5 f863 	bl	80008c0 <__aeabi_fadd>
 800b7fa:	1c03      	adds	r3, r0, #0
 800b7fc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b802:	46c0      	nop			@ (mov r8, r8)
 800b804:	46bd      	mov	sp, r7
 800b806:	b007      	add	sp, #28
 800b808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	42c80000 	.word	0x42c80000
 800b810:	c2c80000 	.word	0xc2c80000
 800b814:	44b40000 	.word	0x44b40000

0800b818 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b830:	46c0      	nop			@ (mov r8, r8)
 800b832:	46bd      	mov	sp, r7
 800b834:	b004      	add	sp, #16
 800b836:	bd80      	pop	{r7, pc}

0800b838 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800b838:	b590      	push	{r4, r7, lr}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b84a:	1c19      	adds	r1, r3, #0
 800b84c:	6838      	ldr	r0, [r7, #0]
 800b84e:	f7f5 fce5 	bl	800121c <__aeabi_fsub>
 800b852:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b854:	1c19      	adds	r1, r3, #0
 800b856:	1c20      	adds	r0, r4, #0
 800b858:	f7f5 fba2 	bl	8000fa0 <__aeabi_fmul>
 800b85c:	1c03      	adds	r3, r0, #0
 800b85e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800b860:	4912      	ldr	r1, [pc, #72]	@ (800b8ac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7f4 fe64 	bl	8000530 <__aeabi_fcmplt>
 800b868:	1e03      	subs	r3, r0, #0
 800b86a:	d002      	beq.n	800b872 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b86c:	23fe      	movs	r3, #254	@ 0xfe
 800b86e:	059b      	lsls	r3, r3, #22
 800b870:	e018      	b.n	800b8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b872:	490f      	ldr	r1, [pc, #60]	@ (800b8b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7f4 fe6f 	bl	8000558 <__aeabi_fcmpgt>
 800b87a:	1e03      	subs	r3, r0, #0
 800b87c:	d001      	beq.n	800b882 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b87e:	2300      	movs	r3, #0
 800b880:	e010      	b.n	800b8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	1c18      	adds	r0, r3, #0
 800b886:	f017 ff83 	bl	8023790 <expf>
 800b88a:	1c03      	adds	r3, r0, #0
 800b88c:	21fe      	movs	r1, #254	@ 0xfe
 800b88e:	0589      	lsls	r1, r1, #22
 800b890:	1c18      	adds	r0, r3, #0
 800b892:	f7f5 f815 	bl	80008c0 <__aeabi_fadd>
 800b896:	1c03      	adds	r3, r0, #0
 800b898:	1c19      	adds	r1, r3, #0
 800b89a:	20fe      	movs	r0, #254	@ 0xfe
 800b89c:	0580      	lsls	r0, r0, #22
 800b89e:	f7f5 f999 	bl	8000bd4 <__aeabi_fdiv>
 800b8a2:	1c03      	adds	r3, r0, #0
    }
}
 800b8a4:	1c18      	adds	r0, r3, #0
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	b005      	add	sp, #20
 800b8aa:	bd90      	pop	{r4, r7, pc}
 800b8ac:	c2480000 	.word	0xc2480000
 800b8b0:	42480000 	.word	0x42480000

0800b8b4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b8cc:	46c0      	nop			@ (mov r8, r8)
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	b004      	add	sp, #16
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b8d4:	b590      	push	{r4, r7, lr}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d114      	bne.n	800b910 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b8ea:	1c19      	adds	r1, r3, #0
 800b8ec:	6838      	ldr	r0, [r7, #0]
 800b8ee:	f7f5 fc95 	bl	800121c <__aeabi_fsub>
 800b8f2:	1c03      	adds	r3, r0, #0
 800b8f4:	4918      	ldr	r1, [pc, #96]	@ (800b958 <GasIndexAlgorithm__mox_model__process+0x84>)
 800b8f6:	1c18      	adds	r0, r3, #0
 800b8f8:	f7f5 f96c 	bl	8000bd4 <__aeabi_fdiv>
 800b8fc:	1c03      	adds	r3, r0, #0
 800b8fe:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b904:	1c19      	adds	r1, r3, #0
 800b906:	1c10      	adds	r0, r2, #0
 800b908:	f7f5 fb4a 	bl	8000fa0 <__aeabi_fmul>
 800b90c:	1c03      	adds	r3, r0, #0
 800b90e:	e01f      	b.n	800b950 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b914:	1c19      	adds	r1, r3, #0
 800b916:	6838      	ldr	r0, [r7, #0]
 800b918:	f7f5 fc80 	bl	800121c <__aeabi_fsub>
 800b91c:	1c03      	adds	r3, r0, #0
 800b91e:	1c1a      	adds	r2, r3, #0
 800b920:	2380      	movs	r3, #128	@ 0x80
 800b922:	061b      	lsls	r3, r3, #24
 800b924:	4053      	eors	r3, r2
 800b926:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b92c:	490b      	ldr	r1, [pc, #44]	@ (800b95c <GasIndexAlgorithm__mox_model__process+0x88>)
 800b92e:	1c18      	adds	r0, r3, #0
 800b930:	f7f4 ffc6 	bl	80008c0 <__aeabi_fadd>
 800b934:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b936:	1c19      	adds	r1, r3, #0
 800b938:	1c20      	adds	r0, r4, #0
 800b93a:	f7f5 f94b 	bl	8000bd4 <__aeabi_fdiv>
 800b93e:	1c03      	adds	r3, r0, #0
 800b940:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b946:	1c19      	adds	r1, r3, #0
 800b948:	1c10      	adds	r0, r2, #0
 800b94a:	f7f5 fb29 	bl	8000fa0 <__aeabi_fmul>
 800b94e:	1c03      	adds	r3, r0, #0
    }
}
 800b950:	1c18      	adds	r0, r3, #0
 800b952:	46bd      	mov	sp, r7
 800b954:	b003      	add	sp, #12
 800b956:	bd90      	pop	{r4, r7, pc}
 800b958:	44fa0000 	.word	0x44fa0000
 800b95c:	435c0000 	.word	0x435c0000

0800b960 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2180      	movs	r1, #128	@ 0x80
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2184      	movs	r1, #132	@ 0x84
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2188      	movs	r1, #136	@ 0x88
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	505a      	str	r2, [r3, r1]
}
 800b986:	46c0      	nop			@ (mov r8, r8)
 800b988:	46bd      	mov	sp, r7
 800b98a:	b004      	add	sp, #16
 800b98c:	bd80      	pop	{r7, pc}
	...

0800b990 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b990:	b590      	push	{r4, r7, lr}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2280      	movs	r2, #128	@ 0x80
 800b99e:	589c      	ldr	r4, [r3, r2]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2284      	movs	r2, #132	@ 0x84
 800b9a4:	589b      	ldr	r3, [r3, r2]
 800b9a6:	1c19      	adds	r1, r3, #0
 800b9a8:	6838      	ldr	r0, [r7, #0]
 800b9aa:	f7f5 fc37 	bl	800121c <__aeabi_fsub>
 800b9ae:	1c03      	adds	r3, r0, #0
 800b9b0:	1c19      	adds	r1, r3, #0
 800b9b2:	1c20      	adds	r0, r4, #0
 800b9b4:	f7f5 faf4 	bl	8000fa0 <__aeabi_fmul>
 800b9b8:	1c03      	adds	r3, r0, #0
 800b9ba:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b9bc:	4940      	ldr	r1, [pc, #256]	@ (800bac0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b9be:	68b8      	ldr	r0, [r7, #8]
 800b9c0:	f7f4 fdb6 	bl	8000530 <__aeabi_fcmplt>
 800b9c4:	1e03      	subs	r3, r0, #0
 800b9c6:	d001      	beq.n	800b9cc <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b9c8:	4b3e      	ldr	r3, [pc, #248]	@ (800bac4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b9ca:	e075      	b.n	800bab8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b9cc:	493e      	ldr	r1, [pc, #248]	@ (800bac8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b9ce:	68b8      	ldr	r0, [r7, #8]
 800b9d0:	f7f4 fdc2 	bl	8000558 <__aeabi_fcmpgt>
 800b9d4:	1e03      	subs	r3, r0, #0
 800b9d6:	d001      	beq.n	800b9dc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e06d      	b.n	800bab8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6838      	ldr	r0, [r7, #0]
 800b9e0:	f7f4 fdc4 	bl	800056c <__aeabi_fcmpge>
 800b9e4:	1e03      	subs	r3, r0, #0
 800b9e6:	d047      	beq.n	800ba78 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2288      	movs	r2, #136	@ 0x88
 800b9ec:	589b      	ldr	r3, [r3, r2]
 800b9ee:	21fe      	movs	r1, #254	@ 0xfe
 800b9f0:	0589      	lsls	r1, r1, #22
 800b9f2:	1c18      	adds	r0, r3, #0
 800b9f4:	f7f4 fd96 	bl	8000524 <__aeabi_fcmpeq>
 800b9f8:	1e03      	subs	r3, r0, #0
 800b9fa:	d00e      	beq.n	800ba1a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	1c19      	adds	r1, r3, #0
 800ba02:	20fe      	movs	r0, #254	@ 0xfe
 800ba04:	0580      	lsls	r0, r0, #22
 800ba06:	f7f5 fc09 	bl	800121c <__aeabi_fsub>
 800ba0a:	1c03      	adds	r3, r0, #0
 800ba0c:	492f      	ldr	r1, [pc, #188]	@ (800bacc <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800ba0e:	1c18      	adds	r0, r3, #0
 800ba10:	f7f5 fac6 	bl	8000fa0 <__aeabi_fmul>
 800ba14:	1c03      	adds	r3, r0, #0
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	e012      	b.n	800ba40 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	492c      	ldr	r1, [pc, #176]	@ (800bad0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800ba20:	1c18      	adds	r0, r3, #0
 800ba22:	f7f5 fabd 	bl	8000fa0 <__aeabi_fmul>
 800ba26:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800ba28:	1c19      	adds	r1, r3, #0
 800ba2a:	4826      	ldr	r0, [pc, #152]	@ (800bac4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800ba2c:	f7f5 fbf6 	bl	800121c <__aeabi_fsub>
 800ba30:	1c03      	adds	r3, r0, #0
 800ba32:	2181      	movs	r1, #129	@ 0x81
 800ba34:	05c9      	lsls	r1, r1, #23
 800ba36:	1c18      	adds	r0, r3, #0
 800ba38:	f7f5 f8cc 	bl	8000bd4 <__aeabi_fdiv>
 800ba3c:	1c03      	adds	r3, r0, #0
 800ba3e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800ba40:	4920      	ldr	r1, [pc, #128]	@ (800bac4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7f4 ff3c 	bl	80008c0 <__aeabi_fadd>
 800ba48:	1c03      	adds	r3, r0, #0
 800ba4a:	1c1c      	adds	r4, r3, #0
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	1c18      	adds	r0, r3, #0
 800ba50:	f017 fe9e 	bl	8023790 <expf>
 800ba54:	1c03      	adds	r3, r0, #0
 800ba56:	21fe      	movs	r1, #254	@ 0xfe
 800ba58:	0589      	lsls	r1, r1, #22
 800ba5a:	1c18      	adds	r0, r3, #0
 800ba5c:	f7f4 ff30 	bl	80008c0 <__aeabi_fadd>
 800ba60:	1c03      	adds	r3, r0, #0
 800ba62:	1c19      	adds	r1, r3, #0
 800ba64:	1c20      	adds	r0, r4, #0
 800ba66:	f7f5 f8b5 	bl	8000bd4 <__aeabi_fdiv>
 800ba6a:	1c03      	adds	r3, r0, #0
 800ba6c:	68f9      	ldr	r1, [r7, #12]
 800ba6e:	1c18      	adds	r0, r3, #0
 800ba70:	f7f5 fbd4 	bl	800121c <__aeabi_fsub>
 800ba74:	1c03      	adds	r3, r0, #0
 800ba76:	e01f      	b.n	800bab8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2188      	movs	r1, #136	@ 0x88
 800ba80:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800ba82:	1c19      	adds	r1, r3, #0
 800ba84:	1c10      	adds	r0, r2, #0
 800ba86:	f7f5 f8a5 	bl	8000bd4 <__aeabi_fdiv>
 800ba8a:	1c03      	adds	r3, r0, #0
 800ba8c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	1c18      	adds	r0, r3, #0
 800ba92:	f017 fe7d 	bl	8023790 <expf>
 800ba96:	1c03      	adds	r3, r0, #0
 800ba98:	21fe      	movs	r1, #254	@ 0xfe
 800ba9a:	0589      	lsls	r1, r1, #22
 800ba9c:	1c18      	adds	r0, r3, #0
 800ba9e:	f7f4 ff0f 	bl	80008c0 <__aeabi_fadd>
 800baa2:	1c03      	adds	r3, r0, #0
 800baa4:	1c19      	adds	r1, r3, #0
 800baa6:	4807      	ldr	r0, [pc, #28]	@ (800bac4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800baa8:	f7f5 f894 	bl	8000bd4 <__aeabi_fdiv>
 800baac:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800baae:	1c19      	adds	r1, r3, #0
 800bab0:	1c20      	adds	r0, r4, #0
 800bab2:	f7f5 fa75 	bl	8000fa0 <__aeabi_fmul>
 800bab6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800bab8:	1c18      	adds	r0, r3, #0
 800baba:	46bd      	mov	sp, r7
 800babc:	b005      	add	sp, #20
 800babe:	bd90      	pop	{r4, r7, pc}
 800bac0:	c2480000 	.word	0xc2480000
 800bac4:	43fa0000 	.word	0x43fa0000
 800bac8:	42480000 	.word	0x42480000
 800bacc:	3f8041ab 	.word	0x3f8041ab
 800bad0:	40a00000 	.word	0x40a00000

0800bad4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	4913      	ldr	r1, [pc, #76]	@ (800bb34 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800bae6:	1c18      	adds	r0, r3, #0
 800bae8:	f7f4 feea 	bl	80008c0 <__aeabi_fadd>
 800baec:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800baee:	1c19      	adds	r1, r3, #0
 800baf0:	1c20      	adds	r0, r4, #0
 800baf2:	f7f5 f86f 	bl	8000bd4 <__aeabi_fdiv>
 800baf6:	1c03      	adds	r3, r0, #0
 800baf8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	228c      	movs	r2, #140	@ 0x8c
 800bafe:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	490b      	ldr	r1, [pc, #44]	@ (800bb38 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800bb0a:	1c18      	adds	r0, r3, #0
 800bb0c:	f7f4 fed8 	bl	80008c0 <__aeabi_fadd>
 800bb10:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800bb12:	1c19      	adds	r1, r3, #0
 800bb14:	1c20      	adds	r0, r4, #0
 800bb16:	f7f5 f85d 	bl	8000bd4 <__aeabi_fdiv>
 800bb1a:	1c03      	adds	r3, r0, #0
 800bb1c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2290      	movs	r2, #144	@ 0x90
 800bb22:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2294      	movs	r2, #148	@ 0x94
 800bb28:	2100      	movs	r1, #0
 800bb2a:	5499      	strb	r1, [r3, r2]
}
 800bb2c:	46c0      	nop			@ (mov r8, r8)
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b003      	add	sp, #12
 800bb32:	bd90      	pop	{r4, r7, pc}
 800bb34:	41a00000 	.word	0x41a00000
 800bb38:	43fa0000 	.word	0x43fa0000

0800bb3c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800bb3c:	b590      	push	{r4, r7, lr}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2294      	movs	r2, #148	@ 0x94
 800bb4a:	5c9b      	ldrb	r3, [r3, r2]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	4053      	eors	r3, r2
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2198      	movs	r1, #152	@ 0x98
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	219c      	movs	r1, #156	@ 0x9c
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	21a0      	movs	r1, #160	@ 0xa0
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2294      	movs	r2, #148	@ 0x94
 800bb72:	2101      	movs	r1, #1
 800bb74:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	228c      	movs	r2, #140	@ 0x8c
 800bb7a:	589b      	ldr	r3, [r3, r2]
 800bb7c:	1c19      	adds	r1, r3, #0
 800bb7e:	20fe      	movs	r0, #254	@ 0xfe
 800bb80:	0580      	lsls	r0, r0, #22
 800bb82:	f7f5 fb4b 	bl	800121c <__aeabi_fsub>
 800bb86:	1c03      	adds	r3, r0, #0
 800bb88:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2298      	movs	r2, #152	@ 0x98
 800bb8e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800bb90:	1c19      	adds	r1, r3, #0
 800bb92:	f7f5 fa05 	bl	8000fa0 <__aeabi_fmul>
 800bb96:	1c03      	adds	r3, r0, #0
 800bb98:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	228c      	movs	r2, #140	@ 0x8c
 800bb9e:	589b      	ldr	r3, [r3, r2]
 800bba0:	6839      	ldr	r1, [r7, #0]
 800bba2:	1c18      	adds	r0, r3, #0
 800bba4:	f7f5 f9fc 	bl	8000fa0 <__aeabi_fmul>
 800bba8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800bbaa:	1c19      	adds	r1, r3, #0
 800bbac:	1c20      	adds	r0, r4, #0
 800bbae:	f7f4 fe87 	bl	80008c0 <__aeabi_fadd>
 800bbb2:	1c03      	adds	r3, r0, #0
 800bbb4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2298      	movs	r2, #152	@ 0x98
 800bbba:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2290      	movs	r2, #144	@ 0x90
 800bbc0:	589b      	ldr	r3, [r3, r2]
 800bbc2:	1c19      	adds	r1, r3, #0
 800bbc4:	20fe      	movs	r0, #254	@ 0xfe
 800bbc6:	0580      	lsls	r0, r0, #22
 800bbc8:	f7f5 fb28 	bl	800121c <__aeabi_fsub>
 800bbcc:	1c03      	adds	r3, r0, #0
 800bbce:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	229c      	movs	r2, #156	@ 0x9c
 800bbd4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800bbd6:	1c19      	adds	r1, r3, #0
 800bbd8:	f7f5 f9e2 	bl	8000fa0 <__aeabi_fmul>
 800bbdc:	1c03      	adds	r3, r0, #0
 800bbde:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2290      	movs	r2, #144	@ 0x90
 800bbe4:	589b      	ldr	r3, [r3, r2]
 800bbe6:	6839      	ldr	r1, [r7, #0]
 800bbe8:	1c18      	adds	r0, r3, #0
 800bbea:	f7f5 f9d9 	bl	8000fa0 <__aeabi_fmul>
 800bbee:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800bbf0:	1c19      	adds	r1, r3, #0
 800bbf2:	1c20      	adds	r0, r4, #0
 800bbf4:	f7f4 fe64 	bl	80008c0 <__aeabi_fadd>
 800bbf8:	1c03      	adds	r3, r0, #0
 800bbfa:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	229c      	movs	r2, #156	@ 0x9c
 800bc00:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2298      	movs	r2, #152	@ 0x98
 800bc06:	589a      	ldr	r2, [r3, r2]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	219c      	movs	r1, #156	@ 0x9c
 800bc0c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800bc0e:	1c19      	adds	r1, r3, #0
 800bc10:	1c10      	adds	r0, r2, #0
 800bc12:	f7f5 fb03 	bl	800121c <__aeabi_fsub>
 800bc16:	1c03      	adds	r3, r0, #0
 800bc18:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	6978      	ldr	r0, [r7, #20]
 800bc1e:	f7f4 fc87 	bl	8000530 <__aeabi_fcmplt>
 800bc22:	1e03      	subs	r3, r0, #0
 800bc24:	d004      	beq.n	800bc30 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2280      	movs	r2, #128	@ 0x80
 800bc2a:	0612      	lsls	r2, r2, #24
 800bc2c:	4053      	eors	r3, r2
 800bc2e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800bc30:	4923      	ldr	r1, [pc, #140]	@ (800bcc0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	f7f5 f9b4 	bl	8000fa0 <__aeabi_fmul>
 800bc38:	1c03      	adds	r3, r0, #0
 800bc3a:	1c18      	adds	r0, r3, #0
 800bc3c:	f017 fda8 	bl	8023790 <expf>
 800bc40:	1c03      	adds	r3, r0, #0
 800bc42:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800bc44:	491f      	ldr	r1, [pc, #124]	@ (800bcc4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800bc46:	6938      	ldr	r0, [r7, #16]
 800bc48:	f7f5 f9aa 	bl	8000fa0 <__aeabi_fmul>
 800bc4c:	1c03      	adds	r3, r0, #0
 800bc4e:	491e      	ldr	r1, [pc, #120]	@ (800bcc8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800bc50:	1c18      	adds	r0, r3, #0
 800bc52:	f7f4 fe35 	bl	80008c0 <__aeabi_fadd>
 800bc56:	1c03      	adds	r3, r0, #0
 800bc58:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685c      	ldr	r4, [r3, #4]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68f9      	ldr	r1, [r7, #12]
 800bc64:	1c18      	adds	r0, r3, #0
 800bc66:	f7f4 fe2b 	bl	80008c0 <__aeabi_fadd>
 800bc6a:	1c03      	adds	r3, r0, #0
 800bc6c:	1c19      	adds	r1, r3, #0
 800bc6e:	1c20      	adds	r0, r4, #0
 800bc70:	f7f4 ffb0 	bl	8000bd4 <__aeabi_fdiv>
 800bc74:	1c03      	adds	r3, r0, #0
 800bc76:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800bc78:	68b9      	ldr	r1, [r7, #8]
 800bc7a:	20fe      	movs	r0, #254	@ 0xfe
 800bc7c:	0580      	lsls	r0, r0, #22
 800bc7e:	f7f5 facd 	bl	800121c <__aeabi_fsub>
 800bc82:	1c03      	adds	r3, r0, #0
 800bc84:	1c18      	adds	r0, r3, #0
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	22a0      	movs	r2, #160	@ 0xa0
 800bc8a:	589b      	ldr	r3, [r3, r2]
 800bc8c:	1c19      	adds	r1, r3, #0
 800bc8e:	f7f5 f987 	bl	8000fa0 <__aeabi_fmul>
 800bc92:	1c03      	adds	r3, r0, #0
 800bc94:	1c1c      	adds	r4, r3, #0
 800bc96:	6839      	ldr	r1, [r7, #0]
 800bc98:	68b8      	ldr	r0, [r7, #8]
 800bc9a:	f7f5 f981 	bl	8000fa0 <__aeabi_fmul>
 800bc9e:	1c03      	adds	r3, r0, #0
 800bca0:	1c19      	adds	r1, r3, #0
 800bca2:	1c20      	adds	r0, r4, #0
 800bca4:	f7f4 fe0c 	bl	80008c0 <__aeabi_fadd>
 800bca8:	1c03      	adds	r3, r0, #0
 800bcaa:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	22a0      	movs	r2, #160	@ 0xa0
 800bcb0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	22a0      	movs	r2, #160	@ 0xa0
 800bcb6:	589b      	ldr	r3, [r3, r2]
}
 800bcb8:	1c18      	adds	r0, r3, #0
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	b007      	add	sp, #28
 800bcbe:	bd90      	pop	{r4, r7, pc}
 800bcc0:	be4ccccd 	.word	0xbe4ccccd
 800bcc4:	43f00000 	.word	0x43f00000
 800bcc8:	41a00000 	.word	0x41a00000

0800bccc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	000a      	movs	r2, r1
 800bcd6:	1cbb      	adds	r3, r7, #2
 800bcd8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800bcda:	230d      	movs	r3, #13
 800bcdc:	18fb      	adds	r3, r7, r3
 800bcde:	22ff      	movs	r2, #255	@ 0xff
 800bce0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800bce2:	230e      	movs	r3, #14
 800bce4:	18fb      	adds	r3, r7, r3
 800bce6:	2200      	movs	r2, #0
 800bce8:	801a      	strh	r2, [r3, #0]
 800bcea:	e037      	b.n	800bd5c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800bcec:	230e      	movs	r3, #14
 800bcee:	18fb      	adds	r3, r7, r3
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	18d3      	adds	r3, r2, r3
 800bcf6:	7819      	ldrb	r1, [r3, #0]
 800bcf8:	220d      	movs	r2, #13
 800bcfa:	18bb      	adds	r3, r7, r2
 800bcfc:	18ba      	adds	r2, r7, r2
 800bcfe:	7812      	ldrb	r2, [r2, #0]
 800bd00:	404a      	eors	r2, r1
 800bd02:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800bd04:	230c      	movs	r3, #12
 800bd06:	18fb      	adds	r3, r7, r3
 800bd08:	2208      	movs	r2, #8
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	e01b      	b.n	800bd46 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800bd0e:	210d      	movs	r1, #13
 800bd10:	187b      	adds	r3, r7, r1
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	b25b      	sxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	da09      	bge.n	800bd2e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800bd1a:	187b      	adds	r3, r7, r1
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	005b      	lsls	r3, r3, #1
 800bd20:	b25b      	sxtb	r3, r3
 800bd22:	2231      	movs	r2, #49	@ 0x31
 800bd24:	4053      	eors	r3, r2
 800bd26:	b25a      	sxtb	r2, r3
 800bd28:	187b      	adds	r3, r7, r1
 800bd2a:	701a      	strb	r2, [r3, #0]
 800bd2c:	e005      	b.n	800bd3a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800bd2e:	230d      	movs	r3, #13
 800bd30:	18fa      	adds	r2, r7, r3
 800bd32:	18fb      	adds	r3, r7, r3
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	18db      	adds	r3, r3, r3
 800bd38:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800bd3a:	220c      	movs	r2, #12
 800bd3c:	18bb      	adds	r3, r7, r2
 800bd3e:	18ba      	adds	r2, r7, r2
 800bd40:	7812      	ldrb	r2, [r2, #0]
 800bd42:	3a01      	subs	r2, #1
 800bd44:	701a      	strb	r2, [r3, #0]
 800bd46:	230c      	movs	r3, #12
 800bd48:	18fb      	adds	r3, r7, r3
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1de      	bne.n	800bd0e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800bd50:	220e      	movs	r2, #14
 800bd52:	18bb      	adds	r3, r7, r2
 800bd54:	18ba      	adds	r2, r7, r2
 800bd56:	8812      	ldrh	r2, [r2, #0]
 800bd58:	3201      	adds	r2, #1
 800bd5a:	801a      	strh	r2, [r3, #0]
 800bd5c:	230e      	movs	r3, #14
 800bd5e:	18fa      	adds	r2, r7, r3
 800bd60:	1cbb      	adds	r3, r7, #2
 800bd62:	8812      	ldrh	r2, [r2, #0]
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d3c0      	bcc.n	800bcec <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800bd6a:	230d      	movs	r3, #13
 800bd6c:	18fb      	adds	r3, r7, r3
 800bd6e:	781b      	ldrb	r3, [r3, #0]
}
 800bd70:	0018      	movs	r0, r3
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b004      	add	sp, #16
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	0008      	movs	r0, r1
 800bd82:	0011      	movs	r1, r2
 800bd84:	1cbb      	adds	r3, r7, #2
 800bd86:	1c02      	adds	r2, r0, #0
 800bd88:	801a      	strh	r2, [r3, #0]
 800bd8a:	1c7b      	adds	r3, r7, #1
 800bd8c:	1c0a      	adds	r2, r1, #0
 800bd8e:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800bd90:	1cbb      	adds	r3, r7, #2
 800bd92:	881a      	ldrh	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	0011      	movs	r1, r2
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f7ff ff97 	bl	800bccc <sensirion_i2c_generate_crc>
 800bd9e:	0003      	movs	r3, r0
 800bda0:	001a      	movs	r2, r3
 800bda2:	1c7b      	adds	r3, r7, #1
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d001      	beq.n	800bdae <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e000      	b.n	800bdb0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	b002      	add	sp, #8
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	0008      	movs	r0, r1
 800bdc2:	0011      	movs	r1, r2
 800bdc4:	1cbb      	adds	r3, r7, #2
 800bdc6:	1c02      	adds	r2, r0, #0
 800bdc8:	801a      	strh	r2, [r3, #0]
 800bdca:	003b      	movs	r3, r7
 800bdcc:	1c0a      	adds	r2, r1, #0
 800bdce:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800bdd0:	003b      	movs	r3, r7
 800bdd2:	881b      	ldrh	r3, [r3, #0]
 800bdd4:	0a1b      	lsrs	r3, r3, #8
 800bdd6:	b299      	uxth	r1, r3
 800bdd8:	1cbb      	adds	r3, r7, #2
 800bdda:	881b      	ldrh	r3, [r3, #0]
 800bddc:	1cba      	adds	r2, r7, #2
 800bdde:	1c58      	adds	r0, r3, #1
 800bde0:	8010      	strh	r0, [r2, #0]
 800bde2:	001a      	movs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	189b      	adds	r3, r3, r2
 800bde8:	b2ca      	uxtb	r2, r1
 800bdea:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800bdec:	1cbb      	adds	r3, r7, #2
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	1cba      	adds	r2, r7, #2
 800bdf2:	1c59      	adds	r1, r3, #1
 800bdf4:	8011      	strh	r1, [r2, #0]
 800bdf6:	001a      	movs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	189b      	adds	r3, r3, r2
 800bdfc:	003a      	movs	r2, r7
 800bdfe:	8812      	ldrh	r2, [r2, #0]
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	701a      	strb	r2, [r3, #0]
    return offset;
 800be04:	1cbb      	adds	r3, r7, #2
 800be06:	881b      	ldrh	r3, [r3, #0]
}
 800be08:	0018      	movs	r0, r3
 800be0a:	46bd      	mov	sp, r7
 800be0c:	b002      	add	sp, #8
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800be10:	b590      	push	{r4, r7, lr}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	0008      	movs	r0, r1
 800be1a:	0011      	movs	r1, r2
 800be1c:	1cbb      	adds	r3, r7, #2
 800be1e:	1c02      	adds	r2, r0, #0
 800be20:	801a      	strh	r2, [r3, #0]
 800be22:	003b      	movs	r3, r7
 800be24:	1c0a      	adds	r2, r1, #0
 800be26:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800be28:	003b      	movs	r3, r7
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	0a1b      	lsrs	r3, r3, #8
 800be2e:	b299      	uxth	r1, r3
 800be30:	1cbb      	adds	r3, r7, #2
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	1cba      	adds	r2, r7, #2
 800be36:	1c58      	adds	r0, r3, #1
 800be38:	8010      	strh	r0, [r2, #0]
 800be3a:	001a      	movs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	189b      	adds	r3, r3, r2
 800be40:	b2ca      	uxtb	r2, r1
 800be42:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800be44:	1cbb      	adds	r3, r7, #2
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	1cba      	adds	r2, r7, #2
 800be4a:	1c59      	adds	r1, r3, #1
 800be4c:	8011      	strh	r1, [r2, #0]
 800be4e:	001a      	movs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	189b      	adds	r3, r3, r2
 800be54:	003a      	movs	r2, r7
 800be56:	8812      	ldrh	r2, [r2, #0]
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800be5c:	1cbb      	adds	r3, r7, #2
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	3b02      	subs	r3, #2
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800be66:	1cbb      	adds	r3, r7, #2
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	18d4      	adds	r4, r2, r3
 800be6e:	2102      	movs	r1, #2
 800be70:	f7ff ff2c 	bl	800bccc <sensirion_i2c_generate_crc>
 800be74:	0003      	movs	r3, r0
 800be76:	7023      	strb	r3, [r4, #0]
    offset++;
 800be78:	1cbb      	adds	r3, r7, #2
 800be7a:	881a      	ldrh	r2, [r3, #0]
 800be7c:	1cbb      	adds	r3, r7, #2
 800be7e:	3201      	adds	r2, #1
 800be80:	801a      	strh	r2, [r3, #0]

    return offset;
 800be82:	1cbb      	adds	r3, r7, #2
 800be84:	881b      	ldrh	r3, [r3, #0]
}
 800be86:	0018      	movs	r0, r3
 800be88:	46bd      	mov	sp, r7
 800be8a:	b003      	add	sp, #12
 800be8c:	bd90      	pop	{r4, r7, pc}

0800be8e <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	0008      	movs	r0, r1
 800be98:	0011      	movs	r1, r2
 800be9a:	1cbb      	adds	r3, r7, #2
 800be9c:	1c02      	adds	r2, r0, #0
 800be9e:	801a      	strh	r2, [r3, #0]
 800bea0:	003b      	movs	r3, r7
 800bea2:	1c0a      	adds	r2, r1, #0
 800bea4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800bea6:	003b      	movs	r3, r7
 800bea8:	881a      	ldrh	r2, [r3, #0]
 800beaa:	1cbb      	adds	r3, r7, #2
 800beac:	8819      	ldrh	r1, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	0018      	movs	r0, r3
 800beb2:	f7ff ffad 	bl	800be10 <sensirion_i2c_add_uint16_t_to_buffer>
 800beb6:	0003      	movs	r3, r0
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b002      	add	sp, #8
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6039      	str	r1, [r7, #0]
 800bec8:	0011      	movs	r1, r2
 800beca:	1dfb      	adds	r3, r7, #7
 800becc:	1c02      	adds	r2, r0, #0
 800bece:	701a      	strb	r2, [r3, #0]
 800bed0:	1d3b      	adds	r3, r7, #4
 800bed2:	1c0a      	adds	r2, r1, #0
 800bed4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800bed6:	1d3b      	adds	r3, r7, #4
 800bed8:	881a      	ldrh	r2, [r3, #0]
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	1dfb      	adds	r3, r7, #7
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	0018      	movs	r0, r3
 800bee2:	f7fe f9d5 	bl	800a290 <sensirion_i2c_hal_write>
 800bee6:	0003      	movs	r3, r0
}
 800bee8:	0018      	movs	r0, r3
 800beea:	46bd      	mov	sp, r7
 800beec:	b002      	add	sp, #8
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800bef0:	b5b0      	push	{r4, r5, r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6039      	str	r1, [r7, #0]
 800bef8:	0011      	movs	r1, r2
 800befa:	1dfb      	adds	r3, r7, #7
 800befc:	1c02      	adds	r2, r0, #0
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	1d3b      	adds	r3, r7, #4
 800bf02:	1c0a      	adds	r2, r1, #0
 800bf04:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800bf06:	1d3b      	adds	r3, r7, #4
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	085b      	lsrs	r3, r3, #1
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	220a      	movs	r2, #10
 800bf10:	18ba      	adds	r2, r7, r2
 800bf12:	1c19      	adds	r1, r3, #0
 800bf14:	1c0b      	adds	r3, r1, #0
 800bf16:	18db      	adds	r3, r3, r3
 800bf18:	185b      	adds	r3, r3, r1
 800bf1a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800bf1c:	1d3b      	adds	r3, r7, #4
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	2201      	movs	r2, #1
 800bf22:	4013      	ands	r3, r2
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800bf2a:	2304      	movs	r3, #4
 800bf2c:	e06b      	b.n	800c006 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800bf2e:	230a      	movs	r3, #10
 800bf30:	18fb      	adds	r3, r7, r3
 800bf32:	881a      	ldrh	r2, [r3, #0]
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	1dfb      	adds	r3, r7, #7
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	f7fe f988 	bl	800a250 <sensirion_i2c_hal_read>
 800bf40:	0003      	movs	r3, r0
 800bf42:	001a      	movs	r2, r3
 800bf44:	2108      	movs	r1, #8
 800bf46:	187b      	adds	r3, r7, r1
 800bf48:	801a      	strh	r2, [r3, #0]
    if (error) {
 800bf4a:	000a      	movs	r2, r1
 800bf4c:	18bb      	adds	r3, r7, r2
 800bf4e:	2100      	movs	r1, #0
 800bf50:	5e5b      	ldrsh	r3, [r3, r1]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800bf56:	18bb      	adds	r3, r7, r2
 800bf58:	2200      	movs	r2, #0
 800bf5a:	5e9b      	ldrsh	r3, [r3, r2]
 800bf5c:	e053      	b.n	800c006 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800bf5e:	230e      	movs	r3, #14
 800bf60:	18fb      	adds	r3, r7, r3
 800bf62:	2200      	movs	r2, #0
 800bf64:	801a      	strh	r2, [r3, #0]
 800bf66:	230c      	movs	r3, #12
 800bf68:	18fb      	adds	r3, r7, r3
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	801a      	strh	r2, [r3, #0]
 800bf6e:	e041      	b.n	800bff4 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800bf70:	210e      	movs	r1, #14
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800bf7a:	187b      	adds	r3, r7, r1
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	3302      	adds	r3, #2
 800bf80:	683a      	ldr	r2, [r7, #0]
 800bf82:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	001a      	movs	r2, r3
 800bf88:	2102      	movs	r1, #2
 800bf8a:	f7ff fef5 	bl	800bd78 <sensirion_i2c_check_crc>
 800bf8e:	0003      	movs	r3, r0
 800bf90:	001a      	movs	r2, r3
 800bf92:	2108      	movs	r1, #8
 800bf94:	187b      	adds	r3, r7, r1
 800bf96:	801a      	strh	r2, [r3, #0]
        if (error) {
 800bf98:	000a      	movs	r2, r1
 800bf9a:	18bb      	adds	r3, r7, r2
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	5e5b      	ldrsh	r3, [r3, r1]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800bfa4:	18bb      	adds	r3, r7, r2
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	5e9b      	ldrsh	r3, [r3, r2]
 800bfaa:	e02c      	b.n	800c006 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800bfac:	240e      	movs	r4, #14
 800bfae:	193b      	adds	r3, r7, r4
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	18d2      	adds	r2, r2, r3
 800bfb6:	250c      	movs	r5, #12
 800bfb8:	197b      	adds	r3, r7, r5
 800bfba:	881b      	ldrh	r3, [r3, #0]
 800bfbc:	1979      	adds	r1, r7, r5
 800bfbe:	1c58      	adds	r0, r3, #1
 800bfc0:	8008      	strh	r0, [r1, #0]
 800bfc2:	0019      	movs	r1, r3
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	185b      	adds	r3, r3, r1
 800bfc8:	7812      	ldrb	r2, [r2, #0]
 800bfca:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800bfcc:	193b      	adds	r3, r7, r4
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	18d2      	adds	r2, r2, r3
 800bfd6:	197b      	adds	r3, r7, r5
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	1979      	adds	r1, r7, r5
 800bfdc:	1c58      	adds	r0, r3, #1
 800bfde:	8008      	strh	r0, [r1, #0]
 800bfe0:	0019      	movs	r1, r3
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	185b      	adds	r3, r3, r1
 800bfe6:	7812      	ldrb	r2, [r2, #0]
 800bfe8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800bfea:	193b      	adds	r3, r7, r4
 800bfec:	193a      	adds	r2, r7, r4
 800bfee:	8812      	ldrh	r2, [r2, #0]
 800bff0:	3203      	adds	r2, #3
 800bff2:	801a      	strh	r2, [r3, #0]
 800bff4:	230e      	movs	r3, #14
 800bff6:	18fa      	adds	r2, r7, r3
 800bff8:	230a      	movs	r3, #10
 800bffa:	18fb      	adds	r3, r7, r3
 800bffc:	8812      	ldrh	r2, [r2, #0]
 800bffe:	881b      	ldrh	r3, [r3, #0]
 800c000:	429a      	cmp	r2, r3
 800c002:	d3b5      	bcc.n	800bf70 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800c004:	2300      	movs	r3, #0
}
 800c006:	0018      	movs	r0, r3
 800c008:	46bd      	mov	sp, r7
 800c00a:	b004      	add	sp, #16
 800c00c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c010 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6039      	str	r1, [r7, #0]
 800c018:	0011      	movs	r1, r2
 800c01a:	1dfb      	adds	r3, r7, #7
 800c01c:	1c02      	adds	r2, r0, #0
 800c01e:	701a      	strb	r2, [r3, #0]
 800c020:	1dbb      	adds	r3, r7, #6
 800c022:	1c0a      	adds	r2, r1, #0
 800c024:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800c026:	4b08      	ldr	r3, [pc, #32]	@ (800c048 <ReadRegister+0x38>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d008      	beq.n	800c040 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800c02e:	4b06      	ldr	r3, [pc, #24]	@ (800c048 <ReadRegister+0x38>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	1dba      	adds	r2, r7, #6
 800c034:	7814      	ldrb	r4, [r2, #0]
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	1dfa      	adds	r2, r7, #7
 800c03a:	7810      	ldrb	r0, [r2, #0]
 800c03c:	0022      	movs	r2, r4
 800c03e:	4798      	blx	r3
  }
}
 800c040:	46c0      	nop			@ (mov r8, r8)
 800c042:	46bd      	mov	sp, r7
 800c044:	b003      	add	sp, #12
 800c046:	bd90      	pop	{r4, r7, pc}
 800c048:	20000d90 	.word	0x20000d90

0800c04c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800c04c:	b590      	push	{r4, r7, lr}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6039      	str	r1, [r7, #0]
 800c054:	0011      	movs	r1, r2
 800c056:	1dfb      	adds	r3, r7, #7
 800c058:	1c02      	adds	r2, r0, #0
 800c05a:	701a      	strb	r2, [r3, #0]
 800c05c:	1dbb      	adds	r3, r7, #6
 800c05e:	1c0a      	adds	r2, r1, #0
 800c060:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800c062:	4b08      	ldr	r3, [pc, #32]	@ (800c084 <WriteRegister+0x38>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d008      	beq.n	800c07c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800c06a:	4b06      	ldr	r3, [pc, #24]	@ (800c084 <WriteRegister+0x38>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	1dba      	adds	r2, r7, #6
 800c070:	7814      	ldrb	r4, [r2, #0]
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	1dfa      	adds	r2, r7, #7
 800c076:	7810      	ldrb	r0, [r2, #0]
 800c078:	0022      	movs	r2, r4
 800c07a:	4798      	blx	r3
  }
}
 800c07c:	46c0      	nop			@ (mov r8, r8)
 800c07e:	46bd      	mov	sp, r7
 800c080:	b003      	add	sp, #12
 800c082:	bd90      	pop	{r4, r7, pc}
 800c084:	20000d94 	.word	0x20000d94

0800c088 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800c090:	f003 fb62 	bl	800f758 <HAL_GetTick>
 800c094:	0002      	movs	r2, r0
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	18d2      	adds	r2, r2, r3
 800c09a:	4b03      	ldr	r3, [pc, #12]	@ (800c0a8 <setSGP40TimeStamp+0x20>)
 800c09c:	601a      	str	r2, [r3, #0]
}
 800c09e:	46c0      	nop			@ (mov r8, r8)
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	b002      	add	sp, #8
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	46c0      	nop			@ (mov r8, r8)
 800c0a8:	20000da4 	.word	0x20000da4

0800c0ac <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800c0b0:	4b02      	ldr	r3, [pc, #8]	@ (800c0bc <ResetSGP40samplecounter+0x10>)
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
}
 800c0b6:	46c0      	nop			@ (mov r8, r8)
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20000da2 	.word	0x20000da2

0800c0c0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800c0ca:	4b07      	ldr	r3, [pc, #28]	@ (800c0e8 <SGP_Init+0x28>)
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800c0d0:	4b06      	ldr	r3, [pc, #24]	@ (800c0ec <SGP_Init+0x2c>)
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800c0d6:	4b06      	ldr	r3, [pc, #24]	@ (800c0f0 <SGP_Init+0x30>)
 800c0d8:	2100      	movs	r1, #0
 800c0da:	0018      	movs	r0, r3
 800c0dc:	f7fe ff70 	bl	800afc0 <GasIndexAlgorithm_init>
}
 800c0e0:	46c0      	nop			@ (mov r8, r8)
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	b002      	add	sp, #8
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20000d90 	.word	0x20000d90
 800c0ec:	20000d94 	.word	0x20000d94
 800c0f0:	20000dac 	.word	0x20000dac

0800c0f4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800c0f8:	4b07      	ldr	r3, [pc, #28]	@ (800c118 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d004      	beq.n	800c10a <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800c100:	4b06      	ldr	r3, [pc, #24]	@ (800c11c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800c102:	22fe      	movs	r2, #254	@ 0xfe
 800c104:	0592      	lsls	r2, r2, #22
 800c106:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800c108:	e002      	b.n	800c110 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800c10a:	4b04      	ldr	r3, [pc, #16]	@ (800c11c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800c10c:	4a04      	ldr	r2, [pc, #16]	@ (800c120 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800c10e:	605a      	str	r2, [r3, #4]
}
 800c110:	46c0      	nop			@ (mov r8, r8)
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	46c0      	nop			@ (mov r8, r8)
 800c118:	20001cf9 	.word	0x20001cf9
 800c11c:	20000dac 	.word	0x20000dac
 800c120:	44610000 	.word	0x44610000

0800c124 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800c128:	4b13      	ldr	r3, [pc, #76]	@ (800c178 <SGP_StartMeasurement+0x54>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00d      	beq.n	800c14c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c130:	4b12      	ldr	r3, [pc, #72]	@ (800c17c <SGP_StartMeasurement+0x58>)
 800c132:	2208      	movs	r2, #8
 800c134:	0019      	movs	r1, r3
 800c136:	2059      	movs	r0, #89	@ 0x59
 800c138:	f7ff ff88 	bl	800c04c <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800c13c:	f003 fb0c 	bl	800f758 <HAL_GetTick>
 800c140:	0003      	movs	r3, r0
 800c142:	331e      	adds	r3, #30
 800c144:	001a      	movs	r2, r3
 800c146:	4b0e      	ldr	r3, [pc, #56]	@ (800c180 <SGP_StartMeasurement+0x5c>)
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	e00c      	b.n	800c166 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c14c:	4b0d      	ldr	r3, [pc, #52]	@ (800c184 <SGP_StartMeasurement+0x60>)
 800c14e:	2208      	movs	r2, #8
 800c150:	0019      	movs	r1, r3
 800c152:	2059      	movs	r0, #89	@ 0x59
 800c154:	f7ff ff7a 	bl	800c04c <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800c158:	f003 fafe 	bl	800f758 <HAL_GetTick>
 800c15c:	0003      	movs	r3, r0
 800c15e:	33aa      	adds	r3, #170	@ 0xaa
 800c160:	001a      	movs	r2, r3
 800c162:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <SGP_StartMeasurement+0x64>)
 800c164:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800c166:	4b09      	ldr	r3, [pc, #36]	@ (800c18c <SGP_StartMeasurement+0x68>)
 800c168:	2200      	movs	r2, #0
 800c16a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800c16c:	4b08      	ldr	r3, [pc, #32]	@ (800c190 <SGP_StartMeasurement+0x6c>)
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
}
 800c172:	46c0      	nop			@ (mov r8, r8)
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20000e54 	.word	0x20000e54
 800c17c:	200000a0 	.word	0x200000a0
 800c180:	200000b4 	.word	0x200000b4
 800c184:	20000098 	.word	0x20000098
 800c188:	200000ac 	.word	0x200000ac
 800c18c:	20000da8 	.word	0x20000da8
 800c190:	20000da9 	.word	0x20000da9

0800c194 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800c198:	4b04      	ldr	r3, [pc, #16]	@ (800c1ac <SGP_HeatedUp+0x18>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	0018      	movs	r0, r3
 800c19e:	f002 fe41 	bl	800ee24 <TimestampIsReached>
 800c1a2:	0003      	movs	r3, r0
}
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	46c0      	nop			@ (mov r8, r8)
 800c1ac:	200000ac 	.word	0x200000ac

0800c1b0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800c1b4:	4b04      	ldr	r3, [pc, #16]	@ (800c1c8 <SGP_MeasurementReady+0x18>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f002 fe33 	bl	800ee24 <TimestampIsReached>
 800c1be:	0003      	movs	r3, r0
}
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	46c0      	nop			@ (mov r8, r8)
 800c1c8:	200000b4 	.word	0x200000b4

0800c1cc <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800c1d0:	4b04      	ldr	r3, [pc, #16]	@ (800c1e4 <SGP_MeasurementDone+0x18>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	0018      	movs	r0, r3
 800c1d6:	f002 fe25 	bl	800ee24 <TimestampIsReached>
 800c1da:	0003      	movs	r3, r0
}
 800c1dc:	0018      	movs	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	46c0      	nop			@ (mov r8, r8)
 800c1e4:	200000b0 	.word	0x200000b0

0800c1e8 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c1ec:	4b04      	ldr	r3, [pc, #16]	@ (800c200 <SGP_TurnHeaterOff+0x18>)
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	0019      	movs	r1, r3
 800c1f2:	2059      	movs	r0, #89	@ 0x59
 800c1f4:	f7ff ff2a 	bl	800c04c <WriteRegister>
}
 800c1f8:	46c0      	nop			@ (mov r8, r8)
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	46c0      	nop			@ (mov r8, r8)
 800c200:	20000090 	.word	0x20000090

0800c204 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800c204:	b590      	push	{r4, r7, lr}
 800c206:	b087      	sub	sp, #28
 800c208:	af02      	add	r7, sp, #8
 800c20a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800c20c:	f7ff ffc2 	bl	800c194 <SGP_HeatedUp>
 800c210:	1e03      	subs	r3, r0, #0
 800c212:	d032      	beq.n	800c27a <SGP_GetMeasurementValues+0x76>
 800c214:	4b7f      	ldr	r3, [pc, #508]	@ (800c414 <SGP_GetMeasurementValues+0x210>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2201      	movs	r2, #1
 800c21a:	4053      	eors	r3, r2
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d02b      	beq.n	800c27a <SGP_GetMeasurementValues+0x76>
 800c222:	4b7d      	ldr	r3, [pc, #500]	@ (800c418 <SGP_GetMeasurementValues+0x214>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2201      	movs	r2, #1
 800c228:	4053      	eors	r3, r2
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d024      	beq.n	800c27a <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800c230:	4b78      	ldr	r3, [pc, #480]	@ (800c414 <SGP_GetMeasurementValues+0x210>)
 800c232:	2201      	movs	r2, #1
 800c234:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800c236:	4b79      	ldr	r3, [pc, #484]	@ (800c41c <SGP_GetMeasurementValues+0x218>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00d      	beq.n	800c25a <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c23e:	4b78      	ldr	r3, [pc, #480]	@ (800c420 <SGP_GetMeasurementValues+0x21c>)
 800c240:	2208      	movs	r2, #8
 800c242:	0019      	movs	r1, r3
 800c244:	2059      	movs	r0, #89	@ 0x59
 800c246:	f7ff ff01 	bl	800c04c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800c24a:	f003 fa85 	bl	800f758 <HAL_GetTick>
 800c24e:	0003      	movs	r3, r0
 800c250:	331e      	adds	r3, #30
 800c252:	001a      	movs	r2, r3
 800c254:	4b73      	ldr	r3, [pc, #460]	@ (800c424 <SGP_GetMeasurementValues+0x220>)
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	e00c      	b.n	800c274 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800c25a:	4b73      	ldr	r3, [pc, #460]	@ (800c428 <SGP_GetMeasurementValues+0x224>)
 800c25c:	2208      	movs	r2, #8
 800c25e:	0019      	movs	r1, r3
 800c260:	2059      	movs	r0, #89	@ 0x59
 800c262:	f7ff fef3 	bl	800c04c <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800c266:	f003 fa77 	bl	800f758 <HAL_GetTick>
 800c26a:	0003      	movs	r3, r0
 800c26c:	331e      	adds	r3, #30
 800c26e:	001a      	movs	r2, r3
 800c270:	4b6c      	ldr	r3, [pc, #432]	@ (800c424 <SGP_GetMeasurementValues+0x220>)
 800c272:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800c274:	4b68      	ldr	r3, [pc, #416]	@ (800c418 <SGP_GetMeasurementValues+0x214>)
 800c276:	2201      	movs	r2, #1
 800c278:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800c27a:	4b66      	ldr	r3, [pc, #408]	@ (800c414 <SGP_GetMeasurementValues+0x210>)
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d100      	bne.n	800c284 <SGP_GetMeasurementValues+0x80>
 800c282:	e0ab      	b.n	800c3dc <SGP_GetMeasurementValues+0x1d8>
 800c284:	f7ff ff94 	bl	800c1b0 <SGP_MeasurementReady>
 800c288:	1e03      	subs	r3, r0, #0
 800c28a:	d100      	bne.n	800c28e <SGP_GetMeasurementValues+0x8a>
 800c28c:	e0a6      	b.n	800c3dc <SGP_GetMeasurementValues+0x1d8>
 800c28e:	4b67      	ldr	r3, [pc, #412]	@ (800c42c <SGP_GetMeasurementValues+0x228>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2201      	movs	r2, #1
 800c294:	4053      	eors	r3, r2
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d100      	bne.n	800c29e <SGP_GetMeasurementValues+0x9a>
 800c29c:	e09e      	b.n	800c3dc <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800c29e:	4b63      	ldr	r3, [pc, #396]	@ (800c42c <SGP_GetMeasurementValues+0x228>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800c2a4:	4b62      	ldr	r3, [pc, #392]	@ (800c430 <SGP_GetMeasurementValues+0x22c>)
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	0019      	movs	r1, r3
 800c2aa:	2059      	movs	r0, #89	@ 0x59
 800c2ac:	f7ff feb0 	bl	800c010 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800c2b0:	4b5f      	ldr	r3, [pc, #380]	@ (800c430 <SGP_GetMeasurementValues+0x22c>)
 800c2b2:	2203      	movs	r2, #3
 800c2b4:	2103      	movs	r1, #3
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	f000 f918 	bl	800c4ec <CheckCRC>
 800c2bc:	0003      	movs	r3, r0
 800c2be:	001a      	movs	r2, r3
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	4053      	eors	r3, r2
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d02a      	beq.n	800c320 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800c2ca:	4a5a      	ldr	r2, [pc, #360]	@ (800c434 <SGP_GetMeasurementValues+0x230>)
 800c2cc:	4b5a      	ldr	r3, [pc, #360]	@ (800c438 <SGP_GetMeasurementValues+0x234>)
 800c2ce:	0019      	movs	r1, r3
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	f002 fdfd 	bl	800eed0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800c2d6:	4a59      	ldr	r2, [pc, #356]	@ (800c43c <SGP_GetMeasurementValues+0x238>)
 800c2d8:	4b59      	ldr	r3, [pc, #356]	@ (800c440 <SGP_GetMeasurementValues+0x23c>)
 800c2da:	0019      	movs	r1, r3
 800c2dc:	2002      	movs	r0, #2
 800c2de:	f002 fdf7 	bl	800eed0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800c2e2:	230f      	movs	r3, #15
 800c2e4:	18fb      	adds	r3, r7, r3
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	701a      	strb	r2, [r3, #0]
 800c2ea:	e012      	b.n	800c312 <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800c2ec:	240f      	movs	r4, #15
 800c2ee:	193b      	adds	r3, r7, r4
 800c2f0:	7818      	ldrb	r0, [r3, #0]
 800c2f2:	193b      	adds	r3, r7, r4
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	4a4e      	ldr	r2, [pc, #312]	@ (800c430 <SGP_GetMeasurementValues+0x22c>)
 800c2f8:	5cd3      	ldrb	r3, [r2, r3]
 800c2fa:	4a52      	ldr	r2, [pc, #328]	@ (800c444 <SGP_GetMeasurementValues+0x240>)
 800c2fc:	4952      	ldr	r1, [pc, #328]	@ (800c448 <SGP_GetMeasurementValues+0x244>)
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	0003      	movs	r3, r0
 800c302:	2003      	movs	r0, #3
 800c304:	f002 fde4 	bl	800eed0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800c308:	193b      	adds	r3, r7, r4
 800c30a:	781a      	ldrb	r2, [r3, #0]
 800c30c:	193b      	adds	r3, r7, r4
 800c30e:	3201      	adds	r2, #1
 800c310:	701a      	strb	r2, [r3, #0]
 800c312:	230f      	movs	r3, #15
 800c314:	18fb      	adds	r3, r7, r3
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d9e7      	bls.n	800c2ec <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e075      	b.n	800c40c <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800c320:	f003 fa1a 	bl	800f758 <HAL_GetTick>
 800c324:	0003      	movs	r3, r0
 800c326:	22fa      	movs	r2, #250	@ 0xfa
 800c328:	0092      	lsls	r2, r2, #2
 800c32a:	189a      	adds	r2, r3, r2
 800c32c:	4b47      	ldr	r3, [pc, #284]	@ (800c44c <SGP_GetMeasurementValues+0x248>)
 800c32e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800c330:	f7ff ff5a 	bl	800c1e8 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800c334:	4b46      	ldr	r3, [pc, #280]	@ (800c450 <SGP_GetMeasurementValues+0x24c>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	3301      	adds	r3, #1
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	4b44      	ldr	r3, [pc, #272]	@ (800c450 <SGP_GetMeasurementValues+0x24c>)
 800c33e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800c340:	4b43      	ldr	r3, [pc, #268]	@ (800c450 <SGP_GetMeasurementValues+0x24c>)
 800c342:	781a      	ldrb	r2, [r3, #0]
 800c344:	4b43      	ldr	r3, [pc, #268]	@ (800c454 <SGP_GetMeasurementValues+0x250>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d347      	bcc.n	800c3dc <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800c34c:	4b38      	ldr	r3, [pc, #224]	@ (800c430 <SGP_GetMeasurementValues+0x22c>)
 800c34e:	785b      	ldrb	r3, [r3, #1]
 800c350:	021b      	lsls	r3, r3, #8
 800c352:	b21a      	sxth	r2, r3
 800c354:	4b36      	ldr	r3, [pc, #216]	@ (800c430 <SGP_GetMeasurementValues+0x22c>)
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	b21b      	sxth	r3, r3
 800c35a:	4313      	orrs	r3, r2
 800c35c:	b21a      	sxth	r2, r3
 800c35e:	240c      	movs	r4, #12
 800c360:	193b      	adds	r3, r7, r4
 800c362:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800c368:	193b      	adds	r3, r7, r4
 800c36a:	8819      	ldrh	r1, [r3, #0]
 800c36c:	2308      	movs	r3, #8
 800c36e:	18fa      	adds	r2, r7, r3
 800c370:	4b39      	ldr	r3, [pc, #228]	@ (800c458 <SGP_GetMeasurementValues+0x254>)
 800c372:	0018      	movs	r0, r3
 800c374:	f7fe fe88 	bl	800b088 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800c37e:	4b37      	ldr	r3, [pc, #220]	@ (800c45c <SGP_GetMeasurementValues+0x258>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	b2da      	uxtb	r2, r3
 800c386:	4b35      	ldr	r3, [pc, #212]	@ (800c45c <SGP_GetMeasurementValues+0x258>)
 800c388:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800c38a:	4b34      	ldr	r3, [pc, #208]	@ (800c45c <SGP_GetMeasurementValues+0x258>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d10d      	bne.n	800c3ae <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800c392:	193b      	adds	r3, r7, r4
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	4a32      	ldr	r2, [pc, #200]	@ (800c460 <SGP_GetMeasurementValues+0x25c>)
 800c398:	492b      	ldr	r1, [pc, #172]	@ (800c448 <SGP_GetMeasurementValues+0x244>)
 800c39a:	2003      	movs	r0, #3
 800c39c:	f002 fd98 	bl	800eed0 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	4a30      	ldr	r2, [pc, #192]	@ (800c464 <SGP_GetMeasurementValues+0x260>)
 800c3a4:	4928      	ldr	r1, [pc, #160]	@ (800c448 <SGP_GetMeasurementValues+0x244>)
 800c3a6:	2003      	movs	r0, #3
 800c3a8:	f002 fd92 	bl	800eed0 <CreateLine>
 800c3ac:	e006      	b.n	800c3bc <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800c3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800c45c <SGP_GetMeasurementValues+0x258>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b0b      	cmp	r3, #11
 800c3b4:	d102      	bne.n	800c3bc <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800c3b6:	4b29      	ldr	r3, [pc, #164]	@ (800c45c <SGP_GetMeasurementValues+0x258>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	0018      	movs	r0, r3
 800c3c2:	f001 fd35 	bl	800de30 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800c3c6:	4b22      	ldr	r3, [pc, #136]	@ (800c450 <SGP_GetMeasurementValues+0x24c>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800c3cc:	4b13      	ldr	r3, [pc, #76]	@ (800c41c <SGP_GetMeasurementValues+0x218>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800c3d2:	4b11      	ldr	r3, [pc, #68]	@ (800c418 <SGP_GetMeasurementValues+0x214>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	701a      	strb	r2, [r3, #0]
      return true;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e017      	b.n	800c40c <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800c3dc:	f7ff fef6 	bl	800c1cc <SGP_MeasurementDone>
 800c3e0:	1e03      	subs	r3, r0, #0
 800c3e2:	d012      	beq.n	800c40a <SGP_GetMeasurementValues+0x206>
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c414 <SGP_GetMeasurementValues+0x210>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00e      	beq.n	800c40a <SGP_GetMeasurementValues+0x206>
 800c3ec:	4b0f      	ldr	r3, [pc, #60]	@ (800c42c <SGP_GetMeasurementValues+0x228>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800c3f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c468 <SGP_GetMeasurementValues+0x264>)
 800c3f6:	4b14      	ldr	r3, [pc, #80]	@ (800c448 <SGP_GetMeasurementValues+0x244>)
 800c3f8:	0019      	movs	r1, r3
 800c3fa:	2003      	movs	r0, #3
 800c3fc:	f002 fd68 	bl	800eed0 <CreateLine>
    SGP_StartMeasurement();
 800c400:	f7ff fe90 	bl	800c124 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800c404:	4b04      	ldr	r3, [pc, #16]	@ (800c418 <SGP_GetMeasurementValues+0x214>)
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800c40a:	2300      	movs	r3, #0
}
 800c40c:	0018      	movs	r0, r3
 800c40e:	46bd      	mov	sp, r7
 800c410:	b005      	add	sp, #20
 800c412:	bd90      	pop	{r4, r7, pc}
 800c414:	20000da8 	.word	0x20000da8
 800c418:	20000e55 	.word	0x20000e55
 800c41c:	20000e54 	.word	0x20000e54
 800c420:	200000a0 	.word	0x200000a0
 800c424:	200000b4 	.word	0x200000b4
 800c428:	20000098 	.word	0x20000098
 800c42c:	20000da9 	.word	0x20000da9
 800c430:	20000d98 	.word	0x20000d98
 800c434:	08025cdc 	.word	0x08025cdc
 800c438:	08025d04 	.word	0x08025d04
 800c43c:	08025d08 	.word	0x08025d08
 800c440:	08025d28 	.word	0x08025d28
 800c444:	08025d2c 	.word	0x08025d2c
 800c448:	08025d4c 	.word	0x08025d4c
 800c44c:	200000b0 	.word	0x200000b0
 800c450:	20000da1 	.word	0x20000da1
 800c454:	200000aa 	.word	0x200000aa
 800c458:	20000dac 	.word	0x20000dac
 800c45c:	20000da2 	.word	0x20000da2
 800c460:	08025d50 	.word	0x08025d50
 800c464:	08025d6c 	.word	0x08025d6c
 800c468:	08025d88 	.word	0x08025d88

0800c46c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c472:	4b1a      	ldr	r3, [pc, #104]	@ (800c4dc <SGP_DeviceConnected+0x70>)
 800c474:	2202      	movs	r2, #2
 800c476:	0019      	movs	r1, r3
 800c478:	2059      	movs	r0, #89	@ 0x59
 800c47a:	f7ff fde7 	bl	800c04c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800c47e:	2001      	movs	r0, #1
 800c480:	f003 f974 	bl	800f76c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800c484:	4b16      	ldr	r3, [pc, #88]	@ (800c4e0 <SGP_DeviceConnected+0x74>)
 800c486:	2209      	movs	r2, #9
 800c488:	0019      	movs	r1, r3
 800c48a:	2059      	movs	r0, #89	@ 0x59
 800c48c:	f7ff fdc0 	bl	800c010 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800c490:	1dfb      	adds	r3, r7, #7
 800c492:	2200      	movs	r2, #0
 800c494:	701a      	strb	r2, [r3, #0]
 800c496:	e011      	b.n	800c4bc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800c498:	1dfb      	adds	r3, r7, #7
 800c49a:	7818      	ldrb	r0, [r3, #0]
 800c49c:	1dfb      	adds	r3, r7, #7
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e0 <SGP_DeviceConnected+0x74>)
 800c4a2:	5cd3      	ldrb	r3, [r2, r3]
 800c4a4:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e4 <SGP_DeviceConnected+0x78>)
 800c4a6:	4910      	ldr	r1, [pc, #64]	@ (800c4e8 <SGP_DeviceConnected+0x7c>)
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	0003      	movs	r3, r0
 800c4ac:	2002      	movs	r0, #2
 800c4ae:	f002 fd0f 	bl	800eed0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800c4b2:	1dfb      	adds	r3, r7, #7
 800c4b4:	781a      	ldrb	r2, [r3, #0]
 800c4b6:	1dfb      	adds	r3, r7, #7
 800c4b8:	3201      	adds	r2, #1
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	1dfb      	adds	r3, r7, #7
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b08      	cmp	r3, #8
 800c4c2:	d9e9      	bls.n	800c498 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800c4c4:	4b06      	ldr	r3, [pc, #24]	@ (800c4e0 <SGP_DeviceConnected+0x74>)
 800c4c6:	2203      	movs	r2, #3
 800c4c8:	2109      	movs	r1, #9
 800c4ca:	0018      	movs	r0, r3
 800c4cc:	f000 f80e 	bl	800c4ec <CheckCRC>
 800c4d0:	0003      	movs	r3, r0
}
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	b002      	add	sp, #8
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	46c0      	nop			@ (mov r8, r8)
 800c4dc:	20000094 	.word	0x20000094
 800c4e0:	20000d98 	.word	0x20000d98
 800c4e4:	08025da8 	.word	0x08025da8
 800c4e8:	08025d28 	.word	0x08025d28

0800c4ec <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800c4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ee:	b08f      	sub	sp, #60	@ 0x3c
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6278      	str	r0, [r7, #36]	@ 0x24
 800c4f4:	0008      	movs	r0, r1
 800c4f6:	0011      	movs	r1, r2
 800c4f8:	2323      	movs	r3, #35	@ 0x23
 800c4fa:	18fb      	adds	r3, r7, r3
 800c4fc:	1c02      	adds	r2, r0, #0
 800c4fe:	701a      	strb	r2, [r3, #0]
 800c500:	2322      	movs	r3, #34	@ 0x22
 800c502:	18fb      	adds	r3, r7, r3
 800c504:	1c0a      	adds	r2, r1, #0
 800c506:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c508:	2317      	movs	r3, #23
 800c50a:	2220      	movs	r2, #32
 800c50c:	189b      	adds	r3, r3, r2
 800c50e:	19db      	adds	r3, r3, r7
 800c510:	2200      	movs	r2, #0
 800c512:	701a      	strb	r2, [r3, #0]
 800c514:	e09f      	b.n	800c656 <CheckCRC+0x16a>
 800c516:	466b      	mov	r3, sp
 800c518:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800c51a:	2322      	movs	r3, #34	@ 0x22
 800c51c:	18fb      	adds	r3, r7, r3
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	001a      	movs	r2, r3
 800c522:	3a01      	subs	r2, #1
 800c524:	633a      	str	r2, [r7, #48]	@ 0x30
 800c526:	60bb      	str	r3, [r7, #8]
 800c528:	2200      	movs	r2, #0
 800c52a:	60fa      	str	r2, [r7, #12]
 800c52c:	68b8      	ldr	r0, [r7, #8]
 800c52e:	68f9      	ldr	r1, [r7, #12]
 800c530:	0002      	movs	r2, r0
 800c532:	0f52      	lsrs	r2, r2, #29
 800c534:	000c      	movs	r4, r1
 800c536:	00e4      	lsls	r4, r4, #3
 800c538:	61fc      	str	r4, [r7, #28]
 800c53a:	69fc      	ldr	r4, [r7, #28]
 800c53c:	4314      	orrs	r4, r2
 800c53e:	61fc      	str	r4, [r7, #28]
 800c540:	0002      	movs	r2, r0
 800c542:	00d2      	lsls	r2, r2, #3
 800c544:	61ba      	str	r2, [r7, #24]
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	2200      	movs	r2, #0
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	6838      	ldr	r0, [r7, #0]
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	0002      	movs	r2, r0
 800c552:	0f52      	lsrs	r2, r2, #29
 800c554:	000c      	movs	r4, r1
 800c556:	00e4      	lsls	r4, r4, #3
 800c558:	617c      	str	r4, [r7, #20]
 800c55a:	697c      	ldr	r4, [r7, #20]
 800c55c:	4314      	orrs	r4, r2
 800c55e:	617c      	str	r4, [r7, #20]
 800c560:	0002      	movs	r2, r0
 800c562:	00d2      	lsls	r2, r2, #3
 800c564:	613a      	str	r2, [r7, #16]
 800c566:	3307      	adds	r3, #7
 800c568:	08db      	lsrs	r3, r3, #3
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	466a      	mov	r2, sp
 800c56e:	1ad3      	subs	r3, r2, r3
 800c570:	469d      	mov	sp, r3
 800c572:	466b      	mov	r3, sp
 800c574:	3300      	adds	r3, #0
 800c576:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800c578:	2316      	movs	r3, #22
 800c57a:	2220      	movs	r2, #32
 800c57c:	189b      	adds	r3, r3, r2
 800c57e:	19db      	adds	r3, r3, r7
 800c580:	2200      	movs	r2, #0
 800c582:	701a      	strb	r2, [r3, #0]
 800c584:	e01e      	b.n	800c5c4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800c586:	2317      	movs	r3, #23
 800c588:	2220      	movs	r2, #32
 800c58a:	189b      	adds	r3, r3, r2
 800c58c:	19db      	adds	r3, r3, r7
 800c58e:	781a      	ldrb	r2, [r3, #0]
 800c590:	2116      	movs	r1, #22
 800c592:	2320      	movs	r3, #32
 800c594:	18cb      	adds	r3, r1, r3
 800c596:	19db      	adds	r3, r3, r7
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	18d3      	adds	r3, r2, r3
 800c59c:	001a      	movs	r2, r3
 800c59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a0:	189a      	adds	r2, r3, r2
 800c5a2:	0008      	movs	r0, r1
 800c5a4:	2320      	movs	r3, #32
 800c5a6:	18cb      	adds	r3, r1, r3
 800c5a8:	19db      	adds	r3, r3, r7
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	7811      	ldrb	r1, [r2, #0]
 800c5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5b0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800c5b2:	2320      	movs	r3, #32
 800c5b4:	18c3      	adds	r3, r0, r3
 800c5b6:	19db      	adds	r3, r3, r7
 800c5b8:	781a      	ldrb	r2, [r3, #0]
 800c5ba:	2320      	movs	r3, #32
 800c5bc:	18c3      	adds	r3, r0, r3
 800c5be:	19db      	adds	r3, r3, r7
 800c5c0:	3201      	adds	r2, #1
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	2316      	movs	r3, #22
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	189b      	adds	r3, r3, r2
 800c5ca:	19da      	adds	r2, r3, r7
 800c5cc:	2322      	movs	r3, #34	@ 0x22
 800c5ce:	18fb      	adds	r3, r7, r3
 800c5d0:	7812      	ldrb	r2, [r2, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d3d6      	bcc.n	800c586 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800c5d8:	2417      	movs	r4, #23
 800c5da:	2320      	movs	r3, #32
 800c5dc:	18e3      	adds	r3, r4, r3
 800c5de:	19db      	adds	r3, r3, r7
 800c5e0:	781a      	ldrb	r2, [r3, #0]
 800c5e2:	2322      	movs	r3, #34	@ 0x22
 800c5e4:	18fb      	adds	r3, r7, r3
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	18d3      	adds	r3, r2, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ee:	18d2      	adds	r2, r2, r3
 800c5f0:	250b      	movs	r5, #11
 800c5f2:	2320      	movs	r3, #32
 800c5f4:	18eb      	adds	r3, r5, r3
 800c5f6:	19db      	adds	r3, r3, r7
 800c5f8:	7812      	ldrb	r2, [r2, #0]
 800c5fa:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800c5fc:	2322      	movs	r3, #34	@ 0x22
 800c5fe:	18fb      	adds	r3, r7, r3
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	b2da      	uxtb	r2, r3
 800c606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c608:	0011      	movs	r1, r2
 800c60a:	0018      	movs	r0, r3
 800c60c:	f000 f838 	bl	800c680 <CalculateCRC>
 800c610:	0003      	movs	r3, r0
 800c612:	001a      	movs	r2, r3
 800c614:	2320      	movs	r3, #32
 800c616:	18eb      	adds	r3, r5, r3
 800c618:	19db      	adds	r3, r3, r7
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d00c      	beq.n	800c63a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800c620:	2320      	movs	r3, #32
 800c622:	18e3      	adds	r3, r4, r3
 800c624:	19db      	adds	r3, r3, r7
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	3301      	adds	r3, #1
 800c62a:	4a13      	ldr	r2, [pc, #76]	@ (800c678 <CheckCRC+0x18c>)
 800c62c:	4913      	ldr	r1, [pc, #76]	@ (800c67c <CheckCRC+0x190>)
 800c62e:	2001      	movs	r0, #1
 800c630:	f002 fc4e 	bl	800eed0 <CreateLine>
      return false;
 800c634:	2300      	movs	r3, #0
 800c636:	46b5      	mov	sp, r6
 800c638:	e019      	b.n	800c66e <CheckCRC+0x182>
 800c63a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c63c:	2217      	movs	r2, #23
 800c63e:	2320      	movs	r3, #32
 800c640:	18d3      	adds	r3, r2, r3
 800c642:	19db      	adds	r3, r3, r7
 800c644:	2120      	movs	r1, #32
 800c646:	1852      	adds	r2, r2, r1
 800c648:	19d1      	adds	r1, r2, r7
 800c64a:	2222      	movs	r2, #34	@ 0x22
 800c64c:	18ba      	adds	r2, r7, r2
 800c64e:	7809      	ldrb	r1, [r1, #0]
 800c650:	7812      	ldrb	r2, [r2, #0]
 800c652:	188a      	adds	r2, r1, r2
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	2317      	movs	r3, #23
 800c658:	2220      	movs	r2, #32
 800c65a:	189b      	adds	r3, r3, r2
 800c65c:	19da      	adds	r2, r3, r7
 800c65e:	2323      	movs	r3, #35	@ 0x23
 800c660:	18fb      	adds	r3, r7, r3
 800c662:	7812      	ldrb	r2, [r2, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	429a      	cmp	r2, r3
 800c668:	d200      	bcs.n	800c66c <CheckCRC+0x180>
 800c66a:	e754      	b.n	800c516 <CheckCRC+0x2a>
    }
  }
  return true;
 800c66c:	2301      	movs	r3, #1
}
 800c66e:	0018      	movs	r0, r3
 800c670:	46bd      	mov	sp, r7
 800c672:	b00f      	add	sp, #60	@ 0x3c
 800c674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c676:	46c0      	nop			@ (mov r8, r8)
 800c678:	08025dc8 	.word	0x08025dc8
 800c67c:	08025d04 	.word	0x08025d04

0800c680 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	000a      	movs	r2, r1
 800c68a:	1cfb      	adds	r3, r7, #3
 800c68c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800c68e:	230f      	movs	r3, #15
 800c690:	18fb      	adds	r3, r7, r3
 800c692:	22ff      	movs	r2, #255	@ 0xff
 800c694:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800c696:	230e      	movs	r3, #14
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	e037      	b.n	800c710 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800c6a0:	230e      	movs	r3, #14
 800c6a2:	18fb      	adds	r3, r7, r3
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	18d3      	adds	r3, r2, r3
 800c6aa:	7819      	ldrb	r1, [r3, #0]
 800c6ac:	220f      	movs	r2, #15
 800c6ae:	18bb      	adds	r3, r7, r2
 800c6b0:	18ba      	adds	r2, r7, r2
 800c6b2:	7812      	ldrb	r2, [r2, #0]
 800c6b4:	404a      	eors	r2, r1
 800c6b6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800c6b8:	230d      	movs	r3, #13
 800c6ba:	18fb      	adds	r3, r7, r3
 800c6bc:	2200      	movs	r2, #0
 800c6be:	701a      	strb	r2, [r3, #0]
 800c6c0:	e01b      	b.n	800c6fa <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800c6c2:	210f      	movs	r1, #15
 800c6c4:	187b      	adds	r3, r7, r1
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	b25b      	sxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	da09      	bge.n	800c6e2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800c6ce:	187b      	adds	r3, r7, r1
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	b25b      	sxtb	r3, r3
 800c6d6:	2231      	movs	r2, #49	@ 0x31
 800c6d8:	4053      	eors	r3, r2
 800c6da:	b25a      	sxtb	r2, r3
 800c6dc:	187b      	adds	r3, r7, r1
 800c6de:	701a      	strb	r2, [r3, #0]
 800c6e0:	e005      	b.n	800c6ee <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800c6e2:	230f      	movs	r3, #15
 800c6e4:	18fa      	adds	r2, r7, r3
 800c6e6:	18fb      	adds	r3, r7, r3
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	18db      	adds	r3, r3, r3
 800c6ec:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800c6ee:	210d      	movs	r1, #13
 800c6f0:	187b      	adds	r3, r7, r1
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	187b      	adds	r3, r7, r1
 800c6f6:	3201      	adds	r2, #1
 800c6f8:	701a      	strb	r2, [r3, #0]
 800c6fa:	230d      	movs	r3, #13
 800c6fc:	18fb      	adds	r3, r7, r3
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b07      	cmp	r3, #7
 800c702:	d9de      	bls.n	800c6c2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800c704:	210e      	movs	r1, #14
 800c706:	187b      	adds	r3, r7, r1
 800c708:	781a      	ldrb	r2, [r3, #0]
 800c70a:	187b      	adds	r3, r7, r1
 800c70c:	3201      	adds	r2, #1
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	230e      	movs	r3, #14
 800c712:	18fa      	adds	r2, r7, r3
 800c714:	1cfb      	adds	r3, r7, #3
 800c716:	7812      	ldrb	r2, [r2, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d3c0      	bcc.n	800c6a0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800c71e:	230f      	movs	r3, #15
 800c720:	18fb      	adds	r3, r7, r3
 800c722:	781b      	ldrb	r3, [r3, #0]
}
 800c724:	0018      	movs	r0, r3
 800c726:	46bd      	mov	sp, r7
 800c728:	b004      	add	sp, #16
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4936      	ldr	r1, [pc, #216]	@ (800c814 <SGP_SetHT+0xe8>)
 800c73c:	1c18      	adds	r0, r3, #0
 800c73e:	f7f4 f8bf 	bl	80008c0 <__aeabi_fadd>
 800c742:	1c03      	adds	r3, r0, #0
 800c744:	4934      	ldr	r1, [pc, #208]	@ (800c818 <SGP_SetHT+0xec>)
 800c746:	1c18      	adds	r0, r3, #0
 800c748:	f7f4 fa44 	bl	8000bd4 <__aeabi_fdiv>
 800c74c:	1c03      	adds	r3, r0, #0
 800c74e:	4933      	ldr	r1, [pc, #204]	@ (800c81c <SGP_SetHT+0xf0>)
 800c750:	1c18      	adds	r0, r3, #0
 800c752:	f7f4 fc25 	bl	8000fa0 <__aeabi_fmul>
 800c756:	1c03      	adds	r3, r0, #0
 800c758:	1c18      	adds	r0, r3, #0
 800c75a:	f7f3 ff5f 	bl	800061c <__aeabi_f2uiz>
 800c75e:	0003      	movs	r3, r0
 800c760:	b29a      	uxth	r2, r3
 800c762:	4b2f      	ldr	r3, [pc, #188]	@ (800c820 <SGP_SetHT+0xf4>)
 800c764:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	492e      	ldr	r1, [pc, #184]	@ (800c824 <SGP_SetHT+0xf8>)
 800c76c:	1c18      	adds	r0, r3, #0
 800c76e:	f7f4 fa31 	bl	8000bd4 <__aeabi_fdiv>
 800c772:	1c03      	adds	r3, r0, #0
 800c774:	4929      	ldr	r1, [pc, #164]	@ (800c81c <SGP_SetHT+0xf0>)
 800c776:	1c18      	adds	r0, r3, #0
 800c778:	f7f4 fc12 	bl	8000fa0 <__aeabi_fmul>
 800c77c:	1c03      	adds	r3, r0, #0
 800c77e:	1c18      	adds	r0, r3, #0
 800c780:	f7f3 ff4c 	bl	800061c <__aeabi_f2uiz>
 800c784:	0003      	movs	r3, r0
 800c786:	b29a      	uxth	r2, r3
 800c788:	4b27      	ldr	r3, [pc, #156]	@ (800c828 <SGP_SetHT+0xfc>)
 800c78a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800c78c:	4b26      	ldr	r3, [pc, #152]	@ (800c828 <SGP_SetHT+0xfc>)
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	0a1b      	lsrs	r3, r3, #8
 800c792:	b29b      	uxth	r3, r3
 800c794:	b2da      	uxtb	r2, r3
 800c796:	4b25      	ldr	r3, [pc, #148]	@ (800c82c <SGP_SetHT+0x100>)
 800c798:	709a      	strb	r2, [r3, #2]
 800c79a:	4b24      	ldr	r3, [pc, #144]	@ (800c82c <SGP_SetHT+0x100>)
 800c79c:	789a      	ldrb	r2, [r3, #2]
 800c79e:	210c      	movs	r1, #12
 800c7a0:	187b      	adds	r3, r7, r1
 800c7a2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800c7a4:	4b20      	ldr	r3, [pc, #128]	@ (800c828 <SGP_SetHT+0xfc>)
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	4b20      	ldr	r3, [pc, #128]	@ (800c82c <SGP_SetHT+0x100>)
 800c7ac:	70da      	strb	r2, [r3, #3]
 800c7ae:	4b1f      	ldr	r3, [pc, #124]	@ (800c82c <SGP_SetHT+0x100>)
 800c7b0:	78da      	ldrb	r2, [r3, #3]
 800c7b2:	187b      	adds	r3, r7, r1
 800c7b4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800c7b6:	187b      	adds	r3, r7, r1
 800c7b8:	2102      	movs	r1, #2
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	f7ff ff60 	bl	800c680 <CalculateCRC>
 800c7c0:	0003      	movs	r3, r0
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	4b19      	ldr	r3, [pc, #100]	@ (800c82c <SGP_SetHT+0x100>)
 800c7c6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800c7c8:	4b15      	ldr	r3, [pc, #84]	@ (800c820 <SGP_SetHT+0xf4>)
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	0a1b      	lsrs	r3, r3, #8
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	4b16      	ldr	r3, [pc, #88]	@ (800c82c <SGP_SetHT+0x100>)
 800c7d4:	715a      	strb	r2, [r3, #5]
 800c7d6:	4b15      	ldr	r3, [pc, #84]	@ (800c82c <SGP_SetHT+0x100>)
 800c7d8:	795a      	ldrb	r2, [r3, #5]
 800c7da:	2108      	movs	r1, #8
 800c7dc:	187b      	adds	r3, r7, r1
 800c7de:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800c7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c820 <SGP_SetHT+0xf4>)
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	4b11      	ldr	r3, [pc, #68]	@ (800c82c <SGP_SetHT+0x100>)
 800c7e8:	719a      	strb	r2, [r3, #6]
 800c7ea:	4b10      	ldr	r3, [pc, #64]	@ (800c82c <SGP_SetHT+0x100>)
 800c7ec:	799a      	ldrb	r2, [r3, #6]
 800c7ee:	187b      	adds	r3, r7, r1
 800c7f0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800c7f2:	187b      	adds	r3, r7, r1
 800c7f4:	2102      	movs	r1, #2
 800c7f6:	0018      	movs	r0, r3
 800c7f8:	f7ff ff42 	bl	800c680 <CalculateCRC>
 800c7fc:	0003      	movs	r3, r0
 800c7fe:	001a      	movs	r2, r3
 800c800:	4b0a      	ldr	r3, [pc, #40]	@ (800c82c <SGP_SetHT+0x100>)
 800c802:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c804:	4b0a      	ldr	r3, [pc, #40]	@ (800c830 <SGP_SetHT+0x104>)
 800c806:	2201      	movs	r2, #1
 800c808:	701a      	strb	r2, [r3, #0]
}
 800c80a:	46c0      	nop			@ (mov r8, r8)
 800c80c:	46bd      	mov	sp, r7
 800c80e:	b004      	add	sp, #16
 800c810:	bd80      	pop	{r7, pc}
 800c812:	46c0      	nop			@ (mov r8, r8)
 800c814:	42340000 	.word	0x42340000
 800c818:	432f0000 	.word	0x432f0000
 800c81c:	477fff00 	.word	0x477fff00
 800c820:	20000e52 	.word	0x20000e52
 800c824:	42c80000 	.word	0x42c80000
 800c828:	20000e50 	.word	0x20000e50
 800c82c:	200000a0 	.word	0x200000a0
 800c830:	20000e54 	.word	0x20000e54

0800c834 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c834:	b580      	push	{r7, lr}
 800c836:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c838:	4a09      	ldr	r2, [pc, #36]	@ (800c860 <SGP_SoftReset+0x2c>)
 800c83a:	4b0a      	ldr	r3, [pc, #40]	@ (800c864 <SGP_SoftReset+0x30>)
 800c83c:	0019      	movs	r1, r3
 800c83e:	2003      	movs	r0, #3
 800c840:	f002 fb46 	bl	800eed0 <CreateLine>
  SGP_TurnHeaterOff();
 800c844:	f7ff fcd0 	bl	800c1e8 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c848:	200a      	movs	r0, #10
 800c84a:	f002 ff8f 	bl	800f76c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c84e:	4b06      	ldr	r3, [pc, #24]	@ (800c868 <SGP_SoftReset+0x34>)
 800c850:	2202      	movs	r2, #2
 800c852:	0019      	movs	r1, r3
 800c854:	2059      	movs	r0, #89	@ 0x59
 800c856:	f7ff fbf9 	bl	800c04c <WriteRegister>
}
 800c85a:	46c0      	nop			@ (mov r8, r8)
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	08025e70 	.word	0x08025e70
 800c864:	08025d4c 	.word	0x08025d4c
 800c868:	200000a8 	.word	0x200000a8

0800c86c <ResetVOCresult>:

void ResetVOCresult(void) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c870:	4b02      	ldr	r3, [pc, #8]	@ (800c87c <ResetVOCresult+0x10>)
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
}
 800c876:	46c0      	nop			@ (mov r8, r8)
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20000e58 	.word	0x20000e58

0800c880 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c884:	4b37      	ldr	r3, [pc, #220]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b07      	cmp	r3, #7
 800c88a:	d85f      	bhi.n	800c94c <SGP_Upkeep+0xcc>
 800c88c:	009a      	lsls	r2, r3, #2
 800c88e:	4b36      	ldr	r3, [pc, #216]	@ (800c968 <SGP_Upkeep+0xe8>)
 800c890:	18d3      	adds	r3, r2, r3
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c896:	4a35      	ldr	r2, [pc, #212]	@ (800c96c <SGP_Upkeep+0xec>)
 800c898:	4b35      	ldr	r3, [pc, #212]	@ (800c970 <SGP_Upkeep+0xf0>)
 800c89a:	0019      	movs	r1, r3
 800c89c:	2003      	movs	r0, #3
 800c89e:	f002 fb17 	bl	800eed0 <CreateLine>
    break;
 800c8a2:	e05a      	b.n	800c95a <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c8a4:	f7ff ffe2 	bl	800c86c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c8a8:	4b2e      	ldr	r3, [pc, #184]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	701a      	strb	r2, [r3, #0]
    break;
 800c8ae:	e054      	b.n	800c95a <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c8b0:	f7ff fc38 	bl	800c124 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c8b4:	f001 f966 	bl	800db84 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c8b8:	4b2a      	ldr	r3, [pc, #168]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c8ba:	2202      	movs	r2, #2
 800c8bc:	701a      	strb	r2, [r3, #0]
    break;
 800c8be:	e04c      	b.n	800c95a <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c8c0:	4b2c      	ldr	r3, [pc, #176]	@ (800c974 <SGP_Upkeep+0xf4>)
 800c8c2:	0018      	movs	r0, r3
 800c8c4:	f7ff fc9e 	bl	800c204 <SGP_GetMeasurementValues>
 800c8c8:	1e03      	subs	r3, r0, #0
 800c8ca:	d043      	beq.n	800c954 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c8cc:	4b25      	ldr	r3, [pc, #148]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c8ce:	2203      	movs	r2, #3
 800c8d0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c8d2:	e03f      	b.n	800c954 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c8d4:	4b27      	ldr	r3, [pc, #156]	@ (800c974 <SGP_Upkeep+0xf4>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f7f6 ff76 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c8e0:	4b20      	ldr	r3, [pc, #128]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c8e2:	2206      	movs	r2, #6
 800c8e4:	701a      	strb	r2, [r3, #0]
    break;
 800c8e6:	e038      	b.n	800c95a <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c8e8:	4b1e      	ldr	r3, [pc, #120]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c8ea:	2207      	movs	r2, #7
 800c8ec:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c8ee:	4b22      	ldr	r3, [pc, #136]	@ (800c978 <SGP_Upkeep+0xf8>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	d112      	bne.n	800c91c <SGP_Upkeep+0x9c>
 800c8f6:	4b21      	ldr	r3, [pc, #132]	@ (800c97c <SGP_Upkeep+0xfc>)
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	4053      	eors	r3, r2
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00b      	beq.n	800c91c <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c904:	4b1e      	ldr	r3, [pc, #120]	@ (800c980 <SGP_Upkeep+0x100>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d004      	beq.n	800c916 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c90c:	f7ff ff92 	bl	800c834 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c910:	2000      	movs	r0, #0
 800c912:	f7fc fa1f 	bl	8008d54 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c916:	4b1a      	ldr	r3, [pc, #104]	@ (800c980 <SGP_Upkeep+0x100>)
 800c918:	2201      	movs	r2, #1
 800c91a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c91c:	f002 ff1c 	bl	800f758 <HAL_GetTick>
 800c920:	0003      	movs	r3, r0
 800c922:	22c8      	movs	r2, #200	@ 0xc8
 800c924:	0092      	lsls	r2, r2, #2
 800c926:	189a      	adds	r2, r3, r2
 800c928:	4b16      	ldr	r3, [pc, #88]	@ (800c984 <SGP_Upkeep+0x104>)
 800c92a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c92c:	f001 f942 	bl	800dbb4 <ResetMeasurementIndicator>
  break;
 800c930:	e013      	b.n	800c95a <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c932:	4b14      	ldr	r3, [pc, #80]	@ (800c984 <SGP_Upkeep+0x104>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	0018      	movs	r0, r3
 800c938:	f002 fa74 	bl	800ee24 <TimestampIsReached>
 800c93c:	1e03      	subs	r3, r0, #0
 800c93e:	d00b      	beq.n	800c958 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c940:	f7ff fbd8 	bl	800c0f4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c944:	4b07      	ldr	r3, [pc, #28]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c94a:	e005      	b.n	800c958 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c94c:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c94e:	2200      	movs	r2, #0
 800c950:	701a      	strb	r2, [r3, #0]
    break;
 800c952:	e002      	b.n	800c95a <SGP_Upkeep+0xda>
    break;
 800c954:	46c0      	nop			@ (mov r8, r8)
 800c956:	e000      	b.n	800c95a <SGP_Upkeep+0xda>
    break;
 800c958:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c95a:	4b02      	ldr	r3, [pc, #8]	@ (800c964 <SGP_Upkeep+0xe4>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
}
 800c95e:	0018      	movs	r0, r3
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20000e5c 	.word	0x20000e5c
 800c968:	080265e8 	.word	0x080265e8
 800c96c:	08025e88 	.word	0x08025e88
 800c970:	08025d4c 	.word	0x08025d4c
 800c974:	20000e58 	.word	0x20000e58
 800c978:	20000da2 	.word	0x20000da2
 800c97c:	20001cf9 	.word	0x20001cf9
 800c980:	20000d8c 	.word	0x20000d8c
 800c984:	20000da4 	.word	0x20000da4

0800c988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	0002      	movs	r2, r0
 800c990:	1dfb      	adds	r3, r7, #7
 800c992:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c994:	1dfb      	adds	r3, r7, #7
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b7f      	cmp	r3, #127	@ 0x7f
 800c99a:	d809      	bhi.n	800c9b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c99c:	1dfb      	adds	r3, r7, #7
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	001a      	movs	r2, r3
 800c9a2:	231f      	movs	r3, #31
 800c9a4:	401a      	ands	r2, r3
 800c9a6:	4b04      	ldr	r3, [pc, #16]	@ (800c9b8 <__NVIC_EnableIRQ+0x30>)
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	4091      	lsls	r1, r2
 800c9ac:	000a      	movs	r2, r1
 800c9ae:	601a      	str	r2, [r3, #0]
  }
}
 800c9b0:	46c0      	nop			@ (mov r8, r8)
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	b002      	add	sp, #8
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	e000e100 	.word	0xe000e100

0800c9bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	0002      	movs	r2, r0
 800c9c4:	1dfb      	adds	r3, r7, #7
 800c9c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c9c8:	1dfb      	adds	r3, r7, #7
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9ce:	d810      	bhi.n	800c9f2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c9d0:	1dfb      	adds	r3, r7, #7
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	001a      	movs	r2, r3
 800c9d6:	231f      	movs	r3, #31
 800c9d8:	4013      	ands	r3, r2
 800c9da:	4908      	ldr	r1, [pc, #32]	@ (800c9fc <__NVIC_DisableIRQ+0x40>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	409a      	lsls	r2, r3
 800c9e0:	0013      	movs	r3, r2
 800c9e2:	2280      	movs	r2, #128	@ 0x80
 800c9e4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c9e6:	f3bf 8f4f 	dsb	sy
}
 800c9ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c9ec:	f3bf 8f6f 	isb	sy
}
 800c9f0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c9f2:	46c0      	nop			@ (mov r8, r8)
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	b002      	add	sp, #8
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	46c0      	nop			@ (mov r8, r8)
 800c9fc:	e000e100 	.word	0xe000e100

0800ca00 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800ca00:	b5b0      	push	{r4, r5, r7, lr}
 800ca02:	b088      	sub	sp, #32
 800ca04:	af02      	add	r7, sp, #8
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	0008      	movs	r0, r1
 800ca0a:	0011      	movs	r1, r2
 800ca0c:	1cfb      	adds	r3, r7, #3
 800ca0e:	1c02      	adds	r2, r0, #0
 800ca10:	701a      	strb	r2, [r3, #0]
 800ca12:	1cbb      	adds	r3, r7, #2
 800ca14:	1c0a      	adds	r2, r1, #0
 800ca16:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800ca18:	4b5b      	ldr	r3, [pc, #364]	@ (800cb88 <getSoundData+0x188>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2201      	movs	r2, #1
 800ca20:	4053      	eors	r3, r2
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d107      	bne.n	800ca38 <getSoundData+0x38>
 800ca28:	4b58      	ldr	r3, [pc, #352]	@ (800cb8c <getSoundData+0x18c>)
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2201      	movs	r2, #1
 800ca30:	4053      	eors	r3, r2
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <getSoundData+0x3c>
    {
        return false;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	e0a0      	b.n	800cb7e <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800ca3c:	4b54      	ldr	r3, [pc, #336]	@ (800cb90 <getSoundData+0x190>)
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d005      	beq.n	800ca52 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800ca46:	4b53      	ldr	r3, [pc, #332]	@ (800cb94 <getSoundData+0x194>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	b25b      	sxtb	r3, r3
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	f7ff ffb5 	bl	800c9bc <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800ca52:	f3bf 8f4f 	dsb	sy
}
 800ca56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800ca58:	f3bf 8f6f 	isb	sy
}
 800ca5c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800ca5e:	1cfb      	adds	r3, r7, #3
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d04c      	beq.n	800cb00 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800ca66:	4b4c      	ldr	r3, [pc, #304]	@ (800cb98 <getSoundData+0x198>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d11b      	bne.n	800caa6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	617b      	str	r3, [r7, #20]
 800ca7e:	e00e      	b.n	800ca9e <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	18d3      	adds	r3, r2, r3
 800ca86:	3302      	adds	r3, #2
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	18d3      	adds	r3, r2, r3
 800ca92:	3308      	adds	r3, #8
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	2b05      	cmp	r3, #5
 800caa2:	d9ed      	bls.n	800ca80 <getSoundData+0x80>
 800caa4:	e02c      	b.n	800cb00 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	1c59      	adds	r1, r3, #1
 800caac:	4b3b      	ldr	r3, [pc, #236]	@ (800cb9c <getSoundData+0x19c>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	4b3b      	ldr	r3, [pc, #236]	@ (800cba0 <getSoundData+0x1a0>)
 800cab2:	681c      	ldr	r4, [r3, #0]
 800cab4:	4b38      	ldr	r3, [pc, #224]	@ (800cb98 <getSoundData+0x198>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	0023      	movs	r3, r4
 800cabc:	f000 fde8 	bl	800d690 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cac0:	2300      	movs	r3, #0
 800cac2:	613b      	str	r3, [r7, #16]
 800cac4:	e019      	b.n	800cafa <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	18d3      	adds	r3, r2, r3
 800cacc:	1c98      	adds	r0, r3, #2
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	3308      	adds	r3, #8
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800cad6:	4b33      	ldr	r3, [pc, #204]	@ (800cba4 <getSoundData+0x1a4>)
 800cad8:	693a      	ldr	r2, [r7, #16]
 800cada:	0092      	lsls	r2, r2, #2
 800cadc:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800cade:	4b32      	ldr	r3, [pc, #200]	@ (800cba8 <getSoundData+0x1a8>)
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	0092      	lsls	r2, r2, #2
 800cae4:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800cae6:	4b2c      	ldr	r3, [pc, #176]	@ (800cb98 <getSoundData+0x198>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	0013      	movs	r3, r2
 800caee:	0022      	movs	r2, r4
 800caf0:	f000 fdce 	bl	800d690 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	3301      	adds	r3, #1
 800caf8:	613b      	str	r3, [r7, #16]
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	2b05      	cmp	r3, #5
 800cafe:	d9e2      	bls.n	800cac6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800cb00:	1cbb      	adds	r3, r7, #2
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d028      	beq.n	800cb5a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800cb08:	240e      	movs	r4, #14
 800cb0a:	193b      	adds	r3, r7, r4
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800cb10:	250d      	movs	r5, #13
 800cb12:	197b      	adds	r3, r7, r5
 800cb14:	2200      	movs	r2, #0
 800cb16:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800cb18:	4b24      	ldr	r3, [pc, #144]	@ (800cbac <getSoundData+0x1ac>)
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	4924      	ldr	r1, [pc, #144]	@ (800cbb0 <getSoundData+0x1b0>)
 800cb1e:	197b      	adds	r3, r7, r5
 800cb20:	193a      	adds	r2, r7, r4
 800cb22:	f000 fe59 	bl	800d7d8 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800cb26:	193b      	adds	r3, r7, r4
 800cb28:	881a      	ldrh	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	21ff      	movs	r1, #255	@ 0xff
 800cb2e:	4011      	ands	r1, r2
 800cb30:	000c      	movs	r4, r1
 800cb32:	7b99      	ldrb	r1, [r3, #14]
 800cb34:	2000      	movs	r0, #0
 800cb36:	4001      	ands	r1, r0
 800cb38:	1c08      	adds	r0, r1, #0
 800cb3a:	1c21      	adds	r1, r4, #0
 800cb3c:	4301      	orrs	r1, r0
 800cb3e:	7399      	strb	r1, [r3, #14]
 800cb40:	0a12      	lsrs	r2, r2, #8
 800cb42:	b290      	uxth	r0, r2
 800cb44:	7bda      	ldrb	r2, [r3, #15]
 800cb46:	2100      	movs	r1, #0
 800cb48:	400a      	ands	r2, r1
 800cb4a:	1c11      	adds	r1, r2, #0
 800cb4c:	1c02      	adds	r2, r0, #0
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800cb52:	197b      	adds	r3, r7, r5
 800cb54:	781a      	ldrb	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800cb5a:	f000 f86f 	bl	800cc3c <micSettlingComplete>
 800cb5e:	0003      	movs	r3, r0
 800cb60:	001a      	movs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800cb66:	4b0a      	ldr	r3, [pc, #40]	@ (800cb90 <getSoundData+0x190>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800cb70:	4b08      	ldr	r3, [pc, #32]	@ (800cb94 <getSoundData+0x194>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	b25b      	sxtb	r3, r3
 800cb76:	0018      	movs	r0, r3
 800cb78:	f7ff ff06 	bl	800c988 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800cb7c:	2301      	movs	r3, #1
}
 800cb7e:	0018      	movs	r0, r3
 800cb80:	46bd      	mov	sp, r7
 800cb82:	b006      	add	sp, #24
 800cb84:	bdb0      	pop	{r4, r5, r7, pc}
 800cb86:	46c0      	nop			@ (mov r8, r8)
 800cb88:	20000e5e 	.word	0x20000e5e
 800cb8c:	20000e61 	.word	0x20000e61
 800cb90:	20000e60 	.word	0x20000e60
 800cb94:	200018b0 	.word	0x200018b0
 800cb98:	200018ec 	.word	0x200018ec
 800cb9c:	200018b4 	.word	0x200018b4
 800cba0:	200018b8 	.word	0x200018b8
 800cba4:	200018bc 	.word	0x200018bc
 800cba8:	200018d4 	.word	0x200018d4
 800cbac:	20000e68 	.word	0x20000e68
 800cbb0:	3b5c7333 	.word	0x3b5c7333

0800cbb4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
 800cbc0:	001a      	movs	r2, r3
 800cbc2:	1cfb      	adds	r3, r7, #3
 800cbc4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800cbc6:	4b09      	ldr	r3, [pc, #36]	@ (800cbec <soundInit+0x38>)
 800cbc8:	68ba      	ldr	r2, [r7, #8]
 800cbca:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800cbcc:	4b08      	ldr	r3, [pc, #32]	@ (800cbf0 <soundInit+0x3c>)
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800cbd2:	4b08      	ldr	r3, [pc, #32]	@ (800cbf4 <soundInit+0x40>)
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800cbd8:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <soundInit+0x44>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	569a      	ldrsb	r2, [r3, r2]
 800cbde:	4b06      	ldr	r3, [pc, #24]	@ (800cbf8 <soundInit+0x44>)
 800cbe0:	701a      	strb	r2, [r3, #0]

    return true;
 800cbe2:	2301      	movs	r3, #1
}
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	b004      	add	sp, #16
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	200018a8 	.word	0x200018a8
 800cbf0:	200018a4 	.word	0x200018a4
 800cbf4:	200018ac 	.word	0x200018ac
 800cbf8:	200018b0 	.word	0x200018b0

0800cbfc <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800cc00:	4b02      	ldr	r3, [pc, #8]	@ (800cc0c <clearMaximumAmplitude+0x10>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]
}
 800cc06:	46c0      	nop			@ (mov r8, r8)
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	20000e68 	.word	0x20000e68

0800cc10 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800cc14:	4b08      	ldr	r3, [pc, #32]	@ (800cc38 <startMicSettlingPeriod+0x28>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800cc1e:	4b06      	ldr	r3, [pc, #24]	@ (800cc38 <startMicSettlingPeriod+0x28>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	0018      	movs	r0, r3
 800cc24:	f00a fb5c 	bl	80172e0 <HAL_TIM_Base_Start>
 800cc28:	1e03      	subs	r3, r0, #0
 800cc2a:	d001      	beq.n	800cc30 <startMicSettlingPeriod+0x20>
    {
        return false;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	e000      	b.n	800cc32 <startMicSettlingPeriod+0x22>
    }
    return true;
 800cc30:	2301      	movs	r3, #1
}
 800cc32:	0018      	movs	r0, r3
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	200018a4 	.word	0x200018a4

0800cc3c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800cc42:	4b0e      	ldr	r3, [pc, #56]	@ (800cc7c <micSettlingComplete+0x40>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	401a      	ands	r2, r3
 800cc4e:	1dfb      	adds	r3, r7, #7
 800cc50:	3a01      	subs	r2, #1
 800cc52:	4251      	negs	r1, r2
 800cc54:	414a      	adcs	r2, r1
 800cc56:	701a      	strb	r2, [r3, #0]
    if (complete)
 800cc58:	1dfb      	adds	r3, r7, #7
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d007      	beq.n	800cc70 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800cc60:	4b06      	ldr	r3, [pc, #24]	@ (800cc7c <micSettlingComplete+0x40>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	0018      	movs	r0, r3
 800cc66:	f00a fb85 	bl	8017374 <HAL_TIM_Base_Stop>
      DataReady = true;
 800cc6a:	4b05      	ldr	r3, [pc, #20]	@ (800cc80 <micSettlingComplete+0x44>)
 800cc6c:	2201      	movs	r2, #1
 800cc6e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800cc70:	1dfb      	adds	r3, r7, #7
 800cc72:	781b      	ldrb	r3, [r3, #0]
}
 800cc74:	0018      	movs	r0, r3
 800cc76:	46bd      	mov	sp, r7
 800cc78:	b002      	add	sp, #8
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	200018a4 	.word	0x200018a4
 800cc80:	20000e5d 	.word	0x20000e5d

0800cc84 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	0002      	movs	r2, r0
 800cc8c:	1dfb      	adds	r3, r7, #7
 800cc8e:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800cc90:	4b29      	ldr	r3, [pc, #164]	@ (800cd38 <enableMicrophone+0xb4>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	1dfa      	adds	r2, r7, #7
 800cc98:	7812      	ldrb	r2, [r2, #0]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d101      	bne.n	800cca2 <enableMicrophone+0x1e>
    {
        return true;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e045      	b.n	800cd2e <enableMicrophone+0xaa>
    }
    if (bEnable)
 800cca2:	1dfb      	adds	r3, r7, #7
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d025      	beq.n	800ccf6 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800ccaa:	f7ff ffb1 	bl	800cc10 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800ccae:	4b23      	ldr	r3, [pc, #140]	@ (800cd3c <enableMicrophone+0xb8>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2280      	movs	r2, #128	@ 0x80
 800ccb4:	0092      	lsls	r2, r2, #2
 800ccb6:	4922      	ldr	r1, [pc, #136]	@ (800cd40 <enableMicrophone+0xbc>)
 800ccb8:	0018      	movs	r0, r3
 800ccba:	f006 fd7b 	bl	80137b4 <HAL_I2S_Receive_DMA>
 800ccbe:	1e03      	subs	r3, r0, #0
 800ccc0:	d001      	beq.n	800ccc6 <enableMicrophone+0x42>
        {
            return false;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e033      	b.n	800cd2e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800ccc6:	f7ff ff99 	bl	800cbfc <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800ccca:	4b1e      	ldr	r3, [pc, #120]	@ (800cd44 <enableMicrophone+0xc0>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800ccd0:	4b1d      	ldr	r3, [pc, #116]	@ (800cd48 <enableMicrophone+0xc4>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	b25b      	sxtb	r3, r3
 800ccd6:	0018      	movs	r0, r3
 800ccd8:	f7ff fe56 	bl	800c988 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800ccdc:	4b1b      	ldr	r3, [pc, #108]	@ (800cd4c <enableMicrophone+0xc8>)
 800ccde:	2201      	movs	r2, #1
 800cce0:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800cce2:	4b15      	ldr	r3, [pc, #84]	@ (800cd38 <enableMicrophone+0xb4>)
 800cce4:	2201      	movs	r2, #1
 800cce6:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cce8:	4b19      	ldr	r3, [pc, #100]	@ (800cd50 <enableMicrophone+0xcc>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800ccee:	4b19      	ldr	r3, [pc, #100]	@ (800cd54 <enableMicrophone+0xd0>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	701a      	strb	r2, [r3, #0]
 800ccf4:	e01a      	b.n	800cd2c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800ccf6:	4b14      	ldr	r3, [pc, #80]	@ (800cd48 <enableMicrophone+0xc4>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	b25b      	sxtb	r3, r3
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	f7ff fe5d 	bl	800c9bc <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800cd02:	4b12      	ldr	r3, [pc, #72]	@ (800cd4c <enableMicrophone+0xc8>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cd08:	4b11      	ldr	r3, [pc, #68]	@ (800cd50 <enableMicrophone+0xcc>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800cd0e:	4b11      	ldr	r3, [pc, #68]	@ (800cd54 <enableMicrophone+0xd0>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800cd14:	4b09      	ldr	r3, [pc, #36]	@ (800cd3c <enableMicrophone+0xb8>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	0018      	movs	r0, r3
 800cd1a:	f006 fe0d 	bl	8013938 <HAL_I2S_DMAStop>
 800cd1e:	1e03      	subs	r3, r0, #0
 800cd20:	d001      	beq.n	800cd26 <enableMicrophone+0xa2>
        {
            return false;
 800cd22:	2300      	movs	r3, #0
 800cd24:	e003      	b.n	800cd2e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800cd26:	4b04      	ldr	r3, [pc, #16]	@ (800cd38 <enableMicrophone+0xb4>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800cd2c:	2301      	movs	r3, #1
}
 800cd2e:	0018      	movs	r0, r3
 800cd30:	46bd      	mov	sp, r7
 800cd32:	b002      	add	sp, #8
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	46c0      	nop			@ (mov r8, r8)
 800cd38:	20000e5e 	.word	0x20000e5e
 800cd3c:	200018a8 	.word	0x200018a8
 800cd40:	20000ea4 	.word	0x20000ea4
 800cd44:	20000e64 	.word	0x20000e64
 800cd48:	200018b0 	.word	0x200018b0
 800cd4c:	20000e60 	.word	0x20000e60
 800cd50:	20000e5f 	.word	0x20000e5f
 800cd54:	20000e61 	.word	0x20000e61

0800cd58 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800cd5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd90 <startSPLcalculation+0x38>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	2201      	movs	r2, #1
 800cd64:	4053      	eors	r3, r2
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <startSPLcalculation+0x18>
    {
        return false;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	e00c      	b.n	800cd8a <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800cd70:	4b08      	ldr	r3, [pc, #32]	@ (800cd94 <startSPLcalculation+0x3c>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <startSPLcalculation+0x26>
    {
        return true;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e005      	b.n	800cd8a <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800cd7e:	f000 fb63 	bl	800d448 <resetSPLstate>
    SPLcalcEnabled = true;
 800cd82:	4b04      	ldr	r3, [pc, #16]	@ (800cd94 <startSPLcalculation+0x3c>)
 800cd84:	2201      	movs	r2, #1
 800cd86:	701a      	strb	r2, [r3, #0]
    return true;
 800cd88:	2301      	movs	r3, #1
}
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20000e5e 	.word	0x20000e5e
 800cd94:	20000e5f 	.word	0x20000e5f

0800cd98 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800cda0:	4b05      	ldr	r3, [pc, #20]	@ (800cdb8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d102      	bne.n	800cdb0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800cdaa:	2000      	movs	r0, #0
 800cdac:	f000 f81a 	bl	800cde4 <processHalfDMAbuffer>
  }
}
 800cdb0:	46c0      	nop			@ (mov r8, r8)
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	b002      	add	sp, #8
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	200018a8 	.word	0x200018a8

0800cdbc <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800cdc4:	4b06      	ldr	r3, [pc, #24]	@ (800cde0 <HAL_I2S_RxCpltCallback+0x24>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d104      	bne.n	800cdd8 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800cdce:	2380      	movs	r3, #128	@ 0x80
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	0018      	movs	r0, r3
 800cdd4:	f000 f806 	bl	800cde4 <processHalfDMAbuffer>
  }
}
 800cdd8:	46c0      	nop			@ (mov r8, r8)
 800cdda:	46bd      	mov	sp, r7
 800cddc:	b002      	add	sp, #8
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	200018a8 	.word	0x200018a8

0800cde4 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	005a      	lsls	r2, r3, #1
 800cdf0:	4b15      	ldr	r3, [pc, #84]	@ (800ce48 <processHalfDMAbuffer+0x64>)
 800cdf2:	18d3      	adds	r3, r2, r3
 800cdf4:	4a15      	ldr	r2, [pc, #84]	@ (800ce4c <processHalfDMAbuffer+0x68>)
 800cdf6:	2180      	movs	r1, #128	@ 0x80
 800cdf8:	0089      	lsls	r1, r1, #2
 800cdfa:	0018      	movs	r0, r3
 800cdfc:	f000 fd35 	bl	800d86a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800ce00:	4b13      	ldr	r3, [pc, #76]	@ (800ce50 <processHalfDMAbuffer+0x6c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	425a      	negs	r2, r3
 800ce06:	4153      	adcs	r3, r2
 800ce08:	b2da      	uxtb	r2, r3
 800ce0a:	4b11      	ldr	r3, [pc, #68]	@ (800ce50 <processHalfDMAbuffer+0x6c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2109      	movs	r1, #9
 800ce10:	4299      	cmp	r1, r3
 800ce12:	419b      	sbcs	r3, r3
 800ce14:	425b      	negs	r3, r3
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	480c      	ldr	r0, [pc, #48]	@ (800ce4c <processHalfDMAbuffer+0x68>)
 800ce1a:	2180      	movs	r1, #128	@ 0x80
 800ce1c:	f000 fb46 	bl	800d4ac <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800ce20:	4b0b      	ldr	r3, [pc, #44]	@ (800ce50 <processHalfDMAbuffer+0x6c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b09      	cmp	r3, #9
 800ce26:	d804      	bhi.n	800ce32 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800ce28:	4b09      	ldr	r3, [pc, #36]	@ (800ce50 <processHalfDMAbuffer+0x6c>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	4b08      	ldr	r3, [pc, #32]	@ (800ce50 <processHalfDMAbuffer+0x6c>)
 800ce30:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800ce32:	4b08      	ldr	r3, [pc, #32]	@ (800ce54 <processHalfDMAbuffer+0x70>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800ce3c:	f000 f826 	bl	800ce8c <calculateSPLQ31>
    }
}
 800ce40:	46c0      	nop			@ (mov r8, r8)
 800ce42:	46bd      	mov	sp, r7
 800ce44:	b002      	add	sp, #8
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	20000ea4 	.word	0x20000ea4
 800ce4c:	200016a4 	.word	0x200016a4
 800ce50:	20000e64 	.word	0x20000e64
 800ce54:	20000e5f 	.word	0x20000e5f

0800ce58 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800ce60:	4b07      	ldr	r3, [pc, #28]	@ (800ce80 <HAL_I2S_ErrorCallback+0x28>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d106      	bne.n	800ce78 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800ce6a:	4a06      	ldr	r2, [pc, #24]	@ (800ce84 <HAL_I2S_ErrorCallback+0x2c>)
 800ce6c:	239e      	movs	r3, #158	@ 0x9e
 800ce6e:	0059      	lsls	r1, r3, #1
 800ce70:	4b05      	ldr	r3, [pc, #20]	@ (800ce88 <HAL_I2S_ErrorCallback+0x30>)
 800ce72:	0018      	movs	r0, r3
 800ce74:	f002 f8e4 	bl	800f040 <errorHandler>
  }
}
 800ce78:	46c0      	nop			@ (mov r8, r8)
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	b002      	add	sp, #8
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	200018a8 	.word	0x200018a8
 800ce84:	08025eb0 	.word	0x08025eb0
 800ce88:	080266d8 	.word	0x080266d8

0800ce8c <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800ce8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce8e:	b0b3      	sub	sp, #204	@ 0xcc
 800ce90:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800ce92:	4ae2      	ldr	r2, [pc, #904]	@ (800d21c <calculateSPLQ31+0x390>)
 800ce94:	2338      	movs	r3, #56	@ 0x38
 800ce96:	2030      	movs	r0, #48	@ 0x30
 800ce98:	181b      	adds	r3, r3, r0
 800ce9a:	19d9      	adds	r1, r3, r7
 800ce9c:	2334      	movs	r3, #52	@ 0x34
 800ce9e:	181b      	adds	r3, r3, r0
 800cea0:	19d8      	adds	r0, r3, r7
 800cea2:	2380      	movs	r3, #128	@ 0x80
 800cea4:	f000 fc36 	bl	800d714 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800cea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da00      	bge.n	800ceb0 <calculateSPLQ31+0x24>
 800ceae:	3301      	adds	r3, #1
 800ceb0:	105b      	asrs	r3, r3, #1
 800ceb2:	001a      	movs	r2, r3
 800ceb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	da00      	bge.n	800cebc <calculateSPLQ31+0x30>
 800ceba:	3301      	adds	r3, #1
 800cebc:	105b      	asrs	r3, r3, #1
 800cebe:	18d3      	adds	r3, r2, r3
 800cec0:	2188      	movs	r1, #136	@ 0x88
 800cec2:	187a      	adds	r2, r7, r1
 800cec4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800cec6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cec8:	187b      	adds	r3, r7, r1
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	3304      	adds	r3, #4
 800ced0:	2284      	movs	r2, #132	@ 0x84
 800ced2:	18b9      	adds	r1, r7, r2
 800ced4:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800ced6:	18bb      	adds	r3, r7, r2
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4ad1      	ldr	r2, [pc, #836]	@ (800d220 <calculateSPLQ31+0x394>)
 800cedc:	0019      	movs	r1, r3
 800cede:	0010      	movs	r0, r2
 800cee0:	f000 fc58 	bl	800d794 <getPo2factor>
 800cee4:	0003      	movs	r3, r0
 800cee6:	2280      	movs	r2, #128	@ 0x80
 800cee8:	18ba      	adds	r2, r7, r2
 800ceea:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	2284      	movs	r2, #132	@ 0x84
 800cef0:	2130      	movs	r1, #48	@ 0x30
 800cef2:	1852      	adds	r2, r2, r1
 800cef4:	19d2      	adds	r2, r2, r7
 800cef6:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800cef8:	2300      	movs	r3, #0
 800cefa:	2280      	movs	r2, #128	@ 0x80
 800cefc:	1852      	adds	r2, r2, r1
 800cefe:	19d2      	adds	r2, r2, r7
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	e032      	b.n	800cf6a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800cf04:	4ac5      	ldr	r2, [pc, #788]	@ (800d21c <calculateSPLQ31+0x390>)
 800cf06:	2680      	movs	r6, #128	@ 0x80
 800cf08:	2330      	movs	r3, #48	@ 0x30
 800cf0a:	18f1      	adds	r1, r6, r3
 800cf0c:	19cb      	adds	r3, r1, r7
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	589a      	ldr	r2, [r3, r2]
 800cf14:	2188      	movs	r1, #136	@ 0x88
 800cf16:	1879      	adds	r1, r7, r1
 800cf18:	680b      	ldr	r3, [r1, #0]
 800cf1a:	1ad2      	subs	r2, r2, r3
 800cf1c:	2180      	movs	r1, #128	@ 0x80
 800cf1e:	1879      	adds	r1, r7, r1
 800cf20:	680b      	ldr	r3, [r1, #0]
 800cf22:	409a      	lsls	r2, r3
 800cf24:	0011      	movs	r1, r2
 800cf26:	4abf      	ldr	r2, [pc, #764]	@ (800d224 <calculateSPLQ31+0x398>)
 800cf28:	2084      	movs	r0, #132	@ 0x84
 800cf2a:	2330      	movs	r3, #48	@ 0x30
 800cf2c:	18c3      	adds	r3, r0, r3
 800cf2e:	19db      	adds	r3, r3, r7
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800cf36:	2230      	movs	r2, #48	@ 0x30
 800cf38:	1883      	adds	r3, r0, r2
 800cf3a:	19db      	adds	r3, r3, r7
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	49b8      	ldr	r1, [pc, #736]	@ (800d224 <calculateSPLQ31+0x398>)
 800cf42:	009a      	lsls	r2, r3, #2
 800cf44:	2300      	movs	r3, #0
 800cf46:	5053      	str	r3, [r2, r1]
        count += 2;
 800cf48:	2230      	movs	r2, #48	@ 0x30
 800cf4a:	1883      	adds	r3, r0, r2
 800cf4c:	19db      	adds	r3, r3, r7
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	3302      	adds	r3, #2
 800cf52:	0011      	movs	r1, r2
 800cf54:	1882      	adds	r2, r0, r2
 800cf56:	19d2      	adds	r2, r2, r7
 800cf58:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800cf5a:	000a      	movs	r2, r1
 800cf5c:	18b3      	adds	r3, r6, r2
 800cf5e:	19db      	adds	r3, r3, r7
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3301      	adds	r3, #1
 800cf64:	18b2      	adds	r2, r6, r2
 800cf66:	19d2      	adds	r2, r2, r7
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	2380      	movs	r3, #128	@ 0x80
 800cf6c:	2630      	movs	r6, #48	@ 0x30
 800cf6e:	199b      	adds	r3, r3, r6
 800cf70:	19db      	adds	r3, r3, r7
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf76:	d9c5      	bls.n	800cf04 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800cf78:	4bab      	ldr	r3, [pc, #684]	@ (800d228 <calculateSPLQ31+0x39c>)
 800cf7a:	6818      	ldr	r0, [r3, #0]
 800cf7c:	49a9      	ldr	r1, [pc, #676]	@ (800d224 <calculateSPLQ31+0x398>)
 800cf7e:	2301      	movs	r3, #1
 800cf80:	2200      	movs	r2, #0
 800cf82:	f011 fa73 	bl	801e46c <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800cf86:	4aa9      	ldr	r2, [pc, #676]	@ (800d22c <calculateSPLQ31+0x3a0>)
 800cf88:	2338      	movs	r3, #56	@ 0x38
 800cf8a:	199b      	adds	r3, r3, r6
 800cf8c:	19d9      	adds	r1, r3, r7
 800cf8e:	2334      	movs	r3, #52	@ 0x34
 800cf90:	199b      	adds	r3, r3, r6
 800cf92:	19d8      	adds	r0, r3, r7
 800cf94:	237e      	movs	r3, #126	@ 0x7e
 800cf96:	f000 fbbd 	bl	800d714 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800cf9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cf9c:	2380      	movs	r3, #128	@ 0x80
 800cf9e:	061b      	lsls	r3, r3, #24
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d101      	bne.n	800cfa8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800cfa4:	4b9e      	ldr	r3, [pc, #632]	@ (800d220 <calculateSPLQ31+0x394>)
 800cfa6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800cfa8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cfaa:	2380      	movs	r3, #128	@ 0x80
 800cfac:	061b      	lsls	r3, r3, #24
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d101      	bne.n	800cfb6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800cfb2:	4b9b      	ldr	r3, [pc, #620]	@ (800d220 <calculateSPLQ31+0x394>)
 800cfb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800cfb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cfb8:	17da      	asrs	r2, r3, #31
 800cfba:	189b      	adds	r3, r3, r2
 800cfbc:	4053      	eors	r3, r2
 800cfbe:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800cfc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfc2:	17da      	asrs	r2, r3, #31
 800cfc4:	189b      	adds	r3, r3, r2
 800cfc6:	4053      	eors	r3, r2
 800cfc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800cfca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cfcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	dd01      	ble.n	800cfd6 <calculateSPLQ31+0x14a>
    {
        max = min;
 800cfd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cfd4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800cfd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cfd8:	3304      	adds	r3, #4
 800cfda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800cfdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfde:	4a90      	ldr	r2, [pc, #576]	@ (800d220 <calculateSPLQ31+0x394>)
 800cfe0:	0019      	movs	r1, r3
 800cfe2:	0010      	movs	r0, r2
 800cfe4:	f000 fbd6 	bl	800d794 <getPo2factor>
 800cfe8:	0003      	movs	r3, r0
 800cfea:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800cfec:	2302      	movs	r3, #2
 800cfee:	22ac      	movs	r2, #172	@ 0xac
 800cff0:	18ba      	adds	r2, r7, r2
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	e012      	b.n	800d01c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800cff6:	4a8b      	ldr	r2, [pc, #556]	@ (800d224 <calculateSPLQ31+0x398>)
 800cff8:	20ac      	movs	r0, #172	@ 0xac
 800cffa:	183b      	adds	r3, r7, r0
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	589a      	ldr	r2, [r3, r2]
 800d002:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d004:	409a      	lsls	r2, r3
 800d006:	0011      	movs	r1, r2
 800d008:	4a86      	ldr	r2, [pc, #536]	@ (800d224 <calculateSPLQ31+0x398>)
 800d00a:	183b      	adds	r3, r7, r0
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800d012:	183b      	adds	r3, r7, r0
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3301      	adds	r3, #1
 800d018:	183a      	adds	r2, r7, r0
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	23ac      	movs	r3, #172	@ 0xac
 800d01e:	18fb      	adds	r3, r7, r3
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b7f      	cmp	r3, #127	@ 0x7f
 800d024:	d9e7      	bls.n	800cff6 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800d026:	4b7d      	ldr	r3, [pc, #500]	@ (800d21c <calculateSPLQ31+0x390>)
 800d028:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800d02a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800d02c:	4b7d      	ldr	r3, [pc, #500]	@ (800d224 <calculateSPLQ31+0x398>)
 800d02e:	2240      	movs	r2, #64	@ 0x40
 800d030:	0018      	movs	r0, r3
 800d032:	f011 ffc5 	bl	801efc0 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800d036:	2330      	movs	r3, #48	@ 0x30
 800d038:	18fb      	adds	r3, r7, r3
 800d03a:	0018      	movs	r0, r3
 800d03c:	2330      	movs	r3, #48	@ 0x30
 800d03e:	001a      	movs	r2, r3
 800d040:	2100      	movs	r1, #0
 800d042:	f013 fe03 	bl	8020c4c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800d046:	2200      	movs	r2, #0
 800d048:	2300      	movs	r3, #0
 800d04a:	21a0      	movs	r1, #160	@ 0xa0
 800d04c:	1879      	adds	r1, r7, r1
 800d04e:	600a      	str	r2, [r1, #0]
 800d050:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800d052:	2301      	movs	r3, #1
 800d054:	229c      	movs	r2, #156	@ 0x9c
 800d056:	18ba      	adds	r2, r7, r2
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	e05b      	b.n	800d114 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800d05c:	269c      	movs	r6, #156	@ 0x9c
 800d05e:	19bb      	adds	r3, r7, r6
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	009a      	lsls	r2, r3, #2
 800d064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d066:	189b      	adds	r3, r3, r2
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	613b      	str	r3, [r7, #16]
 800d06c:	17db      	asrs	r3, r3, #31
 800d06e:	617b      	str	r3, [r7, #20]
 800d070:	4b6f      	ldr	r3, [pc, #444]	@ (800d230 <calculateSPLQ31+0x3a4>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	19bb      	adds	r3, r7, r6
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	005b      	lsls	r3, r3, #1
 800d07a:	18d3      	adds	r3, r2, r3
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	60bb      	str	r3, [r7, #8]
 800d080:	2300      	movs	r3, #0
 800d082:	60fb      	str	r3, [r7, #12]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6938      	ldr	r0, [r7, #16]
 800d08a:	6979      	ldr	r1, [r7, #20]
 800d08c:	f7f3 fa98 	bl	80005c0 <__aeabi_lmul>
 800d090:	0002      	movs	r2, r0
 800d092:	000b      	movs	r3, r1
 800d094:	0010      	movs	r0, r2
 800d096:	0019      	movs	r1, r3
 800d098:	23a0      	movs	r3, #160	@ 0xa0
 800d09a:	18fa      	adds	r2, r7, r3
 800d09c:	6853      	ldr	r3, [r2, #4]
 800d09e:	6812      	ldr	r2, [r2, #0]
 800d0a0:	1812      	adds	r2, r2, r0
 800d0a2:	414b      	adcs	r3, r1
 800d0a4:	21a0      	movs	r1, #160	@ 0xa0
 800d0a6:	1879      	adds	r1, r7, r1
 800d0a8:	600a      	str	r2, [r1, #0]
 800d0aa:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800d0ac:	4b61      	ldr	r3, [pc, #388]	@ (800d234 <calculateSPLQ31+0x3a8>)
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	19bb      	adds	r3, r7, r6
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	18d3      	adds	r3, r2, r3
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	2b06      	cmp	r3, #6
 800d0ba:	d025      	beq.n	800d108 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800d0bc:	4b5d      	ldr	r3, [pc, #372]	@ (800d234 <calculateSPLQ31+0x3a8>)
 800d0be:	681a      	ldr	r2, [r3, #0]
 800d0c0:	19bb      	adds	r3, r7, r6
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	18d3      	adds	r3, r2, r3
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2230      	movs	r2, #48	@ 0x30
 800d0ca:	18ba      	adds	r2, r7, r2
 800d0cc:	00db      	lsls	r3, r3, #3
 800d0ce:	18d3      	adds	r3, r2, r3
 800d0d0:	6818      	ldr	r0, [r3, #0]
 800d0d2:	6859      	ldr	r1, [r3, #4]
 800d0d4:	19bb      	adds	r3, r7, r6
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	009a      	lsls	r2, r3, #2
 800d0da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0dc:	189b      	adds	r3, r3, r2
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	603b      	str	r3, [r7, #0]
 800d0e2:	17db      	asrs	r3, r3, #31
 800d0e4:	607b      	str	r3, [r7, #4]
 800d0e6:	4b53      	ldr	r3, [pc, #332]	@ (800d234 <calculateSPLQ31+0x3a8>)
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	19be      	adds	r6, r7, r6
 800d0ec:	6833      	ldr	r3, [r6, #0]
 800d0ee:	18d3      	adds	r3, r2, r3
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	001e      	movs	r6, r3
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	1880      	adds	r0, r0, r2
 800d0fa:	4159      	adcs	r1, r3
 800d0fc:	2330      	movs	r3, #48	@ 0x30
 800d0fe:	18fa      	adds	r2, r7, r3
 800d100:	00f3      	lsls	r3, r6, #3
 800d102:	18d3      	adds	r3, r2, r3
 800d104:	6018      	str	r0, [r3, #0]
 800d106:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800d108:	229c      	movs	r2, #156	@ 0x9c
 800d10a:	18bb      	adds	r3, r7, r2
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3301      	adds	r3, #1
 800d110:	18ba      	adds	r2, r7, r2
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	239c      	movs	r3, #156	@ 0x9c
 800d116:	18fb      	adds	r3, r7, r3
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b3f      	cmp	r3, #63	@ 0x3f
 800d11c:	d99e      	bls.n	800d05c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800d11e:	2380      	movs	r3, #128	@ 0x80
 800d120:	18fb      	adds	r3, r7, r3
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	005b      	lsls	r3, r3, #1
 800d126:	001a      	movs	r2, r3
 800d128:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	18d3      	adds	r3, r2, r3
 800d12e:	3b22      	subs	r3, #34	@ 0x22
 800d130:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800d132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d134:	17da      	asrs	r2, r3, #31
 800d136:	189b      	adds	r3, r3, r2
 800d138:	4053      	eors	r3, r2
 800d13a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800d13c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d13e:	2b00      	cmp	r3, #0
 800d140:	da62      	bge.n	800d208 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800d142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d144:	3b20      	subs	r3, #32
 800d146:	2b00      	cmp	r3, #0
 800d148:	db05      	blt.n	800d156 <calculateSPLQ31+0x2ca>
 800d14a:	22a0      	movs	r2, #160	@ 0xa0
 800d14c:	18ba      	adds	r2, r7, r2
 800d14e:	6812      	ldr	r2, [r2, #0]
 800d150:	409a      	lsls	r2, r3
 800d152:	627a      	str	r2, [r7, #36]	@ 0x24
 800d154:	e010      	b.n	800d178 <calculateSPLQ31+0x2ec>
 800d156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d158:	2220      	movs	r2, #32
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	22a0      	movs	r2, #160	@ 0xa0
 800d15e:	18ba      	adds	r2, r7, r2
 800d160:	6812      	ldr	r2, [r2, #0]
 800d162:	40da      	lsrs	r2, r3
 800d164:	0013      	movs	r3, r2
 800d166:	22a4      	movs	r2, #164	@ 0xa4
 800d168:	18ba      	adds	r2, r7, r2
 800d16a:	6811      	ldr	r1, [r2, #0]
 800d16c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d16e:	4091      	lsls	r1, r2
 800d170:	6279      	str	r1, [r7, #36]	@ 0x24
 800d172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d174:	431a      	orrs	r2, r3
 800d176:	627a      	str	r2, [r7, #36]	@ 0x24
 800d178:	21a0      	movs	r1, #160	@ 0xa0
 800d17a:	187b      	adds	r3, r7, r1
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d180:	409a      	lsls	r2, r3
 800d182:	623a      	str	r2, [r7, #32]
 800d184:	6a3b      	ldr	r3, [r7, #32]
 800d186:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800d188:	187a      	adds	r2, r7, r1
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d18e:	2300      	movs	r3, #0
 800d190:	2298      	movs	r2, #152	@ 0x98
 800d192:	18ba      	adds	r2, r7, r2
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	e031      	b.n	800d1fc <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800d198:	2330      	movs	r3, #48	@ 0x30
 800d19a:	18fa      	adds	r2, r7, r3
 800d19c:	2398      	movs	r3, #152	@ 0x98
 800d19e:	18fb      	adds	r3, r7, r3
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	18d3      	adds	r3, r2, r3
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d1ac:	3920      	subs	r1, #32
 800d1ae:	2900      	cmp	r1, #0
 800d1b0:	db03      	blt.n	800d1ba <calculateSPLQ31+0x32e>
 800d1b2:	0010      	movs	r0, r2
 800d1b4:	4088      	lsls	r0, r1
 800d1b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d1b8:	e00c      	b.n	800d1d4 <calculateSPLQ31+0x348>
 800d1ba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d1bc:	2020      	movs	r0, #32
 800d1be:	1a41      	subs	r1, r0, r1
 800d1c0:	0010      	movs	r0, r2
 800d1c2:	40c8      	lsrs	r0, r1
 800d1c4:	0001      	movs	r1, r0
 800d1c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d1c8:	001c      	movs	r4, r3
 800d1ca:	4084      	lsls	r4, r0
 800d1cc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800d1ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1d0:	4308      	orrs	r0, r1
 800d1d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d1d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d1d6:	0013      	movs	r3, r2
 800d1d8:	408b      	lsls	r3, r1
 800d1da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1dc:	2330      	movs	r3, #48	@ 0x30
 800d1de:	18fa      	adds	r2, r7, r3
 800d1e0:	2098      	movs	r0, #152	@ 0x98
 800d1e2:	183b      	adds	r3, r7, r0
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	00db      	lsls	r3, r3, #3
 800d1e8:	18d3      	adds	r3, r2, r3
 800d1ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1ee:	6019      	str	r1, [r3, #0]
 800d1f0:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d1f2:	183b      	adds	r3, r7, r0
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	183a      	adds	r2, r7, r0
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	2398      	movs	r3, #152	@ 0x98
 800d1fe:	18fb      	adds	r3, r7, r3
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b05      	cmp	r3, #5
 800d204:	d9c8      	bls.n	800d198 <calculateSPLQ31+0x30c>
 800d206:	e06b      	b.n	800d2e0 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800d208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d20a:	3b20      	subs	r3, #32
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	db13      	blt.n	800d238 <calculateSPLQ31+0x3ac>
 800d210:	22a4      	movs	r2, #164	@ 0xa4
 800d212:	18ba      	adds	r2, r7, r2
 800d214:	6812      	ldr	r2, [r2, #0]
 800d216:	40da      	lsrs	r2, r3
 800d218:	61ba      	str	r2, [r7, #24]
 800d21a:	e01e      	b.n	800d25a <calculateSPLQ31+0x3ce>
 800d21c:	200016a4 	.word	0x200016a4
 800d220:	7fffffff 	.word	0x7fffffff
 800d224:	200018f0 	.word	0x200018f0
 800d228:	200000b8 	.word	0x200000b8
 800d22c:	200018f8 	.word	0x200018f8
 800d230:	200000bc 	.word	0x200000bc
 800d234:	200000c8 	.word	0x200000c8
 800d238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d23a:	2220      	movs	r2, #32
 800d23c:	1ad3      	subs	r3, r2, r3
 800d23e:	22a4      	movs	r2, #164	@ 0xa4
 800d240:	18ba      	adds	r2, r7, r2
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	409a      	lsls	r2, r3
 800d246:	0013      	movs	r3, r2
 800d248:	22a0      	movs	r2, #160	@ 0xa0
 800d24a:	18ba      	adds	r2, r7, r2
 800d24c:	6811      	ldr	r1, [r2, #0]
 800d24e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d250:	40d1      	lsrs	r1, r2
 800d252:	61b9      	str	r1, [r7, #24]
 800d254:	69ba      	ldr	r2, [r7, #24]
 800d256:	431a      	orrs	r2, r3
 800d258:	61ba      	str	r2, [r7, #24]
 800d25a:	23a4      	movs	r3, #164	@ 0xa4
 800d25c:	18fb      	adds	r3, r7, r3
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d262:	40da      	lsrs	r2, r3
 800d264:	61fa      	str	r2, [r7, #28]
 800d266:	69ba      	ldr	r2, [r7, #24]
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	21a0      	movs	r1, #160	@ 0xa0
 800d26c:	1879      	adds	r1, r7, r1
 800d26e:	600a      	str	r2, [r1, #0]
 800d270:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d272:	2300      	movs	r3, #0
 800d274:	2294      	movs	r2, #148	@ 0x94
 800d276:	18ba      	adds	r2, r7, r2
 800d278:	6013      	str	r3, [r2, #0]
 800d27a:	e02c      	b.n	800d2d6 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800d27c:	2330      	movs	r3, #48	@ 0x30
 800d27e:	18fa      	adds	r2, r7, r3
 800d280:	2394      	movs	r3, #148	@ 0x94
 800d282:	18fb      	adds	r3, r7, r3
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	18d3      	adds	r3, r2, r3
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d290:	3920      	subs	r1, #32
 800d292:	2900      	cmp	r1, #0
 800d294:	db03      	blt.n	800d29e <calculateSPLQ31+0x412>
 800d296:	0018      	movs	r0, r3
 800d298:	40c8      	lsrs	r0, r1
 800d29a:	0004      	movs	r4, r0
 800d29c:	e00a      	b.n	800d2b4 <calculateSPLQ31+0x428>
 800d29e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d2a0:	2020      	movs	r0, #32
 800d2a2:	1a41      	subs	r1, r0, r1
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	4088      	lsls	r0, r1
 800d2a8:	0001      	movs	r1, r0
 800d2aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d2ac:	0016      	movs	r6, r2
 800d2ae:	40c6      	lsrs	r6, r0
 800d2b0:	0034      	movs	r4, r6
 800d2b2:	430c      	orrs	r4, r1
 800d2b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d2b6:	40cb      	lsrs	r3, r1
 800d2b8:	001d      	movs	r5, r3
 800d2ba:	2330      	movs	r3, #48	@ 0x30
 800d2bc:	18fa      	adds	r2, r7, r3
 800d2be:	2194      	movs	r1, #148	@ 0x94
 800d2c0:	187b      	adds	r3, r7, r1
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	18d3      	adds	r3, r2, r3
 800d2c8:	601c      	str	r4, [r3, #0]
 800d2ca:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d2cc:	187b      	adds	r3, r7, r1
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	187a      	adds	r2, r7, r1
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	2394      	movs	r3, #148	@ 0x94
 800d2d8:	18fb      	adds	r3, r7, r3
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b05      	cmp	r3, #5
 800d2de:	d9cd      	bls.n	800d27c <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800d2e0:	230f      	movs	r3, #15
 800d2e2:	425d      	negs	r5, r3
 800d2e4:	2305      	movs	r3, #5
 800d2e6:	425e      	negs	r6, r3
 800d2e8:	4b4a      	ldr	r3, [pc, #296]	@ (800d414 <calculateSPLQ31+0x588>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	4b4a      	ldr	r3, [pc, #296]	@ (800d418 <calculateSPLQ31+0x58c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	21a0      	movs	r1, #160	@ 0xa0
 800d2f6:	1879      	adds	r1, r7, r1
 800d2f8:	6808      	ldr	r0, [r1, #0]
 800d2fa:	6849      	ldr	r1, [r1, #4]
 800d2fc:	4c47      	ldr	r4, [pc, #284]	@ (800d41c <calculateSPLQ31+0x590>)
 800d2fe:	9403      	str	r4, [sp, #12]
 800d300:	4c47      	ldr	r4, [pc, #284]	@ (800d420 <calculateSPLQ31+0x594>)
 800d302:	9402      	str	r4, [sp, #8]
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	9200      	str	r2, [sp, #0]
 800d308:	0033      	movs	r3, r6
 800d30a:	002a      	movs	r2, r5
 800d30c:	f000 fa86 	bl	800d81c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d310:	2300      	movs	r3, #0
 800d312:	2290      	movs	r2, #144	@ 0x90
 800d314:	18ba      	adds	r2, r7, r2
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	e026      	b.n	800d368 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800d31a:	2330      	movs	r3, #48	@ 0x30
 800d31c:	18fa      	adds	r2, r7, r3
 800d31e:	2490      	movs	r4, #144	@ 0x90
 800d320:	193b      	adds	r3, r7, r4
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	18d3      	adds	r3, r2, r3
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	6859      	ldr	r1, [r3, #4]
 800d32c:	230f      	movs	r3, #15
 800d32e:	425d      	negs	r5, r3
 800d330:	2305      	movs	r3, #5
 800d332:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800d334:	193b      	adds	r3, r7, r4
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	009a      	lsls	r2, r3, #2
 800d33a:	4b3a      	ldr	r3, [pc, #232]	@ (800d424 <calculateSPLQ31+0x598>)
 800d33c:	18d3      	adds	r3, r2, r3
 800d33e:	193a      	adds	r2, r7, r4
 800d340:	6812      	ldr	r2, [r2, #0]
 800d342:	0094      	lsls	r4, r2, #2
 800d344:	4a38      	ldr	r2, [pc, #224]	@ (800d428 <calculateSPLQ31+0x59c>)
 800d346:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800d348:	9203      	str	r2, [sp, #12]
 800d34a:	9302      	str	r3, [sp, #8]
 800d34c:	2300      	movs	r3, #0
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	2300      	movs	r3, #0
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	0033      	movs	r3, r6
 800d356:	002a      	movs	r2, r5
 800d358:	f000 fa60 	bl	800d81c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d35c:	2490      	movs	r4, #144	@ 0x90
 800d35e:	193b      	adds	r3, r7, r4
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3301      	adds	r3, #1
 800d364:	193a      	adds	r2, r7, r4
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	2390      	movs	r3, #144	@ 0x90
 800d36a:	18fb      	adds	r3, r7, r3
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b05      	cmp	r3, #5
 800d370:	d9d3      	bls.n	800d31a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800d372:	4b2b      	ldr	r3, [pc, #172]	@ (800d420 <calculateSPLQ31+0x594>)
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	4b2d      	ldr	r3, [pc, #180]	@ (800d42c <calculateSPLQ31+0x5a0>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	18d2      	adds	r2, r2, r3
 800d37c:	4b2b      	ldr	r3, [pc, #172]	@ (800d42c <calculateSPLQ31+0x5a0>)
 800d37e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800d380:	4b26      	ldr	r3, [pc, #152]	@ (800d41c <calculateSPLQ31+0x590>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	4b2a      	ldr	r3, [pc, #168]	@ (800d430 <calculateSPLQ31+0x5a4>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	18d2      	adds	r2, r2, r3
 800d38a:	4b29      	ldr	r3, [pc, #164]	@ (800d430 <calculateSPLQ31+0x5a4>)
 800d38c:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d38e:	2300      	movs	r3, #0
 800d390:	228c      	movs	r2, #140	@ 0x8c
 800d392:	18ba      	adds	r2, r7, r2
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	e025      	b.n	800d3e4 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800d398:	4b22      	ldr	r3, [pc, #136]	@ (800d424 <calculateSPLQ31+0x598>)
 800d39a:	208c      	movs	r0, #140	@ 0x8c
 800d39c:	183a      	adds	r2, r7, r0
 800d39e:	6812      	ldr	r2, [r2, #0]
 800d3a0:	0092      	lsls	r2, r2, #2
 800d3a2:	58d2      	ldr	r2, [r2, r3]
 800d3a4:	4b23      	ldr	r3, [pc, #140]	@ (800d434 <calculateSPLQ31+0x5a8>)
 800d3a6:	1839      	adds	r1, r7, r0
 800d3a8:	6809      	ldr	r1, [r1, #0]
 800d3aa:	0089      	lsls	r1, r1, #2
 800d3ac:	58cb      	ldr	r3, [r1, r3]
 800d3ae:	18d1      	adds	r1, r2, r3
 800d3b0:	4b20      	ldr	r3, [pc, #128]	@ (800d434 <calculateSPLQ31+0x5a8>)
 800d3b2:	183a      	adds	r2, r7, r0
 800d3b4:	6812      	ldr	r2, [r2, #0]
 800d3b6:	0092      	lsls	r2, r2, #2
 800d3b8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800d3ba:	4b1b      	ldr	r3, [pc, #108]	@ (800d428 <calculateSPLQ31+0x59c>)
 800d3bc:	183a      	adds	r2, r7, r0
 800d3be:	6812      	ldr	r2, [r2, #0]
 800d3c0:	0092      	lsls	r2, r2, #2
 800d3c2:	58d2      	ldr	r2, [r2, r3]
 800d3c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d438 <calculateSPLQ31+0x5ac>)
 800d3c6:	1839      	adds	r1, r7, r0
 800d3c8:	6809      	ldr	r1, [r1, #0]
 800d3ca:	0089      	lsls	r1, r1, #2
 800d3cc:	58cb      	ldr	r3, [r1, r3]
 800d3ce:	18d1      	adds	r1, r2, r3
 800d3d0:	4b19      	ldr	r3, [pc, #100]	@ (800d438 <calculateSPLQ31+0x5ac>)
 800d3d2:	183a      	adds	r2, r7, r0
 800d3d4:	6812      	ldr	r2, [r2, #0]
 800d3d6:	0092      	lsls	r2, r2, #2
 800d3d8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800d3da:	183b      	adds	r3, r7, r0
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	183a      	adds	r2, r7, r0
 800d3e2:	6013      	str	r3, [r2, #0]
 800d3e4:	238c      	movs	r3, #140	@ 0x8c
 800d3e6:	18fb      	adds	r3, r7, r3
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2b05      	cmp	r3, #5
 800d3ec:	d9d4      	bls.n	800d398 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800d3ee:	4b13      	ldr	r3, [pc, #76]	@ (800d43c <calculateSPLQ31+0x5b0>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	1c5a      	adds	r2, r3, #1
 800d3f4:	4b11      	ldr	r3, [pc, #68]	@ (800d43c <calculateSPLQ31+0x5b0>)
 800d3f6:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800d3f8:	4b10      	ldr	r3, [pc, #64]	@ (800d43c <calculateSPLQ31+0x5b0>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b0f      	cmp	r3, #15
 800d3fe:	d905      	bls.n	800d40c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800d400:	4b0f      	ldr	r3, [pc, #60]	@ (800d440 <calculateSPLQ31+0x5b4>)
 800d402:	2201      	movs	r2, #1
 800d404:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800d406:	4b0f      	ldr	r3, [pc, #60]	@ (800d444 <calculateSPLQ31+0x5b8>)
 800d408:	2200      	movs	r2, #0
 800d40a:	701a      	strb	r2, [r3, #0]
    }
}
 800d40c:	46c0      	nop			@ (mov r8, r8)
 800d40e:	46bd      	mov	sp, r7
 800d410:	b02f      	add	sp, #188	@ 0xbc
 800d412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d414:	200000c0 	.word	0x200000c0
 800d418:	200000c4 	.word	0x200000c4
 800d41c:	20000e70 	.word	0x20000e70
 800d420:	20000e6c 	.word	0x20000e6c
 800d424:	20000e74 	.word	0x20000e74
 800d428:	20000e8c 	.word	0x20000e8c
 800d42c:	200018b4 	.word	0x200018b4
 800d430:	200018b8 	.word	0x200018b8
 800d434:	200018bc 	.word	0x200018bc
 800d438:	200018d4 	.word	0x200018d4
 800d43c:	200018ec 	.word	0x200018ec
 800d440:	20000e61 	.word	0x20000e61
 800d444:	20000e5f 	.word	0x20000e5f

0800d448 <resetSPLstate>:

static void resetSPLstate(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800d44e:	4b11      	ldr	r3, [pc, #68]	@ (800d494 <resetSPLstate+0x4c>)
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800d454:	4b10      	ldr	r3, [pc, #64]	@ (800d498 <resetSPLstate+0x50>)
 800d456:	2200      	movs	r2, #0
 800d458:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800d45a:	4b10      	ldr	r3, [pc, #64]	@ (800d49c <resetSPLstate+0x54>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d460:	2300      	movs	r3, #0
 800d462:	607b      	str	r3, [r7, #4]
 800d464:	e00c      	b.n	800d480 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800d466:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a0 <resetSPLstate+0x58>)
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	0092      	lsls	r2, r2, #2
 800d46c:	2100      	movs	r1, #0
 800d46e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800d470:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a4 <resetSPLstate+0x5c>)
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	0092      	lsls	r2, r2, #2
 800d476:	2100      	movs	r1, #0
 800d478:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	3301      	adds	r3, #1
 800d47e:	607b      	str	r3, [r7, #4]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b05      	cmp	r3, #5
 800d484:	d9ef      	bls.n	800d466 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800d486:	4b08      	ldr	r3, [pc, #32]	@ (800d4a8 <resetSPLstate+0x60>)
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
}
 800d48c:	46c0      	nop			@ (mov r8, r8)
 800d48e:	46bd      	mov	sp, r7
 800d490:	b002      	add	sp, #8
 800d492:	bd80      	pop	{r7, pc}
 800d494:	200018b4 	.word	0x200018b4
 800d498:	200018b8 	.word	0x200018b8
 800d49c:	200018ec 	.word	0x200018ec
 800d4a0:	200018bc 	.word	0x200018bc
 800d4a4:	200018d4 	.word	0x200018d4
 800d4a8:	20000e61 	.word	0x20000e61

0800d4ac <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800d4ac:	b5b0      	push	{r4, r5, r7, lr}
 800d4ae:	b090      	sub	sp, #64	@ 0x40
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	0019      	movs	r1, r3
 800d4b8:	1dfb      	adds	r3, r7, #7
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	1dbb      	adds	r3, r7, #6
 800d4be:	1c0a      	adds	r2, r1, #0
 800d4c0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800d4c2:	1dfb      	adds	r3, r7, #7
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800d4ca:	4b3b      	ldr	r3, [pc, #236]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800d4d0:	4b3a      	ldr	r3, [pc, #232]	@ (800d5bc <getFilteredMaxAmplitudeQ31+0x110>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800d4de:	2305      	movs	r3, #5
 800d4e0:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4e6:	e040      	b.n	800d56a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	18d3      	adds	r3, r2, r3
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f4:	409a      	lsls	r2, r3
 800d4f6:	0013      	movs	r3, r2
 800d4f8:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800d4fa:	4b30      	ldr	r3, [pc, #192]	@ (800d5bc <getFilteredMaxAmplitudeQ31+0x110>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	425a      	negs	r2, r3
 800d500:	4b2e      	ldr	r3, [pc, #184]	@ (800d5bc <getFilteredMaxAmplitudeQ31+0x110>)
 800d502:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800d504:	2418      	movs	r4, #24
 800d506:	193a      	adds	r2, r7, r4
 800d508:	492c      	ldr	r1, [pc, #176]	@ (800d5bc <getFilteredMaxAmplitudeQ31+0x110>)
 800d50a:	231c      	movs	r3, #28
 800d50c:	18f8      	adds	r0, r7, r3
 800d50e:	2301      	movs	r3, #1
 800d510:	f011 fdae 	bl	801f070 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800d514:	2514      	movs	r5, #20
 800d516:	197a      	adds	r2, r7, r5
 800d518:	1939      	adds	r1, r7, r4
 800d51a:	4829      	ldr	r0, [pc, #164]	@ (800d5c0 <getFilteredMaxAmplitudeQ31+0x114>)
 800d51c:	2301      	movs	r3, #1
 800d51e:	f011 fd75 	bl	801f00c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800d522:	2410      	movs	r4, #16
 800d524:	193a      	adds	r2, r7, r4
 800d526:	4924      	ldr	r1, [pc, #144]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d528:	4826      	ldr	r0, [pc, #152]	@ (800d5c4 <getFilteredMaxAmplitudeQ31+0x118>)
 800d52a:	2301      	movs	r3, #1
 800d52c:	f011 fd6e 	bl	801f00c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800d530:	4a21      	ldr	r2, [pc, #132]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d532:	1939      	adds	r1, r7, r4
 800d534:	1978      	adds	r0, r7, r5
 800d536:	2301      	movs	r3, #1
 800d538:	f011 fd9a 	bl	801f070 <arm_add_q31>

        lastData = fx;
 800d53c:	69fa      	ldr	r2, [r7, #28]
 800d53e:	4b1f      	ldr	r3, [pc, #124]	@ (800d5bc <getFilteredMaxAmplitudeQ31+0x110>)
 800d540:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800d542:	4b1d      	ldr	r3, [pc, #116]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d548:	429a      	cmp	r2, r3
 800d54a:	da03      	bge.n	800d554 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800d54c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d552:	e007      	b.n	800d564 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800d554:	4b18      	ldr	r3, [pc, #96]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d55a:	429a      	cmp	r2, r3
 800d55c:	dd02      	ble.n	800d564 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800d55e:	4b16      	ldr	r3, [pc, #88]	@ (800d5b8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800d564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d566:	3301      	adds	r3, #1
 800d568:	637b      	str	r3, [r7, #52]	@ 0x34
 800d56a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d3ba      	bcc.n	800d4e8 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	17da      	asrs	r2, r3, #31
 800d576:	189b      	adds	r3, r3, r2
 800d578:	4053      	eors	r3, r2
 800d57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800d57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800d580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d584:	4293      	cmp	r3, r2
 800d586:	d200      	bcs.n	800d58a <getFilteredMaxAmplitudeQ31+0xde>
 800d588:	0013      	movs	r3, r2
 800d58a:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800d58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d590:	40da      	lsrs	r2, r3
 800d592:	0013      	movs	r3, r2
 800d594:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800d596:	1dbb      	adds	r3, r7, #6
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d007      	beq.n	800d5ae <getFilteredMaxAmplitudeQ31+0x102>
 800d59e:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6a3a      	ldr	r2, [r7, #32]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d902      	bls.n	800d5ae <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800d5a8:	4b07      	ldr	r3, [pc, #28]	@ (800d5c8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800d5aa:	6a3a      	ldr	r2, [r7, #32]
 800d5ac:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800d5ae:	6a3b      	ldr	r3, [r7, #32]
}
 800d5b0:	0018      	movs	r0, r3
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	b010      	add	sp, #64	@ 0x40
 800d5b6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b8:	20001cf0 	.word	0x20001cf0
 800d5bc:	20001cf4 	.word	0x20001cf4
 800d5c0:	080266d0 	.word	0x080266d0
 800d5c4:	080266d4 	.word	0x080266d4
 800d5c8:	20000e68 	.word	0x20000e68

0800d5cc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60f8      	str	r0, [r7, #12]
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800d5d8:	4913      	ldr	r1, [pc, #76]	@ (800d628 <floatToIntAndFrac2dp+0x5c>)
 800d5da:	68f8      	ldr	r0, [r7, #12]
 800d5dc:	f7f3 fce0 	bl	8000fa0 <__aeabi_fmul>
 800d5e0:	1c03      	adds	r3, r0, #0
 800d5e2:	1c18      	adds	r0, r3, #0
 800d5e4:	f016 f99a 	bl	802391c <roundf>
 800d5e8:	1c03      	adds	r3, r0, #0
 800d5ea:	1c18      	adds	r0, r3, #0
 800d5ec:	f7f3 f816 	bl	800061c <__aeabi_f2uiz>
 800d5f0:	0003      	movs	r3, r0
 800d5f2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2164      	movs	r1, #100	@ 0x64
 800d5f8:	0018      	movs	r0, r3
 800d5fa:	f7f2 fdd3 	bl	80001a4 <__udivsi3>
 800d5fe:	0003      	movs	r3, r0
 800d600:	001a      	movs	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	2164      	movs	r1, #100	@ 0x64
 800d612:	434b      	muls	r3, r1
 800d614:	b2db      	uxtb	r3, r3
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	701a      	strb	r2, [r3, #0]
}
 800d61e:	46c0      	nop			@ (mov r8, r8)
 800d620:	46bd      	mov	sp, r7
 800d622:	b006      	add	sp, #24
 800d624:	bd80      	pop	{r7, pc}
 800d626:	46c0      	nop			@ (mov r8, r8)
 800d628:	42c80000 	.word	0x42c80000

0800d62c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800d638:	4914      	ldr	r1, [pc, #80]	@ (800d68c <floatToIntAndFrac1dp+0x60>)
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7f3 fcb0 	bl	8000fa0 <__aeabi_fmul>
 800d640:	1c03      	adds	r3, r0, #0
 800d642:	1c18      	adds	r0, r3, #0
 800d644:	f016 f96a 	bl	802391c <roundf>
 800d648:	1c03      	adds	r3, r0, #0
 800d64a:	1c18      	adds	r0, r3, #0
 800d64c:	f7f2 ffe6 	bl	800061c <__aeabi_f2uiz>
 800d650:	0003      	movs	r3, r0
 800d652:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	210a      	movs	r1, #10
 800d658:	0018      	movs	r0, r3
 800d65a:	f7f2 fda3 	bl	80001a4 <__udivsi3>
 800d65e:	0003      	movs	r3, r0
 800d660:	001a      	movs	r2, r3
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	1c19      	adds	r1, r3, #0
 800d672:	0089      	lsls	r1, r1, #2
 800d674:	18cb      	adds	r3, r1, r3
 800d676:	18db      	adds	r3, r3, r3
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	701a      	strb	r2, [r3, #0]
}
 800d682:	46c0      	nop			@ (mov r8, r8)
 800d684:	46bd      	mov	sp, r7
 800d686:	b006      	add	sp, #24
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	46c0      	nop			@ (mov r8, r8)
 800d68c:	41200000 	.word	0x41200000

0800d690 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800d690:	b590      	push	{r4, r7, lr}
 800d692:	b087      	sub	sp, #28
 800d694:	af00      	add	r7, sp, #0
 800d696:	60f8      	str	r0, [r7, #12]
 800d698:	60b9      	str	r1, [r7, #8]
 800d69a:	607a      	str	r2, [r7, #4]
 800d69c:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7f3 ff96 	bl	80015d0 <__aeabi_i2f>
 800d6a4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d6a6:	6838      	ldr	r0, [r7, #0]
 800d6a8:	f7f3 ff92 	bl	80015d0 <__aeabi_i2f>
 800d6ac:	1c03      	adds	r3, r0, #0
 800d6ae:	4918      	ldr	r1, [pc, #96]	@ (800d710 <sumToIntAverage+0x80>)
 800d6b0:	1c18      	adds	r0, r3, #0
 800d6b2:	f7f3 fa8f 	bl	8000bd4 <__aeabi_fdiv>
 800d6b6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d6b8:	1c19      	adds	r1, r3, #0
 800d6ba:	1c20      	adds	r0, r4, #0
 800d6bc:	f7f3 f900 	bl	80008c0 <__aeabi_fadd>
 800d6c0:	1c03      	adds	r3, r0, #0
 800d6c2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d6c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6c6:	f7f3 ffcf 	bl	8001668 <__aeabi_ui2f>
 800d6ca:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d6cc:	1c19      	adds	r1, r3, #0
 800d6ce:	1c20      	adds	r0, r4, #0
 800d6d0:	f7f3 fa80 	bl	8000bd4 <__aeabi_fdiv>
 800d6d4:	1c03      	adds	r3, r0, #0
 800d6d6:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800d6dc:	68ba      	ldr	r2, [r7, #8]
 800d6de:	2310      	movs	r3, #16
 800d6e0:	18f9      	adds	r1, r7, r3
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	1c18      	adds	r0, r3, #0
 800d6e6:	f7ff ffa1 	bl	800d62c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	2bff      	cmp	r3, #255	@ 0xff
 800d6ee:	d906      	bls.n	800d6fe <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	22ff      	movs	r2, #255	@ 0xff
 800d6f4:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2209      	movs	r2, #9
 800d6fa:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800d6fc:	e003      	b.n	800d706 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	b2da      	uxtb	r2, r3
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	701a      	strb	r2, [r3, #0]
}
 800d706:	46c0      	nop			@ (mov r8, r8)
 800d708:	46bd      	mov	sp, r7
 800d70a:	b007      	add	sp, #28
 800d70c:	bd90      	pop	{r4, r7, pc}
 800d70e:	46c0      	nop			@ (mov r8, r8)
 800d710:	41200000 	.word	0x41200000

0800d714 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	2280      	movs	r2, #128	@ 0x80
 800d726:	0612      	lsls	r2, r2, #24
 800d728:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	4a18      	ldr	r2, [pc, #96]	@ (800d790 <findMinMax+0x7c>)
 800d72e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	e022      	b.n	800d77c <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	18d3      	adds	r3, r2, r3
 800d73e:	681a      	ldr	r2, [r3, #0]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	429a      	cmp	r2, r3
 800d746:	da06      	bge.n	800d756 <findMinMax+0x42>
        {
            min[0] = array[i];
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	18d3      	adds	r3, r2, r3
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	18d3      	adds	r3, r2, r3
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	429a      	cmp	r2, r3
 800d766:	dd06      	ble.n	800d776 <findMinMax+0x62>
        {
            max[0] = array[i];
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	18d3      	adds	r3, r2, r3
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	3301      	adds	r3, #1
 800d77a:	617b      	str	r3, [r7, #20]
 800d77c:	697a      	ldr	r2, [r7, #20]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	429a      	cmp	r2, r3
 800d782:	d3d8      	bcc.n	800d736 <findMinMax+0x22>
        }
    }
}
 800d784:	46c0      	nop			@ (mov r8, r8)
 800d786:	46c0      	nop			@ (mov r8, r8)
 800d788:	46bd      	mov	sp, r7
 800d78a:	b006      	add	sp, #24
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	46c0      	nop			@ (mov r8, r8)
 800d790:	7fffffff 	.word	0x7fffffff

0800d794 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d302      	bcc.n	800d7b0 <getPo2factor+0x1c>
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d107      	bne.n	800d7c0 <getPo2factor+0x2c>
    {
        return 0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	e00d      	b.n	800d7d0 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	085b      	lsrs	r3, r3, #1
 800d7b8:	607b      	str	r3, [r7, #4]
        bitShift++;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d2f5      	bcs.n	800d7b4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
}
 800d7d0:	0018      	movs	r0, r3
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	b004      	add	sp, #16
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
 800d7e4:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7f3 ff3e 	bl	8001668 <__aeabi_ui2f>
 800d7ec:	1c03      	adds	r3, r0, #0
 800d7ee:	1c19      	adds	r1, r3, #0
 800d7f0:	68b8      	ldr	r0, [r7, #8]
 800d7f2:	f7f3 fbd5 	bl	8000fa0 <__aeabi_fmul>
 800d7f6:	1c03      	adds	r3, r0, #0
 800d7f8:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	2310      	movs	r3, #16
 800d802:	18f9      	adds	r1, r7, r3
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	1c18      	adds	r0, r3, #0
 800d808:	f7ff fee0 	bl	800d5cc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	801a      	strh	r2, [r3, #0]
}
 800d814:	46c0      	nop			@ (mov r8, r8)
 800d816:	46bd      	mov	sp, r7
 800d818:	b006      	add	sp, #24
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60b8      	str	r0, [r7, #8]
 800d824:	60f9      	str	r1, [r7, #12]
 800d826:	607a      	str	r2, [r7, #4]
 800d828:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82c:	6a3a      	ldr	r2, [r7, #32]
 800d82e:	68b8      	ldr	r0, [r7, #8]
 800d830:	68f9      	ldr	r1, [r7, #12]
 800d832:	f7fa f9ad 	bl	8007b90 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d836:	6a3b      	ldr	r3, [r7, #32]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	18d2      	adds	r2, r2, r3
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	18d2      	adds	r2, r2, r3
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	18d2      	adds	r2, r2, r3
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	18d2      	adds	r2, r2, r3
 800d852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d854:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	0011      	movs	r1, r2
 800d85c:	0018      	movs	r0, r3
 800d85e:	f7fa fa27 	bl	8007cb0 <correctIntFracNumber>
}
 800d862:	46c0      	nop			@ (mov r8, r8)
 800d864:	46bd      	mov	sp, r7
 800d866:	b004      	add	sp, #16
 800d868:	bd80      	pop	{r7, pc}

0800d86a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b086      	sub	sp, #24
 800d86e:	af00      	add	r7, sp, #0
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d87a:	2300      	movs	r3, #0
 800d87c:	613b      	str	r3, [r7, #16]
 800d87e:	e019      	b.n	800d8b4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	18d3      	adds	r3, r2, r3
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d88c:	693a      	ldr	r2, [r7, #16]
 800d88e:	3201      	adds	r2, #1
 800d890:	0052      	lsls	r2, r2, #1
 800d892:	68f9      	ldr	r1, [r7, #12]
 800d894:	188a      	adds	r2, r1, r2
 800d896:	8812      	ldrh	r2, [r2, #0]
 800d898:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d89a:	0019      	movs	r1, r3
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d8a4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d8a6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	3304      	adds	r3, #4
 800d8b2:	613b      	str	r3, [r7, #16]
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d3e1      	bcc.n	800d880 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d8bc:	46c0      	nop			@ (mov r8, r8)
 800d8be:	46c0      	nop			@ (mov r8, r8)
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	b006      	add	sp, #24
 800d8c4:	bd80      	pop	{r7, pc}
	...

0800d8c8 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
  init = false;
 800d8cc:	4b02      	ldr	r3, [pc, #8]	@ (800d8d8 <InitDone+0x10>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	701a      	strb	r2, [r3, #0]
}
 800d8d2:	46c0      	nop			@ (mov r8, r8)
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	200000cc 	.word	0x200000cc

0800d8dc <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d8e2:	f7f9 f8d3 	bl	8006a8c <ReadBatteryVoltage>
 800d8e6:	1c02      	adds	r2, r0, #0
 800d8e8:	4b25      	ldr	r3, [pc, #148]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d8ea:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d8ec:	4b24      	ldr	r3, [pc, #144]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4924      	ldr	r1, [pc, #144]	@ (800d984 <batteryChargeCheck+0xa8>)
 800d8f2:	1c18      	adds	r0, r3, #0
 800d8f4:	f7f2 fe1c 	bl	8000530 <__aeabi_fcmplt>
 800d8f8:	1e03      	subs	r3, r0, #0
 800d8fa:	d002      	beq.n	800d902 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d8fc:	1dfb      	adds	r3, r7, #7
 800d8fe:	2200      	movs	r2, #0
 800d900:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d902:	4b1f      	ldr	r3, [pc, #124]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	491f      	ldr	r1, [pc, #124]	@ (800d984 <batteryChargeCheck+0xa8>)
 800d908:	1c18      	adds	r0, r3, #0
 800d90a:	f7f2 fe2f 	bl	800056c <__aeabi_fcmpge>
 800d90e:	1e03      	subs	r3, r0, #0
 800d910:	d00d      	beq.n	800d92e <batteryChargeCheck+0x52>
 800d912:	4b1b      	ldr	r3, [pc, #108]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	1c18      	adds	r0, r3, #0
 800d918:	f7f5 fda4 	bl	8003464 <__aeabi_f2d>
 800d91c:	4a1a      	ldr	r2, [pc, #104]	@ (800d988 <batteryChargeCheck+0xac>)
 800d91e:	4b1b      	ldr	r3, [pc, #108]	@ (800d98c <batteryChargeCheck+0xb0>)
 800d920:	f7f2 fdcc 	bl	80004bc <__aeabi_dcmplt>
 800d924:	1e03      	subs	r3, r0, #0
 800d926:	d002      	beq.n	800d92e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d928:	1dfb      	adds	r3, r7, #7
 800d92a:	2201      	movs	r2, #1
 800d92c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d92e:	4b14      	ldr	r3, [pc, #80]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	1c18      	adds	r0, r3, #0
 800d934:	f7f5 fd96 	bl	8003464 <__aeabi_f2d>
 800d938:	4a13      	ldr	r2, [pc, #76]	@ (800d988 <batteryChargeCheck+0xac>)
 800d93a:	4b14      	ldr	r3, [pc, #80]	@ (800d98c <batteryChargeCheck+0xb0>)
 800d93c:	f7f2 fddc 	bl	80004f8 <__aeabi_dcmpge>
 800d940:	1e03      	subs	r3, r0, #0
 800d942:	d00b      	beq.n	800d95c <batteryChargeCheck+0x80>
 800d944:	4b0e      	ldr	r3, [pc, #56]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2181      	movs	r1, #129	@ 0x81
 800d94a:	05c9      	lsls	r1, r1, #23
 800d94c:	1c18      	adds	r0, r3, #0
 800d94e:	f7f2 fdef 	bl	8000530 <__aeabi_fcmplt>
 800d952:	1e03      	subs	r3, r0, #0
 800d954:	d002      	beq.n	800d95c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d956:	1dfb      	adds	r3, r7, #7
 800d958:	2202      	movs	r2, #2
 800d95a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d95c:	4b08      	ldr	r3, [pc, #32]	@ (800d980 <batteryChargeCheck+0xa4>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2181      	movs	r1, #129	@ 0x81
 800d962:	05c9      	lsls	r1, r1, #23
 800d964:	1c18      	adds	r0, r3, #0
 800d966:	f7f2 fe01 	bl	800056c <__aeabi_fcmpge>
 800d96a:	1e03      	subs	r3, r0, #0
 800d96c:	d002      	beq.n	800d974 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d96e:	1dfb      	adds	r3, r7, #7
 800d970:	2203      	movs	r2, #3
 800d972:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d974:	1dfb      	adds	r3, r7, #7
 800d976:	781b      	ldrb	r3, [r3, #0]
}
 800d978:	0018      	movs	r0, r3
 800d97a:	46bd      	mov	sp, r7
 800d97c:	b002      	add	sp, #8
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20001d08 	.word	0x20001d08
 800d984:	40600000 	.word	0x40600000
 800d988:	9999999a 	.word	0x9999999a
 800d98c:	400d9999 	.word	0x400d9999

0800d990 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d990:	b5b0      	push	{r4, r5, r7, lr}
 800d992:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d994:	f7f9 f8dc 	bl	8006b50 <ReadSolarVoltage>
 800d998:	0003      	movs	r3, r0
 800d99a:	001a      	movs	r2, r3
 800d99c:	4b1a      	ldr	r3, [pc, #104]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d99e:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d9a0:	4b19      	ldr	r3, [pc, #100]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	4a19      	ldr	r2, [pc, #100]	@ (800da0c <Calculate_LED_ON+0x7c>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d802      	bhi.n	800d9b0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d9aa:	4b17      	ldr	r3, [pc, #92]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d9ac:	4a18      	ldr	r2, [pc, #96]	@ (800da10 <Calculate_LED_ON+0x80>)
 800d9ae:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d9b0:	4b15      	ldr	r3, [pc, #84]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	4a17      	ldr	r2, [pc, #92]	@ (800da14 <Calculate_LED_ON+0x84>)
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d902      	bls.n	800d9c0 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d9ba:	4b13      	ldr	r3, [pc, #76]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d9bc:	4a15      	ldr	r2, [pc, #84]	@ (800da14 <Calculate_LED_ON+0x84>)
 800d9be:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d9c0:	4b11      	ldr	r3, [pc, #68]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d9c2:	881b      	ldrh	r3, [r3, #0]
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	f7f5 fcfb 	bl	80033c0 <__aeabi_i2d>
 800d9ca:	0004      	movs	r4, r0
 800d9cc:	000d      	movs	r5, r1
 800d9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800da08 <Calculate_LED_ON+0x78>)
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	001a      	movs	r2, r3
 800d9d4:	4b10      	ldr	r3, [pc, #64]	@ (800da18 <Calculate_LED_ON+0x88>)
 800d9d6:	1a9b      	subs	r3, r3, r2
 800d9d8:	0018      	movs	r0, r3
 800d9da:	f7f5 fcf1 	bl	80033c0 <__aeabi_i2d>
 800d9de:	2200      	movs	r2, #0
 800d9e0:	4b0e      	ldr	r3, [pc, #56]	@ (800da1c <Calculate_LED_ON+0x8c>)
 800d9e2:	f7f4 fe2b 	bl	800263c <__aeabi_dmul>
 800d9e6:	0002      	movs	r2, r0
 800d9e8:	000b      	movs	r3, r1
 800d9ea:	0020      	movs	r0, r4
 800d9ec:	0029      	movs	r1, r5
 800d9ee:	f7f3 fe7d 	bl	80016ec <__aeabi_dadd>
 800d9f2:	0002      	movs	r2, r0
 800d9f4:	000b      	movs	r3, r1
 800d9f6:	0010      	movs	r0, r2
 800d9f8:	0019      	movs	r1, r3
 800d9fa:	f7f2 fe27 	bl	800064c <__aeabi_d2uiz>
 800d9fe:	0003      	movs	r3, r0
 800da00:	b29b      	uxth	r3, r3
}
 800da02:	0018      	movs	r0, r3
 800da04:	46bd      	mov	sp, r7
 800da06:	bdb0      	pop	{r4, r5, r7, pc}
 800da08:	20001d0c 	.word	0x20001d0c
 800da0c:	00000b53 	.word	0x00000b53
 800da10:	00000b54 	.word	0x00000b54
 800da14:	0000125c 	.word	0x0000125c
 800da18:	00000dee 	.word	0x00000dee
 800da1c:	3ff80000 	.word	0x3ff80000

0800da20 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800da20:	b590      	push	{r4, r7, lr}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	0004      	movs	r4, r0
 800da28:	0008      	movs	r0, r1
 800da2a:	0011      	movs	r1, r2
 800da2c:	1dbb      	adds	r3, r7, #6
 800da2e:	1c22      	adds	r2, r4, #0
 800da30:	801a      	strh	r2, [r3, #0]
 800da32:	1d3b      	adds	r3, r7, #4
 800da34:	1c02      	adds	r2, r0, #0
 800da36:	801a      	strh	r2, [r3, #0]
 800da38:	1cbb      	adds	r3, r7, #2
 800da3a:	1c0a      	adds	r2, r1, #0
 800da3c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800da3e:	4b0f      	ldr	r3, [pc, #60]	@ (800da7c <SetStatusLED+0x5c>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d107      	bne.n	800da56 <SetStatusLED+0x36>
 800da46:	4b0e      	ldr	r3, [pc, #56]	@ (800da80 <SetStatusLED+0x60>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d103      	bne.n	800da56 <SetStatusLED+0x36>
 800da4e:	4b0d      	ldr	r3, [pc, #52]	@ (800da84 <SetStatusLED+0x64>)
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00e      	beq.n	800da74 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800da56:	2380      	movs	r3, #128	@ 0x80
 800da58:	05db      	lsls	r3, r3, #23
 800da5a:	1dba      	adds	r2, r7, #6
 800da5c:	8812      	ldrh	r2, [r2, #0]
 800da5e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800da60:	2380      	movs	r3, #128	@ 0x80
 800da62:	05db      	lsls	r3, r3, #23
 800da64:	1d3a      	adds	r2, r7, #4
 800da66:	8812      	ldrh	r2, [r2, #0]
 800da68:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800da6a:	2380      	movs	r3, #128	@ 0x80
 800da6c:	05db      	lsls	r3, r3, #23
 800da6e:	1cba      	adds	r2, r7, #2
 800da70:	8812      	ldrh	r2, [r2, #0]
 800da72:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800da74:	46c0      	nop			@ (mov r8, r8)
 800da76:	46bd      	mov	sp, r7
 800da78:	b003      	add	sp, #12
 800da7a:	bd90      	pop	{r4, r7, pc}
 800da7c:	20001cf9 	.word	0x20001cf9
 800da80:	200000cc 	.word	0x200000cc
 800da84:	20001cfa 	.word	0x20001cfa

0800da88 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	0004      	movs	r4, r0
 800da90:	0008      	movs	r0, r1
 800da92:	0011      	movs	r1, r2
 800da94:	1dfb      	adds	r3, r7, #7
 800da96:	1c22      	adds	r2, r4, #0
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	1dbb      	adds	r3, r7, #6
 800da9c:	1c02      	adds	r2, r0, #0
 800da9e:	701a      	strb	r2, [r3, #0]
 800daa0:	1d7b      	adds	r3, r7, #5
 800daa2:	1c0a      	adds	r2, r1, #0
 800daa4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800daa6:	4b19      	ldr	r3, [pc, #100]	@ (800db0c <SetDBLED+0x84>)
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d107      	bne.n	800dabe <SetDBLED+0x36>
 800daae:	4b18      	ldr	r3, [pc, #96]	@ (800db10 <SetDBLED+0x88>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d103      	bne.n	800dabe <SetDBLED+0x36>
 800dab6:	4b17      	ldr	r3, [pc, #92]	@ (800db14 <SetDBLED+0x8c>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d022      	beq.n	800db04 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800dabe:	1dfb      	adds	r3, r7, #7
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	2201      	movs	r2, #1
 800dac4:	4053      	eors	r3, r2
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	001a      	movs	r2, r3
 800daca:	4b13      	ldr	r3, [pc, #76]	@ (800db18 <SetDBLED+0x90>)
 800dacc:	2101      	movs	r1, #1
 800dace:	0018      	movs	r0, r3
 800dad0:	f003 f8d3 	bl	8010c7a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800dad4:	1dbb      	adds	r3, r7, #6
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2201      	movs	r2, #1
 800dada:	4053      	eors	r3, r2
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	001a      	movs	r2, r3
 800dae0:	2380      	movs	r3, #128	@ 0x80
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	480c      	ldr	r0, [pc, #48]	@ (800db18 <SetDBLED+0x90>)
 800dae6:	0019      	movs	r1, r3
 800dae8:	f003 f8c7 	bl	8010c7a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800daec:	1d7b      	adds	r3, r7, #5
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2201      	movs	r2, #1
 800daf2:	4053      	eors	r3, r2
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	001a      	movs	r2, r3
 800daf8:	2380      	movs	r3, #128	@ 0x80
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4806      	ldr	r0, [pc, #24]	@ (800db18 <SetDBLED+0x90>)
 800dafe:	0019      	movs	r1, r3
 800db00:	f003 f8bb 	bl	8010c7a <HAL_GPIO_WritePin>
  }
}
 800db04:	46c0      	nop			@ (mov r8, r8)
 800db06:	46bd      	mov	sp, r7
 800db08:	b003      	add	sp, #12
 800db0a:	bd90      	pop	{r4, r7, pc}
 800db0c:	20001cf9 	.word	0x20001cf9
 800db10:	200000cc 	.word	0x200000cc
 800db14:	20001cfa 	.word	0x20001cfa
 800db18:	50000400 	.word	0x50000400

0800db1c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800db1c:	b590      	push	{r4, r7, lr}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	0004      	movs	r4, r0
 800db24:	0008      	movs	r0, r1
 800db26:	0011      	movs	r1, r2
 800db28:	1dbb      	adds	r3, r7, #6
 800db2a:	1c22      	adds	r2, r4, #0
 800db2c:	801a      	strh	r2, [r3, #0]
 800db2e:	1d3b      	adds	r3, r7, #4
 800db30:	1c02      	adds	r2, r0, #0
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	1cbb      	adds	r3, r7, #2
 800db36:	1c0a      	adds	r2, r1, #0
 800db38:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800db3a:	4b0e      	ldr	r3, [pc, #56]	@ (800db74 <SetVocLED+0x58>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d107      	bne.n	800db52 <SetVocLED+0x36>
 800db42:	4b0d      	ldr	r3, [pc, #52]	@ (800db78 <SetVocLED+0x5c>)
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d103      	bne.n	800db52 <SetVocLED+0x36>
 800db4a:	4b0c      	ldr	r3, [pc, #48]	@ (800db7c <SetVocLED+0x60>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00b      	beq.n	800db6a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800db52:	4b0b      	ldr	r3, [pc, #44]	@ (800db80 <SetVocLED+0x64>)
 800db54:	1dba      	adds	r2, r7, #6
 800db56:	8812      	ldrh	r2, [r2, #0]
 800db58:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800db5a:	4b09      	ldr	r3, [pc, #36]	@ (800db80 <SetVocLED+0x64>)
 800db5c:	1d3a      	adds	r2, r7, #4
 800db5e:	8812      	ldrh	r2, [r2, #0]
 800db60:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800db62:	4b07      	ldr	r3, [pc, #28]	@ (800db80 <SetVocLED+0x64>)
 800db64:	1cba      	adds	r2, r7, #2
 800db66:	8812      	ldrh	r2, [r2, #0]
 800db68:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800db6a:	46c0      	nop			@ (mov r8, r8)
 800db6c:	46bd      	mov	sp, r7
 800db6e:	b003      	add	sp, #12
 800db70:	bd90      	pop	{r4, r7, pc}
 800db72:	46c0      	nop			@ (mov r8, r8)
 800db74:	20001cf9 	.word	0x20001cf9
 800db78:	200000cc 	.word	0x200000cc
 800db7c:	20001cfa 	.word	0x20001cfa
 800db80:	40000400 	.word	0x40000400

0800db84 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800db88:	4b08      	ldr	r3, [pc, #32]	@ (800dbac <SetMeasurementIndicator+0x28>)
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d103      	bne.n	800db98 <SetMeasurementIndicator+0x14>
 800db90:	4b07      	ldr	r3, [pc, #28]	@ (800dbb0 <SetMeasurementIndicator+0x2c>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d006      	beq.n	800dba6 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800db98:	f7ff fefa 	bl	800d990 <Calculate_LED_ON>
 800db9c:	0003      	movs	r3, r0
 800db9e:	001a      	movs	r2, r3
 800dba0:	2380      	movs	r3, #128	@ 0x80
 800dba2:	05db      	lsls	r3, r3, #23
 800dba4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	20001cf9 	.word	0x20001cf9
 800dbb0:	20001cfa 	.word	0x20001cfa

0800dbb4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dbb8:	4b07      	ldr	r3, [pc, #28]	@ (800dbd8 <ResetMeasurementIndicator+0x24>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d103      	bne.n	800dbc8 <ResetMeasurementIndicator+0x14>
 800dbc0:	4b06      	ldr	r3, [pc, #24]	@ (800dbdc <ResetMeasurementIndicator+0x28>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d004      	beq.n	800dbd2 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800dbc8:	2380      	movs	r3, #128	@ 0x80
 800dbca:	05db      	lsls	r3, r3, #23
 800dbcc:	22fa      	movs	r2, #250	@ 0xfa
 800dbce:	0112      	lsls	r2, r2, #4
 800dbd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dbd2:	46c0      	nop			@ (mov r8, r8)
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20001cf9 	.word	0x20001cf9
 800dbdc:	20001cfa 	.word	0x20001cfa

0800dbe0 <SetMICIndicator>:
void SetMICIndicator(){
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dbe4:	4b19      	ldr	r3, [pc, #100]	@ (800dc4c <SetMICIndicator+0x6c>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d103      	bne.n	800dbf4 <SetMICIndicator+0x14>
 800dbec:	4b18      	ldr	r3, [pc, #96]	@ (800dc50 <SetMICIndicator+0x70>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d007      	beq.n	800dc04 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800dbf4:	f7ff fecc 	bl	800d990 <Calculate_LED_ON>
 800dbf8:	0003      	movs	r3, r0
 800dbfa:	001a      	movs	r2, r3
 800dbfc:	2380      	movs	r3, #128	@ 0x80
 800dbfe:	05db      	lsls	r3, r3, #23
 800dc00:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800dc02:	e01f      	b.n	800dc44 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800dc04:	4b13      	ldr	r3, [pc, #76]	@ (800dc54 <SetMICIndicator+0x74>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	1c18      	adds	r0, r3, #0
 800dc0a:	f7f5 fc2b 	bl	8003464 <__aeabi_f2d>
 800dc0e:	4a12      	ldr	r2, [pc, #72]	@ (800dc58 <SetMICIndicator+0x78>)
 800dc10:	4b12      	ldr	r3, [pc, #72]	@ (800dc5c <SetMICIndicator+0x7c>)
 800dc12:	f7f2 fc67 	bl	80004e4 <__aeabi_dcmpgt>
 800dc16:	1e03      	subs	r3, r0, #0
 800dc18:	d00a      	beq.n	800dc30 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800dc1a:	f7ff feb9 	bl	800d990 <Calculate_LED_ON>
 800dc1e:	0003      	movs	r3, r0
 800dc20:	001a      	movs	r2, r3
 800dc22:	2380      	movs	r3, #128	@ 0x80
 800dc24:	05db      	lsls	r3, r3, #23
 800dc26:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800dc28:	4b0d      	ldr	r3, [pc, #52]	@ (800dc60 <SetMICIndicator+0x80>)
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	701a      	strb	r2, [r3, #0]
}
 800dc2e:	e009      	b.n	800dc44 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800dc30:	f7ff feae 	bl	800d990 <Calculate_LED_ON>
 800dc34:	0003      	movs	r3, r0
 800dc36:	001a      	movs	r2, r3
 800dc38:	2380      	movs	r3, #128	@ 0x80
 800dc3a:	05db      	lsls	r3, r3, #23
 800dc3c:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800dc3e:	4b08      	ldr	r3, [pc, #32]	@ (800dc60 <SetMICIndicator+0x80>)
 800dc40:	2201      	movs	r2, #1
 800dc42:	701a      	strb	r2, [r3, #0]
}
 800dc44:	46c0      	nop			@ (mov r8, r8)
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	46c0      	nop			@ (mov r8, r8)
 800dc4c:	20001cf9 	.word	0x20001cf9
 800dc50:	20001cfa 	.word	0x20001cfa
 800dc54:	20001d08 	.word	0x20001d08
 800dc58:	9999999a 	.word	0x9999999a
 800dc5c:	400d9999 	.word	0x400d9999
 800dc60:	20001cfc 	.word	0x20001cfc

0800dc64 <ResetMICIndicator>:
void ResetMICIndicator(){
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dc68:	4b0f      	ldr	r3, [pc, #60]	@ (800dca8 <ResetMICIndicator+0x44>)
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d103      	bne.n	800dc78 <ResetMICIndicator+0x14>
 800dc70:	4b0e      	ldr	r3, [pc, #56]	@ (800dcac <ResetMICIndicator+0x48>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d005      	beq.n	800dc84 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800dc78:	2380      	movs	r3, #128	@ 0x80
 800dc7a:	05db      	lsls	r3, r3, #23
 800dc7c:	22fa      	movs	r2, #250	@ 0xfa
 800dc7e:	0112      	lsls	r2, r2, #4
 800dc80:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800dc82:	e00e      	b.n	800dca2 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800dc84:	4b0a      	ldr	r3, [pc, #40]	@ (800dcb0 <ResetMICIndicator+0x4c>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d105      	bne.n	800dc98 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800dc8c:	2380      	movs	r3, #128	@ 0x80
 800dc8e:	05db      	lsls	r3, r3, #23
 800dc90:	22fa      	movs	r2, #250	@ 0xfa
 800dc92:	0112      	lsls	r2, r2, #4
 800dc94:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800dc96:	e004      	b.n	800dca2 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800dc98:	2380      	movs	r3, #128	@ 0x80
 800dc9a:	05db      	lsls	r3, r3, #23
 800dc9c:	22fa      	movs	r2, #250	@ 0xfa
 800dc9e:	0112      	lsls	r2, r2, #4
 800dca0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20001cf9 	.word	0x20001cf9
 800dcac:	20001cfa 	.word	0x20001cfa
 800dcb0:	20001cfc 	.word	0x20001cfc

0800dcb4 <SetESPIndicator>:
void SetESPIndicator(){
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dcb8:	4b08      	ldr	r3, [pc, #32]	@ (800dcdc <SetESPIndicator+0x28>)
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d103      	bne.n	800dcc8 <SetESPIndicator+0x14>
 800dcc0:	4b07      	ldr	r3, [pc, #28]	@ (800dce0 <SetESPIndicator+0x2c>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d006      	beq.n	800dcd6 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800dcc8:	f7ff fe62 	bl	800d990 <Calculate_LED_ON>
 800dccc:	0003      	movs	r3, r0
 800dcce:	001a      	movs	r2, r3
 800dcd0:	2380      	movs	r3, #128	@ 0x80
 800dcd2:	05db      	lsls	r3, r3, #23
 800dcd4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	20001cf9 	.word	0x20001cf9
 800dce0:	20001cfa 	.word	0x20001cfa

0800dce4 <ResetESPIndicator>:
void ResetESPIndicator(){
 800dce4:	b580      	push	{r7, lr}
 800dce6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dce8:	4b07      	ldr	r3, [pc, #28]	@ (800dd08 <ResetESPIndicator+0x24>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d103      	bne.n	800dcf8 <ResetESPIndicator+0x14>
 800dcf0:	4b06      	ldr	r3, [pc, #24]	@ (800dd0c <ResetESPIndicator+0x28>)
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d004      	beq.n	800dd02 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800dcf8:	2380      	movs	r3, #128	@ 0x80
 800dcfa:	05db      	lsls	r3, r3, #23
 800dcfc:	22fa      	movs	r2, #250	@ 0xfa
 800dcfe:	0112      	lsls	r2, r2, #4
 800dd00:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800dd02:	46c0      	nop			@ (mov r8, r8)
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	20001cf9 	.word	0x20001cf9
 800dd0c:	20001cfa 	.word	0x20001cfa

0800dd10 <SetPMIndicator>:

void SetPMIndicator() {
 800dd10:	b580      	push	{r7, lr}
 800dd12:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dd14:	4b0f      	ldr	r3, [pc, #60]	@ (800dd54 <SetPMIndicator+0x44>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d103      	bne.n	800dd24 <SetPMIndicator+0x14>
 800dd1c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd58 <SetPMIndicator+0x48>)
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d014      	beq.n	800dd4e <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800dd24:	f7ff fe34 	bl	800d990 <Calculate_LED_ON>
 800dd28:	0003      	movs	r3, r0
 800dd2a:	001a      	movs	r2, r3
 800dd2c:	2380      	movs	r3, #128	@ 0x80
 800dd2e:	05db      	lsls	r3, r3, #23
 800dd30:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800dd32:	f7ff fe2d 	bl	800d990 <Calculate_LED_ON>
 800dd36:	0003      	movs	r3, r0
 800dd38:	001a      	movs	r2, r3
 800dd3a:	2380      	movs	r3, #128	@ 0x80
 800dd3c:	05db      	lsls	r3, r3, #23
 800dd3e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800dd40:	f7ff fe26 	bl	800d990 <Calculate_LED_ON>
 800dd44:	0003      	movs	r3, r0
 800dd46:	001a      	movs	r2, r3
 800dd48:	2380      	movs	r3, #128	@ 0x80
 800dd4a:	05db      	lsls	r3, r3, #23
 800dd4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dd4e:	46c0      	nop			@ (mov r8, r8)
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	20001cf9 	.word	0x20001cf9
 800dd58:	20001cfa 	.word	0x20001cfa

0800dd5c <ResetPMIndicator>:

void ResetPMIndicator() {
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800dd60:	4b0c      	ldr	r3, [pc, #48]	@ (800dd94 <ResetPMIndicator+0x38>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d103      	bne.n	800dd70 <ResetPMIndicator+0x14>
 800dd68:	4b0b      	ldr	r3, [pc, #44]	@ (800dd98 <ResetPMIndicator+0x3c>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00e      	beq.n	800dd8e <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800dd70:	2380      	movs	r3, #128	@ 0x80
 800dd72:	05db      	lsls	r3, r3, #23
 800dd74:	22fa      	movs	r2, #250	@ 0xfa
 800dd76:	0112      	lsls	r2, r2, #4
 800dd78:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800dd7a:	2380      	movs	r3, #128	@ 0x80
 800dd7c:	05db      	lsls	r3, r3, #23
 800dd7e:	22fa      	movs	r2, #250	@ 0xfa
 800dd80:	0112      	lsls	r2, r2, #4
 800dd82:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800dd84:	2380      	movs	r3, #128	@ 0x80
 800dd86:	05db      	lsls	r3, r3, #23
 800dd88:	22fa      	movs	r2, #250	@ 0xfa
 800dd8a:	0112      	lsls	r2, r2, #4
 800dd8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800dd8e:	46c0      	nop			@ (mov r8, r8)
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20001cf9 	.word	0x20001cf9
 800dd98:	20001cfa 	.word	0x20001cfa

0800dd9c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800dda0:	23fa      	movs	r3, #250	@ 0xfa
 800dda2:	011a      	lsls	r2, r3, #4
 800dda4:	23fa      	movs	r3, #250	@ 0xfa
 800dda6:	0119      	lsls	r1, r3, #4
 800dda8:	23fa      	movs	r3, #250	@ 0xfa
 800ddaa:	011b      	lsls	r3, r3, #4
 800ddac:	0018      	movs	r0, r3
 800ddae:	f7ff fe37 	bl	800da20 <SetStatusLED>
  SetDBLED(false,false,false);
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	f7ff fe66 	bl	800da88 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800ddbc:	23fa      	movs	r3, #250	@ 0xfa
 800ddbe:	011a      	lsls	r2, r3, #4
 800ddc0:	23fa      	movs	r3, #250	@ 0xfa
 800ddc2:	0119      	lsls	r1, r3, #4
 800ddc4:	23fa      	movs	r3, #250	@ 0xfa
 800ddc6:	011b      	lsls	r3, r3, #4
 800ddc8:	0018      	movs	r0, r3
 800ddca:	f7ff fea7 	bl	800db1c <SetVocLED>
return;
 800ddce:	46c0      	nop			@ (mov r8, r8)
}
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <SetAllREDLED>:

void SetAllREDLED() {
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800ddd8:	2380      	movs	r3, #128	@ 0x80
 800ddda:	05db      	lsls	r3, r3, #23
 800dddc:	2200      	movs	r2, #0
 800ddde:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800dde0:	2380      	movs	r3, #128	@ 0x80
 800dde2:	05db      	lsls	r3, r3, #23
 800dde4:	22fa      	movs	r2, #250	@ 0xfa
 800dde6:	0112      	lsls	r2, r2, #4
 800dde8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800ddea:	2380      	movs	r3, #128	@ 0x80
 800ddec:	05db      	lsls	r3, r3, #23
 800ddee:	22fa      	movs	r2, #250	@ 0xfa
 800ddf0:	0112      	lsls	r2, r2, #4
 800ddf2:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800ddf4:	4b0c      	ldr	r3, [pc, #48]	@ (800de28 <SetAllREDLED+0x54>)
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800ddfa:	4b0b      	ldr	r3, [pc, #44]	@ (800de28 <SetAllREDLED+0x54>)
 800ddfc:	22fa      	movs	r2, #250	@ 0xfa
 800ddfe:	0112      	lsls	r2, r2, #4
 800de00:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800de02:	4b09      	ldr	r3, [pc, #36]	@ (800de28 <SetAllREDLED+0x54>)
 800de04:	22fa      	movs	r2, #250	@ 0xfa
 800de06:	0112      	lsls	r2, r2, #4
 800de08:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800de0a:	4b08      	ldr	r3, [pc, #32]	@ (800de2c <SetAllREDLED+0x58>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	2101      	movs	r1, #1
 800de10:	0018      	movs	r0, r3
 800de12:	f002 ff32 	bl	8010c7a <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800de16:	23fa      	movs	r3, #250	@ 0xfa
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	0018      	movs	r0, r3
 800de1c:	f001 fca6 	bl	800f76c <HAL_Delay>
}
 800de20:	46c0      	nop			@ (mov r8, r8)
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	40000400 	.word	0x40000400
 800de2c:	50000400 	.word	0x50000400

0800de30 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800de30:	b5b0      	push	{r4, r5, r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	0002      	movs	r2, r0
 800de38:	1dbb      	adds	r3, r7, #6
 800de3a:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800de3c:	1dbb      	adds	r3, r7, #6
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d05a      	beq.n	800defa <SetVOCindicator+0xca>
 800de44:	1dbb      	adds	r3, r7, #6
 800de46:	881b      	ldrh	r3, [r3, #0]
 800de48:	2b64      	cmp	r3, #100	@ 0x64
 800de4a:	d856      	bhi.n	800defa <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800de4c:	1dbb      	adds	r3, r7, #6
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	0018      	movs	r0, r3
 800de52:	f7f5 fab5 	bl	80033c0 <__aeabi_i2d>
 800de56:	2200      	movs	r2, #0
 800de58:	4b5f      	ldr	r3, [pc, #380]	@ (800dfd8 <SetVOCindicator+0x1a8>)
 800de5a:	f7f3 ffab 	bl	8001db4 <__aeabi_ddiv>
 800de5e:	0002      	movs	r2, r0
 800de60:	000b      	movs	r3, r1
 800de62:	2000      	movs	r0, #0
 800de64:	495d      	ldr	r1, [pc, #372]	@ (800dfdc <SetVOCindicator+0x1ac>)
 800de66:	f7f4 feb1 	bl	8002bcc <__aeabi_dsub>
 800de6a:	0002      	movs	r2, r0
 800de6c:	000b      	movs	r3, r1
 800de6e:	0014      	movs	r4, r2
 800de70:	001d      	movs	r5, r3
 800de72:	4b5b      	ldr	r3, [pc, #364]	@ (800dfe0 <SetVOCindicator+0x1b0>)
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	0018      	movs	r0, r3
 800de78:	f7f5 faa2 	bl	80033c0 <__aeabi_i2d>
 800de7c:	0002      	movs	r2, r0
 800de7e:	000b      	movs	r3, r1
 800de80:	0020      	movs	r0, r4
 800de82:	0029      	movs	r1, r5
 800de84:	f7f4 fbda 	bl	800263c <__aeabi_dmul>
 800de88:	0002      	movs	r2, r0
 800de8a:	000b      	movs	r3, r1
 800de8c:	0010      	movs	r0, r2
 800de8e:	0019      	movs	r1, r3
 800de90:	f7f2 fbdc 	bl	800064c <__aeabi_d2uiz>
 800de94:	0003      	movs	r3, r0
 800de96:	b29a      	uxth	r2, r3
 800de98:	4b52      	ldr	r3, [pc, #328]	@ (800dfe4 <SetVOCindicator+0x1b4>)
 800de9a:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800de9c:	1dbb      	adds	r3, r7, #6
 800de9e:	881b      	ldrh	r3, [r3, #0]
 800dea0:	0018      	movs	r0, r3
 800dea2:	f7f5 fa8d 	bl	80033c0 <__aeabi_i2d>
 800dea6:	2200      	movs	r2, #0
 800dea8:	4b4b      	ldr	r3, [pc, #300]	@ (800dfd8 <SetVOCindicator+0x1a8>)
 800deaa:	f7f3 ff83 	bl	8001db4 <__aeabi_ddiv>
 800deae:	0002      	movs	r2, r0
 800deb0:	000b      	movs	r3, r1
 800deb2:	0014      	movs	r4, r2
 800deb4:	001d      	movs	r5, r3
 800deb6:	4b4a      	ldr	r3, [pc, #296]	@ (800dfe0 <SetVOCindicator+0x1b0>)
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	0018      	movs	r0, r3
 800debc:	f7f5 fa80 	bl	80033c0 <__aeabi_i2d>
 800dec0:	0002      	movs	r2, r0
 800dec2:	000b      	movs	r3, r1
 800dec4:	0020      	movs	r0, r4
 800dec6:	0029      	movs	r1, r5
 800dec8:	f7f4 fbb8 	bl	800263c <__aeabi_dmul>
 800decc:	0002      	movs	r2, r0
 800dece:	000b      	movs	r3, r1
 800ded0:	0010      	movs	r0, r2
 800ded2:	0019      	movs	r1, r3
 800ded4:	f7f2 fbba 	bl	800064c <__aeabi_d2uiz>
 800ded8:	0003      	movs	r3, r0
 800deda:	b29a      	uxth	r2, r3
 800dedc:	4b42      	ldr	r3, [pc, #264]	@ (800dfe8 <SetVOCindicator+0x1b8>)
 800dede:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800dee0:	4b3f      	ldr	r3, [pc, #252]	@ (800dfe0 <SetVOCindicator+0x1b0>)
 800dee2:	881a      	ldrh	r2, [r3, #0]
 800dee4:	4b41      	ldr	r3, [pc, #260]	@ (800dfec <SetVOCindicator+0x1bc>)
 800dee6:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800dee8:	4b40      	ldr	r3, [pc, #256]	@ (800dfec <SetVOCindicator+0x1bc>)
 800deea:	8818      	ldrh	r0, [r3, #0]
 800deec:	4b3d      	ldr	r3, [pc, #244]	@ (800dfe4 <SetVOCindicator+0x1b4>)
 800deee:	8819      	ldrh	r1, [r3, #0]
 800def0:	4b3d      	ldr	r3, [pc, #244]	@ (800dfe8 <SetVOCindicator+0x1b8>)
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	001a      	movs	r2, r3
 800def6:	f7ff fe11 	bl	800db1c <SetVocLED>
  }
  if(VOCi > 100){
 800defa:	1dbb      	adds	r3, r7, #6
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	2b64      	cmp	r3, #100	@ 0x64
 800df00:	d966      	bls.n	800dfd0 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800df02:	1dbb      	adds	r3, r7, #6
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	0018      	movs	r0, r3
 800df08:	f7f5 fa5a 	bl	80033c0 <__aeabi_i2d>
 800df0c:	2200      	movs	r2, #0
 800df0e:	4b32      	ldr	r3, [pc, #200]	@ (800dfd8 <SetVOCindicator+0x1a8>)
 800df10:	f7f4 fe5c 	bl	8002bcc <__aeabi_dsub>
 800df14:	0002      	movs	r2, r0
 800df16:	000b      	movs	r3, r1
 800df18:	0010      	movs	r0, r2
 800df1a:	0019      	movs	r1, r3
 800df1c:	2200      	movs	r2, #0
 800df1e:	4b34      	ldr	r3, [pc, #208]	@ (800dff0 <SetVOCindicator+0x1c0>)
 800df20:	f7f3 ff48 	bl	8001db4 <__aeabi_ddiv>
 800df24:	0002      	movs	r2, r0
 800df26:	000b      	movs	r3, r1
 800df28:	0014      	movs	r4, r2
 800df2a:	001d      	movs	r5, r3
 800df2c:	4b2c      	ldr	r3, [pc, #176]	@ (800dfe0 <SetVOCindicator+0x1b0>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	0018      	movs	r0, r3
 800df32:	f7f5 fa45 	bl	80033c0 <__aeabi_i2d>
 800df36:	0002      	movs	r2, r0
 800df38:	000b      	movs	r3, r1
 800df3a:	0020      	movs	r0, r4
 800df3c:	0029      	movs	r1, r5
 800df3e:	f7f4 fb7d 	bl	800263c <__aeabi_dmul>
 800df42:	0002      	movs	r2, r0
 800df44:	000b      	movs	r3, r1
 800df46:	0010      	movs	r0, r2
 800df48:	0019      	movs	r1, r3
 800df4a:	f7f2 fb7f 	bl	800064c <__aeabi_d2uiz>
 800df4e:	0003      	movs	r3, r0
 800df50:	b29a      	uxth	r2, r3
 800df52:	4b24      	ldr	r3, [pc, #144]	@ (800dfe4 <SetVOCindicator+0x1b4>)
 800df54:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800df56:	1dbb      	adds	r3, r7, #6
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	0018      	movs	r0, r3
 800df5c:	f7f5 fa30 	bl	80033c0 <__aeabi_i2d>
 800df60:	2200      	movs	r2, #0
 800df62:	4b1d      	ldr	r3, [pc, #116]	@ (800dfd8 <SetVOCindicator+0x1a8>)
 800df64:	f7f4 fe32 	bl	8002bcc <__aeabi_dsub>
 800df68:	0002      	movs	r2, r0
 800df6a:	000b      	movs	r3, r1
 800df6c:	0010      	movs	r0, r2
 800df6e:	0019      	movs	r1, r3
 800df70:	2200      	movs	r2, #0
 800df72:	4b1f      	ldr	r3, [pc, #124]	@ (800dff0 <SetVOCindicator+0x1c0>)
 800df74:	f7f3 ff1e 	bl	8001db4 <__aeabi_ddiv>
 800df78:	0002      	movs	r2, r0
 800df7a:	000b      	movs	r3, r1
 800df7c:	2000      	movs	r0, #0
 800df7e:	4917      	ldr	r1, [pc, #92]	@ (800dfdc <SetVOCindicator+0x1ac>)
 800df80:	f7f4 fe24 	bl	8002bcc <__aeabi_dsub>
 800df84:	0002      	movs	r2, r0
 800df86:	000b      	movs	r3, r1
 800df88:	0014      	movs	r4, r2
 800df8a:	001d      	movs	r5, r3
 800df8c:	4b14      	ldr	r3, [pc, #80]	@ (800dfe0 <SetVOCindicator+0x1b0>)
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	0018      	movs	r0, r3
 800df92:	f7f5 fa15 	bl	80033c0 <__aeabi_i2d>
 800df96:	0002      	movs	r2, r0
 800df98:	000b      	movs	r3, r1
 800df9a:	0020      	movs	r0, r4
 800df9c:	0029      	movs	r1, r5
 800df9e:	f7f4 fb4d 	bl	800263c <__aeabi_dmul>
 800dfa2:	0002      	movs	r2, r0
 800dfa4:	000b      	movs	r3, r1
 800dfa6:	0010      	movs	r0, r2
 800dfa8:	0019      	movs	r1, r3
 800dfaa:	f7f2 fb4f 	bl	800064c <__aeabi_d2uiz>
 800dfae:	0003      	movs	r3, r0
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	4b0e      	ldr	r3, [pc, #56]	@ (800dfec <SetVOCindicator+0x1bc>)
 800dfb4:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800dfb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe0 <SetVOCindicator+0x1b0>)
 800dfb8:	881a      	ldrh	r2, [r3, #0]
 800dfba:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe8 <SetVOCindicator+0x1b8>)
 800dfbc:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800dfbe:	4b0b      	ldr	r3, [pc, #44]	@ (800dfec <SetVOCindicator+0x1bc>)
 800dfc0:	8818      	ldrh	r0, [r3, #0]
 800dfc2:	4b08      	ldr	r3, [pc, #32]	@ (800dfe4 <SetVOCindicator+0x1b4>)
 800dfc4:	8819      	ldrh	r1, [r3, #0]
 800dfc6:	4b08      	ldr	r3, [pc, #32]	@ (800dfe8 <SetVOCindicator+0x1b8>)
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	001a      	movs	r2, r3
 800dfcc:	f7ff fda6 	bl	800db1c <SetVocLED>
  }

}
 800dfd0:	46c0      	nop			@ (mov r8, r8)
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	b002      	add	sp, #8
 800dfd6:	bdb0      	pop	{r4, r5, r7, pc}
 800dfd8:	40590000 	.word	0x40590000
 800dfdc:	3ff00000 	.word	0x3ff00000
 800dfe0:	200000ce 	.word	0x200000ce
 800dfe4:	20001d0e 	.word	0x20001d0e
 800dfe8:	20001d10 	.word	0x20001d10
 800dfec:	20001d12 	.word	0x20001d12
 800dff0:	40790000 	.word	0x40790000

0800dff4 <powerCheck>:

Battery_Status powerCheck(){
 800dff4:	b590      	push	{r4, r7, lr}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800dffa:	f7f8 fdfd 	bl	8006bf8 <Check_USB_PowerOn>
 800dffe:	0003      	movs	r3, r0
 800e000:	001a      	movs	r2, r3
 800e002:	2301      	movs	r3, #1
 800e004:	4053      	eors	r3, r2
 800e006:	b2db      	uxtb	r3, r3
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d005      	beq.n	800e018 <powerCheck+0x24>
    status = batteryChargeCheck();
 800e00c:	1dfc      	adds	r4, r7, #7
 800e00e:	f7ff fc65 	bl	800d8dc <batteryChargeCheck>
 800e012:	0003      	movs	r3, r0
 800e014:	7023      	strb	r3, [r4, #0]
 800e016:	e002      	b.n	800e01e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800e018:	1dfb      	adds	r3, r7, #7
 800e01a:	2204      	movs	r2, #4
 800e01c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800e01e:	1dfb      	adds	r3, r7, #7
 800e020:	781b      	ldrb	r3, [r3, #0]
}
 800e022:	0018      	movs	r0, r3
 800e024:	46bd      	mov	sp, r7
 800e026:	b003      	add	sp, #12
 800e028:	bd90      	pop	{r4, r7, pc}
	...

0800e02c <powerDisplay>:

void powerDisplay(Battery_Status status){
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	0002      	movs	r2, r0
 800e034:	1dfb      	adds	r3, r7, #7
 800e036:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800e038:	1dfb      	adds	r3, r7, #7
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b04      	cmp	r3, #4
 800e03e:	d105      	bne.n	800e04c <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800e040:	4a18      	ldr	r2, [pc, #96]	@ (800e0a4 <powerDisplay+0x78>)
 800e042:	4b19      	ldr	r3, [pc, #100]	@ (800e0a8 <powerDisplay+0x7c>)
 800e044:	0019      	movs	r1, r3
 800e046:	2003      	movs	r0, #3
 800e048:	f000 ff42 	bl	800eed0 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800e04c:	1dfb      	adds	r3, r7, #7
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	2b03      	cmp	r3, #3
 800e052:	d105      	bne.n	800e060 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800e054:	4a15      	ldr	r2, [pc, #84]	@ (800e0ac <powerDisplay+0x80>)
 800e056:	4b14      	ldr	r3, [pc, #80]	@ (800e0a8 <powerDisplay+0x7c>)
 800e058:	0019      	movs	r1, r3
 800e05a:	2003      	movs	r0, #3
 800e05c:	f000 ff38 	bl	800eed0 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800e060:	1dfb      	adds	r3, r7, #7
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	2b02      	cmp	r3, #2
 800e066:	d105      	bne.n	800e074 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800e068:	4a11      	ldr	r2, [pc, #68]	@ (800e0b0 <powerDisplay+0x84>)
 800e06a:	4b0f      	ldr	r3, [pc, #60]	@ (800e0a8 <powerDisplay+0x7c>)
 800e06c:	0019      	movs	r1, r3
 800e06e:	2003      	movs	r0, #3
 800e070:	f000 ff2e 	bl	800eed0 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800e074:	1dfb      	adds	r3, r7, #7
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d105      	bne.n	800e088 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800e07c:	4a0d      	ldr	r2, [pc, #52]	@ (800e0b4 <powerDisplay+0x88>)
 800e07e:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a8 <powerDisplay+0x7c>)
 800e080:	0019      	movs	r1, r3
 800e082:	2003      	movs	r0, #3
 800e084:	f000 ff24 	bl	800eed0 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800e088:	1dfb      	adds	r3, r7, #7
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d105      	bne.n	800e09c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800e090:	4a09      	ldr	r2, [pc, #36]	@ (800e0b8 <powerDisplay+0x8c>)
 800e092:	4b05      	ldr	r3, [pc, #20]	@ (800e0a8 <powerDisplay+0x7c>)
 800e094:	0019      	movs	r1, r3
 800e096:	2003      	movs	r0, #3
 800e098:	f000 ff1a 	bl	800eed0 <CreateLine>
  }
}
 800e09c:	46c0      	nop			@ (mov r8, r8)
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	b002      	add	sp, #8
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	08025ed0 	.word	0x08025ed0
 800e0a8:	08025ef4 	.word	0x08025ef4
 800e0ac:	08025ef8 	.word	0x08025ef8
 800e0b0:	08025f10 	.word	0x08025f10
 800e0b4:	08025f30 	.word	0x08025f30
 800e0b8:	08025f48 	.word	0x08025f48

0800e0bc <configCheck>:

void configCheck(){
 800e0bc:	b590      	push	{r4, r7, lr}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800e0c2:	f7f8 fda8 	bl	8006c16 <BootButton_Pressed>
 800e0c6:	1e03      	subs	r3, r0, #0
 800e0c8:	d007      	beq.n	800e0da <configCheck+0x1e>
 800e0ca:	f7f8 fdb5 	bl	8006c38 <UserButton_Pressed>
 800e0ce:	1e03      	subs	r3, r0, #0
 800e0d0:	d003      	beq.n	800e0da <configCheck+0x1e>
    configSet = true;
 800e0d2:	4bb2      	ldr	r3, [pc, #712]	@ (800e39c <configCheck+0x2e0>)
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	701a      	strb	r2, [r3, #0]
 800e0d8:	e00a      	b.n	800e0f0 <configCheck+0x34>
  }
  else{
    configSet = false;
 800e0da:	4bb0      	ldr	r3, [pc, #704]	@ (800e39c <configCheck+0x2e0>)
 800e0dc:	2200      	movs	r2, #0
 800e0de:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800e0e0:	f001 fb3a 	bl	800f758 <HAL_GetTick>
 800e0e4:	0003      	movs	r3, r0
 800e0e6:	22fa      	movs	r2, #250	@ 0xfa
 800e0e8:	00d2      	lsls	r2, r2, #3
 800e0ea:	189a      	adds	r2, r3, r2
 800e0ec:	4bac      	ldr	r3, [pc, #688]	@ (800e3a0 <configCheck+0x2e4>)
 800e0ee:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800e0f0:	4baa      	ldr	r3, [pc, #680]	@ (800e39c <configCheck+0x2e0>)
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00d      	beq.n	800e114 <configCheck+0x58>
 800e0f8:	4ba9      	ldr	r3, [pc, #676]	@ (800e3a0 <configCheck+0x2e4>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	0018      	movs	r0, r3
 800e0fe:	f000 fe91 	bl	800ee24 <TimestampIsReached>
 800e102:	1e03      	subs	r3, r0, #0
 800e104:	d006      	beq.n	800e114 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800e106:	f7f5 fc1b 	bl	8003940 <SetConfigMode>
    SetDBLED(true, true, true);
 800e10a:	2201      	movs	r2, #1
 800e10c:	2101      	movs	r1, #1
 800e10e:	2001      	movs	r0, #1
 800e110:	f7ff fcba 	bl	800da88 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800e114:	f7f8 fd7f 	bl	8006c16 <BootButton_Pressed>
 800e118:	0003      	movs	r3, r0
 800e11a:	001a      	movs	r2, r3
 800e11c:	2301      	movs	r3, #1
 800e11e:	4053      	eors	r3, r2
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d054      	beq.n	800e1d0 <configCheck+0x114>
 800e126:	f7f8 fd87 	bl	8006c38 <UserButton_Pressed>
 800e12a:	1e03      	subs	r3, r0, #0
 800e12c:	d050      	beq.n	800e1d0 <configCheck+0x114>
 800e12e:	4b9d      	ldr	r3, [pc, #628]	@ (800e3a4 <configCheck+0x2e8>)
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2201      	movs	r2, #1
 800e134:	4053      	eors	r3, r2
 800e136:	b2db      	uxtb	r3, r3
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d049      	beq.n	800e1d0 <configCheck+0x114>
 800e13c:	f7f5 fc20 	bl	8003980 <GetReconfigMode>
 800e140:	0003      	movs	r3, r0
 800e142:	001a      	movs	r2, r3
 800e144:	2301      	movs	r3, #1
 800e146:	4053      	eors	r3, r2
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d040      	beq.n	800e1d0 <configCheck+0x114>
    SetLEDsOff();
 800e14e:	f7ff fe25 	bl	800dd9c <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800e152:	4a95      	ldr	r2, [pc, #596]	@ (800e3a8 <configCheck+0x2ec>)
 800e154:	4994      	ldr	r1, [pc, #592]	@ (800e3a8 <configCheck+0x2ec>)
 800e156:	4b94      	ldr	r3, [pc, #592]	@ (800e3a8 <configCheck+0x2ec>)
 800e158:	0018      	movs	r0, r3
 800e15a:	f7ff fcdf 	bl	800db1c <SetVocLED>
    HAL_Delay(1500);
 800e15e:	4b93      	ldr	r3, [pc, #588]	@ (800e3ac <configCheck+0x2f0>)
 800e160:	0018      	movs	r0, r3
 800e162:	f001 fb03 	bl	800f76c <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800e166:	23fa      	movs	r3, #250	@ 0xfa
 800e168:	011a      	lsls	r2, r3, #4
 800e16a:	23fa      	movs	r3, #250	@ 0xfa
 800e16c:	0119      	lsls	r1, r3, #4
 800e16e:	23fa      	movs	r3, #250	@ 0xfa
 800e170:	011b      	lsls	r3, r3, #4
 800e172:	0018      	movs	r0, r3
 800e174:	f7ff fcd2 	bl	800db1c <SetVocLED>
    userToggle = !userToggle;
 800e178:	4b8d      	ldr	r3, [pc, #564]	@ (800e3b0 <configCheck+0x2f4>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	1e5a      	subs	r2, r3, #1
 800e17e:	4193      	sbcs	r3, r2
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2201      	movs	r2, #1
 800e184:	4053      	eors	r3, r2
 800e186:	b2db      	uxtb	r3, r3
 800e188:	1c1a      	adds	r2, r3, #0
 800e18a:	2301      	movs	r3, #1
 800e18c:	4013      	ands	r3, r2
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	4b87      	ldr	r3, [pc, #540]	@ (800e3b0 <configCheck+0x2f4>)
 800e192:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800e194:	4b86      	ldr	r3, [pc, #536]	@ (800e3b0 <configCheck+0x2f4>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <configCheck+0xe4>
      EnabledConnectedDevices();
 800e19c:	f7fb f836 	bl	800920c <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800e1a0:	4b83      	ldr	r3, [pc, #524]	@ (800e3b0 <configCheck+0x2f4>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <configCheck+0xf0>
 800e1a8:	4b82      	ldr	r3, [pc, #520]	@ (800e3b4 <configCheck+0x2f8>)
 800e1aa:	e000      	b.n	800e1ae <configCheck+0xf2>
 800e1ac:	4b82      	ldr	r3, [pc, #520]	@ (800e3b8 <configCheck+0x2fc>)
 800e1ae:	4a83      	ldr	r2, [pc, #524]	@ (800e3bc <configCheck+0x300>)
 800e1b0:	4983      	ldr	r1, [pc, #524]	@ (800e3c0 <configCheck+0x304>)
 800e1b2:	2003      	movs	r0, #3
 800e1b4:	f000 fe8c 	bl	800eed0 <CreateLine>
    userbuttonHeld = true;
 800e1b8:	4b7a      	ldr	r3, [pc, #488]	@ (800e3a4 <configCheck+0x2e8>)
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800e1be:	f001 facb 	bl	800f758 <HAL_GetTick>
 800e1c2:	0003      	movs	r3, r0
 800e1c4:	22fa      	movs	r2, #250	@ 0xfa
 800e1c6:	00d2      	lsls	r2, r2, #3
 800e1c8:	189a      	adds	r2, r3, r2
 800e1ca:	4b7e      	ldr	r3, [pc, #504]	@ (800e3c4 <configCheck+0x308>)
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	e002      	b.n	800e1d6 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800e1d0:	4b74      	ldr	r3, [pc, #464]	@ (800e3a4 <configCheck+0x2e8>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800e1d6:	f7f8 fd1e 	bl	8006c16 <BootButton_Pressed>
 800e1da:	0003      	movs	r3, r0
 800e1dc:	001a      	movs	r2, r3
 800e1de:	2301      	movs	r3, #1
 800e1e0:	4053      	eors	r3, r2
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d100      	bne.n	800e1ea <configCheck+0x12e>
 800e1e8:	e0a4      	b.n	800e334 <configCheck+0x278>
 800e1ea:	4b6e      	ldr	r3, [pc, #440]	@ (800e3a4 <configCheck+0x2e8>)
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d100      	bne.n	800e1f4 <configCheck+0x138>
 800e1f2:	e09f      	b.n	800e334 <configCheck+0x278>
 800e1f4:	4b73      	ldr	r3, [pc, #460]	@ (800e3c4 <configCheck+0x308>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	0018      	movs	r0, r3
 800e1fa:	f000 fe13 	bl	800ee24 <TimestampIsReached>
 800e1fe:	1e03      	subs	r3, r0, #0
 800e200:	d100      	bne.n	800e204 <configCheck+0x148>
 800e202:	e097      	b.n	800e334 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e204:	f7fa fd54 	bl	8008cb0 <GetPMSensorPresence>
 800e208:	1e03      	subs	r3, r0, #0
 800e20a:	d100      	bne.n	800e20e <configCheck+0x152>
 800e20c:	e082      	b.n	800e314 <configCheck+0x258>
 800e20e:	4b6e      	ldr	r3, [pc, #440]	@ (800e3c8 <configCheck+0x30c>)
 800e210:	791b      	ldrb	r3, [r3, #4]
 800e212:	2b34      	cmp	r3, #52	@ 0x34
 800e214:	d004      	beq.n	800e220 <configCheck+0x164>
 800e216:	4b6c      	ldr	r3, [pc, #432]	@ (800e3c8 <configCheck+0x30c>)
 800e218:	791b      	ldrb	r3, [r3, #4]
 800e21a:	2b35      	cmp	r3, #53	@ 0x35
 800e21c:	d000      	beq.n	800e220 <configCheck+0x164>
 800e21e:	e079      	b.n	800e314 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800e220:	4b6a      	ldr	r3, [pc, #424]	@ (800e3cc <configCheck+0x310>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	1e5a      	subs	r2, r3, #1
 800e226:	4193      	sbcs	r3, r2
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	2201      	movs	r2, #1
 800e22c:	4053      	eors	r3, r2
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	1c1a      	adds	r2, r3, #0
 800e232:	2301      	movs	r3, #1
 800e234:	4013      	ands	r3, r2
 800e236:	b2da      	uxtb	r2, r3
 800e238:	4b64      	ldr	r3, [pc, #400]	@ (800e3cc <configCheck+0x310>)
 800e23a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800e23c:	4b63      	ldr	r3, [pc, #396]	@ (800e3cc <configCheck+0x310>)
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d005      	beq.n	800e250 <configCheck+0x194>
 800e244:	1dbc      	adds	r4, r7, #6
 800e246:	f7ff fba3 	bl	800d990 <Calculate_LED_ON>
 800e24a:	0003      	movs	r3, r0
 800e24c:	8023      	strh	r3, [r4, #0]
 800e24e:	e003      	b.n	800e258 <configCheck+0x19c>
        else color = 4000;
 800e250:	1dbb      	adds	r3, r7, #6
 800e252:	22fa      	movs	r2, #250	@ 0xfa
 800e254:	0112      	lsls	r2, r2, #4
 800e256:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800e258:	4b5c      	ldr	r3, [pc, #368]	@ (800e3cc <configCheck+0x310>)
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <configCheck+0x1a8>
 800e260:	4b5b      	ldr	r3, [pc, #364]	@ (800e3d0 <configCheck+0x314>)
 800e262:	e000      	b.n	800e266 <configCheck+0x1aa>
 800e264:	4b5b      	ldr	r3, [pc, #364]	@ (800e3d4 <configCheck+0x318>)
 800e266:	4a5c      	ldr	r2, [pc, #368]	@ (800e3d8 <configCheck+0x31c>)
 800e268:	495c      	ldr	r1, [pc, #368]	@ (800e3dc <configCheck+0x320>)
 800e26a:	2002      	movs	r0, #2
 800e26c:	f000 fe30 	bl	800eed0 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800e270:	1d7b      	adds	r3, r7, #5
 800e272:	2200      	movs	r2, #0
 800e274:	701a      	strb	r2, [r3, #0]
 800e276:	e028      	b.n	800e2ca <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800e278:	f7ff fb8a 	bl	800d990 <Calculate_LED_ON>
 800e27c:	0003      	movs	r3, r0
 800e27e:	001a      	movs	r2, r3
 800e280:	4b57      	ldr	r3, [pc, #348]	@ (800e3e0 <configCheck+0x324>)
 800e282:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800e284:	4b56      	ldr	r3, [pc, #344]	@ (800e3e0 <configCheck+0x324>)
 800e286:	1dba      	adds	r2, r7, #6
 800e288:	8812      	ldrh	r2, [r2, #0]
 800e28a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800e28c:	4b54      	ldr	r3, [pc, #336]	@ (800e3e0 <configCheck+0x324>)
 800e28e:	1dba      	adds	r2, r7, #6
 800e290:	8812      	ldrh	r2, [r2, #0]
 800e292:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800e294:	23c8      	movs	r3, #200	@ 0xc8
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	0018      	movs	r0, r3
 800e29a:	f001 fa67 	bl	800f76c <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800e29e:	4b50      	ldr	r3, [pc, #320]	@ (800e3e0 <configCheck+0x324>)
 800e2a0:	22fa      	movs	r2, #250	@ 0xfa
 800e2a2:	0112      	lsls	r2, r2, #4
 800e2a4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800e2a6:	4b4e      	ldr	r3, [pc, #312]	@ (800e3e0 <configCheck+0x324>)
 800e2a8:	22fa      	movs	r2, #250	@ 0xfa
 800e2aa:	0112      	lsls	r2, r2, #4
 800e2ac:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800e2ae:	4b4c      	ldr	r3, [pc, #304]	@ (800e3e0 <configCheck+0x324>)
 800e2b0:	22fa      	movs	r2, #250	@ 0xfa
 800e2b2:	0112      	lsls	r2, r2, #4
 800e2b4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800e2b6:	23c8      	movs	r3, #200	@ 0xc8
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f001 fa56 	bl	800f76c <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800e2c0:	1d7b      	adds	r3, r7, #5
 800e2c2:	781a      	ldrb	r2, [r3, #0]
 800e2c4:	1d7b      	adds	r3, r7, #5
 800e2c6:	3201      	adds	r2, #1
 800e2c8:	701a      	strb	r2, [r3, #0]
 800e2ca:	1d7b      	adds	r3, r7, #5
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d9d2      	bls.n	800e278 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800e2d2:	4b37      	ldr	r3, [pc, #220]	@ (800e3b0 <configCheck+0x2f4>)
 800e2d4:	781b      	ldrb	r3, [r3, #0]
 800e2d6:	1e5a      	subs	r2, r3, #1
 800e2d8:	4193      	sbcs	r3, r2
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2201      	movs	r2, #1
 800e2de:	4053      	eors	r3, r2
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	1c1a      	adds	r2, r3, #0
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	4013      	ands	r3, r2
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4b31      	ldr	r3, [pc, #196]	@ (800e3b0 <configCheck+0x2f4>)
 800e2ec:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800e2ee:	4b30      	ldr	r3, [pc, #192]	@ (800e3b0 <configCheck+0x2f4>)
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <configCheck+0x23e>
 800e2f6:	4b36      	ldr	r3, [pc, #216]	@ (800e3d0 <configCheck+0x314>)
 800e2f8:	e000      	b.n	800e2fc <configCheck+0x240>
 800e2fa:	4b36      	ldr	r3, [pc, #216]	@ (800e3d4 <configCheck+0x318>)
 800e2fc:	4a39      	ldr	r2, [pc, #228]	@ (800e3e4 <configCheck+0x328>)
 800e2fe:	4937      	ldr	r1, [pc, #220]	@ (800e3dc <configCheck+0x320>)
 800e300:	2002      	movs	r0, #2
 800e302:	f000 fde5 	bl	800eed0 <CreateLine>
      if (usbPluggedIn) {
 800e306:	4b38      	ldr	r3, [pc, #224]	@ (800e3e8 <configCheck+0x32c>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d009      	beq.n	800e322 <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800e30e:	f7fc f86d 	bl	800a3ec <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e312:	e006      	b.n	800e322 <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800e314:	4a35      	ldr	r2, [pc, #212]	@ (800e3ec <configCheck+0x330>)
 800e316:	4b31      	ldr	r3, [pc, #196]	@ (800e3dc <configCheck+0x320>)
 800e318:	0019      	movs	r1, r3
 800e31a:	2002      	movs	r0, #2
 800e31c:	f000 fdd8 	bl	800eed0 <CreateLine>
 800e320:	e000      	b.n	800e324 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e322:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800e324:	46c0      	nop			@ (mov r8, r8)
 800e326:	f7f8 fc87 	bl	8006c38 <UserButton_Pressed>
 800e32a:	1e03      	subs	r3, r0, #0
 800e32c:	d1fb      	bne.n	800e326 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800e32e:	4b1d      	ldr	r3, [pc, #116]	@ (800e3a4 <configCheck+0x2e8>)
 800e330:	2200      	movs	r2, #0
 800e332:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800e334:	f7f8 fc6f 	bl	8006c16 <BootButton_Pressed>
 800e338:	0003      	movs	r3, r0
 800e33a:	001a      	movs	r2, r3
 800e33c:	2301      	movs	r3, #1
 800e33e:	4053      	eors	r3, r2
 800e340:	b2db      	uxtb	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <configCheck+0x2a2>
 800e346:	f7f8 fc77 	bl	8006c38 <UserButton_Pressed>
 800e34a:	0003      	movs	r3, r0
 800e34c:	001a      	movs	r2, r3
 800e34e:	2301      	movs	r3, #1
 800e350:	4053      	eors	r3, r2
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <configCheck+0x2a2>
    userbuttonHeld = false;
 800e358:	4b12      	ldr	r3, [pc, #72]	@ (800e3a4 <configCheck+0x2e8>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800e35e:	f7f8 fc4b 	bl	8006bf8 <Check_USB_PowerOn>
 800e362:	1e03      	subs	r3, r0, #0
 800e364:	d003      	beq.n	800e36e <configCheck+0x2b2>
    usbPluggedIn = true;
 800e366:	4b20      	ldr	r3, [pc, #128]	@ (800e3e8 <configCheck+0x32c>)
 800e368:	2201      	movs	r2, #1
 800e36a:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800e36c:	e012      	b.n	800e394 <configCheck+0x2d8>
    if(!userToggle && !init){
 800e36e:	4b10      	ldr	r3, [pc, #64]	@ (800e3b0 <configCheck+0x2f4>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	2201      	movs	r2, #1
 800e374:	4053      	eors	r3, r2
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d008      	beq.n	800e38e <configCheck+0x2d2>
 800e37c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3f0 <configCheck+0x334>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2201      	movs	r2, #1
 800e382:	4053      	eors	r3, r2
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <configCheck+0x2d2>
      SetLEDsOff();
 800e38a:	f7ff fd07 	bl	800dd9c <SetLEDsOff>
    usbPluggedIn = false;
 800e38e:	4b16      	ldr	r3, [pc, #88]	@ (800e3e8 <configCheck+0x32c>)
 800e390:	2200      	movs	r2, #0
 800e392:	701a      	strb	r2, [r3, #0]
}
 800e394:	46c0      	nop			@ (mov r8, r8)
 800e396:	46bd      	mov	sp, r7
 800e398:	b003      	add	sp, #12
 800e39a:	bd90      	pop	{r4, r7, pc}
 800e39c:	20001cf8 	.word	0x20001cf8
 800e3a0:	20001d00 	.word	0x20001d00
 800e3a4:	20001cfb 	.word	0x20001cfb
 800e3a8:	00000bb8 	.word	0x00000bb8
 800e3ac:	000005dc 	.word	0x000005dc
 800e3b0:	20001cfa 	.word	0x20001cfa
 800e3b4:	08025f6c 	.word	0x08025f6c
 800e3b8:	08025f70 	.word	0x08025f70
 800e3bc:	08025f74 	.word	0x08025f74
 800e3c0:	08025ef4 	.word	0x08025ef4
 800e3c4:	20001d04 	.word	0x20001d04
 800e3c8:	20000d6c 	.word	0x20000d6c
 800e3cc:	20000d6a 	.word	0x20000d6a
 800e3d0:	08025f94 	.word	0x08025f94
 800e3d4:	08025f9c 	.word	0x08025f9c
 800e3d8:	08025fa8 	.word	0x08025fa8
 800e3dc:	08025fc8 	.word	0x08025fc8
 800e3e0:	40000400 	.word	0x40000400
 800e3e4:	08025fcc 	.word	0x08025fcc
 800e3e8:	20001cf9 	.word	0x20001cf9
 800e3ec:	08025fe4 	.word	0x08025fe4
 800e3f0:	200000cc 	.word	0x200000cc

0800e3f4 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800e3f4:	b590      	push	{r4, r7, lr}
 800e3f6:	b083      	sub	sp, #12
 800e3f8:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800e3fa:	1dfc      	adds	r4, r7, #7
 800e3fc:	f7ff fdfa 	bl	800dff4 <powerCheck>
 800e400:	0003      	movs	r3, r0
 800e402:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800e404:	1dfb      	adds	r3, r7, #7
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	0018      	movs	r0, r3
 800e40a:	f7ff fe0f 	bl	800e02c <powerDisplay>
  return status;
 800e40e:	1dfb      	adds	r3, r7, #7
 800e410:	781b      	ldrb	r3, [r3, #0]
}
 800e412:	0018      	movs	r0, r3
 800e414:	46bd      	mov	sp, r7
 800e416:	b003      	add	sp, #12
 800e418:	bd90      	pop	{r4, r7, pc}
	...

0800e41c <setuserToggle>:

void setuserToggle(void) {
 800e41c:	b580      	push	{r7, lr}
 800e41e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800e420:	f7ff fde8 	bl	800dff4 <powerCheck>
 800e424:	0003      	movs	r3, r0
 800e426:	2b04      	cmp	r3, #4
 800e428:	d004      	beq.n	800e434 <setuserToggle+0x18>
    userToggle = true;
 800e42a:	4b04      	ldr	r3, [pc, #16]	@ (800e43c <setuserToggle+0x20>)
 800e42c:	2201      	movs	r2, #1
 800e42e:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800e430:	f7fa feec 	bl	800920c <EnabledConnectedDevices>
  }
}
 800e434:	46c0      	nop			@ (mov r8, r8)
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	46c0      	nop			@ (mov r8, r8)
 800e43c:	20001cfa 	.word	0x20001cfa

0800e440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e444:	4b07      	ldr	r3, [pc, #28]	@ (800e464 <HAL_MspInit+0x24>)
 800e446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e448:	4b06      	ldr	r3, [pc, #24]	@ (800e464 <HAL_MspInit+0x24>)
 800e44a:	2101      	movs	r1, #1
 800e44c:	430a      	orrs	r2, r1
 800e44e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800e450:	4b04      	ldr	r3, [pc, #16]	@ (800e464 <HAL_MspInit+0x24>)
 800e452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e454:	4b03      	ldr	r3, [pc, #12]	@ (800e464 <HAL_MspInit+0x24>)
 800e456:	2180      	movs	r1, #128	@ 0x80
 800e458:	0549      	lsls	r1, r1, #21
 800e45a:	430a      	orrs	r2, r1
 800e45c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e45e:	46c0      	nop			@ (mov r8, r8)
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	40021000 	.word	0x40021000

0800e468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e46c:	46c0      	nop			@ (mov r8, r8)
 800e46e:	e7fd      	b.n	800e46c <NMI_Handler+0x4>

0800e470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e474:	46c0      	nop			@ (mov r8, r8)
 800e476:	e7fd      	b.n	800e474 <HardFault_Handler+0x4>

0800e478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800e47c:	46c0      	nop			@ (mov r8, r8)
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e486:	46c0      	nop			@ (mov r8, r8)
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e490:	f001 f950 	bl	800f734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800e494:	46c0      	nop			@ (mov r8, r8)
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800e4a0:	4b03      	ldr	r3, [pc, #12]	@ (800e4b0 <RTC_IRQHandler+0x14>)
 800e4a2:	0018      	movs	r0, r3
 800e4a4:	f008 fe76 	bl	8017194 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800e4a8:	46c0      	nop			@ (mov r8, r8)
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	46c0      	nop			@ (mov r8, r8)
 800e4b0:	20000d44 	.word	0x20000d44

0800e4b4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800e4b8:	2380      	movs	r3, #128	@ 0x80
 800e4ba:	021b      	lsls	r3, r3, #8
 800e4bc:	0018      	movs	r0, r3
 800e4be:	f002 fbf9 	bl	8010cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800e4c2:	46c0      	nop			@ (mov r8, r8)
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800e4cc:	4b05      	ldr	r3, [pc, #20]	@ (800e4e4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800e4ce:	0018      	movs	r0, r3
 800e4d0:	f001 ff81 	bl	80103d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800e4d4:	4b04      	ldr	r3, [pc, #16]	@ (800e4e8 <DMA1_Channel2_3_IRQHandler+0x20>)
 800e4d6:	0018      	movs	r0, r3
 800e4d8:	f001 ff7d 	bl	80103d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800e4dc:	46c0      	nop			@ (mov r8, r8)
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	46c0      	nop			@ (mov r8, r8)
 800e4e4:	20000be8 	.word	0x20000be8
 800e4e8:	20000ba0 	.word	0x20000ba0

0800e4ec <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800e4f0:	4b07      	ldr	r3, [pc, #28]	@ (800e510 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800e4f2:	0018      	movs	r0, r3
 800e4f4:	f001 ff6f 	bl	80103d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800e4f8:	4b06      	ldr	r3, [pc, #24]	@ (800e514 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800e4fa:	0018      	movs	r0, r3
 800e4fc:	f001 ff6b 	bl	80103d6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800e500:	4b05      	ldr	r3, [pc, #20]	@ (800e518 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800e502:	0018      	movs	r0, r3
 800e504:	f001 ff67 	bl	80103d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800e508:	46c0      	nop			@ (mov r8, r8)
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	46c0      	nop			@ (mov r8, r8)
 800e510:	20000c6c 	.word	0x20000c6c
 800e514:	20002000 	.word	0x20002000
 800e518:	20002048 	.word	0x20002048

0800e51c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800e520:	4b03      	ldr	r3, [pc, #12]	@ (800e530 <USART4_5_IRQHandler+0x14>)
 800e522:	0018      	movs	r0, r3
 800e524:	f009 fd30 	bl	8017f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800e528:	46c0      	nop			@ (mov r8, r8)
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	46c0      	nop			@ (mov r8, r8)
 800e530:	20001f48 	.word	0x20001f48

0800e534 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800e538:	4b09      	ldr	r3, [pc, #36]	@ (800e560 <I2C1_IRQHandler+0x2c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	699a      	ldr	r2, [r3, #24]
 800e53e:	23e0      	movs	r3, #224	@ 0xe0
 800e540:	00db      	lsls	r3, r3, #3
 800e542:	4013      	ands	r3, r2
 800e544:	d004      	beq.n	800e550 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800e546:	4b06      	ldr	r3, [pc, #24]	@ (800e560 <I2C1_IRQHandler+0x2c>)
 800e548:	0018      	movs	r0, r3
 800e54a:	f003 f89b 	bl	8011684 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800e54e:	e003      	b.n	800e558 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800e550:	4b03      	ldr	r3, [pc, #12]	@ (800e560 <I2C1_IRQHandler+0x2c>)
 800e552:	0018      	movs	r0, r3
 800e554:	f003 f87c 	bl	8011650 <HAL_I2C_EV_IRQHandler>
}
 800e558:	46c0      	nop			@ (mov r8, r8)
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	46c0      	nop			@ (mov r8, r8)
 800e560:	20000af8 	.word	0x20000af8

0800e564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e568:	4b03      	ldr	r3, [pc, #12]	@ (800e578 <USART1_IRQHandler+0x14>)
 800e56a:	0018      	movs	r0, r3
 800e56c:	f009 fd0c 	bl	8017f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e570:	46c0      	nop			@ (mov r8, r8)
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	46c0      	nop			@ (mov r8, r8)
 800e578:	20001e90 	.word	0x20001e90

0800e57c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800e580:	4b03      	ldr	r3, [pc, #12]	@ (800e590 <USB_IRQHandler+0x14>)
 800e582:	0018      	movs	r0, r3
 800e584:	f005 fc5c 	bl	8013e40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800e588:	46c0      	nop			@ (mov r8, r8)
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	46c0      	nop			@ (mov r8, r8)
 800e590:	20002e5c 	.word	0x20002e5c

0800e594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	af00      	add	r7, sp, #0
  return 1;
 800e598:	2301      	movs	r3, #1
}
 800e59a:	0018      	movs	r0, r3
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <_kill>:

int _kill(int pid, int sig)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b082      	sub	sp, #8
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e5aa:	f012 fbf3 	bl	8020d94 <__errno>
 800e5ae:	0003      	movs	r3, r0
 800e5b0:	2216      	movs	r2, #22
 800e5b2:	601a      	str	r2, [r3, #0]
  return -1;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	425b      	negs	r3, r3
}
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	b002      	add	sp, #8
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <_exit>:

void _exit (int status)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	425a      	negs	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	0011      	movs	r1, r2
 800e5d0:	0018      	movs	r0, r3
 800e5d2:	f7ff ffe5 	bl	800e5a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800e5d6:	46c0      	nop			@ (mov r8, r8)
 800e5d8:	e7fd      	b.n	800e5d6 <_exit+0x16>

0800e5da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b086      	sub	sp, #24
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	60f8      	str	r0, [r7, #12]
 800e5e2:	60b9      	str	r1, [r7, #8]
 800e5e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	617b      	str	r3, [r7, #20]
 800e5ea:	e00a      	b.n	800e602 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e5ec:	e000      	b.n	800e5f0 <_read+0x16>
 800e5ee:	bf00      	nop
 800e5f0:	0001      	movs	r1, r0
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	1c5a      	adds	r2, r3, #1
 800e5f6:	60ba      	str	r2, [r7, #8]
 800e5f8:	b2ca      	uxtb	r2, r1
 800e5fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	3301      	adds	r3, #1
 800e600:	617b      	str	r3, [r7, #20]
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	429a      	cmp	r2, r3
 800e608:	dbf0      	blt.n	800e5ec <_read+0x12>
  }

  return len;
 800e60a:	687b      	ldr	r3, [r7, #4]
}
 800e60c:	0018      	movs	r0, r3
 800e60e:	46bd      	mov	sp, r7
 800e610:	b006      	add	sp, #24
 800e612:	bd80      	pop	{r7, pc}

0800e614 <_close>:
  }
  return len;
}

int _close(int file)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e61c:	2301      	movs	r3, #1
 800e61e:	425b      	negs	r3, r3
}
 800e620:	0018      	movs	r0, r3
 800e622:	46bd      	mov	sp, r7
 800e624:	b002      	add	sp, #8
 800e626:	bd80      	pop	{r7, pc}

0800e628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	2280      	movs	r2, #128	@ 0x80
 800e636:	0192      	lsls	r2, r2, #6
 800e638:	605a      	str	r2, [r3, #4]
  return 0;
 800e63a:	2300      	movs	r3, #0
}
 800e63c:	0018      	movs	r0, r3
 800e63e:	46bd      	mov	sp, r7
 800e640:	b002      	add	sp, #8
 800e642:	bd80      	pop	{r7, pc}

0800e644 <_isatty>:

int _isatty(int file)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e64c:	2301      	movs	r3, #1
}
 800e64e:	0018      	movs	r0, r3
 800e650:	46bd      	mov	sp, r7
 800e652:	b002      	add	sp, #8
 800e654:	bd80      	pop	{r7, pc}

0800e656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b084      	sub	sp, #16
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	60f8      	str	r0, [r7, #12]
 800e65e:	60b9      	str	r1, [r7, #8]
 800e660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e662:	2300      	movs	r3, #0
}
 800e664:	0018      	movs	r0, r3
 800e666:	46bd      	mov	sp, r7
 800e668:	b004      	add	sp, #16
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e674:	4a14      	ldr	r2, [pc, #80]	@ (800e6c8 <_sbrk+0x5c>)
 800e676:	4b15      	ldr	r3, [pc, #84]	@ (800e6cc <_sbrk+0x60>)
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e680:	4b13      	ldr	r3, [pc, #76]	@ (800e6d0 <_sbrk+0x64>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d102      	bne.n	800e68e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e688:	4b11      	ldr	r3, [pc, #68]	@ (800e6d0 <_sbrk+0x64>)
 800e68a:	4a12      	ldr	r2, [pc, #72]	@ (800e6d4 <_sbrk+0x68>)
 800e68c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e68e:	4b10      	ldr	r3, [pc, #64]	@ (800e6d0 <_sbrk+0x64>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	18d3      	adds	r3, r2, r3
 800e696:	693a      	ldr	r2, [r7, #16]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d207      	bcs.n	800e6ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e69c:	f012 fb7a 	bl	8020d94 <__errno>
 800e6a0:	0003      	movs	r3, r0
 800e6a2:	220c      	movs	r2, #12
 800e6a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	425b      	negs	r3, r3
 800e6aa:	e009      	b.n	800e6c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e6ac:	4b08      	ldr	r3, [pc, #32]	@ (800e6d0 <_sbrk+0x64>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e6b2:	4b07      	ldr	r3, [pc, #28]	@ (800e6d0 <_sbrk+0x64>)
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	18d2      	adds	r2, r2, r3
 800e6ba:	4b05      	ldr	r3, [pc, #20]	@ (800e6d0 <_sbrk+0x64>)
 800e6bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800e6be:	68fb      	ldr	r3, [r7, #12]
}
 800e6c0:	0018      	movs	r0, r3
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	b006      	add	sp, #24
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	20005000 	.word	0x20005000
 800e6cc:	00000400 	.word	0x00000400
 800e6d0:	20001d14 	.word	0x20001d14
 800e6d4:	200034c0 	.word	0x200034c0

0800e6d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e6dc:	46c0      	nop			@ (mov r8, r8)
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
	...

0800e6e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e6ea:	2310      	movs	r3, #16
 800e6ec:	18fb      	adds	r3, r7, r3
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	2308      	movs	r3, #8
 800e6f2:	001a      	movs	r2, r3
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	f012 faa9 	bl	8020c4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e6fa:	003b      	movs	r3, r7
 800e6fc:	0018      	movs	r0, r3
 800e6fe:	2310      	movs	r3, #16
 800e700:	001a      	movs	r2, r3
 800e702:	2100      	movs	r1, #0
 800e704:	f012 faa2 	bl	8020c4c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e708:	4b2e      	ldr	r3, [pc, #184]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e70a:	2280      	movs	r2, #128	@ 0x80
 800e70c:	05d2      	lsls	r2, r2, #23
 800e70e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e710:	4b2c      	ldr	r3, [pc, #176]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e712:	2200      	movs	r2, #0
 800e714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e716:	4b2b      	ldr	r3, [pc, #172]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e718:	2200      	movs	r2, #0
 800e71a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800e71c:	4b29      	ldr	r3, [pc, #164]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e71e:	4a2a      	ldr	r2, [pc, #168]	@ (800e7c8 <MX_TIM2_Init+0xe4>)
 800e720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e722:	4b28      	ldr	r3, [pc, #160]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e724:	2200      	movs	r2, #0
 800e726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e728:	4b26      	ldr	r3, [pc, #152]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e72e:	4b25      	ldr	r3, [pc, #148]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e730:	0018      	movs	r0, r3
 800e732:	f008 fe3d 	bl	80173b0 <HAL_TIM_PWM_Init>
 800e736:	1e03      	subs	r3, r0, #0
 800e738:	d001      	beq.n	800e73e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800e73a:	f7fa fa7b 	bl	8008c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e73e:	2110      	movs	r1, #16
 800e740:	187b      	adds	r3, r7, r1
 800e742:	2200      	movs	r2, #0
 800e744:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e746:	187b      	adds	r3, r7, r1
 800e748:	2200      	movs	r2, #0
 800e74a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e74c:	187a      	adds	r2, r7, r1
 800e74e:	4b1d      	ldr	r3, [pc, #116]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e750:	0011      	movs	r1, r2
 800e752:	0018      	movs	r0, r3
 800e754:	f009 f94a 	bl	80179ec <HAL_TIMEx_MasterConfigSynchronization>
 800e758:	1e03      	subs	r3, r0, #0
 800e75a:	d001      	beq.n	800e760 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800e75c:	f7fa fa6a 	bl	8008c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e760:	003b      	movs	r3, r7
 800e762:	2260      	movs	r2, #96	@ 0x60
 800e764:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e766:	003b      	movs	r3, r7
 800e768:	2200      	movs	r2, #0
 800e76a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e76c:	003b      	movs	r3, r7
 800e76e:	2200      	movs	r2, #0
 800e770:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e772:	003b      	movs	r3, r7
 800e774:	2200      	movs	r2, #0
 800e776:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e778:	0039      	movs	r1, r7
 800e77a:	4b12      	ldr	r3, [pc, #72]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e77c:	2200      	movs	r2, #0
 800e77e:	0018      	movs	r0, r3
 800e780:	f008 fee8 	bl	8017554 <HAL_TIM_PWM_ConfigChannel>
 800e784:	1e03      	subs	r3, r0, #0
 800e786:	d001      	beq.n	800e78c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800e788:	f7fa fa54 	bl	8008c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e78c:	0039      	movs	r1, r7
 800e78e:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e790:	2208      	movs	r2, #8
 800e792:	0018      	movs	r0, r3
 800e794:	f008 fede 	bl	8017554 <HAL_TIM_PWM_ConfigChannel>
 800e798:	1e03      	subs	r3, r0, #0
 800e79a:	d001      	beq.n	800e7a0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800e79c:	f7fa fa4a 	bl	8008c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e7a0:	0039      	movs	r1, r7
 800e7a2:	4b08      	ldr	r3, [pc, #32]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e7a4:	220c      	movs	r2, #12
 800e7a6:	0018      	movs	r0, r3
 800e7a8:	f008 fed4 	bl	8017554 <HAL_TIM_PWM_ConfigChannel>
 800e7ac:	1e03      	subs	r3, r0, #0
 800e7ae:	d001      	beq.n	800e7b4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800e7b0:	f7fa fa40 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e7b4:	4b03      	ldr	r3, [pc, #12]	@ (800e7c4 <MX_TIM2_Init+0xe0>)
 800e7b6:	0018      	movs	r0, r3
 800e7b8:	f000 f8fe 	bl	800e9b8 <HAL_TIM_MspPostInit>

}
 800e7bc:	46c0      	nop			@ (mov r8, r8)
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	b006      	add	sp, #24
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	20001d18 	.word	0x20001d18
 800e7c8:	0000ffff 	.word	0x0000ffff

0800e7cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e7d2:	2310      	movs	r3, #16
 800e7d4:	18fb      	adds	r3, r7, r3
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	2308      	movs	r3, #8
 800e7da:	001a      	movs	r2, r3
 800e7dc:	2100      	movs	r1, #0
 800e7de:	f012 fa35 	bl	8020c4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e7e2:	003b      	movs	r3, r7
 800e7e4:	0018      	movs	r0, r3
 800e7e6:	2310      	movs	r3, #16
 800e7e8:	001a      	movs	r2, r3
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	f012 fa2e 	bl	8020c4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e7f0:	4b32      	ldr	r3, [pc, #200]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e7f2:	4a33      	ldr	r2, [pc, #204]	@ (800e8c0 <MX_TIM3_Init+0xf4>)
 800e7f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e7f6:	4b31      	ldr	r3, [pc, #196]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7fc:	4b2f      	ldr	r3, [pc, #188]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800e802:	4b2e      	ldr	r3, [pc, #184]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e804:	4a2f      	ldr	r2, [pc, #188]	@ (800e8c4 <MX_TIM3_Init+0xf8>)
 800e806:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e808:	4b2c      	ldr	r3, [pc, #176]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e80e:	4b2b      	ldr	r3, [pc, #172]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e810:	2200      	movs	r2, #0
 800e812:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e814:	4b29      	ldr	r3, [pc, #164]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e816:	0018      	movs	r0, r3
 800e818:	f008 fdca 	bl	80173b0 <HAL_TIM_PWM_Init>
 800e81c:	1e03      	subs	r3, r0, #0
 800e81e:	d001      	beq.n	800e824 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800e820:	f7fa fa08 	bl	8008c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e824:	2110      	movs	r1, #16
 800e826:	187b      	adds	r3, r7, r1
 800e828:	2200      	movs	r2, #0
 800e82a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e82c:	187b      	adds	r3, r7, r1
 800e82e:	2200      	movs	r2, #0
 800e830:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e832:	187a      	adds	r2, r7, r1
 800e834:	4b21      	ldr	r3, [pc, #132]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e836:	0011      	movs	r1, r2
 800e838:	0018      	movs	r0, r3
 800e83a:	f009 f8d7 	bl	80179ec <HAL_TIMEx_MasterConfigSynchronization>
 800e83e:	1e03      	subs	r3, r0, #0
 800e840:	d001      	beq.n	800e846 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800e842:	f7fa f9f7 	bl	8008c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e846:	003b      	movs	r3, r7
 800e848:	2260      	movs	r2, #96	@ 0x60
 800e84a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e84c:	003b      	movs	r3, r7
 800e84e:	2200      	movs	r2, #0
 800e850:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e852:	003b      	movs	r3, r7
 800e854:	2200      	movs	r2, #0
 800e856:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e858:	003b      	movs	r3, r7
 800e85a:	2200      	movs	r2, #0
 800e85c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e85e:	0039      	movs	r1, r7
 800e860:	4b16      	ldr	r3, [pc, #88]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e862:	2200      	movs	r2, #0
 800e864:	0018      	movs	r0, r3
 800e866:	f008 fe75 	bl	8017554 <HAL_TIM_PWM_ConfigChannel>
 800e86a:	1e03      	subs	r3, r0, #0
 800e86c:	d001      	beq.n	800e872 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800e86e:	f7fa f9e1 	bl	8008c34 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800e872:	4b12      	ldr	r3, [pc, #72]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e874:	2104      	movs	r1, #4
 800e876:	0018      	movs	r0, r3
 800e878:	f009 f916 	bl	8017aa8 <HAL_TIMEx_RemapConfig>
 800e87c:	1e03      	subs	r3, r0, #0
 800e87e:	d001      	beq.n	800e884 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800e880:	f7fa f9d8 	bl	8008c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e884:	0039      	movs	r1, r7
 800e886:	4b0d      	ldr	r3, [pc, #52]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e888:	2204      	movs	r2, #4
 800e88a:	0018      	movs	r0, r3
 800e88c:	f008 fe62 	bl	8017554 <HAL_TIM_PWM_ConfigChannel>
 800e890:	1e03      	subs	r3, r0, #0
 800e892:	d001      	beq.n	800e898 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800e894:	f7fa f9ce 	bl	8008c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e898:	0039      	movs	r1, r7
 800e89a:	4b08      	ldr	r3, [pc, #32]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e89c:	2208      	movs	r2, #8
 800e89e:	0018      	movs	r0, r3
 800e8a0:	f008 fe58 	bl	8017554 <HAL_TIM_PWM_ConfigChannel>
 800e8a4:	1e03      	subs	r3, r0, #0
 800e8a6:	d001      	beq.n	800e8ac <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800e8a8:	f7fa f9c4 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e8ac:	4b03      	ldr	r3, [pc, #12]	@ (800e8bc <MX_TIM3_Init+0xf0>)
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	f000 f882 	bl	800e9b8 <HAL_TIM_MspPostInit>

}
 800e8b4:	46c0      	nop			@ (mov r8, r8)
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	b006      	add	sp, #24
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	20001d58 	.word	0x20001d58
 800e8c0:	40000400 	.word	0x40000400
 800e8c4:	0000ffff 	.word	0x0000ffff

0800e8c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e8ce:	003b      	movs	r3, r7
 800e8d0:	0018      	movs	r0, r3
 800e8d2:	2308      	movs	r3, #8
 800e8d4:	001a      	movs	r2, r3
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	f012 f9b8 	bl	8020c4c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e8dc:	4b15      	ldr	r3, [pc, #84]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e8de:	4a16      	ldr	r2, [pc, #88]	@ (800e938 <MX_TIM6_Init+0x70>)
 800e8e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e8e2:	4b14      	ldr	r3, [pc, #80]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e8e4:	220a      	movs	r2, #10
 800e8e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e8e8:	4b12      	ldr	r3, [pc, #72]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e8ee:	4b11      	ldr	r3, [pc, #68]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e8f0:	4a12      	ldr	r2, [pc, #72]	@ (800e93c <MX_TIM6_Init+0x74>)
 800e8f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e8fc:	0018      	movs	r0, r3
 800e8fe:	f008 fcaf 	bl	8017260 <HAL_TIM_Base_Init>
 800e902:	1e03      	subs	r3, r0, #0
 800e904:	d001      	beq.n	800e90a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e906:	f7fa f995 	bl	8008c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e90a:	003b      	movs	r3, r7
 800e90c:	2200      	movs	r2, #0
 800e90e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e910:	003b      	movs	r3, r7
 800e912:	2200      	movs	r2, #0
 800e914:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e916:	003a      	movs	r2, r7
 800e918:	4b06      	ldr	r3, [pc, #24]	@ (800e934 <MX_TIM6_Init+0x6c>)
 800e91a:	0011      	movs	r1, r2
 800e91c:	0018      	movs	r0, r3
 800e91e:	f009 f865 	bl	80179ec <HAL_TIMEx_MasterConfigSynchronization>
 800e922:	1e03      	subs	r3, r0, #0
 800e924:	d001      	beq.n	800e92a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e926:	f7fa f985 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e92a:	46c0      	nop			@ (mov r8, r8)
 800e92c:	46bd      	mov	sp, r7
 800e92e:	b002      	add	sp, #8
 800e930:	bd80      	pop	{r7, pc}
 800e932:	46c0      	nop			@ (mov r8, r8)
 800e934:	20001d98 	.word	0x20001d98
 800e938:	40001000 	.word	0x40001000
 800e93c:	0000ffff 	.word	0x0000ffff

0800e940 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	2380      	movs	r3, #128	@ 0x80
 800e94e:	05db      	lsls	r3, r3, #23
 800e950:	429a      	cmp	r2, r3
 800e952:	d106      	bne.n	800e962 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e954:	4b0a      	ldr	r3, [pc, #40]	@ (800e980 <HAL_TIM_PWM_MspInit+0x40>)
 800e956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e958:	4b09      	ldr	r3, [pc, #36]	@ (800e980 <HAL_TIM_PWM_MspInit+0x40>)
 800e95a:	2101      	movs	r1, #1
 800e95c:	430a      	orrs	r2, r1
 800e95e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e960:	e00a      	b.n	800e978 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	4a07      	ldr	r2, [pc, #28]	@ (800e984 <HAL_TIM_PWM_MspInit+0x44>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d105      	bne.n	800e978 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e96c:	4b04      	ldr	r3, [pc, #16]	@ (800e980 <HAL_TIM_PWM_MspInit+0x40>)
 800e96e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e970:	4b03      	ldr	r3, [pc, #12]	@ (800e980 <HAL_TIM_PWM_MspInit+0x40>)
 800e972:	2102      	movs	r1, #2
 800e974:	430a      	orrs	r2, r1
 800e976:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e978:	46c0      	nop			@ (mov r8, r8)
 800e97a:	46bd      	mov	sp, r7
 800e97c:	b002      	add	sp, #8
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	40021000 	.word	0x40021000
 800e984:	40000400 	.word	0x40000400

0800e988 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a06      	ldr	r2, [pc, #24]	@ (800e9b0 <HAL_TIM_Base_MspInit+0x28>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d105      	bne.n	800e9a6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e99a:	4b06      	ldr	r3, [pc, #24]	@ (800e9b4 <HAL_TIM_Base_MspInit+0x2c>)
 800e99c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e99e:	4b05      	ldr	r3, [pc, #20]	@ (800e9b4 <HAL_TIM_Base_MspInit+0x2c>)
 800e9a0:	2110      	movs	r1, #16
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e9a6:	46c0      	nop			@ (mov r8, r8)
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	b002      	add	sp, #8
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	46c0      	nop			@ (mov r8, r8)
 800e9b0:	40001000 	.word	0x40001000
 800e9b4:	40021000 	.word	0x40021000

0800e9b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e9b8:	b590      	push	{r4, r7, lr}
 800e9ba:	b08b      	sub	sp, #44	@ 0x2c
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9c0:	2414      	movs	r4, #20
 800e9c2:	193b      	adds	r3, r7, r4
 800e9c4:	0018      	movs	r0, r3
 800e9c6:	2314      	movs	r3, #20
 800e9c8:	001a      	movs	r2, r3
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	f012 f93e 	bl	8020c4c <memset>
  if(timHandle->Instance==TIM2)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	2380      	movs	r3, #128	@ 0x80
 800e9d6:	05db      	lsls	r3, r3, #23
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d123      	bne.n	800ea24 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e9dc:	4b27      	ldr	r3, [pc, #156]	@ (800ea7c <HAL_TIM_MspPostInit+0xc4>)
 800e9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e0:	4b26      	ldr	r3, [pc, #152]	@ (800ea7c <HAL_TIM_MspPostInit+0xc4>)
 800e9e2:	2101      	movs	r1, #1
 800e9e4:	430a      	orrs	r2, r1
 800e9e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e9e8:	4b24      	ldr	r3, [pc, #144]	@ (800ea7c <HAL_TIM_MspPostInit+0xc4>)
 800e9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	4013      	ands	r3, r2
 800e9f0:	613b      	str	r3, [r7, #16]
 800e9f2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e9f4:	0021      	movs	r1, r4
 800e9f6:	187b      	adds	r3, r7, r1
 800e9f8:	220d      	movs	r2, #13
 800e9fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9fc:	187b      	adds	r3, r7, r1
 800e9fe:	2202      	movs	r2, #2
 800ea00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea02:	187b      	adds	r3, r7, r1
 800ea04:	2200      	movs	r2, #0
 800ea06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea08:	187b      	adds	r3, r7, r1
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800ea0e:	187b      	adds	r3, r7, r1
 800ea10:	2202      	movs	r2, #2
 800ea12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea14:	187a      	adds	r2, r7, r1
 800ea16:	23a0      	movs	r3, #160	@ 0xa0
 800ea18:	05db      	lsls	r3, r3, #23
 800ea1a:	0011      	movs	r1, r2
 800ea1c:	0018      	movs	r0, r3
 800ea1e:	f001 ff91 	bl	8010944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800ea22:	e027      	b.n	800ea74 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a15      	ldr	r2, [pc, #84]	@ (800ea80 <HAL_TIM_MspPostInit+0xc8>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d122      	bne.n	800ea74 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea2e:	4b13      	ldr	r3, [pc, #76]	@ (800ea7c <HAL_TIM_MspPostInit+0xc4>)
 800ea30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea32:	4b12      	ldr	r3, [pc, #72]	@ (800ea7c <HAL_TIM_MspPostInit+0xc4>)
 800ea34:	2104      	movs	r1, #4
 800ea36:	430a      	orrs	r2, r1
 800ea38:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ea3a:	4b10      	ldr	r3, [pc, #64]	@ (800ea7c <HAL_TIM_MspPostInit+0xc4>)
 800ea3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3e:	2204      	movs	r2, #4
 800ea40:	4013      	ands	r3, r2
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800ea46:	2114      	movs	r1, #20
 800ea48:	187b      	adds	r3, r7, r1
 800ea4a:	22e0      	movs	r2, #224	@ 0xe0
 800ea4c:	0052      	lsls	r2, r2, #1
 800ea4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea50:	187b      	adds	r3, r7, r1
 800ea52:	2202      	movs	r2, #2
 800ea54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea56:	187b      	adds	r3, r7, r1
 800ea58:	2200      	movs	r2, #0
 800ea5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea5c:	187b      	adds	r3, r7, r1
 800ea5e:	2200      	movs	r2, #0
 800ea60:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ea62:	187b      	adds	r3, r7, r1
 800ea64:	2202      	movs	r2, #2
 800ea66:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea68:	187b      	adds	r3, r7, r1
 800ea6a:	4a06      	ldr	r2, [pc, #24]	@ (800ea84 <HAL_TIM_MspPostInit+0xcc>)
 800ea6c:	0019      	movs	r1, r3
 800ea6e:	0010      	movs	r0, r2
 800ea70:	f001 ff68 	bl	8010944 <HAL_GPIO_Init>
}
 800ea74:	46c0      	nop			@ (mov r8, r8)
 800ea76:	46bd      	mov	sp, r7
 800ea78:	b00b      	add	sp, #44	@ 0x2c
 800ea7a:	bd90      	pop	{r4, r7, pc}
 800ea7c:	40021000 	.word	0x40021000
 800ea80:	40000400 	.word	0x40000400
 800ea84:	50000800 	.word	0x50000800

0800ea88 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800ea8c:	4b17      	ldr	r3, [pc, #92]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800ea8e:	4a18      	ldr	r2, [pc, #96]	@ (800eaf0 <MX_LPUART1_UART_Init+0x68>)
 800ea90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800ea92:	4b16      	ldr	r3, [pc, #88]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800ea94:	22e1      	movs	r2, #225	@ 0xe1
 800ea96:	0252      	lsls	r2, r2, #9
 800ea98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ea9a:	4b14      	ldr	r3, [pc, #80]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800eaa0:	4b12      	ldr	r3, [pc, #72]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800eaa6:	4b11      	ldr	r3, [pc, #68]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800eaac:	4b0f      	ldr	r3, [pc, #60]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eaae:	220c      	movs	r2, #12
 800eab0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eab2:	4b0e      	ldr	r3, [pc, #56]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800eab8:	4b0c      	ldr	r3, [pc, #48]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800eabe:	4b0b      	ldr	r3, [pc, #44]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eac0:	2218      	movs	r2, #24
 800eac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800eac4:	4b09      	ldr	r3, [pc, #36]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eac6:	2280      	movs	r2, #128	@ 0x80
 800eac8:	0212      	lsls	r2, r2, #8
 800eaca:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800eacc:	4b07      	ldr	r3, [pc, #28]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800eace:	2280      	movs	r2, #128	@ 0x80
 800ead0:	0152      	lsls	r2, r2, #5
 800ead2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800ead4:	4b05      	ldr	r3, [pc, #20]	@ (800eaec <MX_LPUART1_UART_Init+0x64>)
 800ead6:	0018      	movs	r0, r3
 800ead8:	f009 f804 	bl	8017ae4 <HAL_UART_Init>
 800eadc:	1e03      	subs	r3, r0, #0
 800eade:	d001      	beq.n	800eae4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800eae0:	f7fa f8a8 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800eae4:	46c0      	nop			@ (mov r8, r8)
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	46c0      	nop			@ (mov r8, r8)
 800eaec:	20001dd8 	.word	0x20001dd8
 800eaf0:	40004800 	.word	0x40004800

0800eaf4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800eaf8:	4b14      	ldr	r3, [pc, #80]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eafa:	4a15      	ldr	r2, [pc, #84]	@ (800eb50 <MX_USART1_UART_Init+0x5c>)
 800eafc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800eafe:	4b13      	ldr	r3, [pc, #76]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb00:	22e1      	movs	r2, #225	@ 0xe1
 800eb02:	0252      	lsls	r2, r2, #9
 800eb04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800eb06:	4b11      	ldr	r3, [pc, #68]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800eb0c:	4b0f      	ldr	r3, [pc, #60]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800eb12:	4b0e      	ldr	r3, [pc, #56]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800eb18:	4b0c      	ldr	r3, [pc, #48]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb1a:	220c      	movs	r2, #12
 800eb1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb1e:	4b0b      	ldr	r3, [pc, #44]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb20:	2200      	movs	r2, #0
 800eb22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb24:	4b09      	ldr	r3, [pc, #36]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800eb2a:	4b08      	ldr	r3, [pc, #32]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eb30:	4b06      	ldr	r3, [pc, #24]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800eb36:	4b05      	ldr	r3, [pc, #20]	@ (800eb4c <MX_USART1_UART_Init+0x58>)
 800eb38:	0018      	movs	r0, r3
 800eb3a:	f008 ffd3 	bl	8017ae4 <HAL_UART_Init>
 800eb3e:	1e03      	subs	r3, r0, #0
 800eb40:	d001      	beq.n	800eb46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800eb42:	f7fa f877 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800eb46:	46c0      	nop			@ (mov r8, r8)
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20001e90 	.word	0x20001e90
 800eb50:	40013800 	.word	0x40013800

0800eb54 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800eb58:	4b14      	ldr	r3, [pc, #80]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb5a:	4a15      	ldr	r2, [pc, #84]	@ (800ebb0 <MX_USART4_UART_Init+0x5c>)
 800eb5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800eb5e:	4b13      	ldr	r3, [pc, #76]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb60:	22e1      	movs	r2, #225	@ 0xe1
 800eb62:	0252      	lsls	r2, r2, #9
 800eb64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800eb66:	4b11      	ldr	r3, [pc, #68]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800eb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800eb72:	4b0e      	ldr	r3, [pc, #56]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb74:	2200      	movs	r2, #0
 800eb76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800eb78:	4b0c      	ldr	r3, [pc, #48]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb7a:	220c      	movs	r2, #12
 800eb7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800eb7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb80:	2200      	movs	r2, #0
 800eb82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800eb84:	4b09      	ldr	r3, [pc, #36]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800eb8a:	4b08      	ldr	r3, [pc, #32]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800eb90:	4b06      	ldr	r3, [pc, #24]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb92:	2200      	movs	r2, #0
 800eb94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800eb96:	4b05      	ldr	r3, [pc, #20]	@ (800ebac <MX_USART4_UART_Init+0x58>)
 800eb98:	0018      	movs	r0, r3
 800eb9a:	f008 ffa3 	bl	8017ae4 <HAL_UART_Init>
 800eb9e:	1e03      	subs	r3, r0, #0
 800eba0:	d001      	beq.n	800eba6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800eba2:	f7fa f847 	bl	8008c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800eba6:	46c0      	nop			@ (mov r8, r8)
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	20001f48 	.word	0x20001f48
 800ebb0:	40004c00 	.word	0x40004c00

0800ebb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ebb4:	b590      	push	{r4, r7, lr}
 800ebb6:	b08d      	sub	sp, #52	@ 0x34
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebbc:	241c      	movs	r4, #28
 800ebbe:	193b      	adds	r3, r7, r4
 800ebc0:	0018      	movs	r0, r3
 800ebc2:	2314      	movs	r3, #20
 800ebc4:	001a      	movs	r2, r3
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	f012 f840 	bl	8020c4c <memset>
  if(uartHandle->Instance==LPUART1)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a8b      	ldr	r2, [pc, #556]	@ (800ee00 <HAL_UART_MspInit+0x24c>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d129      	bne.n	800ec2a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ebd6:	4b8b      	ldr	r3, [pc, #556]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ebd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ebda:	4b8a      	ldr	r3, [pc, #552]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ebdc:	2180      	movs	r1, #128	@ 0x80
 800ebde:	02c9      	lsls	r1, r1, #11
 800ebe0:	430a      	orrs	r2, r1
 800ebe2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ebe4:	4b87      	ldr	r3, [pc, #540]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ebe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebe8:	4b86      	ldr	r3, [pc, #536]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ebea:	2104      	movs	r1, #4
 800ebec:	430a      	orrs	r2, r1
 800ebee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ebf0:	4b84      	ldr	r3, [pc, #528]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ebf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebf4:	2204      	movs	r2, #4
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	61bb      	str	r3, [r7, #24]
 800ebfa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ebfc:	0021      	movs	r1, r4
 800ebfe:	187b      	adds	r3, r7, r1
 800ec00:	2203      	movs	r2, #3
 800ec02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec04:	187b      	adds	r3, r7, r1
 800ec06:	2202      	movs	r2, #2
 800ec08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec0a:	187b      	adds	r3, r7, r1
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec10:	187b      	adds	r3, r7, r1
 800ec12:	2203      	movs	r2, #3
 800ec14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800ec16:	187b      	adds	r3, r7, r1
 800ec18:	2206      	movs	r2, #6
 800ec1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec1c:	187b      	adds	r3, r7, r1
 800ec1e:	4a7a      	ldr	r2, [pc, #488]	@ (800ee08 <HAL_UART_MspInit+0x254>)
 800ec20:	0019      	movs	r1, r3
 800ec22:	0010      	movs	r0, r2
 800ec24:	f001 fe8e 	bl	8010944 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800ec28:	e0e5      	b.n	800edf6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a77      	ldr	r2, [pc, #476]	@ (800ee0c <HAL_UART_MspInit+0x258>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d133      	bne.n	800ec9c <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ec34:	4b73      	ldr	r3, [pc, #460]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ec36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ec38:	4b72      	ldr	r3, [pc, #456]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ec3a:	2180      	movs	r1, #128	@ 0x80
 800ec3c:	01c9      	lsls	r1, r1, #7
 800ec3e:	430a      	orrs	r2, r1
 800ec40:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec42:	4b70      	ldr	r3, [pc, #448]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ec44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec46:	4b6f      	ldr	r3, [pc, #444]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ec48:	2101      	movs	r1, #1
 800ec4a:	430a      	orrs	r2, r1
 800ec4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ec4e:	4b6d      	ldr	r3, [pc, #436]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ec50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec52:	2201      	movs	r2, #1
 800ec54:	4013      	ands	r3, r2
 800ec56:	617b      	str	r3, [r7, #20]
 800ec58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ec5a:	211c      	movs	r1, #28
 800ec5c:	187b      	adds	r3, r7, r1
 800ec5e:	22c0      	movs	r2, #192	@ 0xc0
 800ec60:	00d2      	lsls	r2, r2, #3
 800ec62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec64:	187b      	adds	r3, r7, r1
 800ec66:	2202      	movs	r2, #2
 800ec68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec6a:	187b      	adds	r3, r7, r1
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec70:	187b      	adds	r3, r7, r1
 800ec72:	2203      	movs	r2, #3
 800ec74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800ec76:	187b      	adds	r3, r7, r1
 800ec78:	2204      	movs	r2, #4
 800ec7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec7c:	187a      	adds	r2, r7, r1
 800ec7e:	23a0      	movs	r3, #160	@ 0xa0
 800ec80:	05db      	lsls	r3, r3, #23
 800ec82:	0011      	movs	r1, r2
 800ec84:	0018      	movs	r0, r3
 800ec86:	f001 fe5d 	bl	8010944 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	201b      	movs	r0, #27
 800ec90:	f001 fa06 	bl	80100a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ec94:	201b      	movs	r0, #27
 800ec96:	f001 fa18 	bl	80100ca <HAL_NVIC_EnableIRQ>
}
 800ec9a:	e0ac      	b.n	800edf6 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a5b      	ldr	r2, [pc, #364]	@ (800ee10 <HAL_UART_MspInit+0x25c>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d000      	beq.n	800eca8 <HAL_UART_MspInit+0xf4>
 800eca6:	e0a6      	b.n	800edf6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800eca8:	4b56      	ldr	r3, [pc, #344]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecac:	4b55      	ldr	r3, [pc, #340]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecae:	2180      	movs	r1, #128	@ 0x80
 800ecb0:	0309      	lsls	r1, r1, #12
 800ecb2:	430a      	orrs	r2, r1
 800ecb4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ecb6:	4b53      	ldr	r3, [pc, #332]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecba:	4b52      	ldr	r3, [pc, #328]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	430a      	orrs	r2, r1
 800ecc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ecc2:	4b50      	ldr	r3, [pc, #320]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	4013      	ands	r3, r2
 800ecca:	613b      	str	r3, [r7, #16]
 800eccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ecce:	4b4d      	ldr	r3, [pc, #308]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd2:	4b4c      	ldr	r3, [pc, #304]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecd4:	2104      	movs	r1, #4
 800ecd6:	430a      	orrs	r2, r1
 800ecd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ecda:	4b4a      	ldr	r3, [pc, #296]	@ (800ee04 <HAL_UART_MspInit+0x250>)
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	2204      	movs	r2, #4
 800ece0:	4013      	ands	r3, r2
 800ece2:	60fb      	str	r3, [r7, #12]
 800ece4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ece6:	241c      	movs	r4, #28
 800ece8:	193b      	adds	r3, r7, r4
 800ecea:	2202      	movs	r2, #2
 800ecec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ecee:	193b      	adds	r3, r7, r4
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecf4:	193b      	adds	r3, r7, r4
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecfa:	193b      	adds	r3, r7, r4
 800ecfc:	2203      	movs	r2, #3
 800ecfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ed00:	193b      	adds	r3, r7, r4
 800ed02:	2206      	movs	r2, #6
 800ed04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed06:	193a      	adds	r2, r7, r4
 800ed08:	23a0      	movs	r3, #160	@ 0xa0
 800ed0a:	05db      	lsls	r3, r3, #23
 800ed0c:	0011      	movs	r1, r2
 800ed0e:	0018      	movs	r0, r3
 800ed10:	f001 fe18 	bl	8010944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ed14:	0021      	movs	r1, r4
 800ed16:	187b      	adds	r3, r7, r1
 800ed18:	2280      	movs	r2, #128	@ 0x80
 800ed1a:	00d2      	lsls	r2, r2, #3
 800ed1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed1e:	187b      	adds	r3, r7, r1
 800ed20:	2202      	movs	r2, #2
 800ed22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed24:	187b      	adds	r3, r7, r1
 800ed26:	2200      	movs	r2, #0
 800ed28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed2a:	187b      	adds	r3, r7, r1
 800ed2c:	2203      	movs	r2, #3
 800ed2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ed30:	187b      	adds	r3, r7, r1
 800ed32:	2206      	movs	r2, #6
 800ed34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed36:	187b      	adds	r3, r7, r1
 800ed38:	4a33      	ldr	r2, [pc, #204]	@ (800ee08 <HAL_UART_MspInit+0x254>)
 800ed3a:	0019      	movs	r1, r3
 800ed3c:	0010      	movs	r0, r2
 800ed3e:	f001 fe01 	bl	8010944 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800ed42:	4b34      	ldr	r3, [pc, #208]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed44:	4a34      	ldr	r2, [pc, #208]	@ (800ee18 <HAL_UART_MspInit+0x264>)
 800ed46:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800ed48:	4b32      	ldr	r3, [pc, #200]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed4a:	220c      	movs	r2, #12
 800ed4c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed4e:	4b31      	ldr	r3, [pc, #196]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed50:	2200      	movs	r2, #0
 800ed52:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ed54:	4b2f      	ldr	r3, [pc, #188]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed56:	2200      	movs	r2, #0
 800ed58:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ed5a:	4b2e      	ldr	r3, [pc, #184]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed5c:	2280      	movs	r2, #128	@ 0x80
 800ed5e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ed60:	4b2c      	ldr	r3, [pc, #176]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ed66:	4b2b      	ldr	r3, [pc, #172]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800ed6c:	4b29      	ldr	r3, [pc, #164]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed6e:	2220      	movs	r2, #32
 800ed70:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ed72:	4b28      	ldr	r3, [pc, #160]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800ed78:	4b26      	ldr	r3, [pc, #152]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed7a:	0018      	movs	r0, r3
 800ed7c:	f001 f9c6 	bl	801010c <HAL_DMA_Init>
 800ed80:	1e03      	subs	r3, r0, #0
 800ed82:	d001      	beq.n	800ed88 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800ed84:	f7f9 ff56 	bl	8008c34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a22      	ldr	r2, [pc, #136]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed8c:	675a      	str	r2, [r3, #116]	@ 0x74
 800ed8e:	4b21      	ldr	r3, [pc, #132]	@ (800ee14 <HAL_UART_MspInit+0x260>)
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800ed94:	4b21      	ldr	r3, [pc, #132]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800ed96:	4a22      	ldr	r2, [pc, #136]	@ (800ee20 <HAL_UART_MspInit+0x26c>)
 800ed98:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800ed9a:	4b20      	ldr	r3, [pc, #128]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800ed9c:	220c      	movs	r2, #12
 800ed9e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eda0:	4b1e      	ldr	r3, [pc, #120]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800eda2:	2210      	movs	r2, #16
 800eda4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eda6:	4b1d      	ldr	r3, [pc, #116]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800edac:	4b1b      	ldr	r3, [pc, #108]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edae:	2280      	movs	r2, #128	@ 0x80
 800edb0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800edb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edb4:	2200      	movs	r2, #0
 800edb6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800edb8:	4b18      	ldr	r3, [pc, #96]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edba:	2200      	movs	r2, #0
 800edbc:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800edbe:	4b17      	ldr	r3, [pc, #92]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800edc4:	4b15      	ldr	r3, [pc, #84]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800edca:	4b14      	ldr	r3, [pc, #80]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edcc:	0018      	movs	r0, r3
 800edce:	f001 f99d 	bl	801010c <HAL_DMA_Init>
 800edd2:	1e03      	subs	r3, r0, #0
 800edd4:	d001      	beq.n	800edda <HAL_UART_MspInit+0x226>
      Error_Handler();
 800edd6:	f7f9 ff2d 	bl	8008c34 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4a0f      	ldr	r2, [pc, #60]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800edde:	671a      	str	r2, [r3, #112]	@ 0x70
 800ede0:	4b0e      	ldr	r3, [pc, #56]	@ (800ee1c <HAL_UART_MspInit+0x268>)
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800ede6:	2200      	movs	r2, #0
 800ede8:	2100      	movs	r1, #0
 800edea:	200e      	movs	r0, #14
 800edec:	f001 f958 	bl	80100a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800edf0:	200e      	movs	r0, #14
 800edf2:	f001 f96a 	bl	80100ca <HAL_NVIC_EnableIRQ>
}
 800edf6:	46c0      	nop			@ (mov r8, r8)
 800edf8:	46bd      	mov	sp, r7
 800edfa:	b00d      	add	sp, #52	@ 0x34
 800edfc:	bd90      	pop	{r4, r7, pc}
 800edfe:	46c0      	nop			@ (mov r8, r8)
 800ee00:	40004800 	.word	0x40004800
 800ee04:	40021000 	.word	0x40021000
 800ee08:	50000800 	.word	0x50000800
 800ee0c:	40013800 	.word	0x40013800
 800ee10:	40004c00 	.word	0x40004c00
 800ee14:	20002000 	.word	0x20002000
 800ee18:	4002006c 	.word	0x4002006c
 800ee1c:	20002048 	.word	0x20002048
 800ee20:	40020080 	.word	0x40020080

0800ee24 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800ee2c:	f000 fc94 	bl	800f758 <HAL_GetTick>
 800ee30:	0003      	movs	r3, r0
 800ee32:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800ee34:	4b1c      	ldr	r3, [pc, #112]	@ (800eea8 <TimestampIsReached+0x84>)
 800ee36:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800ee38:	697a      	ldr	r2, [r7, #20]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d307      	bcc.n	800ee50 <TimestampIsReached+0x2c>
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d901      	bls.n	800ee50 <TimestampIsReached+0x2c>
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	e000      	b.n	800ee52 <TimestampIsReached+0x2e>
 800ee50:	2200      	movs	r2, #0
 800ee52:	230f      	movs	r3, #15
 800ee54:	18fb      	adds	r3, r7, r3
 800ee56:	701a      	strb	r2, [r3, #0]
 800ee58:	781a      	ldrb	r2, [r3, #0]
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	400a      	ands	r2, r1
 800ee5e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800ee60:	697a      	ldr	r2, [r7, #20]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d207      	bcs.n	800ee78 <TimestampIsReached+0x54>
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d201      	bcs.n	800ee78 <TimestampIsReached+0x54>
 800ee74:	2201      	movs	r2, #1
 800ee76:	e000      	b.n	800ee7a <TimestampIsReached+0x56>
 800ee78:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800ee7a:	200e      	movs	r0, #14
 800ee7c:	183b      	adds	r3, r7, r0
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	781a      	ldrb	r2, [r3, #0]
 800ee82:	2101      	movs	r1, #1
 800ee84:	400a      	ands	r2, r1
 800ee86:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800ee88:	230f      	movs	r3, #15
 800ee8a:	18fb      	adds	r3, r7, r3
 800ee8c:	781b      	ldrb	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d103      	bne.n	800ee9a <TimestampIsReached+0x76>
 800ee92:	183b      	adds	r3, r7, r0
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e000      	b.n	800eea0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	0018      	movs	r0, r3
 800eea2:	46bd      	mov	sp, r7
 800eea4:	b006      	add	sp, #24
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	7fffffff 	.word	0x7fffffff

0800eeac <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b082      	sub	sp, #8
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800eeb4:	f000 fc50 	bl	800f758 <HAL_GetTick>
 800eeb8:	0002      	movs	r2, r0
 800eeba:	4904      	ldr	r1, [pc, #16]	@ (800eecc <AddTimestamp+0x20>)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	0018      	movs	r0, r3
 800eec0:	f011 fd5e 	bl	8020980 <siprintf>
}
 800eec4:	46c0      	nop			@ (mov r8, r8)
 800eec6:	46bd      	mov	sp, r7
 800eec8:	b002      	add	sp, #8
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	08026018 	.word	0x08026018

0800eed0 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800eed0:	b40c      	push	{r2, r3}
 800eed2:	b5b0      	push	{r4, r5, r7, lr}
 800eed4:	b0a4      	sub	sp, #144	@ 0x90
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	0002      	movs	r2, r0
 800eeda:	6039      	str	r1, [r7, #0]
 800eedc:	1dfb      	adds	r3, r7, #7
 800eede:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800eee0:	4b23      	ldr	r3, [pc, #140]	@ (800ef70 <CreateLine+0xa0>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	1dfa      	adds	r2, r7, #7
 800eee6:	7812      	ldrb	r2, [r2, #0]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d839      	bhi.n	800ef60 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	4921      	ldr	r1, [pc, #132]	@ (800ef74 <CreateLine+0xa4>)
 800eef0:	240c      	movs	r4, #12
 800eef2:	193b      	adds	r3, r7, r4
 800eef4:	0018      	movs	r0, r3
 800eef6:	f011 fd43 	bl	8020980 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800eefa:	4b1d      	ldr	r3, [pc, #116]	@ (800ef70 <CreateLine+0xa0>)
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d909      	bls.n	800ef16 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800ef02:	193b      	adds	r3, r7, r4
 800ef04:	0018      	movs	r0, r3
 800ef06:	f7f1 f931 	bl	800016c <strlen>
 800ef0a:	0002      	movs	r2, r0
 800ef0c:	193b      	adds	r3, r7, r4
 800ef0e:	189b      	adds	r3, r3, r2
 800ef10:	0018      	movs	r0, r3
 800ef12:	f7ff ffcb 	bl	800eeac <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800ef16:	240c      	movs	r4, #12
 800ef18:	193b      	adds	r3, r7, r4
 800ef1a:	0018      	movs	r0, r3
 800ef1c:	f7f1 f926 	bl	800016c <strlen>
 800ef20:	0003      	movs	r3, r0
 800ef22:	218c      	movs	r1, #140	@ 0x8c
 800ef24:	187a      	adds	r2, r7, r1
 800ef26:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800ef28:	239c      	movs	r3, #156	@ 0x9c
 800ef2a:	2508      	movs	r5, #8
 800ef2c:	195b      	adds	r3, r3, r5
 800ef2e:	19db      	adds	r3, r3, r7
 800ef30:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800ef32:	193a      	adds	r2, r7, r4
 800ef34:	187b      	adds	r3, r7, r1
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	18d0      	adds	r0, r2, r3
 800ef3a:	187b      	adds	r3, r7, r1
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2280      	movs	r2, #128	@ 0x80
 800ef40:	1ad3      	subs	r3, r2, r3
 800ef42:	0019      	movs	r1, r3
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	2298      	movs	r2, #152	@ 0x98
 800ef48:	1952      	adds	r2, r2, r5
 800ef4a:	19d2      	adds	r2, r2, r7
 800ef4c:	6812      	ldr	r2, [r2, #0]
 800ef4e:	f011 fdaf 	bl	8020ab0 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800ef52:	193a      	adds	r2, r7, r4
 800ef54:	4b08      	ldr	r3, [pc, #32]	@ (800ef78 <CreateLine+0xa8>)
 800ef56:	0011      	movs	r1, r2
 800ef58:	0018      	movs	r0, r3
 800ef5a:	f011 fca1 	bl	80208a0 <iprintf>
 800ef5e:	e000      	b.n	800ef62 <CreateLine+0x92>
    return;
 800ef60:	46c0      	nop			@ (mov r8, r8)
}
 800ef62:	46bd      	mov	sp, r7
 800ef64:	b024      	add	sp, #144	@ 0x90
 800ef66:	bcb0      	pop	{r4, r5, r7}
 800ef68:	bc08      	pop	{r3}
 800ef6a:	b002      	add	sp, #8
 800ef6c:	4718      	bx	r3
 800ef6e:	46c0      	nop			@ (mov r8, r8)
 800ef70:	200000d4 	.word	0x200000d4
 800ef74:	08026024 	.word	0x08026024
 800ef78:	08026028 	.word	0x08026028

0800ef7c <_write>:

int _write(int fd, void *buf, size_t count) {
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	60b9      	str	r1, [r7, #8]
 800ef86:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	68b9      	ldr	r1, [r7, #8]
 800ef8e:	4804      	ldr	r0, [pc, #16]	@ (800efa0 <_write+0x24>)
 800ef90:	2364      	movs	r3, #100	@ 0x64
 800ef92:	f008 fe0d 	bl	8017bb0 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800ef96:	687b      	ldr	r3, [r7, #4]
}
 800ef98:	0018      	movs	r0, r3
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	b004      	add	sp, #16
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	20001e90 	.word	0x20001e90

0800efa4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	0002      	movs	r2, r0
 800efac:	1dfb      	adds	r3, r7, #7
 800efae:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800efb0:	4b03      	ldr	r3, [pc, #12]	@ (800efc0 <SetVerboseLevel+0x1c>)
 800efb2:	1dfa      	adds	r2, r7, #7
 800efb4:	7812      	ldrb	r2, [r2, #0]
 800efb6:	701a      	strb	r2, [r3, #0]
}
 800efb8:	46c0      	nop			@ (mov r8, r8)
 800efba:	46bd      	mov	sp, r7
 800efbc:	b002      	add	sp, #8
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	200000d4 	.word	0x200000d4

0800efc4 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800efc4:	b580      	push	{r7, lr}
 800efc6:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800efc8:	4b02      	ldr	r3, [pc, #8]	@ (800efd4 <GetVerboseLevel+0x10>)
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	0018      	movs	r0, r3
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	46c0      	nop			@ (mov r8, r8)
 800efd4:	200000d4 	.word	0x200000d4

0800efd8 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800efde:	4a0f      	ldr	r2, [pc, #60]	@ (800f01c <BinaryReleaseInfo+0x44>)
 800efe0:	4b0f      	ldr	r3, [pc, #60]	@ (800f020 <BinaryReleaseInfo+0x48>)
 800efe2:	0019      	movs	r1, r3
 800efe4:	2002      	movs	r0, #2
 800efe6:	f7ff ff73 	bl	800eed0 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800efea:	480e      	ldr	r0, [pc, #56]	@ (800f024 <BinaryReleaseInfo+0x4c>)
 800efec:	4a0e      	ldr	r2, [pc, #56]	@ (800f028 <BinaryReleaseInfo+0x50>)
 800efee:	490c      	ldr	r1, [pc, #48]	@ (800f020 <BinaryReleaseInfo+0x48>)
 800eff0:	4b0e      	ldr	r3, [pc, #56]	@ (800f02c <BinaryReleaseInfo+0x54>)
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	0003      	movs	r3, r0
 800eff6:	2002      	movs	r0, #2
 800eff8:	f7ff ff6a 	bl	800eed0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800effc:	4b0c      	ldr	r3, [pc, #48]	@ (800f030 <BinaryReleaseInfo+0x58>)
 800effe:	4a0d      	ldr	r2, [pc, #52]	@ (800f034 <BinaryReleaseInfo+0x5c>)
 800f000:	4907      	ldr	r1, [pc, #28]	@ (800f020 <BinaryReleaseInfo+0x48>)
 800f002:	2002      	movs	r0, #2
 800f004:	f7ff ff64 	bl	800eed0 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800f008:	4b0b      	ldr	r3, [pc, #44]	@ (800f038 <BinaryReleaseInfo+0x60>)
 800f00a:	4a0c      	ldr	r2, [pc, #48]	@ (800f03c <BinaryReleaseInfo+0x64>)
 800f00c:	4904      	ldr	r1, [pc, #16]	@ (800f020 <BinaryReleaseInfo+0x48>)
 800f00e:	2002      	movs	r0, #2
 800f010:	f7ff ff5e 	bl	800eed0 <CreateLine>
}
 800f014:	46c0      	nop			@ (mov r8, r8)
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	46c0      	nop			@ (mov r8, r8)
 800f01c:	08026030 	.word	0x08026030
 800f020:	0802605c 	.word	0x0802605c
 800f024:	08026060 	.word	0x08026060
 800f028:	0802606c 	.word	0x0802606c
 800f02c:	08026080 	.word	0x08026080
 800f030:	0802608c 	.word	0x0802608c
 800f034:	08026098 	.word	0x08026098
 800f038:	080260a0 	.word	0x080260a0
 800f03c:	080260a8 	.word	0x080260a8

0800f040 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68ba      	ldr	r2, [r7, #8]
 800f050:	68f9      	ldr	r1, [r7, #12]
 800f052:	4803      	ldr	r0, [pc, #12]	@ (800f060 <errorHandler+0x20>)
 800f054:	f011 fc24 	bl	80208a0 <iprintf>
//    while (true)
//    {
//    }
}
 800f058:	46c0      	nop			@ (mov r8, r8)
 800f05a:	46bd      	mov	sp, r7
 800f05c:	b004      	add	sp, #16
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	080260c0 	.word	0x080260c0

0800f064 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6039      	str	r1, [r7, #0]
 800f06c:	0011      	movs	r1, r2
 800f06e:	1dfb      	adds	r3, r7, #7
 800f070:	1c02      	adds	r2, r0, #0
 800f072:	701a      	strb	r2, [r3, #0]
 800f074:	1dbb      	adds	r3, r7, #6
 800f076:	1c0a      	adds	r2, r1, #0
 800f078:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800f07a:	4b0a      	ldr	r3, [pc, #40]	@ (800f0a4 <ReadRegister+0x40>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d00a      	beq.n	800f098 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800f082:	4b08      	ldr	r3, [pc, #32]	@ (800f0a4 <ReadRegister+0x40>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	1dba      	adds	r2, r7, #6
 800f088:	7814      	ldrb	r4, [r2, #0]
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	1dfa      	adds	r2, r7, #7
 800f08e:	7810      	ldrb	r0, [r2, #0]
 800f090:	0022      	movs	r2, r4
 800f092:	4798      	blx	r3
 800f094:	0003      	movs	r3, r0
 800f096:	e000      	b.n	800f09a <ReadRegister+0x36>
	}
	return false;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	0018      	movs	r0, r3
 800f09c:	46bd      	mov	sp, r7
 800f09e:	b003      	add	sp, #12
 800f0a0:	bd90      	pop	{r4, r7, pc}
 800f0a2:	46c0      	nop			@ (mov r8, r8)
 800f0a4:	20002098 	.word	0x20002098

0800f0a8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800f0a8:	b590      	push	{r4, r7, lr}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6039      	str	r1, [r7, #0]
 800f0b0:	0011      	movs	r1, r2
 800f0b2:	1dfb      	adds	r3, r7, #7
 800f0b4:	1c02      	adds	r2, r0, #0
 800f0b6:	701a      	strb	r2, [r3, #0]
 800f0b8:	1dbb      	adds	r3, r7, #6
 800f0ba:	1c0a      	adds	r2, r1, #0
 800f0bc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800f0be:	4b0a      	ldr	r3, [pc, #40]	@ (800f0e8 <WriteRegister+0x40>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00a      	beq.n	800f0dc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800f0c6:	4b08      	ldr	r3, [pc, #32]	@ (800f0e8 <WriteRegister+0x40>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	1dba      	adds	r2, r7, #6
 800f0cc:	7814      	ldrb	r4, [r2, #0]
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	1dfa      	adds	r2, r7, #7
 800f0d2:	7810      	ldrb	r0, [r2, #0]
 800f0d4:	0022      	movs	r2, r4
 800f0d6:	4798      	blx	r3
 800f0d8:	0003      	movs	r3, r0
 800f0da:	e000      	b.n	800f0de <WriteRegister+0x36>
  }
  return false;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	0018      	movs	r0, r3
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	b003      	add	sp, #12
 800f0e4:	bd90      	pop	{r4, r7, pc}
 800f0e6:	46c0      	nop			@ (mov r8, r8)
 800f0e8:	2000209c 	.word	0x2000209c

0800f0ec <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	000a      	movs	r2, r1
 800f0f6:	1cfb      	adds	r3, r7, #3
 800f0f8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800f0fa:	230f      	movs	r3, #15
 800f0fc:	18fb      	adds	r3, r7, r3
 800f0fe:	22ff      	movs	r2, #255	@ 0xff
 800f100:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800f102:	230e      	movs	r3, #14
 800f104:	18fb      	adds	r3, r7, r3
 800f106:	2200      	movs	r2, #0
 800f108:	701a      	strb	r2, [r3, #0]
 800f10a:	e037      	b.n	800f17c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800f10c:	230e      	movs	r3, #14
 800f10e:	18fb      	adds	r3, r7, r3
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	18d3      	adds	r3, r2, r3
 800f116:	7819      	ldrb	r1, [r3, #0]
 800f118:	220f      	movs	r2, #15
 800f11a:	18bb      	adds	r3, r7, r2
 800f11c:	18ba      	adds	r2, r7, r2
 800f11e:	7812      	ldrb	r2, [r2, #0]
 800f120:	404a      	eors	r2, r1
 800f122:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800f124:	230d      	movs	r3, #13
 800f126:	18fb      	adds	r3, r7, r3
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
 800f12c:	e01b      	b.n	800f166 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800f12e:	210f      	movs	r1, #15
 800f130:	187b      	adds	r3, r7, r1
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	b25b      	sxtb	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	da09      	bge.n	800f14e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800f13a:	187b      	adds	r3, r7, r1
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	005b      	lsls	r3, r3, #1
 800f140:	b25b      	sxtb	r3, r3
 800f142:	2231      	movs	r2, #49	@ 0x31
 800f144:	4053      	eors	r3, r2
 800f146:	b25a      	sxtb	r2, r3
 800f148:	187b      	adds	r3, r7, r1
 800f14a:	701a      	strb	r2, [r3, #0]
 800f14c:	e005      	b.n	800f15a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800f14e:	230f      	movs	r3, #15
 800f150:	18fa      	adds	r2, r7, r3
 800f152:	18fb      	adds	r3, r7, r3
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	18db      	adds	r3, r3, r3
 800f158:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800f15a:	210d      	movs	r1, #13
 800f15c:	187b      	adds	r3, r7, r1
 800f15e:	781a      	ldrb	r2, [r3, #0]
 800f160:	187b      	adds	r3, r7, r1
 800f162:	3201      	adds	r2, #1
 800f164:	701a      	strb	r2, [r3, #0]
 800f166:	230d      	movs	r3, #13
 800f168:	18fb      	adds	r3, r7, r3
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b07      	cmp	r3, #7
 800f16e:	d9de      	bls.n	800f12e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800f170:	210e      	movs	r1, #14
 800f172:	187b      	adds	r3, r7, r1
 800f174:	781a      	ldrb	r2, [r3, #0]
 800f176:	187b      	adds	r3, r7, r1
 800f178:	3201      	adds	r2, #1
 800f17a:	701a      	strb	r2, [r3, #0]
 800f17c:	230e      	movs	r3, #14
 800f17e:	18fa      	adds	r2, r7, r3
 800f180:	1cfb      	adds	r3, r7, #3
 800f182:	7812      	ldrb	r2, [r2, #0]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	429a      	cmp	r2, r3
 800f188:	d3c0      	bcc.n	800f10c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800f18a:	230f      	movs	r3, #15
 800f18c:	18fb      	adds	r3, r7, r3
 800f18e:	781b      	ldrb	r3, [r3, #0]
}
 800f190:	0018      	movs	r0, r3
 800f192:	46bd      	mov	sp, r7
 800f194:	b004      	add	sp, #16
 800f196:	bd80      	pop	{r7, pc}

0800f198 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800f1a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f1cc <HIDS_Init+0x34>)
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800f1a8:	4b09      	ldr	r3, [pc, #36]	@ (800f1d0 <HIDS_Init+0x38>)
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800f1ae:	4b09      	ldr	r3, [pc, #36]	@ (800f1d4 <HIDS_Init+0x3c>)
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f000 f840 	bl	800f238 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800f1b8:	4b07      	ldr	r3, [pc, #28]	@ (800f1d8 <HIDS_Init+0x40>)
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	0018      	movs	r0, r3
 800f1be:	f000 f82b 	bl	800f218 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800f1c2:	46c0      	nop			@ (mov r8, r8)
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	b002      	add	sp, #8
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	46c0      	nop			@ (mov r8, r8)
 800f1cc:	20002098 	.word	0x20002098
 800f1d0:	2000209c 	.word	0x2000209c
 800f1d4:	200000d6 	.word	0x200000d6
 800f1d8:	200000d5 	.word	0x200000d5

0800f1dc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800f1e0:	f000 faba 	bl	800f758 <HAL_GetTick>
 800f1e4:	0002      	movs	r2, r0
 800f1e6:	4b08      	ldr	r3, [pc, #32]	@ (800f208 <HIDS_StartMeasurement+0x2c>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	18d2      	adds	r2, r2, r3
 800f1ec:	4b07      	ldr	r3, [pc, #28]	@ (800f20c <HIDS_StartMeasurement+0x30>)
 800f1ee:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800f1f0:	4b07      	ldr	r3, [pc, #28]	@ (800f210 <HIDS_StartMeasurement+0x34>)
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	0019      	movs	r1, r3
 800f1f6:	2044      	movs	r0, #68	@ 0x44
 800f1f8:	f7ff ff56 	bl	800f0a8 <WriteRegister>
  MeasurementDone = false;
 800f1fc:	4b05      	ldr	r3, [pc, #20]	@ (800f214 <HIDS_StartMeasurement+0x38>)
 800f1fe:	2200      	movs	r2, #0
 800f200:	701a      	strb	r2, [r3, #0]
}
 800f202:	46c0      	nop			@ (mov r8, r8)
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	200000dc 	.word	0x200000dc
 800f20c:	200000d8 	.word	0x200000d8
 800f210:	200000d6 	.word	0x200000d6
 800f214:	200020ae 	.word	0x200020ae

0800f218 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	0002      	movs	r2, r0
 800f220:	1dfb      	adds	r3, r7, #7
 800f222:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800f224:	4b03      	ldr	r3, [pc, #12]	@ (800f234 <HIDS_SetHeaterMode+0x1c>)
 800f226:	1dfa      	adds	r2, r7, #7
 800f228:	7812      	ldrb	r2, [r2, #0]
 800f22a:	701a      	strb	r2, [r3, #0]
}
 800f22c:	46c0      	nop			@ (mov r8, r8)
 800f22e:	46bd      	mov	sp, r7
 800f230:	b002      	add	sp, #8
 800f232:	bd80      	pop	{r7, pc}
 800f234:	200000d5 	.word	0x200000d5

0800f238 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	0002      	movs	r2, r0
 800f240:	1dfb      	adds	r3, r7, #7
 800f242:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800f244:	4b03      	ldr	r3, [pc, #12]	@ (800f254 <HIDS_SetMeasurementMode+0x1c>)
 800f246:	1dfa      	adds	r2, r7, #7
 800f248:	7812      	ldrb	r2, [r2, #0]
 800f24a:	701a      	strb	r2, [r3, #0]
}
 800f24c:	46c0      	nop			@ (mov r8, r8)
 800f24e:	46bd      	mov	sp, r7
 800f250:	b002      	add	sp, #8
 800f252:	bd80      	pop	{r7, pc}
 800f254:	200000d6 	.word	0x200000d6

0800f258 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800f260:	f000 fa7a 	bl	800f758 <HAL_GetTick>
 800f264:	0002      	movs	r2, r0
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	18d2      	adds	r2, r2, r3
 800f26a:	4b03      	ldr	r3, [pc, #12]	@ (800f278 <setHIDSTimeStamp+0x20>)
 800f26c:	601a      	str	r2, [r3, #0]
}
 800f26e:	46c0      	nop			@ (mov r8, r8)
 800f270:	46bd      	mov	sp, r7
 800f272:	b002      	add	sp, #8
 800f274:	bd80      	pop	{r7, pc}
 800f276:	46c0      	nop			@ (mov r8, r8)
 800f278:	200020b0 	.word	0x200020b0

0800f27c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	781a      	ldrb	r2, [r3, #0]
 800f288:	210c      	movs	r1, #12
 800f28a:	187b      	adds	r3, r7, r1
 800f28c:	701a      	strb	r2, [r3, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	785a      	ldrb	r2, [r3, #1]
 800f292:	187b      	adds	r3, r7, r1
 800f294:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800f296:	240f      	movs	r4, #15
 800f298:	193b      	adds	r3, r7, r4
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	7892      	ldrb	r2, [r2, #2]
 800f29e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800f2a0:	187b      	adds	r3, r7, r1
 800f2a2:	2102      	movs	r1, #2
 800f2a4:	0018      	movs	r0, r3
 800f2a6:	f7ff ff21 	bl	800f0ec <CalculateCRC>
 800f2aa:	0003      	movs	r3, r0
 800f2ac:	001a      	movs	r2, r3
 800f2ae:	193b      	adds	r3, r7, r4
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d007      	beq.n	800f2c6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800f2b6:	4a1a      	ldr	r2, [pc, #104]	@ (800f320 <CheckCRC+0xa4>)
 800f2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800f324 <CheckCRC+0xa8>)
 800f2ba:	0019      	movs	r1, r3
 800f2bc:	2001      	movs	r0, #1
 800f2be:	f7ff fe07 	bl	800eed0 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	e027      	b.n	800f316 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	78da      	ldrb	r2, [r3, #3]
 800f2ca:	2108      	movs	r1, #8
 800f2cc:	187b      	adds	r3, r7, r1
 800f2ce:	701a      	strb	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	791a      	ldrb	r2, [r3, #4]
 800f2d4:	187b      	adds	r3, r7, r1
 800f2d6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800f2d8:	240e      	movs	r4, #14
 800f2da:	193b      	adds	r3, r7, r4
 800f2dc:	687a      	ldr	r2, [r7, #4]
 800f2de:	7952      	ldrb	r2, [r2, #5]
 800f2e0:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800f2e2:	187b      	adds	r3, r7, r1
 800f2e4:	2102      	movs	r1, #2
 800f2e6:	0018      	movs	r0, r3
 800f2e8:	f7ff ff00 	bl	800f0ec <CalculateCRC>
 800f2ec:	0003      	movs	r3, r0
 800f2ee:	001a      	movs	r2, r3
 800f2f0:	193b      	adds	r3, r7, r4
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d00d      	beq.n	800f314 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800f2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800f328 <CheckCRC+0xac>)
 800f2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f324 <CheckCRC+0xa8>)
 800f2fc:	0019      	movs	r1, r3
 800f2fe:	2001      	movs	r0, #1
 800f300:	f7ff fde6 	bl	800eed0 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800f304:	4a09      	ldr	r2, [pc, #36]	@ (800f32c <CheckCRC+0xb0>)
 800f306:	4b0a      	ldr	r3, [pc, #40]	@ (800f330 <CheckCRC+0xb4>)
 800f308:	217c      	movs	r1, #124	@ 0x7c
 800f30a:	0018      	movs	r0, r3
 800f30c:	f7ff fe98 	bl	800f040 <errorHandler>
		return false;
 800f310:	2300      	movs	r3, #0
 800f312:	e000      	b.n	800f316 <CheckCRC+0x9a>
	}
	return true;
 800f314:	2301      	movs	r3, #1
}
 800f316:	0018      	movs	r0, r3
 800f318:	46bd      	mov	sp, r7
 800f31a:	b005      	add	sp, #20
 800f31c:	bd90      	pop	{r4, r7, pc}
 800f31e:	46c0      	nop			@ (mov r8, r8)
 800f320:	0802610c 	.word	0x0802610c
 800f324:	08026134 	.word	0x08026134
 800f328:	08026138 	.word	0x08026138
 800f32c:	08026164 	.word	0x08026164
 800f330:	08026730 	.word	0x08026730

0800f334 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800f33a:	1dbb      	adds	r3, r7, #6
 800f33c:	2289      	movs	r2, #137	@ 0x89
 800f33e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800f340:	1dbb      	adds	r3, r7, #6
 800f342:	2201      	movs	r2, #1
 800f344:	0019      	movs	r1, r3
 800f346:	2044      	movs	r0, #68	@ 0x44
 800f348:	f7ff feae 	bl	800f0a8 <WriteRegister>
	HAL_Delay(30);
 800f34c:	201e      	movs	r0, #30
 800f34e:	f000 fa0d 	bl	800f76c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800f352:	4b14      	ldr	r3, [pc, #80]	@ (800f3a4 <HIDS_DeviceConnected+0x70>)
 800f354:	2206      	movs	r2, #6
 800f356:	0019      	movs	r1, r3
 800f358:	2044      	movs	r0, #68	@ 0x44
 800f35a:	f7ff fe83 	bl	800f064 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800f35e:	1dfb      	adds	r3, r7, #7
 800f360:	2200      	movs	r2, #0
 800f362:	701a      	strb	r2, [r3, #0]
 800f364:	e011      	b.n	800f38a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800f366:	1dfb      	adds	r3, r7, #7
 800f368:	7818      	ldrb	r0, [r3, #0]
 800f36a:	1dfb      	adds	r3, r7, #7
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	4a0d      	ldr	r2, [pc, #52]	@ (800f3a4 <HIDS_DeviceConnected+0x70>)
 800f370:	5cd3      	ldrb	r3, [r2, r3]
 800f372:	4a0d      	ldr	r2, [pc, #52]	@ (800f3a8 <HIDS_DeviceConnected+0x74>)
 800f374:	490d      	ldr	r1, [pc, #52]	@ (800f3ac <HIDS_DeviceConnected+0x78>)
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	0003      	movs	r3, r0
 800f37a:	2002      	movs	r0, #2
 800f37c:	f7ff fda8 	bl	800eed0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800f380:	1dfb      	adds	r3, r7, #7
 800f382:	781a      	ldrb	r2, [r3, #0]
 800f384:	1dfb      	adds	r3, r7, #7
 800f386:	3201      	adds	r2, #1
 800f388:	701a      	strb	r2, [r3, #0]
 800f38a:	1dfb      	adds	r3, r7, #7
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	2b05      	cmp	r3, #5
 800f390:	d9e9      	bls.n	800f366 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800f392:	4b04      	ldr	r3, [pc, #16]	@ (800f3a4 <HIDS_DeviceConnected+0x70>)
 800f394:	0018      	movs	r0, r3
 800f396:	f7ff ff71 	bl	800f27c <CheckCRC>
 800f39a:	0003      	movs	r3, r0
}
 800f39c:	0018      	movs	r0, r3
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	b002      	add	sp, #8
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	200020a0 	.word	0x200020a0
 800f3a8:	0802617c 	.word	0x0802617c
 800f3ac:	08026108 	.word	0x08026108

0800f3b0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800f3b4:	4b04      	ldr	r3, [pc, #16]	@ (800f3c8 <HIDS_MeasurementReady+0x18>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	0018      	movs	r0, r3
 800f3ba:	f7ff fd33 	bl	800ee24 <TimestampIsReached>
 800f3be:	0003      	movs	r3, r0
}
 800f3c0:	0018      	movs	r0, r3
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	46c0      	nop			@ (mov r8, r8)
 800f3c8:	200000d8 	.word	0x200000d8

0800f3cc <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800f3d6:	4b41      	ldr	r3, [pc, #260]	@ (800f4dc <HIDS_GetMeasurementValues+0x110>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d001      	beq.n	800f3e2 <HIDS_GetMeasurementValues+0x16>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e077      	b.n	800f4d2 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800f3e2:	f7ff ffe5 	bl	800f3b0 <HIDS_MeasurementReady>
 800f3e6:	0003      	movs	r3, r0
 800f3e8:	001a      	movs	r2, r3
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	4053      	eors	r3, r2
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <HIDS_GetMeasurementValues+0x2c>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	e06c      	b.n	800f4d2 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800f3f8:	4b39      	ldr	r3, [pc, #228]	@ (800f4e0 <HIDS_GetMeasurementValues+0x114>)
 800f3fa:	2206      	movs	r2, #6
 800f3fc:	0019      	movs	r1, r3
 800f3fe:	2044      	movs	r0, #68	@ 0x44
 800f400:	f7ff fe30 	bl	800f064 <ReadRegister>
 800f404:	0003      	movs	r3, r0
 800f406:	001a      	movs	r2, r3
 800f408:	2301      	movs	r3, #1
 800f40a:	4053      	eors	r3, r2
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d005      	beq.n	800f41e <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800f412:	4a34      	ldr	r2, [pc, #208]	@ (800f4e4 <HIDS_GetMeasurementValues+0x118>)
 800f414:	4b34      	ldr	r3, [pc, #208]	@ (800f4e8 <HIDS_GetMeasurementValues+0x11c>)
 800f416:	0019      	movs	r1, r3
 800f418:	2001      	movs	r0, #1
 800f41a:	f7ff fd59 	bl	800eed0 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800f41e:	4b30      	ldr	r3, [pc, #192]	@ (800f4e0 <HIDS_GetMeasurementValues+0x114>)
 800f420:	0018      	movs	r0, r3
 800f422:	f7ff ff2b 	bl	800f27c <CheckCRC>
 800f426:	0003      	movs	r3, r0
 800f428:	001a      	movs	r2, r3
 800f42a:	2301      	movs	r3, #1
 800f42c:	4053      	eors	r3, r2
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d001      	beq.n	800f438 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800f434:	2300      	movs	r3, #0
 800f436:	e04c      	b.n	800f4d2 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800f438:	4b29      	ldr	r3, [pc, #164]	@ (800f4e0 <HIDS_GetMeasurementValues+0x114>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	021b      	lsls	r3, r3, #8
 800f43e:	4a28      	ldr	r2, [pc, #160]	@ (800f4e0 <HIDS_GetMeasurementValues+0x114>)
 800f440:	7852      	ldrb	r2, [r2, #1]
 800f442:	4313      	orrs	r3, r2
 800f444:	22af      	movs	r2, #175	@ 0xaf
 800f446:	4353      	muls	r3, r2
 800f448:	0018      	movs	r0, r3
 800f44a:	f7f3 ffb9 	bl	80033c0 <__aeabi_i2d>
 800f44e:	2200      	movs	r2, #0
 800f450:	4b26      	ldr	r3, [pc, #152]	@ (800f4ec <HIDS_GetMeasurementValues+0x120>)
 800f452:	f7f2 fcaf 	bl	8001db4 <__aeabi_ddiv>
 800f456:	0002      	movs	r2, r0
 800f458:	000b      	movs	r3, r1
 800f45a:	0010      	movs	r0, r2
 800f45c:	0019      	movs	r1, r3
 800f45e:	f7f4 f849 	bl	80034f4 <__aeabi_d2f>
 800f462:	1c03      	adds	r3, r0, #0
 800f464:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800f466:	4922      	ldr	r1, [pc, #136]	@ (800f4f0 <HIDS_GetMeasurementValues+0x124>)
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7f1 fed7 	bl	800121c <__aeabi_fsub>
 800f46e:	1c03      	adds	r3, r0, #0
 800f470:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800f472:	4b1b      	ldr	r3, [pc, #108]	@ (800f4e0 <HIDS_GetMeasurementValues+0x114>)
 800f474:	78db      	ldrb	r3, [r3, #3]
 800f476:	021b      	lsls	r3, r3, #8
 800f478:	4a19      	ldr	r2, [pc, #100]	@ (800f4e0 <HIDS_GetMeasurementValues+0x114>)
 800f47a:	7912      	ldrb	r2, [r2, #4]
 800f47c:	431a      	orrs	r2, r3
 800f47e:	0013      	movs	r3, r2
 800f480:	015b      	lsls	r3, r3, #5
 800f482:	1a9b      	subs	r3, r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	189b      	adds	r3, r3, r2
 800f488:	0018      	movs	r0, r3
 800f48a:	f7f3 ff99 	bl	80033c0 <__aeabi_i2d>
 800f48e:	2200      	movs	r2, #0
 800f490:	4b16      	ldr	r3, [pc, #88]	@ (800f4ec <HIDS_GetMeasurementValues+0x120>)
 800f492:	f7f2 fc8f 	bl	8001db4 <__aeabi_ddiv>
 800f496:	0002      	movs	r2, r0
 800f498:	000b      	movs	r3, r1
 800f49a:	0010      	movs	r0, r2
 800f49c:	0019      	movs	r1, r3
 800f49e:	f7f4 f829 	bl	80034f4 <__aeabi_d2f>
 800f4a2:	1c03      	adds	r3, r0, #0
 800f4a4:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800f4a6:	4913      	ldr	r1, [pc, #76]	@ (800f4f4 <HIDS_GetMeasurementValues+0x128>)
 800f4a8:	68b8      	ldr	r0, [r7, #8]
 800f4aa:	f7f1 feb7 	bl	800121c <__aeabi_fsub>
 800f4ae:	1c03      	adds	r3, r0, #0
 800f4b0:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	68fa      	ldr	r2, [r7, #12]
 800f4b6:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	0011      	movs	r1, r2
 800f4c4:	0018      	movs	r0, r3
 800f4c6:	f7fd f931 	bl	800c72c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800f4ca:	4b04      	ldr	r3, [pc, #16]	@ (800f4dc <HIDS_GetMeasurementValues+0x110>)
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800f4d0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	b004      	add	sp, #16
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	46c0      	nop			@ (mov r8, r8)
 800f4dc:	200020ae 	.word	0x200020ae
 800f4e0:	200020a8 	.word	0x200020a8
 800f4e4:	0802619c 	.word	0x0802619c
 800f4e8:	08026134 	.word	0x08026134
 800f4ec:	40efffe0 	.word	0x40efffe0
 800f4f0:	42340000 	.word	0x42340000
 800f4f4:	40c00000 	.word	0x40c00000

0800f4f8 <ResetHIDSresults>:

void ResetHIDSresults() {
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
  humid = 0.0;
 800f4fc:	4b04      	ldr	r3, [pc, #16]	@ (800f510 <ResetHIDSresults+0x18>)
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800f502:	4b04      	ldr	r3, [pc, #16]	@ (800f514 <ResetHIDSresults+0x1c>)
 800f504:	2200      	movs	r2, #0
 800f506:	601a      	str	r2, [r3, #0]
}
 800f508:	46c0      	nop			@ (mov r8, r8)
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	46c0      	nop			@ (mov r8, r8)
 800f510:	20002090 	.word	0x20002090
 800f514:	20002094 	.word	0x20002094

0800f518 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800f518:	b5b0      	push	{r4, r5, r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800f51e:	4b3c      	ldr	r3, [pc, #240]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b06      	cmp	r3, #6
 800f524:	d868      	bhi.n	800f5f8 <HIDS_Upkeep+0xe0>
 800f526:	009a      	lsls	r2, r3, #2
 800f528:	4b3a      	ldr	r3, [pc, #232]	@ (800f614 <HIDS_Upkeep+0xfc>)
 800f52a:	18d3      	adds	r3, r2, r3
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800f530:	4a39      	ldr	r2, [pc, #228]	@ (800f618 <HIDS_Upkeep+0x100>)
 800f532:	4b3a      	ldr	r3, [pc, #232]	@ (800f61c <HIDS_Upkeep+0x104>)
 800f534:	0019      	movs	r1, r3
 800f536:	2003      	movs	r0, #3
 800f538:	f7ff fcca 	bl	800eed0 <CreateLine>
      break;
 800f53c:	e063      	b.n	800f606 <HIDS_Upkeep+0xee>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800f53e:	f7ff ffdb 	bl	800f4f8 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800f542:	4b33      	ldr	r3, [pc, #204]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f544:	2201      	movs	r2, #1
 800f546:	701a      	strb	r2, [r3, #0]
      break;
 800f548:	e05d      	b.n	800f606 <HIDS_Upkeep+0xee>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800f54a:	f7fe fb1b 	bl	800db84 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800f54e:	f7ff fe45 	bl	800f1dc <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800f552:	4b2f      	ldr	r3, [pc, #188]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f554:	2202      	movs	r2, #2
 800f556:	701a      	strb	r2, [r3, #0]
      break;
 800f558:	e055      	b.n	800f606 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800f55a:	4a31      	ldr	r2, [pc, #196]	@ (800f620 <HIDS_Upkeep+0x108>)
 800f55c:	4b31      	ldr	r3, [pc, #196]	@ (800f624 <HIDS_Upkeep+0x10c>)
 800f55e:	0011      	movs	r1, r2
 800f560:	0018      	movs	r0, r3
 800f562:	f7ff ff33 	bl	800f3cc <HIDS_GetMeasurementValues>
 800f566:	1e03      	subs	r3, r0, #0
 800f568:	d04a      	beq.n	800f600 <HIDS_Upkeep+0xe8>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800f56a:	4b29      	ldr	r3, [pc, #164]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f56c:	2203      	movs	r2, #3
 800f56e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f570:	e046      	b.n	800f600 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800f572:	4b2c      	ldr	r3, [pc, #176]	@ (800f624 <HIDS_Upkeep+0x10c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	1c18      	adds	r0, r3, #0
 800f578:	f7f3 ff74 	bl	8003464 <__aeabi_f2d>
 800f57c:	0004      	movs	r4, r0
 800f57e:	000d      	movs	r5, r1
 800f580:	4b27      	ldr	r3, [pc, #156]	@ (800f620 <HIDS_Upkeep+0x108>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	1c18      	adds	r0, r3, #0
 800f586:	f7f3 ff6d 	bl	8003464 <__aeabi_f2d>
 800f58a:	0002      	movs	r2, r0
 800f58c:	000b      	movs	r3, r1
 800f58e:	4826      	ldr	r0, [pc, #152]	@ (800f628 <HIDS_Upkeep+0x110>)
 800f590:	4922      	ldr	r1, [pc, #136]	@ (800f61c <HIDS_Upkeep+0x104>)
 800f592:	9202      	str	r2, [sp, #8]
 800f594:	9303      	str	r3, [sp, #12]
 800f596:	9400      	str	r4, [sp, #0]
 800f598:	9501      	str	r5, [sp, #4]
 800f59a:	0002      	movs	r2, r0
 800f59c:	2003      	movs	r0, #3
 800f59e:	f7ff fc97 	bl	800eed0 <CreateLine>
      setHIDS(temp, humid);
 800f5a2:	4b1f      	ldr	r3, [pc, #124]	@ (800f620 <HIDS_Upkeep+0x108>)
 800f5a4:	681a      	ldr	r2, [r3, #0]
 800f5a6:	4b1f      	ldr	r3, [pc, #124]	@ (800f624 <HIDS_Upkeep+0x10c>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	1c19      	adds	r1, r3, #0
 800f5ac:	1c10      	adds	r0, r2, #0
 800f5ae:	f7f4 f8fb 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 800f5b2:	f7fe faff 	bl	800dbb4 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 800f5b6:	f000 f8cf 	bl	800f758 <HAL_GetTick>
 800f5ba:	0004      	movs	r4, r0
 800f5bc:	f7f7 fb1c 	bl	8006bf8 <Check_USB_PowerOn>
 800f5c0:	1e03      	subs	r3, r0, #0
 800f5c2:	d103      	bne.n	800f5cc <HIDS_Upkeep+0xb4>
 800f5c4:	4b19      	ldr	r3, [pc, #100]	@ (800f62c <HIDS_Upkeep+0x114>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <HIDS_Upkeep+0xb8>
 800f5cc:	4b18      	ldr	r3, [pc, #96]	@ (800f630 <HIDS_Upkeep+0x118>)
 800f5ce:	e001      	b.n	800f5d4 <HIDS_Upkeep+0xbc>
 800f5d0:	23fa      	movs	r3, #250	@ 0xfa
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	191a      	adds	r2, r3, r4
 800f5d6:	4b17      	ldr	r3, [pc, #92]	@ (800f634 <HIDS_Upkeep+0x11c>)
 800f5d8:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800f5da:	4b0d      	ldr	r3, [pc, #52]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f5dc:	2206      	movs	r2, #6
 800f5de:	701a      	strb	r2, [r3, #0]
      break;
 800f5e0:	e011      	b.n	800f606 <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800f5e2:	4b14      	ldr	r3, [pc, #80]	@ (800f634 <HIDS_Upkeep+0x11c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	0018      	movs	r0, r3
 800f5e8:	f7ff fc1c 	bl	800ee24 <TimestampIsReached>
 800f5ec:	1e03      	subs	r3, r0, #0
 800f5ee:	d009      	beq.n	800f604 <HIDS_Upkeep+0xec>
        HIDSState = HIDS_STATE_INIT;
 800f5f0:	4b07      	ldr	r3, [pc, #28]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f5f6:	e005      	b.n	800f604 <HIDS_Upkeep+0xec>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800f5f8:	4b05      	ldr	r3, [pc, #20]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	701a      	strb	r2, [r3, #0]
      break;
 800f5fe:	e002      	b.n	800f606 <HIDS_Upkeep+0xee>
      break;
 800f600:	46c0      	nop			@ (mov r8, r8)
 800f602:	e000      	b.n	800f606 <HIDS_Upkeep+0xee>
      break;
 800f604:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800f606:	4b02      	ldr	r3, [pc, #8]	@ (800f610 <HIDS_Upkeep+0xf8>)
 800f608:	781b      	ldrb	r3, [r3, #0]
}
 800f60a:	0018      	movs	r0, r3
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bdb0      	pop	{r4, r5, r7, pc}
 800f610:	200020b4 	.word	0x200020b4
 800f614:	08026714 	.word	0x08026714
 800f618:	080261d0 	.word	0x080261d0
 800f61c:	08026204 	.word	0x08026204
 800f620:	20002094 	.word	0x20002094
 800f624:	20002090 	.word	0x20002090
 800f628:	08026208 	.word	0x08026208
 800f62c:	20001cfa 	.word	0x20001cfa
 800f630:	00002710 	.word	0x00002710
 800f634:	200020b0 	.word	0x200020b0

0800f638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800f638:	480d      	ldr	r0, [pc, #52]	@ (800f670 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800f63a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800f63c:	f7ff f84c 	bl	800e6d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f640:	480c      	ldr	r0, [pc, #48]	@ (800f674 <LoopForever+0x6>)
  ldr r1, =_edata
 800f642:	490d      	ldr	r1, [pc, #52]	@ (800f678 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f644:	4a0d      	ldr	r2, [pc, #52]	@ (800f67c <LoopForever+0xe>)
  movs r3, #0
 800f646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f648:	e002      	b.n	800f650 <LoopCopyDataInit>

0800f64a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f64a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f64c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f64e:	3304      	adds	r3, #4

0800f650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f654:	d3f9      	bcc.n	800f64a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f656:	4a0a      	ldr	r2, [pc, #40]	@ (800f680 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f658:	4c0a      	ldr	r4, [pc, #40]	@ (800f684 <LoopForever+0x16>)
  movs r3, #0
 800f65a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f65c:	e001      	b.n	800f662 <LoopFillZerobss>

0800f65e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f65e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f660:	3204      	adds	r2, #4

0800f662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f664:	d3fb      	bcc.n	800f65e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f666:	f011 fb9b 	bl	8020da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f66a:	f7f8 ff7b 	bl	8008564 <main>

0800f66e <LoopForever>:

LoopForever:
    b LoopForever
 800f66e:	e7fe      	b.n	800f66e <LoopForever>
   ldr   r0, =_estack
 800f670:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800f674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f678:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800f67c:	080270b0 	.word	0x080270b0
  ldr r2, =_sbss
 800f680:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800f684:	200034bc 	.word	0x200034bc

0800f688 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f688:	e7fe      	b.n	800f688 <ADC1_COMP_IRQHandler>
	...

0800f68c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f692:	1dfb      	adds	r3, r7, #7
 800f694:	2200      	movs	r2, #0
 800f696:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800f698:	4b0b      	ldr	r3, [pc, #44]	@ (800f6c8 <HAL_Init+0x3c>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c8 <HAL_Init+0x3c>)
 800f69e:	2140      	movs	r1, #64	@ 0x40
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f6a4:	2003      	movs	r0, #3
 800f6a6:	f000 f811 	bl	800f6cc <HAL_InitTick>
 800f6aa:	1e03      	subs	r3, r0, #0
 800f6ac:	d003      	beq.n	800f6b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800f6ae:	1dfb      	adds	r3, r7, #7
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	701a      	strb	r2, [r3, #0]
 800f6b4:	e001      	b.n	800f6ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f6b6:	f7fe fec3 	bl	800e440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f6ba:	1dfb      	adds	r3, r7, #7
 800f6bc:	781b      	ldrb	r3, [r3, #0]
}
 800f6be:	0018      	movs	r0, r3
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	b002      	add	sp, #8
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	46c0      	nop			@ (mov r8, r8)
 800f6c8:	40022000 	.word	0x40022000

0800f6cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f6cc:	b590      	push	{r4, r7, lr}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f6d4:	4b14      	ldr	r3, [pc, #80]	@ (800f728 <HAL_InitTick+0x5c>)
 800f6d6:	681c      	ldr	r4, [r3, #0]
 800f6d8:	4b14      	ldr	r3, [pc, #80]	@ (800f72c <HAL_InitTick+0x60>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	0019      	movs	r1, r3
 800f6de:	23fa      	movs	r3, #250	@ 0xfa
 800f6e0:	0098      	lsls	r0, r3, #2
 800f6e2:	f7f0 fd5f 	bl	80001a4 <__udivsi3>
 800f6e6:	0003      	movs	r3, r0
 800f6e8:	0019      	movs	r1, r3
 800f6ea:	0020      	movs	r0, r4
 800f6ec:	f7f0 fd5a 	bl	80001a4 <__udivsi3>
 800f6f0:	0003      	movs	r3, r0
 800f6f2:	0018      	movs	r0, r3
 800f6f4:	f000 fcfd 	bl	80100f2 <HAL_SYSTICK_Config>
 800f6f8:	1e03      	subs	r3, r0, #0
 800f6fa:	d001      	beq.n	800f700 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e00f      	b.n	800f720 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b03      	cmp	r3, #3
 800f704:	d80b      	bhi.n	800f71e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f706:	6879      	ldr	r1, [r7, #4]
 800f708:	2301      	movs	r3, #1
 800f70a:	425b      	negs	r3, r3
 800f70c:	2200      	movs	r2, #0
 800f70e:	0018      	movs	r0, r3
 800f710:	f000 fcc6 	bl	80100a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f714:	4b06      	ldr	r3, [pc, #24]	@ (800f730 <HAL_InitTick+0x64>)
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f71a:	2300      	movs	r3, #0
 800f71c:	e000      	b.n	800f720 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800f71e:	2301      	movs	r3, #1
}
 800f720:	0018      	movs	r0, r3
 800f722:	46bd      	mov	sp, r7
 800f724:	b003      	add	sp, #12
 800f726:	bd90      	pop	{r4, r7, pc}
 800f728:	200000d0 	.word	0x200000d0
 800f72c:	200000e4 	.word	0x200000e4
 800f730:	200000e0 	.word	0x200000e0

0800f734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f738:	4b05      	ldr	r3, [pc, #20]	@ (800f750 <HAL_IncTick+0x1c>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	001a      	movs	r2, r3
 800f73e:	4b05      	ldr	r3, [pc, #20]	@ (800f754 <HAL_IncTick+0x20>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	18d2      	adds	r2, r2, r3
 800f744:	4b03      	ldr	r3, [pc, #12]	@ (800f754 <HAL_IncTick+0x20>)
 800f746:	601a      	str	r2, [r3, #0]
}
 800f748:	46c0      	nop			@ (mov r8, r8)
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
 800f74e:	46c0      	nop			@ (mov r8, r8)
 800f750:	200000e4 	.word	0x200000e4
 800f754:	200020b8 	.word	0x200020b8

0800f758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	af00      	add	r7, sp, #0
  return uwTick;
 800f75c:	4b02      	ldr	r3, [pc, #8]	@ (800f768 <HAL_GetTick+0x10>)
 800f75e:	681b      	ldr	r3, [r3, #0]
}
 800f760:	0018      	movs	r0, r3
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	46c0      	nop			@ (mov r8, r8)
 800f768:	200020b8 	.word	0x200020b8

0800f76c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f774:	f7ff fff0 	bl	800f758 <HAL_GetTick>
 800f778:	0003      	movs	r3, r0
 800f77a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	3301      	adds	r3, #1
 800f784:	d005      	beq.n	800f792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f786:	4b0a      	ldr	r3, [pc, #40]	@ (800f7b0 <HAL_Delay+0x44>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	001a      	movs	r2, r3
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	189b      	adds	r3, r3, r2
 800f790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f792:	46c0      	nop			@ (mov r8, r8)
 800f794:	f7ff ffe0 	bl	800f758 <HAL_GetTick>
 800f798:	0002      	movs	r2, r0
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	1ad3      	subs	r3, r2, r3
 800f79e:	68fa      	ldr	r2, [r7, #12]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d8f7      	bhi.n	800f794 <HAL_Delay+0x28>
  {
  }
}
 800f7a4:	46c0      	nop			@ (mov r8, r8)
 800f7a6:	46c0      	nop			@ (mov r8, r8)
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	b004      	add	sp, #16
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	46c0      	nop			@ (mov r8, r8)
 800f7b0:	200000e4 	.word	0x200000e4

0800f7b4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800f7b8:	4b04      	ldr	r3, [pc, #16]	@ (800f7cc <HAL_SuspendTick+0x18>)
 800f7ba:	681a      	ldr	r2, [r3, #0]
 800f7bc:	4b03      	ldr	r3, [pc, #12]	@ (800f7cc <HAL_SuspendTick+0x18>)
 800f7be:	2102      	movs	r1, #2
 800f7c0:	438a      	bics	r2, r1
 800f7c2:	601a      	str	r2, [r3, #0]
}
 800f7c4:	46c0      	nop			@ (mov r8, r8)
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	46c0      	nop			@ (mov r8, r8)
 800f7cc:	e000e010 	.word	0xe000e010

0800f7d0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800f7d4:	4b04      	ldr	r3, [pc, #16]	@ (800f7e8 <HAL_ResumeTick+0x18>)
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	4b03      	ldr	r3, [pc, #12]	@ (800f7e8 <HAL_ResumeTick+0x18>)
 800f7da:	2102      	movs	r1, #2
 800f7dc:	430a      	orrs	r2, r1
 800f7de:	601a      	str	r2, [r3, #0]
}
 800f7e0:	46c0      	nop			@ (mov r8, r8)
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	46c0      	nop			@ (mov r8, r8)
 800f7e8:	e000e010 	.word	0xe000e010

0800f7ec <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800f7f0:	4b02      	ldr	r3, [pc, #8]	@ (800f7fc <HAL_GetUIDw0+0x10>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
}
 800f7f4:	0018      	movs	r0, r3
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	46c0      	nop			@ (mov r8, r8)
 800f7fc:	1ff80050 	.word	0x1ff80050

0800f800 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800f804:	4b02      	ldr	r3, [pc, #8]	@ (800f810 <HAL_GetUIDw1+0x10>)
 800f806:	681b      	ldr	r3, [r3, #0]
}
 800f808:	0018      	movs	r0, r3
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	46c0      	nop			@ (mov r8, r8)
 800f810:	1ff80054 	.word	0x1ff80054

0800f814 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800f818:	4b02      	ldr	r3, [pc, #8]	@ (800f824 <HAL_GetUIDw2+0x10>)
 800f81a:	681b      	ldr	r3, [r3, #0]
}
 800f81c:	0018      	movs	r0, r3
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	46c0      	nop			@ (mov r8, r8)
 800f824:	1ff80064 	.word	0x1ff80064

0800f828 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800f836:	2301      	movs	r3, #1
 800f838:	e159      	b.n	800faee <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10a      	bne.n	800f858 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2200      	movs	r2, #0
 800f846:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2250      	movs	r2, #80	@ 0x50
 800f84c:	2100      	movs	r1, #0
 800f84e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	0018      	movs	r0, r3
 800f854:	f7f8 f868 	bl	8007928 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f85c:	2210      	movs	r2, #16
 800f85e:	4013      	ands	r3, r2
 800f860:	2b10      	cmp	r3, #16
 800f862:	d005      	beq.n	800f870 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	2204      	movs	r2, #4
 800f86c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f86e:	d00b      	beq.n	800f888 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f874:	2210      	movs	r2, #16
 800f876:	431a      	orrs	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2250      	movs	r2, #80	@ 0x50
 800f880:	2100      	movs	r1, #0
 800f882:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f884:	2301      	movs	r3, #1
 800f886:	e132      	b.n	800faee <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f88c:	4a9a      	ldr	r2, [pc, #616]	@ (800faf8 <HAL_ADC_Init+0x2d0>)
 800f88e:	4013      	ands	r3, r2
 800f890:	2202      	movs	r2, #2
 800f892:	431a      	orrs	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	2203      	movs	r2, #3
 800f8a0:	4013      	ands	r3, r2
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d108      	bne.n	800f8b8 <HAL_ADC_Init+0x90>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	4013      	ands	r3, r2
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d101      	bne.n	800f8b8 <HAL_ADC_Init+0x90>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e000      	b.n	800f8ba <HAL_ADC_Init+0x92>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d149      	bne.n	800f952 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	23c0      	movs	r3, #192	@ 0xc0
 800f8c4:	061b      	lsls	r3, r3, #24
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d00b      	beq.n	800f8e2 <HAL_ADC_Init+0xba>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	685a      	ldr	r2, [r3, #4]
 800f8ce:	2380      	movs	r3, #128	@ 0x80
 800f8d0:	05db      	lsls	r3, r3, #23
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d005      	beq.n	800f8e2 <HAL_ADC_Init+0xba>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	685a      	ldr	r2, [r3, #4]
 800f8da:	2380      	movs	r3, #128	@ 0x80
 800f8dc:	061b      	lsls	r3, r3, #24
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d111      	bne.n	800f906 <HAL_ADC_Init+0xde>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	691a      	ldr	r2, [r3, #16]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	0092      	lsls	r2, r2, #2
 800f8ee:	0892      	lsrs	r2, r2, #2
 800f8f0:	611a      	str	r2, [r3, #16]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6919      	ldr	r1, [r3, #16]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	430a      	orrs	r2, r1
 800f902:	611a      	str	r2, [r3, #16]
 800f904:	e014      	b.n	800f930 <HAL_ADC_Init+0x108>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	691a      	ldr	r2, [r3, #16]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	0092      	lsls	r2, r2, #2
 800f912:	0892      	lsrs	r2, r2, #2
 800f914:	611a      	str	r2, [r3, #16]
 800f916:	4b79      	ldr	r3, [pc, #484]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	4b78      	ldr	r3, [pc, #480]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f91c:	4978      	ldr	r1, [pc, #480]	@ (800fb00 <HAL_ADC_Init+0x2d8>)
 800f91e:	400a      	ands	r2, r1
 800f920:	601a      	str	r2, [r3, #0]
 800f922:	4b76      	ldr	r3, [pc, #472]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f924:	6819      	ldr	r1, [r3, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	685a      	ldr	r2, [r3, #4]
 800f92a:	4b74      	ldr	r3, [pc, #464]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f92c:	430a      	orrs	r2, r1
 800f92e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68da      	ldr	r2, [r3, #12]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2118      	movs	r1, #24
 800f93c:	438a      	bics	r2, r1
 800f93e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	68d9      	ldr	r1, [r3, #12]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	689a      	ldr	r2, [r3, #8]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	430a      	orrs	r2, r1
 800f950:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f952:	4b6a      	ldr	r3, [pc, #424]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	4b69      	ldr	r3, [pc, #420]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f958:	496a      	ldr	r1, [pc, #424]	@ (800fb04 <HAL_ADC_Init+0x2dc>)
 800f95a:	400a      	ands	r2, r1
 800f95c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f95e:	4b67      	ldr	r3, [pc, #412]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f960:	6819      	ldr	r1, [r3, #0]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f966:	065a      	lsls	r2, r3, #25
 800f968:	4b64      	ldr	r3, [pc, #400]	@ (800fafc <HAL_ADC_Init+0x2d4>)
 800f96a:	430a      	orrs	r2, r1
 800f96c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	689a      	ldr	r2, [r3, #8]
 800f974:	2380      	movs	r3, #128	@ 0x80
 800f976:	055b      	lsls	r3, r3, #21
 800f978:	4013      	ands	r3, r2
 800f97a:	d108      	bne.n	800f98e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	689a      	ldr	r2, [r3, #8]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2180      	movs	r1, #128	@ 0x80
 800f988:	0549      	lsls	r1, r1, #21
 800f98a:	430a      	orrs	r2, r1
 800f98c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	68da      	ldr	r2, [r3, #12]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	495b      	ldr	r1, [pc, #364]	@ (800fb08 <HAL_ADC_Init+0x2e0>)
 800f99a:	400a      	ands	r2, r1
 800f99c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	68d9      	ldr	r1, [r3, #12]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	691b      	ldr	r3, [r3, #16]
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	d101      	bne.n	800f9b4 <HAL_ADC_Init+0x18c>
 800f9b0:	2304      	movs	r3, #4
 800f9b2:	e000      	b.n	800f9b6 <HAL_ADC_Init+0x18e>
 800f9b4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f9b6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2020      	movs	r0, #32
 800f9bc:	5c1b      	ldrb	r3, [r3, r0]
 800f9be:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f9c0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	202c      	movs	r0, #44	@ 0x2c
 800f9c6:	5c1b      	ldrb	r3, [r3, r0]
 800f9c8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f9ca:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f9d0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	699b      	ldr	r3, [r3, #24]
 800f9d6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f9d8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	69db      	ldr	r3, [r3, #28]
 800f9de:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f9e0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	430a      	orrs	r2, r1
 800f9e8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9ee:	23c2      	movs	r3, #194	@ 0xc2
 800f9f0:	33ff      	adds	r3, #255	@ 0xff
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d00b      	beq.n	800fa0e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	68d9      	ldr	r1, [r3, #12]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800fa04:	431a      	orrs	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2221      	movs	r2, #33	@ 0x21
 800fa12:	5c9b      	ldrb	r3, [r3, r2]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d11a      	bne.n	800fa4e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2220      	movs	r2, #32
 800fa1c:	5c9b      	ldrb	r3, [r3, r2]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d109      	bne.n	800fa36 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2180      	movs	r1, #128	@ 0x80
 800fa2e:	0249      	lsls	r1, r1, #9
 800fa30:	430a      	orrs	r2, r1
 800fa32:	60da      	str	r2, [r3, #12]
 800fa34:	e00b      	b.n	800fa4e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	431a      	orrs	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa46:	2201      	movs	r2, #1
 800fa48:	431a      	orrs	r2, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa52:	2b01      	cmp	r3, #1
 800fa54:	d11f      	bne.n	800fa96 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	691a      	ldr	r2, [r3, #16]
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	492a      	ldr	r1, [pc, #168]	@ (800fb0c <HAL_ADC_Init+0x2e4>)
 800fa62:	400a      	ands	r2, r1
 800fa64:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6919      	ldr	r1, [r3, #16]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800fa74:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800fa7a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	430a      	orrs	r2, r1
 800fa82:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	691a      	ldr	r2, [r3, #16]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	2101      	movs	r1, #1
 800fa90:	430a      	orrs	r2, r1
 800fa92:	611a      	str	r2, [r3, #16]
 800fa94:	e00e      	b.n	800fab4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	691b      	ldr	r3, [r3, #16]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	4013      	ands	r3, r2
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d107      	bne.n	800fab4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	691a      	ldr	r2, [r3, #16]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2101      	movs	r1, #1
 800fab0:	438a      	bics	r2, r1
 800fab2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	695a      	ldr	r2, [r3, #20]
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2107      	movs	r1, #7
 800fac0:	438a      	bics	r2, r1
 800fac2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6959      	ldr	r1, [r3, #20]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	430a      	orrs	r2, r1
 800fad4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fae0:	2203      	movs	r2, #3
 800fae2:	4393      	bics	r3, r2
 800fae4:	2201      	movs	r2, #1
 800fae6:	431a      	orrs	r2, r3
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	0018      	movs	r0, r3
 800faf0:	46bd      	mov	sp, r7
 800faf2:	b002      	add	sp, #8
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	46c0      	nop			@ (mov r8, r8)
 800faf8:	fffffefd 	.word	0xfffffefd
 800fafc:	40012708 	.word	0x40012708
 800fb00:	ffc3ffff 	.word	0xffc3ffff
 800fb04:	fdffffff 	.word	0xfdffffff
 800fb08:	fffe0219 	.word	0xfffe0219
 800fb0c:	fffffc03 	.word	0xfffffc03

0800fb10 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800fb10:	b590      	push	{r4, r7, lr}
 800fb12:	b085      	sub	sp, #20
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fb18:	230f      	movs	r3, #15
 800fb1a:	18fb      	adds	r3, r7, r3
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	689b      	ldr	r3, [r3, #8]
 800fb26:	2204      	movs	r2, #4
 800fb28:	4013      	ands	r3, r2
 800fb2a:	d138      	bne.n	800fb9e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2250      	movs	r2, #80	@ 0x50
 800fb30:	5c9b      	ldrb	r3, [r3, r2]
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d101      	bne.n	800fb3a <HAL_ADC_Start+0x2a>
 800fb36:	2302      	movs	r3, #2
 800fb38:	e038      	b.n	800fbac <HAL_ADC_Start+0x9c>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2250      	movs	r2, #80	@ 0x50
 800fb3e:	2101      	movs	r1, #1
 800fb40:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	69db      	ldr	r3, [r3, #28]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d007      	beq.n	800fb5a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800fb4a:	230f      	movs	r3, #15
 800fb4c:	18fc      	adds	r4, r7, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	0018      	movs	r0, r3
 800fb52:	f000 f95f 	bl	800fe14 <ADC_Enable>
 800fb56:	0003      	movs	r3, r0
 800fb58:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800fb5a:	230f      	movs	r3, #15
 800fb5c:	18fb      	adds	r3, r7, r3
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d120      	bne.n	800fba6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb68:	4a12      	ldr	r2, [pc, #72]	@ (800fbb4 <HAL_ADC_Start+0xa4>)
 800fb6a:	4013      	ands	r3, r2
 800fb6c:	2280      	movs	r2, #128	@ 0x80
 800fb6e:	0052      	lsls	r2, r2, #1
 800fb70:	431a      	orrs	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2250      	movs	r2, #80	@ 0x50
 800fb80:	2100      	movs	r1, #0
 800fb82:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	221c      	movs	r2, #28
 800fb8a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	689a      	ldr	r2, [r3, #8]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2104      	movs	r1, #4
 800fb98:	430a      	orrs	r2, r1
 800fb9a:	609a      	str	r2, [r3, #8]
 800fb9c:	e003      	b.n	800fba6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800fb9e:	230f      	movs	r3, #15
 800fba0:	18fb      	adds	r3, r7, r3
 800fba2:	2202      	movs	r2, #2
 800fba4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800fba6:	230f      	movs	r3, #15
 800fba8:	18fb      	adds	r3, r7, r3
 800fbaa:	781b      	ldrb	r3, [r3, #0]
}
 800fbac:	0018      	movs	r0, r3
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	b005      	add	sp, #20
 800fbb2:	bd90      	pop	{r4, r7, pc}
 800fbb4:	fffff0fe 	.word	0xfffff0fe

0800fbb8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	695b      	ldr	r3, [r3, #20]
 800fbce:	2b08      	cmp	r3, #8
 800fbd0:	d102      	bne.n	800fbd8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800fbd2:	2308      	movs	r3, #8
 800fbd4:	60fb      	str	r3, [r7, #12]
 800fbd6:	e014      	b.n	800fc02 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4013      	ands	r3, r2
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d10b      	bne.n	800fbfe <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbea:	2220      	movs	r2, #32
 800fbec:	431a      	orrs	r2, r3
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2250      	movs	r2, #80	@ 0x50
 800fbf6:	2100      	movs	r1, #0
 800fbf8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e072      	b.n	800fce4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800fbfe:	230c      	movs	r3, #12
 800fc00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800fc02:	f7ff fda9 	bl	800f758 <HAL_GetTick>
 800fc06:	0003      	movs	r3, r0
 800fc08:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fc0a:	e01f      	b.n	800fc4c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	d01c      	beq.n	800fc4c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d007      	beq.n	800fc28 <HAL_ADC_PollForConversion+0x70>
 800fc18:	f7ff fd9e 	bl	800f758 <HAL_GetTick>
 800fc1c:	0002      	movs	r2, r0
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	1ad3      	subs	r3, r2, r3
 800fc22:	683a      	ldr	r2, [r7, #0]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d211      	bcs.n	800fc4c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	4013      	ands	r3, r2
 800fc32:	d10b      	bne.n	800fc4c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc38:	2204      	movs	r2, #4
 800fc3a:	431a      	orrs	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2250      	movs	r2, #80	@ 0x50
 800fc44:	2100      	movs	r1, #0
 800fc46:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800fc48:	2303      	movs	r3, #3
 800fc4a:	e04b      	b.n	800fce4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	4013      	ands	r3, r2
 800fc56:	d0d9      	beq.n	800fc0c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc5c:	2280      	movs	r2, #128	@ 0x80
 800fc5e:	0092      	lsls	r2, r2, #2
 800fc60:	431a      	orrs	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	68da      	ldr	r2, [r3, #12]
 800fc6c:	23c0      	movs	r3, #192	@ 0xc0
 800fc6e:	011b      	lsls	r3, r3, #4
 800fc70:	4013      	ands	r3, r2
 800fc72:	d12e      	bne.n	800fcd2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2220      	movs	r2, #32
 800fc78:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d129      	bne.n	800fcd2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2208      	movs	r2, #8
 800fc86:	4013      	ands	r3, r2
 800fc88:	2b08      	cmp	r3, #8
 800fc8a:	d122      	bne.n	800fcd2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	2204      	movs	r2, #4
 800fc94:	4013      	ands	r3, r2
 800fc96:	d110      	bne.n	800fcba <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	210c      	movs	r1, #12
 800fca4:	438a      	bics	r2, r1
 800fca6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcac:	4a0f      	ldr	r2, [pc, #60]	@ (800fcec <HAL_ADC_PollForConversion+0x134>)
 800fcae:	4013      	ands	r3, r2
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	431a      	orrs	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	655a      	str	r2, [r3, #84]	@ 0x54
 800fcb8:	e00b      	b.n	800fcd2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcbe:	2220      	movs	r2, #32
 800fcc0:	431a      	orrs	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fcca:	2201      	movs	r2, #1
 800fccc:	431a      	orrs	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	699b      	ldr	r3, [r3, #24]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d103      	bne.n	800fce2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	220c      	movs	r2, #12
 800fce0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	0018      	movs	r0, r3
 800fce6:	46bd      	mov	sp, r7
 800fce8:	b004      	add	sp, #16
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	fffffefe 	.word	0xfffffefe

0800fcf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800fcfe:	0018      	movs	r0, r3
 800fd00:	46bd      	mov	sp, r7
 800fd02:	b002      	add	sp, #8
 800fd04:	bd80      	pop	{r7, pc}
	...

0800fd08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2250      	movs	r2, #80	@ 0x50
 800fd16:	5c9b      	ldrb	r3, [r3, r2]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d101      	bne.n	800fd20 <HAL_ADC_ConfigChannel+0x18>
 800fd1c:	2302      	movs	r3, #2
 800fd1e:	e06c      	b.n	800fdfa <HAL_ADC_ConfigChannel+0xf2>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2250      	movs	r2, #80	@ 0x50
 800fd24:	2101      	movs	r1, #1
 800fd26:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	689b      	ldr	r3, [r3, #8]
 800fd2e:	2204      	movs	r2, #4
 800fd30:	4013      	ands	r3, r2
 800fd32:	d00b      	beq.n	800fd4c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd38:	2220      	movs	r2, #32
 800fd3a:	431a      	orrs	r2, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2250      	movs	r2, #80	@ 0x50
 800fd44:	2100      	movs	r1, #0
 800fd46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e056      	b.n	800fdfa <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	4a2c      	ldr	r2, [pc, #176]	@ (800fe04 <HAL_ADC_ConfigChannel+0xfc>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d028      	beq.n	800fda8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	035b      	lsls	r3, r3, #13
 800fd62:	0b5a      	lsrs	r2, r3, #13
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	430a      	orrs	r2, r1
 800fd6a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	681a      	ldr	r2, [r3, #0]
 800fd70:	2380      	movs	r3, #128	@ 0x80
 800fd72:	02db      	lsls	r3, r3, #11
 800fd74:	4013      	ands	r3, r2
 800fd76:	d009      	beq.n	800fd8c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800fd78:	4b23      	ldr	r3, [pc, #140]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	4b22      	ldr	r3, [pc, #136]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fd7e:	2180      	movs	r1, #128	@ 0x80
 800fd80:	0409      	lsls	r1, r1, #16
 800fd82:	430a      	orrs	r2, r1
 800fd84:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800fd86:	200a      	movs	r0, #10
 800fd88:	f000 f8ac 	bl	800fee4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	681a      	ldr	r2, [r3, #0]
 800fd90:	2380      	movs	r3, #128	@ 0x80
 800fd92:	029b      	lsls	r3, r3, #10
 800fd94:	4013      	ands	r3, r2
 800fd96:	d02b      	beq.n	800fdf0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800fd98:	4b1b      	ldr	r3, [pc, #108]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	4b1a      	ldr	r3, [pc, #104]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fd9e:	2180      	movs	r1, #128	@ 0x80
 800fda0:	03c9      	lsls	r1, r1, #15
 800fda2:	430a      	orrs	r2, r1
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	e023      	b.n	800fdf0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	035b      	lsls	r3, r3, #13
 800fdb4:	0b5b      	lsrs	r3, r3, #13
 800fdb6:	43d9      	mvns	r1, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	400a      	ands	r2, r1
 800fdbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	2380      	movs	r3, #128	@ 0x80
 800fdc6:	02db      	lsls	r3, r3, #11
 800fdc8:	4013      	ands	r3, r2
 800fdca:	d005      	beq.n	800fdd8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800fdcc:	4b0e      	ldr	r3, [pc, #56]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	4b0d      	ldr	r3, [pc, #52]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fdd2:	490e      	ldr	r1, [pc, #56]	@ (800fe0c <HAL_ADC_ConfigChannel+0x104>)
 800fdd4:	400a      	ands	r2, r1
 800fdd6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	2380      	movs	r3, #128	@ 0x80
 800fdde:	029b      	lsls	r3, r3, #10
 800fde0:	4013      	ands	r3, r2
 800fde2:	d005      	beq.n	800fdf0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800fde4:	4b08      	ldr	r3, [pc, #32]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	4b07      	ldr	r3, [pc, #28]	@ (800fe08 <HAL_ADC_ConfigChannel+0x100>)
 800fdea:	4909      	ldr	r1, [pc, #36]	@ (800fe10 <HAL_ADC_ConfigChannel+0x108>)
 800fdec:	400a      	ands	r2, r1
 800fdee:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2250      	movs	r2, #80	@ 0x50
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800fdf8:	2300      	movs	r3, #0
}
 800fdfa:	0018      	movs	r0, r3
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	b002      	add	sp, #8
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	46c0      	nop			@ (mov r8, r8)
 800fe04:	00001001 	.word	0x00001001
 800fe08:	40012708 	.word	0x40012708
 800fe0c:	ff7fffff 	.word	0xff7fffff
 800fe10:	ffbfffff 	.word	0xffbfffff

0800fe14 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	2203      	movs	r2, #3
 800fe28:	4013      	ands	r3, r2
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d108      	bne.n	800fe40 <ADC_Enable+0x2c>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2201      	movs	r2, #1
 800fe36:	4013      	ands	r3, r2
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d101      	bne.n	800fe40 <ADC_Enable+0x2c>
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e000      	b.n	800fe42 <ADC_Enable+0x2e>
 800fe40:	2300      	movs	r3, #0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d146      	bne.n	800fed4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	4a24      	ldr	r2, [pc, #144]	@ (800fee0 <ADC_Enable+0xcc>)
 800fe4e:	4013      	ands	r3, r2
 800fe50:	d00d      	beq.n	800fe6e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe56:	2210      	movs	r2, #16
 800fe58:	431a      	orrs	r2, r3
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe62:	2201      	movs	r2, #1
 800fe64:	431a      	orrs	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e033      	b.n	800fed6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	689a      	ldr	r2, [r3, #8]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2101      	movs	r1, #1
 800fe7a:	430a      	orrs	r2, r1
 800fe7c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800fe7e:	2001      	movs	r0, #1
 800fe80:	f000 f830 	bl	800fee4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800fe84:	f7ff fc68 	bl	800f758 <HAL_GetTick>
 800fe88:	0003      	movs	r3, r0
 800fe8a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fe8c:	e01b      	b.n	800fec6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800fe8e:	f7ff fc63 	bl	800f758 <HAL_GetTick>
 800fe92:	0002      	movs	r2, r0
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	2b0a      	cmp	r3, #10
 800fe9a:	d914      	bls.n	800fec6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2201      	movs	r2, #1
 800fea4:	4013      	ands	r3, r2
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d00d      	beq.n	800fec6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feae:	2210      	movs	r2, #16
 800feb0:	431a      	orrs	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800feba:	2201      	movs	r2, #1
 800febc:	431a      	orrs	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800fec2:	2301      	movs	r3, #1
 800fec4:	e007      	b.n	800fed6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2201      	movs	r2, #1
 800fece:	4013      	ands	r3, r2
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d1dc      	bne.n	800fe8e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	0018      	movs	r0, r3
 800fed8:	46bd      	mov	sp, r7
 800feda:	b004      	add	sp, #16
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	46c0      	nop			@ (mov r8, r8)
 800fee0:	80000017 	.word	0x80000017

0800fee4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800feec:	4b0b      	ldr	r3, [pc, #44]	@ (800ff1c <ADC_DelayMicroSecond+0x38>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	490b      	ldr	r1, [pc, #44]	@ (800ff20 <ADC_DelayMicroSecond+0x3c>)
 800fef2:	0018      	movs	r0, r3
 800fef4:	f7f0 f956 	bl	80001a4 <__udivsi3>
 800fef8:	0003      	movs	r3, r0
 800fefa:	001a      	movs	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	4353      	muls	r3, r2
 800ff00:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800ff02:	e002      	b.n	800ff0a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	3b01      	subs	r3, #1
 800ff08:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1f9      	bne.n	800ff04 <ADC_DelayMicroSecond+0x20>
  }
}
 800ff10:	46c0      	nop			@ (mov r8, r8)
 800ff12:	46c0      	nop			@ (mov r8, r8)
 800ff14:	46bd      	mov	sp, r7
 800ff16:	b004      	add	sp, #16
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	46c0      	nop			@ (mov r8, r8)
 800ff1c:	200000d0 	.word	0x200000d0
 800ff20:	000f4240 	.word	0x000f4240

0800ff24 <__NVIC_EnableIRQ>:
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	0002      	movs	r2, r0
 800ff2c:	1dfb      	adds	r3, r7, #7
 800ff2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ff30:	1dfb      	adds	r3, r7, #7
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff36:	d809      	bhi.n	800ff4c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ff38:	1dfb      	adds	r3, r7, #7
 800ff3a:	781b      	ldrb	r3, [r3, #0]
 800ff3c:	001a      	movs	r2, r3
 800ff3e:	231f      	movs	r3, #31
 800ff40:	401a      	ands	r2, r3
 800ff42:	4b04      	ldr	r3, [pc, #16]	@ (800ff54 <__NVIC_EnableIRQ+0x30>)
 800ff44:	2101      	movs	r1, #1
 800ff46:	4091      	lsls	r1, r2
 800ff48:	000a      	movs	r2, r1
 800ff4a:	601a      	str	r2, [r3, #0]
}
 800ff4c:	46c0      	nop			@ (mov r8, r8)
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	b002      	add	sp, #8
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	e000e100 	.word	0xe000e100

0800ff58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ff58:	b590      	push	{r4, r7, lr}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	0002      	movs	r2, r0
 800ff60:	6039      	str	r1, [r7, #0]
 800ff62:	1dfb      	adds	r3, r7, #7
 800ff64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ff66:	1dfb      	adds	r3, r7, #7
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff6c:	d828      	bhi.n	800ffc0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ff6e:	4a2f      	ldr	r2, [pc, #188]	@ (801002c <__NVIC_SetPriority+0xd4>)
 800ff70:	1dfb      	adds	r3, r7, #7
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	b25b      	sxtb	r3, r3
 800ff76:	089b      	lsrs	r3, r3, #2
 800ff78:	33c0      	adds	r3, #192	@ 0xc0
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	589b      	ldr	r3, [r3, r2]
 800ff7e:	1dfa      	adds	r2, r7, #7
 800ff80:	7812      	ldrb	r2, [r2, #0]
 800ff82:	0011      	movs	r1, r2
 800ff84:	2203      	movs	r2, #3
 800ff86:	400a      	ands	r2, r1
 800ff88:	00d2      	lsls	r2, r2, #3
 800ff8a:	21ff      	movs	r1, #255	@ 0xff
 800ff8c:	4091      	lsls	r1, r2
 800ff8e:	000a      	movs	r2, r1
 800ff90:	43d2      	mvns	r2, r2
 800ff92:	401a      	ands	r2, r3
 800ff94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	019b      	lsls	r3, r3, #6
 800ff9a:	22ff      	movs	r2, #255	@ 0xff
 800ff9c:	401a      	ands	r2, r3
 800ff9e:	1dfb      	adds	r3, r7, #7
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	0018      	movs	r0, r3
 800ffa4:	2303      	movs	r3, #3
 800ffa6:	4003      	ands	r3, r0
 800ffa8:	00db      	lsls	r3, r3, #3
 800ffaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ffac:	481f      	ldr	r0, [pc, #124]	@ (801002c <__NVIC_SetPriority+0xd4>)
 800ffae:	1dfb      	adds	r3, r7, #7
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	b25b      	sxtb	r3, r3
 800ffb4:	089b      	lsrs	r3, r3, #2
 800ffb6:	430a      	orrs	r2, r1
 800ffb8:	33c0      	adds	r3, #192	@ 0xc0
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800ffbe:	e031      	b.n	8010024 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ffc0:	4a1b      	ldr	r2, [pc, #108]	@ (8010030 <__NVIC_SetPriority+0xd8>)
 800ffc2:	1dfb      	adds	r3, r7, #7
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	0019      	movs	r1, r3
 800ffc8:	230f      	movs	r3, #15
 800ffca:	400b      	ands	r3, r1
 800ffcc:	3b08      	subs	r3, #8
 800ffce:	089b      	lsrs	r3, r3, #2
 800ffd0:	3306      	adds	r3, #6
 800ffd2:	009b      	lsls	r3, r3, #2
 800ffd4:	18d3      	adds	r3, r2, r3
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	1dfa      	adds	r2, r7, #7
 800ffdc:	7812      	ldrb	r2, [r2, #0]
 800ffde:	0011      	movs	r1, r2
 800ffe0:	2203      	movs	r2, #3
 800ffe2:	400a      	ands	r2, r1
 800ffe4:	00d2      	lsls	r2, r2, #3
 800ffe6:	21ff      	movs	r1, #255	@ 0xff
 800ffe8:	4091      	lsls	r1, r2
 800ffea:	000a      	movs	r2, r1
 800ffec:	43d2      	mvns	r2, r2
 800ffee:	401a      	ands	r2, r3
 800fff0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	019b      	lsls	r3, r3, #6
 800fff6:	22ff      	movs	r2, #255	@ 0xff
 800fff8:	401a      	ands	r2, r3
 800fffa:	1dfb      	adds	r3, r7, #7
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	0018      	movs	r0, r3
 8010000:	2303      	movs	r3, #3
 8010002:	4003      	ands	r3, r0
 8010004:	00db      	lsls	r3, r3, #3
 8010006:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010008:	4809      	ldr	r0, [pc, #36]	@ (8010030 <__NVIC_SetPriority+0xd8>)
 801000a:	1dfb      	adds	r3, r7, #7
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	001c      	movs	r4, r3
 8010010:	230f      	movs	r3, #15
 8010012:	4023      	ands	r3, r4
 8010014:	3b08      	subs	r3, #8
 8010016:	089b      	lsrs	r3, r3, #2
 8010018:	430a      	orrs	r2, r1
 801001a:	3306      	adds	r3, #6
 801001c:	009b      	lsls	r3, r3, #2
 801001e:	18c3      	adds	r3, r0, r3
 8010020:	3304      	adds	r3, #4
 8010022:	601a      	str	r2, [r3, #0]
}
 8010024:	46c0      	nop			@ (mov r8, r8)
 8010026:	46bd      	mov	sp, r7
 8010028:	b003      	add	sp, #12
 801002a:	bd90      	pop	{r4, r7, pc}
 801002c:	e000e100 	.word	0xe000e100
 8010030:	e000ed00 	.word	0xe000ed00

08010034 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010038:	f3bf 8f4f 	dsb	sy
}
 801003c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801003e:	4b04      	ldr	r3, [pc, #16]	@ (8010050 <__NVIC_SystemReset+0x1c>)
 8010040:	4a04      	ldr	r2, [pc, #16]	@ (8010054 <__NVIC_SystemReset+0x20>)
 8010042:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8010044:	f3bf 8f4f 	dsb	sy
}
 8010048:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801004a:	46c0      	nop			@ (mov r8, r8)
 801004c:	e7fd      	b.n	801004a <__NVIC_SystemReset+0x16>
 801004e:	46c0      	nop			@ (mov r8, r8)
 8010050:	e000ed00 	.word	0xe000ed00
 8010054:	05fa0004 	.word	0x05fa0004

08010058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	1e5a      	subs	r2, r3, #1
 8010064:	2380      	movs	r3, #128	@ 0x80
 8010066:	045b      	lsls	r3, r3, #17
 8010068:	429a      	cmp	r2, r3
 801006a:	d301      	bcc.n	8010070 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 801006c:	2301      	movs	r3, #1
 801006e:	e010      	b.n	8010092 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010070:	4b0a      	ldr	r3, [pc, #40]	@ (801009c <SysTick_Config+0x44>)
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	3a01      	subs	r2, #1
 8010076:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010078:	2301      	movs	r3, #1
 801007a:	425b      	negs	r3, r3
 801007c:	2103      	movs	r1, #3
 801007e:	0018      	movs	r0, r3
 8010080:	f7ff ff6a 	bl	800ff58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010084:	4b05      	ldr	r3, [pc, #20]	@ (801009c <SysTick_Config+0x44>)
 8010086:	2200      	movs	r2, #0
 8010088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801008a:	4b04      	ldr	r3, [pc, #16]	@ (801009c <SysTick_Config+0x44>)
 801008c:	2207      	movs	r2, #7
 801008e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010090:	2300      	movs	r3, #0
}
 8010092:	0018      	movs	r0, r3
 8010094:	46bd      	mov	sp, r7
 8010096:	b002      	add	sp, #8
 8010098:	bd80      	pop	{r7, pc}
 801009a:	46c0      	nop			@ (mov r8, r8)
 801009c:	e000e010 	.word	0xe000e010

080100a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60b9      	str	r1, [r7, #8]
 80100a8:	607a      	str	r2, [r7, #4]
 80100aa:	210f      	movs	r1, #15
 80100ac:	187b      	adds	r3, r7, r1
 80100ae:	1c02      	adds	r2, r0, #0
 80100b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80100b2:	68ba      	ldr	r2, [r7, #8]
 80100b4:	187b      	adds	r3, r7, r1
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	b25b      	sxtb	r3, r3
 80100ba:	0011      	movs	r1, r2
 80100bc:	0018      	movs	r0, r3
 80100be:	f7ff ff4b 	bl	800ff58 <__NVIC_SetPriority>
}
 80100c2:	46c0      	nop			@ (mov r8, r8)
 80100c4:	46bd      	mov	sp, r7
 80100c6:	b004      	add	sp, #16
 80100c8:	bd80      	pop	{r7, pc}

080100ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b082      	sub	sp, #8
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	0002      	movs	r2, r0
 80100d2:	1dfb      	adds	r3, r7, #7
 80100d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80100d6:	1dfb      	adds	r3, r7, #7
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	b25b      	sxtb	r3, r3
 80100dc:	0018      	movs	r0, r3
 80100de:	f7ff ff21 	bl	800ff24 <__NVIC_EnableIRQ>
}
 80100e2:	46c0      	nop			@ (mov r8, r8)
 80100e4:	46bd      	mov	sp, r7
 80100e6:	b002      	add	sp, #8
 80100e8:	bd80      	pop	{r7, pc}

080100ea <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80100ee:	f7ff ffa1 	bl	8010034 <__NVIC_SystemReset>

080100f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b082      	sub	sp, #8
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	0018      	movs	r0, r3
 80100fe:	f7ff ffab 	bl	8010058 <SysTick_Config>
 8010102:	0003      	movs	r3, r0
}
 8010104:	0018      	movs	r0, r3
 8010106:	46bd      	mov	sp, r7
 8010108:	b002      	add	sp, #8
 801010a:	bd80      	pop	{r7, pc}

0801010c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d101      	bne.n	801011e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e061      	b.n	80101e2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a32      	ldr	r2, [pc, #200]	@ (80101ec <HAL_DMA_Init+0xe0>)
 8010124:	4694      	mov	ip, r2
 8010126:	4463      	add	r3, ip
 8010128:	2114      	movs	r1, #20
 801012a:	0018      	movs	r0, r3
 801012c:	f7f0 f83a 	bl	80001a4 <__udivsi3>
 8010130:	0003      	movs	r3, r0
 8010132:	009a      	lsls	r2, r3, #2
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a2d      	ldr	r2, [pc, #180]	@ (80101f0 <HAL_DMA_Init+0xe4>)
 801013c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2225      	movs	r2, #37	@ 0x25
 8010142:	2102      	movs	r1, #2
 8010144:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	4a28      	ldr	r2, [pc, #160]	@ (80101f4 <HAL_DMA_Init+0xe8>)
 8010152:	4013      	ands	r3, r2
 8010154:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801015e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	691b      	ldr	r3, [r3, #16]
 8010164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801016a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	699b      	ldr	r3, [r3, #24]
 8010170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010176:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6a1b      	ldr	r3, [r3, #32]
 801017c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801017e:	68fa      	ldr	r2, [r7, #12]
 8010180:	4313      	orrs	r3, r2
 8010182:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	689a      	ldr	r2, [r3, #8]
 8010190:	2380      	movs	r3, #128	@ 0x80
 8010192:	01db      	lsls	r3, r3, #7
 8010194:	429a      	cmp	r2, r3
 8010196:	d018      	beq.n	80101ca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8010198:	4b17      	ldr	r3, [pc, #92]	@ (80101f8 <HAL_DMA_Init+0xec>)
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101a0:	211c      	movs	r1, #28
 80101a2:	400b      	ands	r3, r1
 80101a4:	210f      	movs	r1, #15
 80101a6:	4099      	lsls	r1, r3
 80101a8:	000b      	movs	r3, r1
 80101aa:	43d9      	mvns	r1, r3
 80101ac:	4b12      	ldr	r3, [pc, #72]	@ (80101f8 <HAL_DMA_Init+0xec>)
 80101ae:	400a      	ands	r2, r1
 80101b0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80101b2:	4b11      	ldr	r3, [pc, #68]	@ (80101f8 <HAL_DMA_Init+0xec>)
 80101b4:	6819      	ldr	r1, [r3, #0]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685a      	ldr	r2, [r3, #4]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101be:	201c      	movs	r0, #28
 80101c0:	4003      	ands	r3, r0
 80101c2:	409a      	lsls	r2, r3
 80101c4:	4b0c      	ldr	r3, [pc, #48]	@ (80101f8 <HAL_DMA_Init+0xec>)
 80101c6:	430a      	orrs	r2, r1
 80101c8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2225      	movs	r2, #37	@ 0x25
 80101d4:	2101      	movs	r1, #1
 80101d6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2224      	movs	r2, #36	@ 0x24
 80101dc:	2100      	movs	r1, #0
 80101de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80101e0:	2300      	movs	r3, #0
}
 80101e2:	0018      	movs	r0, r3
 80101e4:	46bd      	mov	sp, r7
 80101e6:	b004      	add	sp, #16
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	46c0      	nop			@ (mov r8, r8)
 80101ec:	bffdfff8 	.word	0xbffdfff8
 80101f0:	40020000 	.word	0x40020000
 80101f4:	ffff800f 	.word	0xffff800f
 80101f8:	400200a8 	.word	0x400200a8

080101fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b086      	sub	sp, #24
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
 8010208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801020a:	2317      	movs	r3, #23
 801020c:	18fb      	adds	r3, r7, r3
 801020e:	2200      	movs	r2, #0
 8010210:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2224      	movs	r2, #36	@ 0x24
 8010216:	5c9b      	ldrb	r3, [r3, r2]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d101      	bne.n	8010220 <HAL_DMA_Start_IT+0x24>
 801021c:	2302      	movs	r3, #2
 801021e:	e04f      	b.n	80102c0 <HAL_DMA_Start_IT+0xc4>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2224      	movs	r2, #36	@ 0x24
 8010224:	2101      	movs	r1, #1
 8010226:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	2225      	movs	r2, #37	@ 0x25
 801022c:	5c9b      	ldrb	r3, [r3, r2]
 801022e:	b2db      	uxtb	r3, r3
 8010230:	2b01      	cmp	r3, #1
 8010232:	d13a      	bne.n	80102aa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2225      	movs	r2, #37	@ 0x25
 8010238:	2102      	movs	r1, #2
 801023a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	2101      	movs	r1, #1
 801024e:	438a      	bics	r2, r1
 8010250:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	68b9      	ldr	r1, [r7, #8]
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f000 f976 	bl	801054a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010262:	2b00      	cmp	r3, #0
 8010264:	d008      	beq.n	8010278 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	210e      	movs	r1, #14
 8010272:	430a      	orrs	r2, r1
 8010274:	601a      	str	r2, [r3, #0]
 8010276:	e00f      	b.n	8010298 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2104      	movs	r1, #4
 8010284:	438a      	bics	r2, r1
 8010286:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	681a      	ldr	r2, [r3, #0]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	210a      	movs	r1, #10
 8010294:	430a      	orrs	r2, r1
 8010296:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2101      	movs	r1, #1
 80102a4:	430a      	orrs	r2, r1
 80102a6:	601a      	str	r2, [r3, #0]
 80102a8:	e007      	b.n	80102ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2224      	movs	r2, #36	@ 0x24
 80102ae:	2100      	movs	r1, #0
 80102b0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80102b2:	2317      	movs	r3, #23
 80102b4:	18fb      	adds	r3, r7, r3
 80102b6:	2202      	movs	r2, #2
 80102b8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80102ba:	2317      	movs	r3, #23
 80102bc:	18fb      	adds	r3, r7, r3
 80102be:	781b      	ldrb	r3, [r3, #0]
}
 80102c0:	0018      	movs	r0, r3
 80102c2:	46bd      	mov	sp, r7
 80102c4:	b006      	add	sp, #24
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80102d0:	230f      	movs	r3, #15
 80102d2:	18fb      	adds	r3, r7, r3
 80102d4:	2200      	movs	r2, #0
 80102d6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2225      	movs	r2, #37	@ 0x25
 80102dc:	5c9b      	ldrb	r3, [r3, r2]
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d008      	beq.n	80102f6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2204      	movs	r2, #4
 80102e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2224      	movs	r2, #36	@ 0x24
 80102ee:	2100      	movs	r1, #0
 80102f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80102f2:	2301      	movs	r3, #1
 80102f4:	e024      	b.n	8010340 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	210e      	movs	r1, #14
 8010302:	438a      	bics	r2, r1
 8010304:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2101      	movs	r1, #1
 8010312:	438a      	bics	r2, r1
 8010314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801031a:	221c      	movs	r2, #28
 801031c:	401a      	ands	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010322:	2101      	movs	r1, #1
 8010324:	4091      	lsls	r1, r2
 8010326:	000a      	movs	r2, r1
 8010328:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2225      	movs	r2, #37	@ 0x25
 801032e:	2101      	movs	r1, #1
 8010330:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2224      	movs	r2, #36	@ 0x24
 8010336:	2100      	movs	r1, #0
 8010338:	5499      	strb	r1, [r3, r2]

    return status;
 801033a:	230f      	movs	r3, #15
 801033c:	18fb      	adds	r3, r7, r3
 801033e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010340:	0018      	movs	r0, r3
 8010342:	46bd      	mov	sp, r7
 8010344:	b004      	add	sp, #16
 8010346:	bd80      	pop	{r7, pc}

08010348 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010350:	210f      	movs	r1, #15
 8010352:	187b      	adds	r3, r7, r1
 8010354:	2200      	movs	r2, #0
 8010356:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2225      	movs	r2, #37	@ 0x25
 801035c:	5c9b      	ldrb	r3, [r3, r2]
 801035e:	b2db      	uxtb	r3, r3
 8010360:	2b02      	cmp	r3, #2
 8010362:	d006      	beq.n	8010372 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2204      	movs	r2, #4
 8010368:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801036a:	187b      	adds	r3, r7, r1
 801036c:	2201      	movs	r2, #1
 801036e:	701a      	strb	r2, [r3, #0]
 8010370:	e02a      	b.n	80103c8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	210e      	movs	r1, #14
 801037e:	438a      	bics	r2, r1
 8010380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2101      	movs	r1, #1
 801038e:	438a      	bics	r2, r1
 8010390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010396:	221c      	movs	r2, #28
 8010398:	401a      	ands	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801039e:	2101      	movs	r1, #1
 80103a0:	4091      	lsls	r1, r2
 80103a2:	000a      	movs	r2, r1
 80103a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2225      	movs	r2, #37	@ 0x25
 80103aa:	2101      	movs	r1, #1
 80103ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2224      	movs	r2, #36	@ 0x24
 80103b2:	2100      	movs	r1, #0
 80103b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d004      	beq.n	80103c8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	0010      	movs	r0, r2
 80103c6:	4798      	blx	r3
    }
  }
  return status;
 80103c8:	230f      	movs	r3, #15
 80103ca:	18fb      	adds	r3, r7, r3
 80103cc:	781b      	ldrb	r3, [r3, #0]
}
 80103ce:	0018      	movs	r0, r3
 80103d0:	46bd      	mov	sp, r7
 80103d2:	b004      	add	sp, #16
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103f2:	221c      	movs	r2, #28
 80103f4:	4013      	ands	r3, r2
 80103f6:	2204      	movs	r2, #4
 80103f8:	409a      	lsls	r2, r3
 80103fa:	0013      	movs	r3, r2
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	4013      	ands	r3, r2
 8010400:	d026      	beq.n	8010450 <HAL_DMA_IRQHandler+0x7a>
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	2204      	movs	r2, #4
 8010406:	4013      	ands	r3, r2
 8010408:	d022      	beq.n	8010450 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2220      	movs	r2, #32
 8010412:	4013      	ands	r3, r2
 8010414:	d107      	bne.n	8010426 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2104      	movs	r1, #4
 8010422:	438a      	bics	r2, r1
 8010424:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801042a:	221c      	movs	r2, #28
 801042c:	401a      	ands	r2, r3
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010432:	2104      	movs	r1, #4
 8010434:	4091      	lsls	r1, r2
 8010436:	000a      	movs	r2, r1
 8010438:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801043e:	2b00      	cmp	r3, #0
 8010440:	d100      	bne.n	8010444 <HAL_DMA_IRQHandler+0x6e>
 8010442:	e071      	b.n	8010528 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	0010      	movs	r0, r2
 801044c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801044e:	e06b      	b.n	8010528 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010454:	221c      	movs	r2, #28
 8010456:	4013      	ands	r3, r2
 8010458:	2202      	movs	r2, #2
 801045a:	409a      	lsls	r2, r3
 801045c:	0013      	movs	r3, r2
 801045e:	68fa      	ldr	r2, [r7, #12]
 8010460:	4013      	ands	r3, r2
 8010462:	d02d      	beq.n	80104c0 <HAL_DMA_IRQHandler+0xea>
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	2202      	movs	r2, #2
 8010468:	4013      	ands	r3, r2
 801046a:	d029      	beq.n	80104c0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2220      	movs	r2, #32
 8010474:	4013      	ands	r3, r2
 8010476:	d10b      	bne.n	8010490 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	210a      	movs	r1, #10
 8010484:	438a      	bics	r2, r1
 8010486:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2225      	movs	r2, #37	@ 0x25
 801048c:	2101      	movs	r1, #1
 801048e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010494:	221c      	movs	r2, #28
 8010496:	401a      	ands	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801049c:	2102      	movs	r1, #2
 801049e:	4091      	lsls	r1, r2
 80104a0:	000a      	movs	r2, r1
 80104a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2224      	movs	r2, #36	@ 0x24
 80104a8:	2100      	movs	r1, #0
 80104aa:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d039      	beq.n	8010528 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104b8:	687a      	ldr	r2, [r7, #4]
 80104ba:	0010      	movs	r0, r2
 80104bc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80104be:	e033      	b.n	8010528 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104c4:	221c      	movs	r2, #28
 80104c6:	4013      	ands	r3, r2
 80104c8:	2208      	movs	r2, #8
 80104ca:	409a      	lsls	r2, r3
 80104cc:	0013      	movs	r3, r2
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	4013      	ands	r3, r2
 80104d2:	d02a      	beq.n	801052a <HAL_DMA_IRQHandler+0x154>
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2208      	movs	r2, #8
 80104d8:	4013      	ands	r3, r2
 80104da:	d026      	beq.n	801052a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	210e      	movs	r1, #14
 80104e8:	438a      	bics	r2, r1
 80104ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104f0:	221c      	movs	r2, #28
 80104f2:	401a      	ands	r2, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104f8:	2101      	movs	r1, #1
 80104fa:	4091      	lsls	r1, r2
 80104fc:	000a      	movs	r2, r1
 80104fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2225      	movs	r2, #37	@ 0x25
 801050a:	2101      	movs	r1, #1
 801050c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2224      	movs	r2, #36	@ 0x24
 8010512:	2100      	movs	r1, #0
 8010514:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801051a:	2b00      	cmp	r3, #0
 801051c:	d005      	beq.n	801052a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010522:	687a      	ldr	r2, [r7, #4]
 8010524:	0010      	movs	r0, r2
 8010526:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8010528:	46c0      	nop			@ (mov r8, r8)
 801052a:	46c0      	nop			@ (mov r8, r8)
}
 801052c:	46bd      	mov	sp, r7
 801052e:	b004      	add	sp, #16
 8010530:	bd80      	pop	{r7, pc}

08010532 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b082      	sub	sp, #8
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2225      	movs	r2, #37	@ 0x25
 801053e:	5c9b      	ldrb	r3, [r3, r2]
 8010540:	b2db      	uxtb	r3, r3
}
 8010542:	0018      	movs	r0, r3
 8010544:	46bd      	mov	sp, r7
 8010546:	b002      	add	sp, #8
 8010548:	bd80      	pop	{r7, pc}

0801054a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801054a:	b580      	push	{r7, lr}
 801054c:	b084      	sub	sp, #16
 801054e:	af00      	add	r7, sp, #0
 8010550:	60f8      	str	r0, [r7, #12]
 8010552:	60b9      	str	r1, [r7, #8]
 8010554:	607a      	str	r2, [r7, #4]
 8010556:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801055c:	221c      	movs	r2, #28
 801055e:	401a      	ands	r2, r3
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010564:	2101      	movs	r1, #1
 8010566:	4091      	lsls	r1, r2
 8010568:	000a      	movs	r2, r1
 801056a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	2b10      	cmp	r3, #16
 801057a:	d108      	bne.n	801058e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68ba      	ldr	r2, [r7, #8]
 801058a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801058c:	e007      	b.n	801059e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68ba      	ldr	r2, [r7, #8]
 8010594:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	60da      	str	r2, [r3, #12]
}
 801059e:	46c0      	nop			@ (mov r8, r8)
 80105a0:	46bd      	mov	sp, r7
 80105a2:	b004      	add	sp, #16
 80105a4:	bd80      	pop	{r7, pc}
	...

080105a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80105b0:	f7ff f8d2 	bl	800f758 <HAL_GetTick>
 80105b4:	0003      	movs	r3, r0
 80105b6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80105b8:	e00f      	b.n	80105da <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3301      	adds	r3, #1
 80105be:	d00c      	beq.n	80105da <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d007      	beq.n	80105d6 <FLASH_WaitForLastOperation+0x2e>
 80105c6:	f7ff f8c7 	bl	800f758 <HAL_GetTick>
 80105ca:	0002      	movs	r2, r0
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d201      	bcs.n	80105da <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80105d6:	2303      	movs	r3, #3
 80105d8:	e052      	b.n	8010680 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80105da:	4b2b      	ldr	r3, [pc, #172]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 80105dc:	699b      	ldr	r3, [r3, #24]
 80105de:	2201      	movs	r2, #1
 80105e0:	4013      	ands	r3, r2
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d0e9      	beq.n	80105ba <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80105e6:	4b28      	ldr	r3, [pc, #160]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 80105e8:	699b      	ldr	r3, [r3, #24]
 80105ea:	2202      	movs	r2, #2
 80105ec:	4013      	ands	r3, r2
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	d102      	bne.n	80105f8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80105f2:	4b25      	ldr	r3, [pc, #148]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 80105f4:	2202      	movs	r2, #2
 80105f6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80105f8:	4b23      	ldr	r3, [pc, #140]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 80105fa:	699a      	ldr	r2, [r3, #24]
 80105fc:	2380      	movs	r3, #128	@ 0x80
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	401a      	ands	r2, r3
 8010602:	2380      	movs	r3, #128	@ 0x80
 8010604:	005b      	lsls	r3, r3, #1
 8010606:	429a      	cmp	r2, r3
 8010608:	d035      	beq.n	8010676 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801060a:	4b1f      	ldr	r3, [pc, #124]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 801060c:	699a      	ldr	r2, [r3, #24]
 801060e:	2380      	movs	r3, #128	@ 0x80
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010614:	2380      	movs	r3, #128	@ 0x80
 8010616:	009b      	lsls	r3, r3, #2
 8010618:	429a      	cmp	r2, r3
 801061a:	d02c      	beq.n	8010676 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801061c:	4b1a      	ldr	r3, [pc, #104]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 801061e:	699a      	ldr	r2, [r3, #24]
 8010620:	2380      	movs	r3, #128	@ 0x80
 8010622:	00db      	lsls	r3, r3, #3
 8010624:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8010626:	2380      	movs	r3, #128	@ 0x80
 8010628:	00db      	lsls	r3, r3, #3
 801062a:	429a      	cmp	r2, r3
 801062c:	d023      	beq.n	8010676 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801062e:	4b16      	ldr	r3, [pc, #88]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 8010630:	699a      	ldr	r2, [r3, #24]
 8010632:	2380      	movs	r3, #128	@ 0x80
 8010634:	011b      	lsls	r3, r3, #4
 8010636:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8010638:	2380      	movs	r3, #128	@ 0x80
 801063a:	011b      	lsls	r3, r3, #4
 801063c:	429a      	cmp	r2, r3
 801063e:	d01a      	beq.n	8010676 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8010640:	4b11      	ldr	r3, [pc, #68]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 8010642:	699a      	ldr	r2, [r3, #24]
 8010644:	2380      	movs	r3, #128	@ 0x80
 8010646:	019b      	lsls	r3, r3, #6
 8010648:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801064a:	2380      	movs	r3, #128	@ 0x80
 801064c:	019b      	lsls	r3, r3, #6
 801064e:	429a      	cmp	r2, r3
 8010650:	d011      	beq.n	8010676 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8010652:	4b0d      	ldr	r3, [pc, #52]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 8010654:	699a      	ldr	r2, [r3, #24]
 8010656:	2380      	movs	r3, #128	@ 0x80
 8010658:	029b      	lsls	r3, r3, #10
 801065a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 801065c:	2380      	movs	r3, #128	@ 0x80
 801065e:	029b      	lsls	r3, r3, #10
 8010660:	429a      	cmp	r2, r3
 8010662:	d008      	beq.n	8010676 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8010664:	4b08      	ldr	r3, [pc, #32]	@ (8010688 <FLASH_WaitForLastOperation+0xe0>)
 8010666:	699a      	ldr	r2, [r3, #24]
 8010668:	2380      	movs	r3, #128	@ 0x80
 801066a:	025b      	lsls	r3, r3, #9
 801066c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 801066e:	2380      	movs	r3, #128	@ 0x80
 8010670:	025b      	lsls	r3, r3, #9
 8010672:	429a      	cmp	r2, r3
 8010674:	d103      	bne.n	801067e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8010676:	f000 f809 	bl	801068c <FLASH_SetErrorCode>
    return HAL_ERROR;
 801067a:	2301      	movs	r3, #1
 801067c:	e000      	b.n	8010680 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 801067e:	2300      	movs	r3, #0
}
 8010680:	0018      	movs	r0, r3
 8010682:	46bd      	mov	sp, r7
 8010684:	b004      	add	sp, #16
 8010686:	bd80      	pop	{r7, pc}
 8010688:	40022000 	.word	0x40022000

0801068c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8010692:	2300      	movs	r3, #0
 8010694:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8010696:	4b49      	ldr	r3, [pc, #292]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 8010698:	699a      	ldr	r2, [r3, #24]
 801069a:	2380      	movs	r3, #128	@ 0x80
 801069c:	005b      	lsls	r3, r3, #1
 801069e:	401a      	ands	r2, r3
 80106a0:	2380      	movs	r3, #128	@ 0x80
 80106a2:	005b      	lsls	r3, r3, #1
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d10a      	bne.n	80106be <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80106a8:	4b45      	ldr	r3, [pc, #276]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 80106aa:	695b      	ldr	r3, [r3, #20]
 80106ac:	2202      	movs	r2, #2
 80106ae:	431a      	orrs	r2, r3
 80106b0:	4b43      	ldr	r3, [pc, #268]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 80106b2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2280      	movs	r2, #128	@ 0x80
 80106b8:	0052      	lsls	r2, r2, #1
 80106ba:	4313      	orrs	r3, r2
 80106bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80106be:	4b3f      	ldr	r3, [pc, #252]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 80106c0:	699a      	ldr	r2, [r3, #24]
 80106c2:	2380      	movs	r3, #128	@ 0x80
 80106c4:	009b      	lsls	r3, r3, #2
 80106c6:	401a      	ands	r2, r3
 80106c8:	2380      	movs	r3, #128	@ 0x80
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d10a      	bne.n	80106e6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80106d0:	4b3b      	ldr	r3, [pc, #236]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	2201      	movs	r2, #1
 80106d6:	431a      	orrs	r2, r3
 80106d8:	4b39      	ldr	r3, [pc, #228]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 80106da:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2280      	movs	r2, #128	@ 0x80
 80106e0:	0092      	lsls	r2, r2, #2
 80106e2:	4313      	orrs	r3, r2
 80106e4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80106e6:	4b35      	ldr	r3, [pc, #212]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 80106e8:	699a      	ldr	r2, [r3, #24]
 80106ea:	2380      	movs	r3, #128	@ 0x80
 80106ec:	00db      	lsls	r3, r3, #3
 80106ee:	401a      	ands	r2, r3
 80106f0:	2380      	movs	r3, #128	@ 0x80
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d10a      	bne.n	801070e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80106f8:	4b31      	ldr	r3, [pc, #196]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 80106fa:	695b      	ldr	r3, [r3, #20]
 80106fc:	2208      	movs	r2, #8
 80106fe:	431a      	orrs	r2, r3
 8010700:	4b2f      	ldr	r3, [pc, #188]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 8010702:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2280      	movs	r2, #128	@ 0x80
 8010708:	00d2      	lsls	r2, r2, #3
 801070a:	4313      	orrs	r3, r2
 801070c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 801070e:	4b2b      	ldr	r3, [pc, #172]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 8010710:	699a      	ldr	r2, [r3, #24]
 8010712:	2380      	movs	r3, #128	@ 0x80
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	401a      	ands	r2, r3
 8010718:	2380      	movs	r3, #128	@ 0x80
 801071a:	011b      	lsls	r3, r3, #4
 801071c:	429a      	cmp	r2, r3
 801071e:	d10a      	bne.n	8010736 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8010720:	4b27      	ldr	r3, [pc, #156]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 8010722:	695b      	ldr	r3, [r3, #20]
 8010724:	2204      	movs	r2, #4
 8010726:	431a      	orrs	r2, r3
 8010728:	4b25      	ldr	r3, [pc, #148]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 801072a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2280      	movs	r2, #128	@ 0x80
 8010730:	0112      	lsls	r2, r2, #4
 8010732:	4313      	orrs	r3, r2
 8010734:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8010736:	4b21      	ldr	r3, [pc, #132]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 8010738:	699a      	ldr	r2, [r3, #24]
 801073a:	2380      	movs	r3, #128	@ 0x80
 801073c:	019b      	lsls	r3, r3, #6
 801073e:	401a      	ands	r2, r3
 8010740:	2380      	movs	r3, #128	@ 0x80
 8010742:	019b      	lsls	r3, r3, #6
 8010744:	429a      	cmp	r2, r3
 8010746:	d10a      	bne.n	801075e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8010748:	4b1d      	ldr	r3, [pc, #116]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 801074a:	695b      	ldr	r3, [r3, #20]
 801074c:	2210      	movs	r2, #16
 801074e:	431a      	orrs	r2, r3
 8010750:	4b1b      	ldr	r3, [pc, #108]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 8010752:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2280      	movs	r2, #128	@ 0x80
 8010758:	0192      	lsls	r2, r2, #6
 801075a:	4313      	orrs	r3, r2
 801075c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 801075e:	4b17      	ldr	r3, [pc, #92]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 8010760:	699a      	ldr	r2, [r3, #24]
 8010762:	2380      	movs	r3, #128	@ 0x80
 8010764:	029b      	lsls	r3, r3, #10
 8010766:	401a      	ands	r2, r3
 8010768:	2380      	movs	r3, #128	@ 0x80
 801076a:	029b      	lsls	r3, r3, #10
 801076c:	429a      	cmp	r2, r3
 801076e:	d109      	bne.n	8010784 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8010770:	4b13      	ldr	r3, [pc, #76]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 8010772:	695b      	ldr	r3, [r3, #20]
 8010774:	2220      	movs	r2, #32
 8010776:	431a      	orrs	r2, r3
 8010778:	4b11      	ldr	r3, [pc, #68]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 801077a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2220      	movs	r2, #32
 8010780:	4313      	orrs	r3, r2
 8010782:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8010784:	4b0d      	ldr	r3, [pc, #52]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 8010786:	699a      	ldr	r2, [r3, #24]
 8010788:	2380      	movs	r3, #128	@ 0x80
 801078a:	025b      	lsls	r3, r3, #9
 801078c:	401a      	ands	r2, r3
 801078e:	2380      	movs	r3, #128	@ 0x80
 8010790:	025b      	lsls	r3, r3, #9
 8010792:	429a      	cmp	r2, r3
 8010794:	d10a      	bne.n	80107ac <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8010796:	4b0a      	ldr	r3, [pc, #40]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 8010798:	695b      	ldr	r3, [r3, #20]
 801079a:	2240      	movs	r2, #64	@ 0x40
 801079c:	431a      	orrs	r2, r3
 801079e:	4b08      	ldr	r3, [pc, #32]	@ (80107c0 <FLASH_SetErrorCode+0x134>)
 80107a0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2280      	movs	r2, #128	@ 0x80
 80107a6:	0252      	lsls	r2, r2, #9
 80107a8:	4313      	orrs	r3, r2
 80107aa:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80107ac:	4b03      	ldr	r3, [pc, #12]	@ (80107bc <FLASH_SetErrorCode+0x130>)
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	619a      	str	r2, [r3, #24]
}  
 80107b2:	46c0      	nop			@ (mov r8, r8)
 80107b4:	46bd      	mov	sp, r7
 80107b6:	b002      	add	sp, #8
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	46c0      	nop			@ (mov r8, r8)
 80107bc:	40022000 	.word	0x40022000
 80107c0:	200020bc 	.word	0x200020bc

080107c4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80107ca:	4b12      	ldr	r3, [pc, #72]	@ (8010814 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	2201      	movs	r2, #1
 80107d0:	4013      	ands	r3, r2
 80107d2:	d019      	beq.n	8010808 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107d4:	f3ef 8310 	mrs	r3, PRIMASK
 80107d8:	607b      	str	r3, [r7, #4]
  return(result);
 80107da:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 80107dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80107de:	b672      	cpsid	i
}
 80107e0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 80107e2:	4b0c      	ldr	r3, [pc, #48]	@ (8010814 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80107e4:	4a0c      	ldr	r2, [pc, #48]	@ (8010818 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 80107e6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80107e8:	4b0a      	ldr	r3, [pc, #40]	@ (8010814 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80107ea:	4a0c      	ldr	r2, [pc, #48]	@ (801081c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 80107ec:	60da      	str	r2, [r3, #12]
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	f383 8810 	msr	PRIMASK, r3
}
 80107f8:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80107fa:	4b06      	ldr	r3, [pc, #24]	@ (8010814 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	2201      	movs	r2, #1
 8010800:	4013      	ands	r3, r2
 8010802:	d001      	beq.n	8010808 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8010804:	2301      	movs	r3, #1
 8010806:	e000      	b.n	801080a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8010808:	2300      	movs	r3, #0
}
 801080a:	0018      	movs	r0, r3
 801080c:	46bd      	mov	sp, r7
 801080e:	b004      	add	sp, #16
 8010810:	bd80      	pop	{r7, pc}
 8010812:	46c0      	nop			@ (mov r8, r8)
 8010814:	40022000 	.word	0x40022000
 8010818:	89abcdef 	.word	0x89abcdef
 801081c:	02030405 	.word	0x02030405

08010820 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8010824:	4b04      	ldr	r3, [pc, #16]	@ (8010838 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8010826:	685a      	ldr	r2, [r3, #4]
 8010828:	4b03      	ldr	r3, [pc, #12]	@ (8010838 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801082a:	2101      	movs	r1, #1
 801082c:	430a      	orrs	r2, r1
 801082e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	0018      	movs	r0, r3
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	40022000 	.word	0x40022000

0801083c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 801083c:	b5b0      	push	{r4, r5, r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010844:	250f      	movs	r5, #15
 8010846:	197b      	adds	r3, r7, r5
 8010848:	2200      	movs	r2, #0
 801084a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801084c:	197c      	adds	r4, r7, r5
 801084e:	4b0f      	ldr	r3, [pc, #60]	@ (801088c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010850:	0018      	movs	r0, r3
 8010852:	f7ff fea9 	bl	80105a8 <FLASH_WaitForLastOperation>
 8010856:	0003      	movs	r3, r0
 8010858:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801085a:	0029      	movs	r1, r5
 801085c:	187b      	adds	r3, r7, r1
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10c      	bne.n	801087e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010864:	4b0a      	ldr	r3, [pc, #40]	@ (8010890 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8010866:	2200      	movs	r2, #0
 8010868:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2200      	movs	r2, #0
 801086e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010870:	187c      	adds	r4, r7, r1
 8010872:	4b06      	ldr	r3, [pc, #24]	@ (801088c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010874:	0018      	movs	r0, r3
 8010876:	f7ff fe97 	bl	80105a8 <FLASH_WaitForLastOperation>
 801087a:	0003      	movs	r3, r0
 801087c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 801087e:	230f      	movs	r3, #15
 8010880:	18fb      	adds	r3, r7, r3
 8010882:	781b      	ldrb	r3, [r3, #0]
}  
 8010884:	0018      	movs	r0, r3
 8010886:	46bd      	mov	sp, r7
 8010888:	b004      	add	sp, #16
 801088a:	bdb0      	pop	{r4, r5, r7, pc}
 801088c:	0000c350 	.word	0x0000c350
 8010890:	200020bc 	.word	0x200020bc

08010894 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8010894:	b5b0      	push	{r4, r5, r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80108a0:	2317      	movs	r3, #23
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	2201      	movs	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80108a8:	4b24      	ldr	r3, [pc, #144]	@ (801093c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80108aa:	7c1b      	ldrb	r3, [r3, #16]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d101      	bne.n	80108b4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80108b0:	2302      	movs	r3, #2
 80108b2:	e03e      	b.n	8010932 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80108b4:	4b21      	ldr	r3, [pc, #132]	@ (801093c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80108b6:	2201      	movs	r2, #1
 80108b8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80108ba:	2517      	movs	r5, #23
 80108bc:	197c      	adds	r4, r7, r5
 80108be:	4b20      	ldr	r3, [pc, #128]	@ (8010940 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80108c0:	0018      	movs	r0, r3
 80108c2:	f7ff fe71 	bl	80105a8 <FLASH_WaitForLastOperation>
 80108c6:	0003      	movs	r3, r0
 80108c8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80108ca:	197b      	adds	r3, r7, r5
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d129      	bne.n	8010926 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80108d2:	4b1a      	ldr	r3, [pc, #104]	@ (801093c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d103      	bne.n	80108e6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	e013      	b.n	801090e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d104      	bne.n	80108f6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	b292      	uxth	r2, r2
 80108f2:	801a      	strh	r2, [r3, #0]
 80108f4:	e00b      	b.n	801090e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d104      	bne.n	8010906 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	b2d2      	uxtb	r2, r2
 8010902:	701a      	strb	r2, [r3, #0]
 8010904:	e003      	b.n	801090e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8010906:	2317      	movs	r3, #23
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	2201      	movs	r2, #1
 801090c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 801090e:	2217      	movs	r2, #23
 8010910:	18bb      	adds	r3, r7, r2
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d106      	bne.n	8010926 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010918:	18bc      	adds	r4, r7, r2
 801091a:	4b09      	ldr	r3, [pc, #36]	@ (8010940 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 801091c:	0018      	movs	r0, r3
 801091e:	f7ff fe43 	bl	80105a8 <FLASH_WaitForLastOperation>
 8010922:	0003      	movs	r3, r0
 8010924:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010926:	4b05      	ldr	r3, [pc, #20]	@ (801093c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8010928:	2200      	movs	r2, #0
 801092a:	741a      	strb	r2, [r3, #16]

  return status;
 801092c:	2317      	movs	r3, #23
 801092e:	18fb      	adds	r3, r7, r3
 8010930:	781b      	ldrb	r3, [r3, #0]
}
 8010932:	0018      	movs	r0, r3
 8010934:	46bd      	mov	sp, r7
 8010936:	b006      	add	sp, #24
 8010938:	bdb0      	pop	{r4, r5, r7, pc}
 801093a:	46c0      	nop			@ (mov r8, r8)
 801093c:	200020bc 	.word	0x200020bc
 8010940:	0000c350 	.word	0x0000c350

08010944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b086      	sub	sp, #24
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801094e:	2300      	movs	r3, #0
 8010950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010952:	2300      	movs	r3, #0
 8010954:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8010956:	2300      	movs	r3, #0
 8010958:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801095a:	e155      	b.n	8010c08 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2101      	movs	r1, #1
 8010962:	697a      	ldr	r2, [r7, #20]
 8010964:	4091      	lsls	r1, r2
 8010966:	000a      	movs	r2, r1
 8010968:	4013      	ands	r3, r2
 801096a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d100      	bne.n	8010974 <HAL_GPIO_Init+0x30>
 8010972:	e146      	b.n	8010c02 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	2203      	movs	r2, #3
 801097a:	4013      	ands	r3, r2
 801097c:	2b01      	cmp	r3, #1
 801097e:	d005      	beq.n	801098c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	2203      	movs	r2, #3
 8010986:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010988:	2b02      	cmp	r3, #2
 801098a:	d130      	bne.n	80109ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	689b      	ldr	r3, [r3, #8]
 8010990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	2203      	movs	r2, #3
 8010998:	409a      	lsls	r2, r3
 801099a:	0013      	movs	r3, r2
 801099c:	43da      	mvns	r2, r3
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	4013      	ands	r3, r2
 80109a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	68da      	ldr	r2, [r3, #12]
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	409a      	lsls	r2, r3
 80109ae:	0013      	movs	r3, r2
 80109b0:	693a      	ldr	r2, [r7, #16]
 80109b2:	4313      	orrs	r3, r2
 80109b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	693a      	ldr	r2, [r7, #16]
 80109ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	685b      	ldr	r3, [r3, #4]
 80109c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80109c2:	2201      	movs	r2, #1
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	409a      	lsls	r2, r3
 80109c8:	0013      	movs	r3, r2
 80109ca:	43da      	mvns	r2, r3
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	4013      	ands	r3, r2
 80109d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	091b      	lsrs	r3, r3, #4
 80109d8:	2201      	movs	r2, #1
 80109da:	401a      	ands	r2, r3
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	409a      	lsls	r2, r3
 80109e0:	0013      	movs	r3, r2
 80109e2:	693a      	ldr	r2, [r7, #16]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	693a      	ldr	r2, [r7, #16]
 80109ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	2203      	movs	r2, #3
 80109f4:	4013      	ands	r3, r2
 80109f6:	2b03      	cmp	r3, #3
 80109f8:	d017      	beq.n	8010a2a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	2203      	movs	r2, #3
 8010a06:	409a      	lsls	r2, r3
 8010a08:	0013      	movs	r3, r2
 8010a0a:	43da      	mvns	r2, r3
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	4013      	ands	r3, r2
 8010a10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	689a      	ldr	r2, [r3, #8]
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	409a      	lsls	r2, r3
 8010a1c:	0013      	movs	r3, r2
 8010a1e:	693a      	ldr	r2, [r7, #16]
 8010a20:	4313      	orrs	r3, r2
 8010a22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	693a      	ldr	r2, [r7, #16]
 8010a28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	2203      	movs	r2, #3
 8010a30:	4013      	ands	r3, r2
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	d123      	bne.n	8010a7e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010a36:	697b      	ldr	r3, [r7, #20]
 8010a38:	08da      	lsrs	r2, r3, #3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	3208      	adds	r2, #8
 8010a3e:	0092      	lsls	r2, r2, #2
 8010a40:	58d3      	ldr	r3, [r2, r3]
 8010a42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	2207      	movs	r2, #7
 8010a48:	4013      	ands	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	220f      	movs	r2, #15
 8010a4e:	409a      	lsls	r2, r3
 8010a50:	0013      	movs	r3, r2
 8010a52:	43da      	mvns	r2, r3
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	4013      	ands	r3, r2
 8010a58:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	691a      	ldr	r2, [r3, #16]
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	2107      	movs	r1, #7
 8010a62:	400b      	ands	r3, r1
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	409a      	lsls	r2, r3
 8010a68:	0013      	movs	r3, r2
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	08da      	lsrs	r2, r3, #3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	3208      	adds	r2, #8
 8010a78:	0092      	lsls	r2, r2, #2
 8010a7a:	6939      	ldr	r1, [r7, #16]
 8010a7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	005b      	lsls	r3, r3, #1
 8010a88:	2203      	movs	r2, #3
 8010a8a:	409a      	lsls	r2, r3
 8010a8c:	0013      	movs	r3, r2
 8010a8e:	43da      	mvns	r2, r3
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	4013      	ands	r3, r2
 8010a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	2203      	movs	r2, #3
 8010a9c:	401a      	ands	r2, r3
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	005b      	lsls	r3, r3, #1
 8010aa2:	409a      	lsls	r2, r3
 8010aa4:	0013      	movs	r3, r2
 8010aa6:	693a      	ldr	r2, [r7, #16]
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	693a      	ldr	r2, [r7, #16]
 8010ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	685a      	ldr	r2, [r3, #4]
 8010ab6:	23c0      	movs	r3, #192	@ 0xc0
 8010ab8:	029b      	lsls	r3, r3, #10
 8010aba:	4013      	ands	r3, r2
 8010abc:	d100      	bne.n	8010ac0 <HAL_GPIO_Init+0x17c>
 8010abe:	e0a0      	b.n	8010c02 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ac0:	4b57      	ldr	r3, [pc, #348]	@ (8010c20 <HAL_GPIO_Init+0x2dc>)
 8010ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010ac4:	4b56      	ldr	r3, [pc, #344]	@ (8010c20 <HAL_GPIO_Init+0x2dc>)
 8010ac6:	2101      	movs	r1, #1
 8010ac8:	430a      	orrs	r2, r1
 8010aca:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010acc:	4a55      	ldr	r2, [pc, #340]	@ (8010c24 <HAL_GPIO_Init+0x2e0>)
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	089b      	lsrs	r3, r3, #2
 8010ad2:	3302      	adds	r3, #2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	589b      	ldr	r3, [r3, r2]
 8010ad8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	2203      	movs	r2, #3
 8010ade:	4013      	ands	r3, r2
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	220f      	movs	r2, #15
 8010ae4:	409a      	lsls	r2, r3
 8010ae6:	0013      	movs	r3, r2
 8010ae8:	43da      	mvns	r2, r3
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	4013      	ands	r3, r2
 8010aee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	23a0      	movs	r3, #160	@ 0xa0
 8010af4:	05db      	lsls	r3, r3, #23
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d01f      	beq.n	8010b3a <HAL_GPIO_Init+0x1f6>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a4a      	ldr	r2, [pc, #296]	@ (8010c28 <HAL_GPIO_Init+0x2e4>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d019      	beq.n	8010b36 <HAL_GPIO_Init+0x1f2>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a49      	ldr	r2, [pc, #292]	@ (8010c2c <HAL_GPIO_Init+0x2e8>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d013      	beq.n	8010b32 <HAL_GPIO_Init+0x1ee>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a48      	ldr	r2, [pc, #288]	@ (8010c30 <HAL_GPIO_Init+0x2ec>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d00d      	beq.n	8010b2e <HAL_GPIO_Init+0x1ea>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	4a47      	ldr	r2, [pc, #284]	@ (8010c34 <HAL_GPIO_Init+0x2f0>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d007      	beq.n	8010b2a <HAL_GPIO_Init+0x1e6>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4a46      	ldr	r2, [pc, #280]	@ (8010c38 <HAL_GPIO_Init+0x2f4>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d101      	bne.n	8010b26 <HAL_GPIO_Init+0x1e2>
 8010b22:	2305      	movs	r3, #5
 8010b24:	e00a      	b.n	8010b3c <HAL_GPIO_Init+0x1f8>
 8010b26:	2306      	movs	r3, #6
 8010b28:	e008      	b.n	8010b3c <HAL_GPIO_Init+0x1f8>
 8010b2a:	2304      	movs	r3, #4
 8010b2c:	e006      	b.n	8010b3c <HAL_GPIO_Init+0x1f8>
 8010b2e:	2303      	movs	r3, #3
 8010b30:	e004      	b.n	8010b3c <HAL_GPIO_Init+0x1f8>
 8010b32:	2302      	movs	r3, #2
 8010b34:	e002      	b.n	8010b3c <HAL_GPIO_Init+0x1f8>
 8010b36:	2301      	movs	r3, #1
 8010b38:	e000      	b.n	8010b3c <HAL_GPIO_Init+0x1f8>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	697a      	ldr	r2, [r7, #20]
 8010b3e:	2103      	movs	r1, #3
 8010b40:	400a      	ands	r2, r1
 8010b42:	0092      	lsls	r2, r2, #2
 8010b44:	4093      	lsls	r3, r2
 8010b46:	693a      	ldr	r2, [r7, #16]
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010b4c:	4935      	ldr	r1, [pc, #212]	@ (8010c24 <HAL_GPIO_Init+0x2e0>)
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	089b      	lsrs	r3, r3, #2
 8010b52:	3302      	adds	r3, #2
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	693a      	ldr	r2, [r7, #16]
 8010b58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010b5a:	4b38      	ldr	r3, [pc, #224]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010b5c:	689b      	ldr	r3, [r3, #8]
 8010b5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	43da      	mvns	r2, r3
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	4013      	ands	r3, r2
 8010b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	685a      	ldr	r2, [r3, #4]
 8010b6e:	2380      	movs	r3, #128	@ 0x80
 8010b70:	035b      	lsls	r3, r3, #13
 8010b72:	4013      	ands	r3, r2
 8010b74:	d003      	beq.n	8010b7e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8010b76:	693a      	ldr	r2, [r7, #16]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8010b84:	4b2d      	ldr	r3, [pc, #180]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	43da      	mvns	r2, r3
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	4013      	ands	r3, r2
 8010b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	685a      	ldr	r2, [r3, #4]
 8010b98:	2380      	movs	r3, #128	@ 0x80
 8010b9a:	039b      	lsls	r3, r3, #14
 8010b9c:	4013      	ands	r3, r2
 8010b9e:	d003      	beq.n	8010ba8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8010ba0:	693a      	ldr	r2, [r7, #16]
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010ba8:	4b24      	ldr	r3, [pc, #144]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010baa:	693a      	ldr	r2, [r7, #16]
 8010bac:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8010bae:	4b23      	ldr	r3, [pc, #140]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	43da      	mvns	r2, r3
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	4013      	ands	r3, r2
 8010bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	2380      	movs	r3, #128	@ 0x80
 8010bc4:	029b      	lsls	r3, r3, #10
 8010bc6:	4013      	ands	r3, r2
 8010bc8:	d003      	beq.n	8010bd2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010bca:	693a      	ldr	r2, [r7, #16]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8010bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010bd8:	4b18      	ldr	r3, [pc, #96]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	43da      	mvns	r2, r3
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	4013      	ands	r3, r2
 8010be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	2380      	movs	r3, #128	@ 0x80
 8010bee:	025b      	lsls	r3, r3, #9
 8010bf0:	4013      	ands	r3, r2
 8010bf2:	d003      	beq.n	8010bfc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8010c3c <HAL_GPIO_Init+0x2f8>)
 8010bfe:	693a      	ldr	r2, [r7, #16]
 8010c00:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	3301      	adds	r3, #1
 8010c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	40da      	lsrs	r2, r3
 8010c10:	1e13      	subs	r3, r2, #0
 8010c12:	d000      	beq.n	8010c16 <HAL_GPIO_Init+0x2d2>
 8010c14:	e6a2      	b.n	801095c <HAL_GPIO_Init+0x18>
  }
}
 8010c16:	46c0      	nop			@ (mov r8, r8)
 8010c18:	46c0      	nop			@ (mov r8, r8)
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	b006      	add	sp, #24
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	40021000 	.word	0x40021000
 8010c24:	40010000 	.word	0x40010000
 8010c28:	50000400 	.word	0x50000400
 8010c2c:	50000800 	.word	0x50000800
 8010c30:	50000c00 	.word	0x50000c00
 8010c34:	50001000 	.word	0x50001000
 8010c38:	50001c00 	.word	0x50001c00
 8010c3c:	40010400 	.word	0x40010400

08010c40 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	000a      	movs	r2, r1
 8010c4a:	1cbb      	adds	r3, r7, #2
 8010c4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	1cba      	adds	r2, r7, #2
 8010c54:	8812      	ldrh	r2, [r2, #0]
 8010c56:	4013      	ands	r3, r2
 8010c58:	d004      	beq.n	8010c64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8010c5a:	230f      	movs	r3, #15
 8010c5c:	18fb      	adds	r3, r7, r3
 8010c5e:	2201      	movs	r2, #1
 8010c60:	701a      	strb	r2, [r3, #0]
 8010c62:	e003      	b.n	8010c6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010c64:	230f      	movs	r3, #15
 8010c66:	18fb      	adds	r3, r7, r3
 8010c68:	2200      	movs	r2, #0
 8010c6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010c6c:	230f      	movs	r3, #15
 8010c6e:	18fb      	adds	r3, r7, r3
 8010c70:	781b      	ldrb	r3, [r3, #0]
}
 8010c72:	0018      	movs	r0, r3
 8010c74:	46bd      	mov	sp, r7
 8010c76:	b004      	add	sp, #16
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b082      	sub	sp, #8
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
 8010c82:	0008      	movs	r0, r1
 8010c84:	0011      	movs	r1, r2
 8010c86:	1cbb      	adds	r3, r7, #2
 8010c88:	1c02      	adds	r2, r0, #0
 8010c8a:	801a      	strh	r2, [r3, #0]
 8010c8c:	1c7b      	adds	r3, r7, #1
 8010c8e:	1c0a      	adds	r2, r1, #0
 8010c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010c92:	1c7b      	adds	r3, r7, #1
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d004      	beq.n	8010ca4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010c9a:	1cbb      	adds	r3, r7, #2
 8010c9c:	881a      	ldrh	r2, [r3, #0]
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8010ca2:	e003      	b.n	8010cac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8010ca4:	1cbb      	adds	r3, r7, #2
 8010ca6:	881a      	ldrh	r2, [r3, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010cac:	46c0      	nop			@ (mov r8, r8)
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	b002      	add	sp, #8
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	0002      	movs	r2, r0
 8010cbc:	1dbb      	adds	r3, r7, #6
 8010cbe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010cc0:	4b09      	ldr	r3, [pc, #36]	@ (8010ce8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	1dba      	adds	r2, r7, #6
 8010cc6:	8812      	ldrh	r2, [r2, #0]
 8010cc8:	4013      	ands	r3, r2
 8010cca:	d008      	beq.n	8010cde <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010ccc:	4b06      	ldr	r3, [pc, #24]	@ (8010ce8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010cce:	1dba      	adds	r2, r7, #6
 8010cd0:	8812      	ldrh	r2, [r2, #0]
 8010cd2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010cd4:	1dbb      	adds	r3, r7, #6
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	0018      	movs	r0, r3
 8010cda:	f7f7 ff8d 	bl	8008bf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8010cde:	46c0      	nop			@ (mov r8, r8)
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	b002      	add	sp, #8
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	46c0      	nop			@ (mov r8, r8)
 8010ce8:	40010400 	.word	0x40010400

08010cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d101      	bne.n	8010cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e082      	b.n	8010e04 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2241      	movs	r2, #65	@ 0x41
 8010d02:	5c9b      	ldrb	r3, [r3, r2]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d107      	bne.n	8010d1a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2240      	movs	r2, #64	@ 0x40
 8010d0e:	2100      	movs	r1, #0
 8010d10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	0018      	movs	r0, r3
 8010d16:	f7f7 fa37 	bl	8008188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2241      	movs	r2, #65	@ 0x41
 8010d1e:	2124      	movs	r1, #36	@ 0x24
 8010d20:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	438a      	bics	r2, r1
 8010d30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	685a      	ldr	r2, [r3, #4]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	4934      	ldr	r1, [pc, #208]	@ (8010e0c <HAL_I2C_Init+0x120>)
 8010d3c:	400a      	ands	r2, r1
 8010d3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	689a      	ldr	r2, [r3, #8]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4931      	ldr	r1, [pc, #196]	@ (8010e10 <HAL_I2C_Init+0x124>)
 8010d4c:	400a      	ands	r2, r1
 8010d4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d108      	bne.n	8010d6a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	689a      	ldr	r2, [r3, #8]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2180      	movs	r1, #128	@ 0x80
 8010d62:	0209      	lsls	r1, r1, #8
 8010d64:	430a      	orrs	r2, r1
 8010d66:	609a      	str	r2, [r3, #8]
 8010d68:	e007      	b.n	8010d7a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	689a      	ldr	r2, [r3, #8]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2184      	movs	r1, #132	@ 0x84
 8010d74:	0209      	lsls	r1, r1, #8
 8010d76:	430a      	orrs	r2, r1
 8010d78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	d104      	bne.n	8010d8c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2280      	movs	r2, #128	@ 0x80
 8010d88:	0112      	lsls	r2, r2, #4
 8010d8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	685a      	ldr	r2, [r3, #4]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	491f      	ldr	r1, [pc, #124]	@ (8010e14 <HAL_I2C_Init+0x128>)
 8010d98:	430a      	orrs	r2, r1
 8010d9a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68da      	ldr	r2, [r3, #12]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	491a      	ldr	r1, [pc, #104]	@ (8010e10 <HAL_I2C_Init+0x124>)
 8010da8:	400a      	ands	r2, r1
 8010daa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	691a      	ldr	r2, [r3, #16]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	695b      	ldr	r3, [r3, #20]
 8010db4:	431a      	orrs	r2, r3
 8010db6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	699b      	ldr	r3, [r3, #24]
 8010dbc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	430a      	orrs	r2, r1
 8010dc4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	69d9      	ldr	r1, [r3, #28]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a1a      	ldr	r2, [r3, #32]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	430a      	orrs	r2, r1
 8010dd4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2101      	movs	r1, #1
 8010de2:	430a      	orrs	r2, r1
 8010de4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2241      	movs	r2, #65	@ 0x41
 8010df0:	2120      	movs	r1, #32
 8010df2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2200      	movs	r2, #0
 8010df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2242      	movs	r2, #66	@ 0x42
 8010dfe:	2100      	movs	r1, #0
 8010e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	0018      	movs	r0, r3
 8010e06:	46bd      	mov	sp, r7
 8010e08:	b002      	add	sp, #8
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	f0ffffff 	.word	0xf0ffffff
 8010e10:	ffff7fff 	.word	0xffff7fff
 8010e14:	02008000 	.word	0x02008000

08010e18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010e18:	b590      	push	{r4, r7, lr}
 8010e1a:	b089      	sub	sp, #36	@ 0x24
 8010e1c:	af02      	add	r7, sp, #8
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	0008      	movs	r0, r1
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	0019      	movs	r1, r3
 8010e26:	230a      	movs	r3, #10
 8010e28:	18fb      	adds	r3, r7, r3
 8010e2a:	1c02      	adds	r2, r0, #0
 8010e2c:	801a      	strh	r2, [r3, #0]
 8010e2e:	2308      	movs	r3, #8
 8010e30:	18fb      	adds	r3, r7, r3
 8010e32:	1c0a      	adds	r2, r1, #0
 8010e34:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2241      	movs	r2, #65	@ 0x41
 8010e3a:	5c9b      	ldrb	r3, [r3, r2]
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	2b20      	cmp	r3, #32
 8010e40:	d000      	beq.n	8010e44 <HAL_I2C_Master_Transmit+0x2c>
 8010e42:	e0e7      	b.n	8011014 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2240      	movs	r2, #64	@ 0x40
 8010e48:	5c9b      	ldrb	r3, [r3, r2]
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d101      	bne.n	8010e52 <HAL_I2C_Master_Transmit+0x3a>
 8010e4e:	2302      	movs	r3, #2
 8010e50:	e0e1      	b.n	8011016 <HAL_I2C_Master_Transmit+0x1fe>
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2240      	movs	r2, #64	@ 0x40
 8010e56:	2101      	movs	r1, #1
 8010e58:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010e5a:	f7fe fc7d 	bl	800f758 <HAL_GetTick>
 8010e5e:	0003      	movs	r3, r0
 8010e60:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010e62:	2380      	movs	r3, #128	@ 0x80
 8010e64:	0219      	lsls	r1, r3, #8
 8010e66:	68f8      	ldr	r0, [r7, #12]
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	2319      	movs	r3, #25
 8010e6e:	2201      	movs	r2, #1
 8010e70:	f001 ff98 	bl	8012da4 <I2C_WaitOnFlagUntilTimeout>
 8010e74:	1e03      	subs	r3, r0, #0
 8010e76:	d001      	beq.n	8010e7c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	e0cc      	b.n	8011016 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	2241      	movs	r2, #65	@ 0x41
 8010e80:	2121      	movs	r1, #33	@ 0x21
 8010e82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2242      	movs	r2, #66	@ 0x42
 8010e88:	2110      	movs	r1, #16
 8010e8a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	2208      	movs	r2, #8
 8010e9c:	18ba      	adds	r2, r7, r2
 8010e9e:	8812      	ldrh	r2, [r2, #0]
 8010ea0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	2bff      	cmp	r3, #255	@ 0xff
 8010eb0:	d911      	bls.n	8010ed6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	22ff      	movs	r2, #255	@ 0xff
 8010eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	2380      	movs	r3, #128	@ 0x80
 8010ec0:	045c      	lsls	r4, r3, #17
 8010ec2:	230a      	movs	r3, #10
 8010ec4:	18fb      	adds	r3, r7, r3
 8010ec6:	8819      	ldrh	r1, [r3, #0]
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	4b55      	ldr	r3, [pc, #340]	@ (8011020 <HAL_I2C_Master_Transmit+0x208>)
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	0023      	movs	r3, r4
 8010ed0:	f002 f9ba 	bl	8013248 <I2C_TransferConfig>
 8010ed4:	e075      	b.n	8010fc2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ee4:	b2da      	uxtb	r2, r3
 8010ee6:	2380      	movs	r3, #128	@ 0x80
 8010ee8:	049c      	lsls	r4, r3, #18
 8010eea:	230a      	movs	r3, #10
 8010eec:	18fb      	adds	r3, r7, r3
 8010eee:	8819      	ldrh	r1, [r3, #0]
 8010ef0:	68f8      	ldr	r0, [r7, #12]
 8010ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8011020 <HAL_I2C_Master_Transmit+0x208>)
 8010ef4:	9300      	str	r3, [sp, #0]
 8010ef6:	0023      	movs	r3, r4
 8010ef8:	f002 f9a6 	bl	8013248 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010efc:	e061      	b.n	8010fc2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010efe:	697a      	ldr	r2, [r7, #20]
 8010f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	0018      	movs	r0, r3
 8010f06:	f001 ff9b 	bl	8012e40 <I2C_WaitOnTXISFlagUntilTimeout>
 8010f0a:	1e03      	subs	r3, r0, #0
 8010f0c:	d001      	beq.n	8010f12 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	e081      	b.n	8011016 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f16:	781a      	ldrb	r2, [r3, #0]
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f22:	1c5a      	adds	r2, r3, #1
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	3b01      	subs	r3, #1
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f3a:	3b01      	subs	r3, #1
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d03a      	beq.n	8010fc2 <HAL_I2C_Master_Transmit+0x1aa>
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d136      	bne.n	8010fc2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	0013      	movs	r3, r2
 8010f5e:	2200      	movs	r2, #0
 8010f60:	2180      	movs	r1, #128	@ 0x80
 8010f62:	f001 ff1f 	bl	8012da4 <I2C_WaitOnFlagUntilTimeout>
 8010f66:	1e03      	subs	r3, r0, #0
 8010f68:	d001      	beq.n	8010f6e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e053      	b.n	8011016 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	2bff      	cmp	r3, #255	@ 0xff
 8010f76:	d911      	bls.n	8010f9c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	22ff      	movs	r2, #255	@ 0xff
 8010f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f82:	b2da      	uxtb	r2, r3
 8010f84:	2380      	movs	r3, #128	@ 0x80
 8010f86:	045c      	lsls	r4, r3, #17
 8010f88:	230a      	movs	r3, #10
 8010f8a:	18fb      	adds	r3, r7, r3
 8010f8c:	8819      	ldrh	r1, [r3, #0]
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	2300      	movs	r3, #0
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	0023      	movs	r3, r4
 8010f96:	f002 f957 	bl	8013248 <I2C_TransferConfig>
 8010f9a:	e012      	b.n	8010fc2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010faa:	b2da      	uxtb	r2, r3
 8010fac:	2380      	movs	r3, #128	@ 0x80
 8010fae:	049c      	lsls	r4, r3, #18
 8010fb0:	230a      	movs	r3, #10
 8010fb2:	18fb      	adds	r3, r7, r3
 8010fb4:	8819      	ldrh	r1, [r3, #0]
 8010fb6:	68f8      	ldr	r0, [r7, #12]
 8010fb8:	2300      	movs	r3, #0
 8010fba:	9300      	str	r3, [sp, #0]
 8010fbc:	0023      	movs	r3, r4
 8010fbe:	f002 f943 	bl	8013248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d198      	bne.n	8010efe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	0018      	movs	r0, r3
 8010fd4:	f001 ff7a 	bl	8012ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 8010fd8:	1e03      	subs	r3, r0, #0
 8010fda:	d001      	beq.n	8010fe0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	e01a      	b.n	8011016 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	2220      	movs	r2, #32
 8010fe6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	685a      	ldr	r2, [r3, #4]
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	490c      	ldr	r1, [pc, #48]	@ (8011024 <HAL_I2C_Master_Transmit+0x20c>)
 8010ff4:	400a      	ands	r2, r1
 8010ff6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2241      	movs	r2, #65	@ 0x41
 8010ffc:	2120      	movs	r1, #32
 8010ffe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2242      	movs	r2, #66	@ 0x42
 8011004:	2100      	movs	r1, #0
 8011006:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2240      	movs	r2, #64	@ 0x40
 801100c:	2100      	movs	r1, #0
 801100e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011010:	2300      	movs	r3, #0
 8011012:	e000      	b.n	8011016 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8011014:	2302      	movs	r3, #2
  }
}
 8011016:	0018      	movs	r0, r3
 8011018:	46bd      	mov	sp, r7
 801101a:	b007      	add	sp, #28
 801101c:	bd90      	pop	{r4, r7, pc}
 801101e:	46c0      	nop			@ (mov r8, r8)
 8011020:	80002000 	.word	0x80002000
 8011024:	fe00e800 	.word	0xfe00e800

08011028 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8011028:	b590      	push	{r4, r7, lr}
 801102a:	b089      	sub	sp, #36	@ 0x24
 801102c:	af02      	add	r7, sp, #8
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	0008      	movs	r0, r1
 8011032:	607a      	str	r2, [r7, #4]
 8011034:	0019      	movs	r1, r3
 8011036:	230a      	movs	r3, #10
 8011038:	18fb      	adds	r3, r7, r3
 801103a:	1c02      	adds	r2, r0, #0
 801103c:	801a      	strh	r2, [r3, #0]
 801103e:	2308      	movs	r3, #8
 8011040:	18fb      	adds	r3, r7, r3
 8011042:	1c0a      	adds	r2, r1, #0
 8011044:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2241      	movs	r2, #65	@ 0x41
 801104a:	5c9b      	ldrb	r3, [r3, r2]
 801104c:	b2db      	uxtb	r3, r3
 801104e:	2b20      	cmp	r3, #32
 8011050:	d000      	beq.n	8011054 <HAL_I2C_Master_Receive+0x2c>
 8011052:	e0e8      	b.n	8011226 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2240      	movs	r2, #64	@ 0x40
 8011058:	5c9b      	ldrb	r3, [r3, r2]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d101      	bne.n	8011062 <HAL_I2C_Master_Receive+0x3a>
 801105e:	2302      	movs	r3, #2
 8011060:	e0e2      	b.n	8011228 <HAL_I2C_Master_Receive+0x200>
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2240      	movs	r2, #64	@ 0x40
 8011066:	2101      	movs	r1, #1
 8011068:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801106a:	f7fe fb75 	bl	800f758 <HAL_GetTick>
 801106e:	0003      	movs	r3, r0
 8011070:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011072:	2380      	movs	r3, #128	@ 0x80
 8011074:	0219      	lsls	r1, r3, #8
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	9300      	str	r3, [sp, #0]
 801107c:	2319      	movs	r3, #25
 801107e:	2201      	movs	r2, #1
 8011080:	f001 fe90 	bl	8012da4 <I2C_WaitOnFlagUntilTimeout>
 8011084:	1e03      	subs	r3, r0, #0
 8011086:	d001      	beq.n	801108c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8011088:	2301      	movs	r3, #1
 801108a:	e0cd      	b.n	8011228 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2241      	movs	r2, #65	@ 0x41
 8011090:	2122      	movs	r1, #34	@ 0x22
 8011092:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2242      	movs	r2, #66	@ 0x42
 8011098:	2110      	movs	r1, #16
 801109a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2208      	movs	r2, #8
 80110ac:	18ba      	adds	r2, r7, r2
 80110ae:	8812      	ldrh	r2, [r2, #0]
 80110b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2200      	movs	r2, #0
 80110b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110bc:	b29b      	uxth	r3, r3
 80110be:	2bff      	cmp	r3, #255	@ 0xff
 80110c0:	d911      	bls.n	80110e6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	22ff      	movs	r2, #255	@ 0xff
 80110c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110cc:	b2da      	uxtb	r2, r3
 80110ce:	2380      	movs	r3, #128	@ 0x80
 80110d0:	045c      	lsls	r4, r3, #17
 80110d2:	230a      	movs	r3, #10
 80110d4:	18fb      	adds	r3, r7, r3
 80110d6:	8819      	ldrh	r1, [r3, #0]
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	4b55      	ldr	r3, [pc, #340]	@ (8011230 <HAL_I2C_Master_Receive+0x208>)
 80110dc:	9300      	str	r3, [sp, #0]
 80110de:	0023      	movs	r3, r4
 80110e0:	f002 f8b2 	bl	8013248 <I2C_TransferConfig>
 80110e4:	e076      	b.n	80111d4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110f4:	b2da      	uxtb	r2, r3
 80110f6:	2380      	movs	r3, #128	@ 0x80
 80110f8:	049c      	lsls	r4, r3, #18
 80110fa:	230a      	movs	r3, #10
 80110fc:	18fb      	adds	r3, r7, r3
 80110fe:	8819      	ldrh	r1, [r3, #0]
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	4b4b      	ldr	r3, [pc, #300]	@ (8011230 <HAL_I2C_Master_Receive+0x208>)
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	0023      	movs	r3, r4
 8011108:	f002 f89e 	bl	8013248 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801110c:	e062      	b.n	80111d4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801110e:	697a      	ldr	r2, [r7, #20]
 8011110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	0018      	movs	r0, r3
 8011116:	f001 ff1d 	bl	8012f54 <I2C_WaitOnRXNEFlagUntilTimeout>
 801111a:	1e03      	subs	r3, r0, #0
 801111c:	d001      	beq.n	8011122 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801111e:	2301      	movs	r3, #1
 8011120:	e082      	b.n	8011228 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801112c:	b2d2      	uxtb	r2, r2
 801112e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801113e:	3b01      	subs	r3, #1
 8011140:	b29a      	uxth	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801114a:	b29b      	uxth	r3, r3
 801114c:	3b01      	subs	r3, #1
 801114e:	b29a      	uxth	r2, r3
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011158:	b29b      	uxth	r3, r3
 801115a:	2b00      	cmp	r3, #0
 801115c:	d03a      	beq.n	80111d4 <HAL_I2C_Master_Receive+0x1ac>
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011162:	2b00      	cmp	r3, #0
 8011164:	d136      	bne.n	80111d4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	9300      	str	r3, [sp, #0]
 801116e:	0013      	movs	r3, r2
 8011170:	2200      	movs	r2, #0
 8011172:	2180      	movs	r1, #128	@ 0x80
 8011174:	f001 fe16 	bl	8012da4 <I2C_WaitOnFlagUntilTimeout>
 8011178:	1e03      	subs	r3, r0, #0
 801117a:	d001      	beq.n	8011180 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 801117c:	2301      	movs	r3, #1
 801117e:	e053      	b.n	8011228 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011184:	b29b      	uxth	r3, r3
 8011186:	2bff      	cmp	r3, #255	@ 0xff
 8011188:	d911      	bls.n	80111ae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	22ff      	movs	r2, #255	@ 0xff
 801118e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011194:	b2da      	uxtb	r2, r3
 8011196:	2380      	movs	r3, #128	@ 0x80
 8011198:	045c      	lsls	r4, r3, #17
 801119a:	230a      	movs	r3, #10
 801119c:	18fb      	adds	r3, r7, r3
 801119e:	8819      	ldrh	r1, [r3, #0]
 80111a0:	68f8      	ldr	r0, [r7, #12]
 80111a2:	2300      	movs	r3, #0
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	0023      	movs	r3, r4
 80111a8:	f002 f84e 	bl	8013248 <I2C_TransferConfig>
 80111ac:	e012      	b.n	80111d4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111bc:	b2da      	uxtb	r2, r3
 80111be:	2380      	movs	r3, #128	@ 0x80
 80111c0:	049c      	lsls	r4, r3, #18
 80111c2:	230a      	movs	r3, #10
 80111c4:	18fb      	adds	r3, r7, r3
 80111c6:	8819      	ldrh	r1, [r3, #0]
 80111c8:	68f8      	ldr	r0, [r7, #12]
 80111ca:	2300      	movs	r3, #0
 80111cc:	9300      	str	r3, [sp, #0]
 80111ce:	0023      	movs	r3, r4
 80111d0:	f002 f83a 	bl	8013248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111d8:	b29b      	uxth	r3, r3
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d197      	bne.n	801110e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80111de:	697a      	ldr	r2, [r7, #20]
 80111e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	0018      	movs	r0, r3
 80111e6:	f001 fe71 	bl	8012ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 80111ea:	1e03      	subs	r3, r0, #0
 80111ec:	d001      	beq.n	80111f2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80111ee:	2301      	movs	r3, #1
 80111f0:	e01a      	b.n	8011228 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2220      	movs	r2, #32
 80111f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	685a      	ldr	r2, [r3, #4]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	490b      	ldr	r1, [pc, #44]	@ (8011234 <HAL_I2C_Master_Receive+0x20c>)
 8011206:	400a      	ands	r2, r1
 8011208:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2241      	movs	r2, #65	@ 0x41
 801120e:	2120      	movs	r1, #32
 8011210:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2242      	movs	r2, #66	@ 0x42
 8011216:	2100      	movs	r1, #0
 8011218:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2240      	movs	r2, #64	@ 0x40
 801121e:	2100      	movs	r1, #0
 8011220:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	e000      	b.n	8011228 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8011226:	2302      	movs	r3, #2
  }
}
 8011228:	0018      	movs	r0, r3
 801122a:	46bd      	mov	sp, r7
 801122c:	b007      	add	sp, #28
 801122e:	bd90      	pop	{r4, r7, pc}
 8011230:	80002400 	.word	0x80002400
 8011234:	fe00e800 	.word	0xfe00e800

08011238 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8011238:	b5b0      	push	{r4, r5, r7, lr}
 801123a:	b088      	sub	sp, #32
 801123c:	af02      	add	r7, sp, #8
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	0008      	movs	r0, r1
 8011242:	607a      	str	r2, [r7, #4]
 8011244:	0019      	movs	r1, r3
 8011246:	230a      	movs	r3, #10
 8011248:	18fb      	adds	r3, r7, r3
 801124a:	1c02      	adds	r2, r0, #0
 801124c:	801a      	strh	r2, [r3, #0]
 801124e:	2308      	movs	r3, #8
 8011250:	18fb      	adds	r3, r7, r3
 8011252:	1c0a      	adds	r2, r1, #0
 8011254:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2241      	movs	r2, #65	@ 0x41
 801125a:	5c9b      	ldrb	r3, [r3, r2]
 801125c:	b2db      	uxtb	r3, r3
 801125e:	2b20      	cmp	r3, #32
 8011260:	d000      	beq.n	8011264 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8011262:	e0dd      	b.n	8011420 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	699a      	ldr	r2, [r3, #24]
 801126a:	2380      	movs	r3, #128	@ 0x80
 801126c:	021b      	lsls	r3, r3, #8
 801126e:	401a      	ands	r2, r3
 8011270:	2380      	movs	r3, #128	@ 0x80
 8011272:	021b      	lsls	r3, r3, #8
 8011274:	429a      	cmp	r2, r3
 8011276:	d101      	bne.n	801127c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8011278:	2302      	movs	r3, #2
 801127a:	e0d2      	b.n	8011422 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2240      	movs	r2, #64	@ 0x40
 8011280:	5c9b      	ldrb	r3, [r3, r2]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d101      	bne.n	801128a <HAL_I2C_Master_Transmit_DMA+0x52>
 8011286:	2302      	movs	r3, #2
 8011288:	e0cb      	b.n	8011422 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2240      	movs	r2, #64	@ 0x40
 801128e:	2101      	movs	r1, #1
 8011290:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2241      	movs	r2, #65	@ 0x41
 8011296:	2121      	movs	r1, #33	@ 0x21
 8011298:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	2242      	movs	r2, #66	@ 0x42
 801129e:	2110      	movs	r1, #16
 80112a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2208      	movs	r2, #8
 80112b2:	18ba      	adds	r2, r7, r2
 80112b4:	8812      	ldrh	r2, [r2, #0]
 80112b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	4a5c      	ldr	r2, [pc, #368]	@ (801142c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80112bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	4a5b      	ldr	r2, [pc, #364]	@ (8011430 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80112c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	2bff      	cmp	r3, #255	@ 0xff
 80112cc:	d906      	bls.n	80112dc <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	22ff      	movs	r2, #255	@ 0xff
 80112d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80112d4:	2380      	movs	r3, #128	@ 0x80
 80112d6:	045b      	lsls	r3, r3, #17
 80112d8:	617b      	str	r3, [r7, #20]
 80112da:	e007      	b.n	80112ec <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80112e6:	2380      	movs	r3, #128	@ 0x80
 80112e8:	049b      	lsls	r3, r3, #18
 80112ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d100      	bne.n	80112f6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80112f4:	e078      	b.n	80113e8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d023      	beq.n	8011346 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011302:	4a4c      	ldr	r2, [pc, #304]	@ (8011434 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8011304:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801130a:	4a4b      	ldr	r2, [pc, #300]	@ (8011438 <HAL_I2C_Master_Transmit_DMA+0x200>)
 801130c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011312:	2200      	movs	r2, #0
 8011314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801131a:	2200      	movs	r2, #0
 801131c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	3328      	adds	r3, #40	@ 0x28
 801132a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8011330:	2513      	movs	r5, #19
 8011332:	197c      	adds	r4, r7, r5
 8011334:	f7fe ff62 	bl	80101fc <HAL_DMA_Start_IT>
 8011338:	0003      	movs	r3, r0
 801133a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801133c:	197b      	adds	r3, r7, r5
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d13d      	bne.n	80113c0 <HAL_I2C_Master_Transmit_DMA+0x188>
 8011344:	e013      	b.n	801136e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2241      	movs	r2, #65	@ 0x41
 801134a:	2120      	movs	r1, #32
 801134c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2242      	movs	r2, #66	@ 0x42
 8011352:	2100      	movs	r1, #0
 8011354:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801135a:	2280      	movs	r2, #128	@ 0x80
 801135c:	431a      	orrs	r2, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2240      	movs	r2, #64	@ 0x40
 8011366:	2100      	movs	r1, #0
 8011368:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e059      	b.n	8011422 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011372:	b2da      	uxtb	r2, r3
 8011374:	697c      	ldr	r4, [r7, #20]
 8011376:	230a      	movs	r3, #10
 8011378:	18fb      	adds	r3, r7, r3
 801137a:	8819      	ldrh	r1, [r3, #0]
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	4b2f      	ldr	r3, [pc, #188]	@ (801143c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	0023      	movs	r3, r4
 8011384:	f001 ff60 	bl	8013248 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801138c:	b29a      	uxth	r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	b29a      	uxth	r2, r3
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2240      	movs	r2, #64	@ 0x40
 801139e:	2100      	movs	r1, #0
 80113a0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	2110      	movs	r1, #16
 80113a6:	0018      	movs	r0, r3
 80113a8:	f001 ff88 	bl	80132bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2180      	movs	r1, #128	@ 0x80
 80113b8:	01c9      	lsls	r1, r1, #7
 80113ba:	430a      	orrs	r2, r1
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	e02d      	b.n	801141c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2241      	movs	r2, #65	@ 0x41
 80113c4:	2120      	movs	r1, #32
 80113c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2242      	movs	r2, #66	@ 0x42
 80113cc:	2100      	movs	r1, #0
 80113ce:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113d4:	2210      	movs	r2, #16
 80113d6:	431a      	orrs	r2, r3
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2240      	movs	r2, #64	@ 0x40
 80113e0:	2100      	movs	r1, #0
 80113e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80113e4:	2301      	movs	r3, #1
 80113e6:	e01c      	b.n	8011422 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	4a15      	ldr	r2, [pc, #84]	@ (8011440 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80113ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	2380      	movs	r3, #128	@ 0x80
 80113f6:	049c      	lsls	r4, r3, #18
 80113f8:	230a      	movs	r3, #10
 80113fa:	18fb      	adds	r3, r7, r3
 80113fc:	8819      	ldrh	r1, [r3, #0]
 80113fe:	68f8      	ldr	r0, [r7, #12]
 8011400:	4b0e      	ldr	r3, [pc, #56]	@ (801143c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	0023      	movs	r3, r4
 8011406:	f001 ff1f 	bl	8013248 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2240      	movs	r2, #64	@ 0x40
 801140e:	2100      	movs	r1, #0
 8011410:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2101      	movs	r1, #1
 8011416:	0018      	movs	r0, r3
 8011418:	f001 ff50 	bl	80132bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	e000      	b.n	8011422 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8011420:	2302      	movs	r3, #2
  }
}
 8011422:	0018      	movs	r0, r3
 8011424:	46bd      	mov	sp, r7
 8011426:	b006      	add	sp, #24
 8011428:	bdb0      	pop	{r4, r5, r7, pc}
 801142a:	46c0      	nop			@ (mov r8, r8)
 801142c:	ffff0000 	.word	0xffff0000
 8011430:	08011c3d 	.word	0x08011c3d
 8011434:	08012bf5 	.word	0x08012bf5
 8011438:	08012d35 	.word	0x08012d35
 801143c:	80002000 	.word	0x80002000
 8011440:	080117e9 	.word	0x080117e9

08011444 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8011444:	b5b0      	push	{r4, r5, r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af02      	add	r7, sp, #8
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	0008      	movs	r0, r1
 801144e:	607a      	str	r2, [r7, #4]
 8011450:	0019      	movs	r1, r3
 8011452:	230a      	movs	r3, #10
 8011454:	18fb      	adds	r3, r7, r3
 8011456:	1c02      	adds	r2, r0, #0
 8011458:	801a      	strh	r2, [r3, #0]
 801145a:	2308      	movs	r3, #8
 801145c:	18fb      	adds	r3, r7, r3
 801145e:	1c0a      	adds	r2, r1, #0
 8011460:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2241      	movs	r2, #65	@ 0x41
 8011466:	5c9b      	ldrb	r3, [r3, r2]
 8011468:	b2db      	uxtb	r3, r3
 801146a:	2b20      	cmp	r3, #32
 801146c:	d000      	beq.n	8011470 <HAL_I2C_Master_Receive_DMA+0x2c>
 801146e:	e0dd      	b.n	801162c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	699a      	ldr	r2, [r3, #24]
 8011476:	2380      	movs	r3, #128	@ 0x80
 8011478:	021b      	lsls	r3, r3, #8
 801147a:	401a      	ands	r2, r3
 801147c:	2380      	movs	r3, #128	@ 0x80
 801147e:	021b      	lsls	r3, r3, #8
 8011480:	429a      	cmp	r2, r3
 8011482:	d101      	bne.n	8011488 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8011484:	2302      	movs	r3, #2
 8011486:	e0d2      	b.n	801162e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2240      	movs	r2, #64	@ 0x40
 801148c:	5c9b      	ldrb	r3, [r3, r2]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d101      	bne.n	8011496 <HAL_I2C_Master_Receive_DMA+0x52>
 8011492:	2302      	movs	r3, #2
 8011494:	e0cb      	b.n	801162e <HAL_I2C_Master_Receive_DMA+0x1ea>
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	2240      	movs	r2, #64	@ 0x40
 801149a:	2101      	movs	r1, #1
 801149c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	2241      	movs	r2, #65	@ 0x41
 80114a2:	2122      	movs	r1, #34	@ 0x22
 80114a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2242      	movs	r2, #66	@ 0x42
 80114aa:	2110      	movs	r1, #16
 80114ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2200      	movs	r2, #0
 80114b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	2208      	movs	r2, #8
 80114be:	18ba      	adds	r2, r7, r2
 80114c0:	8812      	ldrh	r2, [r2, #0]
 80114c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	4a5c      	ldr	r2, [pc, #368]	@ (8011638 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80114c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	4a5b      	ldr	r2, [pc, #364]	@ (801163c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80114ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	2bff      	cmp	r3, #255	@ 0xff
 80114d8:	d906      	bls.n	80114e8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	22ff      	movs	r2, #255	@ 0xff
 80114de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80114e0:	2380      	movs	r3, #128	@ 0x80
 80114e2:	045b      	lsls	r3, r3, #17
 80114e4:	617b      	str	r3, [r7, #20]
 80114e6:	e007      	b.n	80114f8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80114f2:	2380      	movs	r3, #128	@ 0x80
 80114f4:	049b      	lsls	r3, r3, #18
 80114f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d100      	bne.n	8011502 <HAL_I2C_Master_Receive_DMA+0xbe>
 8011500:	e078      	b.n	80115f4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011506:	2b00      	cmp	r3, #0
 8011508:	d023      	beq.n	8011552 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801150e:	4a4c      	ldr	r2, [pc, #304]	@ (8011640 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8011510:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011516:	4a4b      	ldr	r2, [pc, #300]	@ (8011644 <HAL_I2C_Master_Receive_DMA+0x200>)
 8011518:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801151e:	2200      	movs	r2, #0
 8011520:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011526:	2200      	movs	r2, #0
 8011528:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	3324      	adds	r3, #36	@ 0x24
 8011534:	0019      	movs	r1, r3
 8011536:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801153c:	2513      	movs	r5, #19
 801153e:	197c      	adds	r4, r7, r5
 8011540:	f7fe fe5c 	bl	80101fc <HAL_DMA_Start_IT>
 8011544:	0003      	movs	r3, r0
 8011546:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011548:	197b      	adds	r3, r7, r5
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d13d      	bne.n	80115cc <HAL_I2C_Master_Receive_DMA+0x188>
 8011550:	e013      	b.n	801157a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	2241      	movs	r2, #65	@ 0x41
 8011556:	2120      	movs	r1, #32
 8011558:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2242      	movs	r2, #66	@ 0x42
 801155e:	2100      	movs	r1, #0
 8011560:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011566:	2280      	movs	r2, #128	@ 0x80
 8011568:	431a      	orrs	r2, r3
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2240      	movs	r2, #64	@ 0x40
 8011572:	2100      	movs	r1, #0
 8011574:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8011576:	2301      	movs	r3, #1
 8011578:	e059      	b.n	801162e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801157e:	b2da      	uxtb	r2, r3
 8011580:	697c      	ldr	r4, [r7, #20]
 8011582:	230a      	movs	r3, #10
 8011584:	18fb      	adds	r3, r7, r3
 8011586:	8819      	ldrh	r1, [r3, #0]
 8011588:	68f8      	ldr	r0, [r7, #12]
 801158a:	4b2f      	ldr	r3, [pc, #188]	@ (8011648 <HAL_I2C_Master_Receive_DMA+0x204>)
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	0023      	movs	r3, r4
 8011590:	f001 fe5a 	bl	8013248 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011598:	b29a      	uxth	r2, r3
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2240      	movs	r2, #64	@ 0x40
 80115aa:	2100      	movs	r1, #0
 80115ac:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2110      	movs	r1, #16
 80115b2:	0018      	movs	r0, r3
 80115b4:	f001 fe82 	bl	80132bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2180      	movs	r1, #128	@ 0x80
 80115c4:	0209      	lsls	r1, r1, #8
 80115c6:	430a      	orrs	r2, r1
 80115c8:	601a      	str	r2, [r3, #0]
 80115ca:	e02d      	b.n	8011628 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2241      	movs	r2, #65	@ 0x41
 80115d0:	2120      	movs	r1, #32
 80115d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2242      	movs	r2, #66	@ 0x42
 80115d8:	2100      	movs	r1, #0
 80115da:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115e0:	2210      	movs	r2, #16
 80115e2:	431a      	orrs	r2, r3
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2240      	movs	r2, #64	@ 0x40
 80115ec:	2100      	movs	r1, #0
 80115ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80115f0:	2301      	movs	r3, #1
 80115f2:	e01c      	b.n	801162e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	4a15      	ldr	r2, [pc, #84]	@ (801164c <HAL_I2C_Master_Receive_DMA+0x208>)
 80115f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80115fe:	b2da      	uxtb	r2, r3
 8011600:	2380      	movs	r3, #128	@ 0x80
 8011602:	049c      	lsls	r4, r3, #18
 8011604:	230a      	movs	r3, #10
 8011606:	18fb      	adds	r3, r7, r3
 8011608:	8819      	ldrh	r1, [r3, #0]
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	4b0e      	ldr	r3, [pc, #56]	@ (8011648 <HAL_I2C_Master_Receive_DMA+0x204>)
 801160e:	9300      	str	r3, [sp, #0]
 8011610:	0023      	movs	r3, r4
 8011612:	f001 fe19 	bl	8013248 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2240      	movs	r2, #64	@ 0x40
 801161a:	2100      	movs	r1, #0
 801161c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	2101      	movs	r1, #1
 8011622:	0018      	movs	r0, r3
 8011624:	f001 fe4a 	bl	80132bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8011628:	2300      	movs	r3, #0
 801162a:	e000      	b.n	801162e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801162c:	2302      	movs	r3, #2
  }
}
 801162e:	0018      	movs	r0, r3
 8011630:	46bd      	mov	sp, r7
 8011632:	b006      	add	sp, #24
 8011634:	bdb0      	pop	{r4, r5, r7, pc}
 8011636:	46c0      	nop			@ (mov r8, r8)
 8011638:	ffff0000 	.word	0xffff0000
 801163c:	08011c3d 	.word	0x08011c3d
 8011640:	08012c95 	.word	0x08012c95
 8011644:	08012d35 	.word	0x08012d35
 8011648:	80002400 	.word	0x80002400
 801164c:	080117e9 	.word	0x080117e9

08011650 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	699b      	ldr	r3, [r3, #24]
 801165e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801166c:	2b00      	cmp	r3, #0
 801166e:	d005      	beq.n	801167c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	68f9      	ldr	r1, [r7, #12]
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	4798      	blx	r3
  }
}
 801167c:	46c0      	nop			@ (mov r8, r8)
 801167e:	46bd      	mov	sp, r7
 8011680:	b004      	add	sp, #16
 8011682:	bd80      	pop	{r7, pc}

08011684 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	699b      	ldr	r3, [r3, #24]
 8011692:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 801169c:	697a      	ldr	r2, [r7, #20]
 801169e:	2380      	movs	r3, #128	@ 0x80
 80116a0:	005b      	lsls	r3, r3, #1
 80116a2:	4013      	ands	r3, r2
 80116a4:	d00e      	beq.n	80116c4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	2280      	movs	r2, #128	@ 0x80
 80116aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80116ac:	d00a      	beq.n	80116c4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116b2:	2201      	movs	r2, #1
 80116b4:	431a      	orrs	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2280      	movs	r2, #128	@ 0x80
 80116c0:	0052      	lsls	r2, r2, #1
 80116c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80116c4:	697a      	ldr	r2, [r7, #20]
 80116c6:	2380      	movs	r3, #128	@ 0x80
 80116c8:	00db      	lsls	r3, r3, #3
 80116ca:	4013      	ands	r3, r2
 80116cc:	d00e      	beq.n	80116ec <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	2280      	movs	r2, #128	@ 0x80
 80116d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80116d4:	d00a      	beq.n	80116ec <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116da:	2208      	movs	r2, #8
 80116dc:	431a      	orrs	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	2280      	movs	r2, #128	@ 0x80
 80116e8:	00d2      	lsls	r2, r2, #3
 80116ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80116ec:	697a      	ldr	r2, [r7, #20]
 80116ee:	2380      	movs	r3, #128	@ 0x80
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	4013      	ands	r3, r2
 80116f4:	d00e      	beq.n	8011714 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	2280      	movs	r2, #128	@ 0x80
 80116fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80116fc:	d00a      	beq.n	8011714 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011702:	2202      	movs	r2, #2
 8011704:	431a      	orrs	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	2280      	movs	r2, #128	@ 0x80
 8011710:	0092      	lsls	r2, r2, #2
 8011712:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011718:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	220b      	movs	r2, #11
 801171e:	4013      	ands	r3, r2
 8011720:	d005      	beq.n	801172e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8011722:	68fa      	ldr	r2, [r7, #12]
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	0011      	movs	r1, r2
 8011728:	0018      	movs	r0, r3
 801172a:	f001 f915 	bl	8012958 <I2C_ITError>
  }
}
 801172e:	46c0      	nop			@ (mov r8, r8)
 8011730:	46bd      	mov	sp, r7
 8011732:	b006      	add	sp, #24
 8011734:	bd80      	pop	{r7, pc}

08011736 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011736:	b580      	push	{r7, lr}
 8011738:	b082      	sub	sp, #8
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801173e:	46c0      	nop			@ (mov r8, r8)
 8011740:	46bd      	mov	sp, r7
 8011742:	b002      	add	sp, #8
 8011744:	bd80      	pop	{r7, pc}

08011746 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801174e:	46c0      	nop			@ (mov r8, r8)
 8011750:	46bd      	mov	sp, r7
 8011752:	b002      	add	sp, #8
 8011754:	bd80      	pop	{r7, pc}

08011756 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011756:	b580      	push	{r7, lr}
 8011758:	b082      	sub	sp, #8
 801175a:	af00      	add	r7, sp, #0
 801175c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801175e:	46c0      	nop			@ (mov r8, r8)
 8011760:	46bd      	mov	sp, r7
 8011762:	b002      	add	sp, #8
 8011764:	bd80      	pop	{r7, pc}

08011766 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b082      	sub	sp, #8
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801176e:	46c0      	nop			@ (mov r8, r8)
 8011770:	46bd      	mov	sp, r7
 8011772:	b002      	add	sp, #8
 8011774:	bd80      	pop	{r7, pc}

08011776 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011776:	b580      	push	{r7, lr}
 8011778:	b082      	sub	sp, #8
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
 801177e:	0008      	movs	r0, r1
 8011780:	0011      	movs	r1, r2
 8011782:	1cfb      	adds	r3, r7, #3
 8011784:	1c02      	adds	r2, r0, #0
 8011786:	701a      	strb	r2, [r3, #0]
 8011788:	003b      	movs	r3, r7
 801178a:	1c0a      	adds	r2, r1, #0
 801178c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801178e:	46c0      	nop			@ (mov r8, r8)
 8011790:	46bd      	mov	sp, r7
 8011792:	b002      	add	sp, #8
 8011794:	bd80      	pop	{r7, pc}

08011796 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b082      	sub	sp, #8
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801179e:	46c0      	nop			@ (mov r8, r8)
 80117a0:	46bd      	mov	sp, r7
 80117a2:	b002      	add	sp, #8
 80117a4:	bd80      	pop	{r7, pc}

080117a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80117a6:	b580      	push	{r7, lr}
 80117a8:	b082      	sub	sp, #8
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80117ae:	46c0      	nop			@ (mov r8, r8)
 80117b0:	46bd      	mov	sp, r7
 80117b2:	b002      	add	sp, #8
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b082      	sub	sp, #8
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80117be:	46c0      	nop			@ (mov r8, r8)
 80117c0:	46bd      	mov	sp, r7
 80117c2:	b002      	add	sp, #8
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b082      	sub	sp, #8
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80117ce:	46c0      	nop			@ (mov r8, r8)
 80117d0:	46bd      	mov	sp, r7
 80117d2:	b002      	add	sp, #8
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b082      	sub	sp, #8
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80117de:	46c0      	nop			@ (mov r8, r8)
 80117e0:	46bd      	mov	sp, r7
 80117e2:	b002      	add	sp, #8
 80117e4:	bd80      	pop	{r7, pc}
	...

080117e8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80117e8:	b590      	push	{r4, r7, lr}
 80117ea:	b089      	sub	sp, #36	@ 0x24
 80117ec:	af02      	add	r7, sp, #8
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	2240      	movs	r2, #64	@ 0x40
 80117fc:	5c9b      	ldrb	r3, [r3, r2]
 80117fe:	2b01      	cmp	r3, #1
 8011800:	d101      	bne.n	8011806 <I2C_Master_ISR_IT+0x1e>
 8011802:	2302      	movs	r3, #2
 8011804:	e113      	b.n	8011a2e <I2C_Master_ISR_IT+0x246>
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2240      	movs	r2, #64	@ 0x40
 801180a:	2101      	movs	r1, #1
 801180c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	2210      	movs	r2, #16
 8011812:	4013      	ands	r3, r2
 8011814:	d012      	beq.n	801183c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2210      	movs	r2, #16
 801181a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801181c:	d00e      	beq.n	801183c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2210      	movs	r2, #16
 8011824:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801182a:	2204      	movs	r2, #4
 801182c:	431a      	orrs	r2, r3
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	0018      	movs	r0, r3
 8011836:	f001 f9ba 	bl	8012bae <I2C_Flush_TXDR>
 801183a:	e0e5      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	2204      	movs	r2, #4
 8011840:	4013      	ands	r3, r2
 8011842:	d021      	beq.n	8011888 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2204      	movs	r2, #4
 8011848:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801184a:	d01d      	beq.n	8011888 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	2204      	movs	r2, #4
 8011850:	4393      	bics	r3, r2
 8011852:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801185e:	b2d2      	uxtb	r2, r2
 8011860:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011870:	3b01      	subs	r3, #1
 8011872:	b29a      	uxth	r2, r3
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801187c:	b29b      	uxth	r3, r3
 801187e:	3b01      	subs	r3, #1
 8011880:	b29a      	uxth	r2, r3
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011886:	e0bf      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	2202      	movs	r2, #2
 801188c:	4013      	ands	r3, r2
 801188e:	d01c      	beq.n	80118ca <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2202      	movs	r2, #2
 8011894:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011896:	d018      	beq.n	80118ca <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801189c:	781a      	ldrb	r2, [r3, #0]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a8:	1c5a      	adds	r2, r3, #1
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118b2:	3b01      	subs	r3, #1
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118be:	b29b      	uxth	r3, r3
 80118c0:	3b01      	subs	r3, #1
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80118c8:	e09e      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	2280      	movs	r2, #128	@ 0x80
 80118ce:	4013      	ands	r3, r2
 80118d0:	d100      	bne.n	80118d4 <I2C_Master_ISR_IT+0xec>
 80118d2:	e069      	b.n	80119a8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2240      	movs	r2, #64	@ 0x40
 80118d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80118da:	d065      	beq.n	80119a8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d04a      	beq.n	801197c <I2C_Master_ISR_IT+0x194>
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d146      	bne.n	801197c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	b29a      	uxth	r2, r3
 80118f6:	2112      	movs	r1, #18
 80118f8:	187b      	adds	r3, r7, r1
 80118fa:	0592      	lsls	r2, r2, #22
 80118fc:	0d92      	lsrs	r2, r2, #22
 80118fe:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011904:	b29b      	uxth	r3, r3
 8011906:	2bff      	cmp	r3, #255	@ 0xff
 8011908:	d910      	bls.n	801192c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	22ff      	movs	r2, #255	@ 0xff
 801190e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011914:	b2da      	uxtb	r2, r3
 8011916:	2380      	movs	r3, #128	@ 0x80
 8011918:	045c      	lsls	r4, r3, #17
 801191a:	187b      	adds	r3, r7, r1
 801191c:	8819      	ldrh	r1, [r3, #0]
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	2300      	movs	r3, #0
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	0023      	movs	r3, r4
 8011926:	f001 fc8f 	bl	8013248 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801192a:	e03c      	b.n	80119a6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011930:	b29a      	uxth	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193a:	4a3f      	ldr	r2, [pc, #252]	@ (8011a38 <I2C_Master_ISR_IT+0x250>)
 801193c:	4293      	cmp	r3, r2
 801193e:	d00e      	beq.n	801195e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011944:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801194a:	2312      	movs	r3, #18
 801194c:	18fb      	adds	r3, r7, r3
 801194e:	8819      	ldrh	r1, [r3, #0]
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	2300      	movs	r3, #0
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	0023      	movs	r3, r4
 8011958:	f001 fc76 	bl	8013248 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801195c:	e023      	b.n	80119a6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011962:	b2da      	uxtb	r2, r3
 8011964:	2380      	movs	r3, #128	@ 0x80
 8011966:	049c      	lsls	r4, r3, #18
 8011968:	2312      	movs	r3, #18
 801196a:	18fb      	adds	r3, r7, r3
 801196c:	8819      	ldrh	r1, [r3, #0]
 801196e:	68f8      	ldr	r0, [r7, #12]
 8011970:	2300      	movs	r3, #0
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	0023      	movs	r3, r4
 8011976:	f001 fc67 	bl	8013248 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801197a:	e014      	b.n	80119a6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	685a      	ldr	r2, [r3, #4]
 8011982:	2380      	movs	r3, #128	@ 0x80
 8011984:	049b      	lsls	r3, r3, #18
 8011986:	401a      	ands	r2, r3
 8011988:	2380      	movs	r3, #128	@ 0x80
 801198a:	049b      	lsls	r3, r3, #18
 801198c:	429a      	cmp	r2, r3
 801198e:	d004      	beq.n	801199a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	0018      	movs	r0, r3
 8011994:	f000 fcf4 	bl	8012380 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011998:	e036      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	2140      	movs	r1, #64	@ 0x40
 801199e:	0018      	movs	r0, r3
 80119a0:	f000 ffda 	bl	8012958 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80119a4:	e030      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
 80119a6:	e02f      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	2240      	movs	r2, #64	@ 0x40
 80119ac:	4013      	ands	r3, r2
 80119ae:	d02b      	beq.n	8011a08 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2240      	movs	r2, #64	@ 0x40
 80119b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80119b6:	d027      	beq.n	8011a08 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119bc:	b29b      	uxth	r3, r3
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d11d      	bne.n	80119fe <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	685a      	ldr	r2, [r3, #4]
 80119c8:	2380      	movs	r3, #128	@ 0x80
 80119ca:	049b      	lsls	r3, r3, #18
 80119cc:	401a      	ands	r2, r3
 80119ce:	2380      	movs	r3, #128	@ 0x80
 80119d0:	049b      	lsls	r3, r3, #18
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d018      	beq.n	8011a08 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119da:	4a17      	ldr	r2, [pc, #92]	@ (8011a38 <I2C_Master_ISR_IT+0x250>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d109      	bne.n	80119f4 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2180      	movs	r1, #128	@ 0x80
 80119ec:	01c9      	lsls	r1, r1, #7
 80119ee:	430a      	orrs	r2, r1
 80119f0:	605a      	str	r2, [r3, #4]
 80119f2:	e009      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	0018      	movs	r0, r3
 80119f8:	f000 fcc2 	bl	8012380 <I2C_ITMasterSeqCplt>
 80119fc:	e004      	b.n	8011a08 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2140      	movs	r1, #64	@ 0x40
 8011a02:	0018      	movs	r0, r3
 8011a04:	f000 ffa8 	bl	8012958 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	2220      	movs	r2, #32
 8011a0c:	4013      	ands	r3, r2
 8011a0e:	d009      	beq.n	8011a24 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2220      	movs	r2, #32
 8011a14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a16:	d005      	beq.n	8011a24 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8011a18:	697a      	ldr	r2, [r7, #20]
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	0011      	movs	r1, r2
 8011a1e:	0018      	movs	r0, r3
 8011a20:	f000 fd54 	bl	80124cc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2240      	movs	r2, #64	@ 0x40
 8011a28:	2100      	movs	r1, #0
 8011a2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	0018      	movs	r0, r3
 8011a30:	46bd      	mov	sp, r7
 8011a32:	b007      	add	sp, #28
 8011a34:	bd90      	pop	{r4, r7, pc}
 8011a36:	46c0      	nop			@ (mov r8, r8)
 8011a38:	ffff0000 	.word	0xffff0000

08011a3c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	2240      	movs	r2, #64	@ 0x40
 8011a56:	5c9b      	ldrb	r3, [r3, r2]
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d101      	bne.n	8011a60 <I2C_Slave_ISR_IT+0x24>
 8011a5c:	2302      	movs	r3, #2
 8011a5e:	e0e6      	b.n	8011c2e <I2C_Slave_ISR_IT+0x1f2>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2240      	movs	r2, #64	@ 0x40
 8011a64:	2101      	movs	r1, #1
 8011a66:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	2220      	movs	r2, #32
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	d009      	beq.n	8011a84 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2220      	movs	r2, #32
 8011a74:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a76:	d005      	beq.n	8011a84 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8011a78:	693a      	ldr	r2, [r7, #16]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	0011      	movs	r1, r2
 8011a7e:	0018      	movs	r0, r3
 8011a80:	f000 fdf2 	bl	8012668 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	2210      	movs	r2, #16
 8011a88:	4013      	ands	r3, r2
 8011a8a:	d052      	beq.n	8011b32 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2210      	movs	r2, #16
 8011a90:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011a92:	d04e      	beq.n	8011b32 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d12d      	bne.n	8011afa <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2241      	movs	r2, #65	@ 0x41
 8011aa2:	5c9b      	ldrb	r3, [r3, r2]
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	2b28      	cmp	r3, #40	@ 0x28
 8011aa8:	d10b      	bne.n	8011ac2 <I2C_Slave_ISR_IT+0x86>
 8011aaa:	697a      	ldr	r2, [r7, #20]
 8011aac:	2380      	movs	r3, #128	@ 0x80
 8011aae:	049b      	lsls	r3, r3, #18
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d106      	bne.n	8011ac2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8011ab4:	693a      	ldr	r2, [r7, #16]
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	0011      	movs	r1, r2
 8011aba:	0018      	movs	r0, r3
 8011abc:	f000 fef4 	bl	80128a8 <I2C_ITListenCplt>
 8011ac0:	e036      	b.n	8011b30 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2241      	movs	r2, #65	@ 0x41
 8011ac6:	5c9b      	ldrb	r3, [r3, r2]
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	2b29      	cmp	r3, #41	@ 0x29
 8011acc:	d110      	bne.n	8011af0 <I2C_Slave_ISR_IT+0xb4>
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	4a59      	ldr	r2, [pc, #356]	@ (8011c38 <I2C_Slave_ISR_IT+0x1fc>)
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	d00c      	beq.n	8011af0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	2210      	movs	r2, #16
 8011adc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	0018      	movs	r0, r3
 8011ae2:	f001 f864 	bl	8012bae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	0018      	movs	r0, r3
 8011aea:	f000 fc8b 	bl	8012404 <I2C_ITSlaveSeqCplt>
 8011aee:	e01f      	b.n	8011b30 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2210      	movs	r2, #16
 8011af6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011af8:	e091      	b.n	8011c1e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2210      	movs	r2, #16
 8011b00:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b06:	2204      	movs	r2, #4
 8011b08:	431a      	orrs	r2, r3
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d005      	beq.n	8011b20 <I2C_Slave_ISR_IT+0xe4>
 8011b14:	697a      	ldr	r2, [r7, #20]
 8011b16:	2380      	movs	r3, #128	@ 0x80
 8011b18:	045b      	lsls	r3, r3, #17
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d000      	beq.n	8011b20 <I2C_Slave_ISR_IT+0xe4>
 8011b1e:	e07e      	b.n	8011c1e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	0011      	movs	r1, r2
 8011b28:	0018      	movs	r0, r3
 8011b2a:	f000 ff15 	bl	8012958 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011b2e:	e076      	b.n	8011c1e <I2C_Slave_ISR_IT+0x1e2>
 8011b30:	e075      	b.n	8011c1e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	2204      	movs	r2, #4
 8011b36:	4013      	ands	r3, r2
 8011b38:	d02f      	beq.n	8011b9a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2204      	movs	r2, #4
 8011b3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011b40:	d02b      	beq.n	8011b9a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d018      	beq.n	8011b7e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b56:	b2d2      	uxtb	r2, r2
 8011b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b5e:	1c5a      	adds	r2, r3, #1
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	3b01      	subs	r3, #1
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d14c      	bne.n	8011c22 <I2C_Slave_ISR_IT+0x1e6>
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8011c38 <I2C_Slave_ISR_IT+0x1fc>)
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d048      	beq.n	8011c22 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	0018      	movs	r0, r3
 8011b94:	f000 fc36 	bl	8012404 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011b98:	e043      	b.n	8011c22 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	2208      	movs	r2, #8
 8011b9e:	4013      	ands	r3, r2
 8011ba0:	d00a      	beq.n	8011bb8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2208      	movs	r2, #8
 8011ba6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011ba8:	d006      	beq.n	8011bb8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011baa:	693a      	ldr	r2, [r7, #16]
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	0011      	movs	r1, r2
 8011bb0:	0018      	movs	r0, r3
 8011bb2:	f000 fb41 	bl	8012238 <I2C_ITAddrCplt>
 8011bb6:	e035      	b.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	2202      	movs	r2, #2
 8011bbc:	4013      	ands	r3, r2
 8011bbe:	d031      	beq.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2202      	movs	r2, #2
 8011bc4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011bc6:	d02d      	beq.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d018      	beq.n	8011c04 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd6:	781a      	ldrb	r2, [r3, #0]
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011be2:	1c5a      	adds	r2, r3, #1
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	3b01      	subs	r3, #1
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	b29a      	uxth	r2, r3
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011c02:	e00f      	b.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011c04:	697a      	ldr	r2, [r7, #20]
 8011c06:	2380      	movs	r3, #128	@ 0x80
 8011c08:	045b      	lsls	r3, r3, #17
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d002      	beq.n	8011c14 <I2C_Slave_ISR_IT+0x1d8>
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d107      	bne.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	0018      	movs	r0, r3
 8011c18:	f000 fbf4 	bl	8012404 <I2C_ITSlaveSeqCplt>
 8011c1c:	e002      	b.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8011c1e:	46c0      	nop			@ (mov r8, r8)
 8011c20:	e000      	b.n	8011c24 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8011c22:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2240      	movs	r2, #64	@ 0x40
 8011c28:	2100      	movs	r1, #0
 8011c2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011c2c:	2300      	movs	r3, #0
}
 8011c2e:	0018      	movs	r0, r3
 8011c30:	46bd      	mov	sp, r7
 8011c32:	b006      	add	sp, #24
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	46c0      	nop			@ (mov r8, r8)
 8011c38:	ffff0000 	.word	0xffff0000

08011c3c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011c3c:	b590      	push	{r4, r7, lr}
 8011c3e:	b089      	sub	sp, #36	@ 0x24
 8011c40:	af02      	add	r7, sp, #8
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2240      	movs	r2, #64	@ 0x40
 8011c4c:	5c9b      	ldrb	r3, [r3, r2]
 8011c4e:	2b01      	cmp	r3, #1
 8011c50:	d101      	bne.n	8011c56 <I2C_Master_ISR_DMA+0x1a>
 8011c52:	2302      	movs	r3, #2
 8011c54:	e0e7      	b.n	8011e26 <I2C_Master_ISR_DMA+0x1ea>
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2240      	movs	r2, #64	@ 0x40
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	2210      	movs	r2, #16
 8011c62:	4013      	ands	r3, r2
 8011c64:	d017      	beq.n	8011c96 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2210      	movs	r2, #16
 8011c6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011c6c:	d013      	beq.n	8011c96 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2210      	movs	r2, #16
 8011c74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	431a      	orrs	r2, r3
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	2120      	movs	r1, #32
 8011c86:	0018      	movs	r0, r3
 8011c88:	f001 fb18 	bl	80132bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	0018      	movs	r0, r3
 8011c90:	f000 ff8d 	bl	8012bae <I2C_Flush_TXDR>
 8011c94:	e0c2      	b.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	2280      	movs	r2, #128	@ 0x80
 8011c9a:	4013      	ands	r3, r2
 8011c9c:	d100      	bne.n	8011ca0 <I2C_Master_ISR_DMA+0x64>
 8011c9e:	e07c      	b.n	8011d9a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2240      	movs	r2, #64	@ 0x40
 8011ca4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011ca6:	d100      	bne.n	8011caa <I2C_Master_ISR_DMA+0x6e>
 8011ca8:	e077      	b.n	8011d9a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2140      	movs	r1, #64	@ 0x40
 8011cb6:	438a      	bics	r2, r1
 8011cb8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d055      	beq.n	8011d70 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	2312      	movs	r3, #18
 8011cce:	18fb      	adds	r3, r7, r3
 8011cd0:	0592      	lsls	r2, r2, #22
 8011cd2:	0d92      	lsrs	r2, r2, #22
 8011cd4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	2bff      	cmp	r3, #255	@ 0xff
 8011cde:	d906      	bls.n	8011cee <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	22ff      	movs	r2, #255	@ 0xff
 8011ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8011ce6:	2380      	movs	r3, #128	@ 0x80
 8011ce8:	045b      	lsls	r3, r3, #17
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	e010      	b.n	8011d10 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8011e30 <I2C_Master_ISR_DMA+0x1f4>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d003      	beq.n	8011d0a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d06:	617b      	str	r3, [r7, #20]
 8011d08:	e002      	b.n	8011d10 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011d0a:	2380      	movs	r3, #128	@ 0x80
 8011d0c:	049b      	lsls	r3, r3, #18
 8011d0e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	697c      	ldr	r4, [r7, #20]
 8011d18:	2312      	movs	r3, #18
 8011d1a:	18fb      	adds	r3, r7, r3
 8011d1c:	8819      	ldrh	r1, [r3, #0]
 8011d1e:	68f8      	ldr	r0, [r7, #12]
 8011d20:	2300      	movs	r3, #0
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	0023      	movs	r3, r4
 8011d26:	f001 fa8f 	bl	8013248 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	2241      	movs	r2, #65	@ 0x41
 8011d40:	5c9b      	ldrb	r3, [r3, r2]
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	2b22      	cmp	r3, #34	@ 0x22
 8011d46:	d109      	bne.n	8011d5c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2180      	movs	r1, #128	@ 0x80
 8011d54:	0209      	lsls	r1, r1, #8
 8011d56:	430a      	orrs	r2, r1
 8011d58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011d5a:	e05f      	b.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	2180      	movs	r1, #128	@ 0x80
 8011d68:	01c9      	lsls	r1, r1, #7
 8011d6a:	430a      	orrs	r2, r1
 8011d6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011d6e:	e055      	b.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	2380      	movs	r3, #128	@ 0x80
 8011d78:	049b      	lsls	r3, r3, #18
 8011d7a:	401a      	ands	r2, r3
 8011d7c:	2380      	movs	r3, #128	@ 0x80
 8011d7e:	049b      	lsls	r3, r3, #18
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d004      	beq.n	8011d8e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	0018      	movs	r0, r3
 8011d88:	f000 fafa 	bl	8012380 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011d8c:	e046      	b.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2140      	movs	r1, #64	@ 0x40
 8011d92:	0018      	movs	r0, r3
 8011d94:	f000 fde0 	bl	8012958 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011d98:	e040      	b.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	2240      	movs	r2, #64	@ 0x40
 8011d9e:	4013      	ands	r3, r2
 8011da0:	d02c      	beq.n	8011dfc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2240      	movs	r2, #64	@ 0x40
 8011da6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011da8:	d028      	beq.n	8011dfc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d11d      	bne.n	8011df0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	685a      	ldr	r2, [r3, #4]
 8011dba:	2380      	movs	r3, #128	@ 0x80
 8011dbc:	049b      	lsls	r3, r3, #18
 8011dbe:	401a      	ands	r2, r3
 8011dc0:	2380      	movs	r3, #128	@ 0x80
 8011dc2:	049b      	lsls	r3, r3, #18
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d028      	beq.n	8011e1a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dcc:	4a18      	ldr	r2, [pc, #96]	@ (8011e30 <I2C_Master_ISR_DMA+0x1f4>)
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d109      	bne.n	8011de6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	685a      	ldr	r2, [r3, #4]
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	2180      	movs	r1, #128	@ 0x80
 8011dde:	01c9      	lsls	r1, r1, #7
 8011de0:	430a      	orrs	r2, r1
 8011de2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011de4:	e019      	b.n	8011e1a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	0018      	movs	r0, r3
 8011dea:	f000 fac9 	bl	8012380 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011dee:	e014      	b.n	8011e1a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	2140      	movs	r1, #64	@ 0x40
 8011df4:	0018      	movs	r0, r3
 8011df6:	f000 fdaf 	bl	8012958 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011dfa:	e00e      	b.n	8011e1a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	2220      	movs	r2, #32
 8011e00:	4013      	ands	r3, r2
 8011e02:	d00b      	beq.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2220      	movs	r2, #32
 8011e08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011e0a:	d007      	beq.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011e0c:	68ba      	ldr	r2, [r7, #8]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	0011      	movs	r1, r2
 8011e12:	0018      	movs	r0, r3
 8011e14:	f000 fb5a 	bl	80124cc <I2C_ITMasterCplt>
 8011e18:	e000      	b.n	8011e1c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011e1a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2240      	movs	r2, #64	@ 0x40
 8011e20:	2100      	movs	r1, #0
 8011e22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011e24:	2300      	movs	r3, #0
}
 8011e26:	0018      	movs	r0, r3
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	b007      	add	sp, #28
 8011e2c:	bd90      	pop	{r4, r7, pc}
 8011e2e:	46c0      	nop			@ (mov r8, r8)
 8011e30:	ffff0000 	.word	0xffff0000

08011e34 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011e34:	b590      	push	{r4, r7, lr}
 8011e36:	b089      	sub	sp, #36	@ 0x24
 8011e38:	af02      	add	r7, sp, #8
 8011e3a:	60f8      	str	r0, [r7, #12]
 8011e3c:	60b9      	str	r1, [r7, #8]
 8011e3e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011e40:	4b88      	ldr	r3, [pc, #544]	@ (8012064 <I2C_Mem_ISR_DMA+0x230>)
 8011e42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	2240      	movs	r2, #64	@ 0x40
 8011e48:	5c9b      	ldrb	r3, [r3, r2]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d101      	bne.n	8011e52 <I2C_Mem_ISR_DMA+0x1e>
 8011e4e:	2302      	movs	r3, #2
 8011e50:	e104      	b.n	801205c <I2C_Mem_ISR_DMA+0x228>
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2240      	movs	r2, #64	@ 0x40
 8011e56:	2101      	movs	r1, #1
 8011e58:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2210      	movs	r2, #16
 8011e5e:	4013      	ands	r3, r2
 8011e60:	d017      	beq.n	8011e92 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2210      	movs	r2, #16
 8011e66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011e68:	d013      	beq.n	8011e92 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	2210      	movs	r2, #16
 8011e70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e76:	2204      	movs	r2, #4
 8011e78:	431a      	orrs	r2, r3
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2120      	movs	r1, #32
 8011e82:	0018      	movs	r0, r3
 8011e84:	f001 fa1a 	bl	80132bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	0018      	movs	r0, r3
 8011e8c:	f000 fe8f 	bl	8012bae <I2C_Flush_TXDR>
 8011e90:	e0df      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	2202      	movs	r2, #2
 8011e96:	4013      	ands	r3, r2
 8011e98:	d00d      	beq.n	8011eb6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2202      	movs	r2, #2
 8011e9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011ea0:	d009      	beq.n	8011eb6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011eaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	2201      	movs	r2, #1
 8011eb0:	4252      	negs	r2, r2
 8011eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8011eb4:	e0cd      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	2280      	movs	r2, #128	@ 0x80
 8011eba:	4013      	ands	r3, r2
 8011ebc:	d05e      	beq.n	8011f7c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2240      	movs	r2, #64	@ 0x40
 8011ec2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011ec4:	d05a      	beq.n	8011f7c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2110      	movs	r1, #16
 8011eca:	0018      	movs	r0, r3
 8011ecc:	f001 f9f6 	bl	80132bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d04a      	beq.n	8011f70 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	2bff      	cmp	r3, #255	@ 0xff
 8011ee2:	d910      	bls.n	8011f06 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	22ff      	movs	r2, #255	@ 0xff
 8011ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011eee:	b299      	uxth	r1, r3
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ef4:	b2da      	uxtb	r2, r3
 8011ef6:	2380      	movs	r3, #128	@ 0x80
 8011ef8:	045b      	lsls	r3, r3, #17
 8011efa:	68f8      	ldr	r0, [r7, #12]
 8011efc:	2400      	movs	r4, #0
 8011efe:	9400      	str	r4, [sp, #0]
 8011f00:	f001 f9a2 	bl	8013248 <I2C_TransferConfig>
 8011f04:	e011      	b.n	8011f2a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f0a:	b29a      	uxth	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f14:	b299      	uxth	r1, r3
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f1a:	b2da      	uxtb	r2, r3
 8011f1c:	2380      	movs	r3, #128	@ 0x80
 8011f1e:	049b      	lsls	r3, r3, #18
 8011f20:	68f8      	ldr	r0, [r7, #12]
 8011f22:	2400      	movs	r4, #0
 8011f24:	9400      	str	r4, [sp, #0]
 8011f26:	f001 f98f 	bl	8013248 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2241      	movs	r2, #65	@ 0x41
 8011f40:	5c9b      	ldrb	r3, [r3, r2]
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	2b22      	cmp	r3, #34	@ 0x22
 8011f46:	d109      	bne.n	8011f5c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	2180      	movs	r1, #128	@ 0x80
 8011f54:	0209      	lsls	r1, r1, #8
 8011f56:	430a      	orrs	r2, r1
 8011f58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011f5a:	e07a      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2180      	movs	r1, #128	@ 0x80
 8011f68:	01c9      	lsls	r1, r1, #7
 8011f6a:	430a      	orrs	r2, r1
 8011f6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011f6e:	e070      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2140      	movs	r1, #64	@ 0x40
 8011f74:	0018      	movs	r0, r3
 8011f76:	f000 fcef 	bl	8012958 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011f7a:	e06a      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	2240      	movs	r2, #64	@ 0x40
 8011f80:	4013      	ands	r3, r2
 8011f82:	d058      	beq.n	8012036 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2240      	movs	r2, #64	@ 0x40
 8011f88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011f8a:	d054      	beq.n	8012036 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2241      	movs	r2, #65	@ 0x41
 8011f90:	5c9b      	ldrb	r3, [r3, r2]
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	2b22      	cmp	r3, #34	@ 0x22
 8011f96:	d101      	bne.n	8011f9c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011f98:	4b33      	ldr	r3, [pc, #204]	@ (8012068 <I2C_Mem_ISR_DMA+0x234>)
 8011f9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	2bff      	cmp	r3, #255	@ 0xff
 8011fa4:	d911      	bls.n	8011fca <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	22ff      	movs	r2, #255	@ 0xff
 8011faa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fb0:	b299      	uxth	r1, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fb6:	b2da      	uxtb	r2, r3
 8011fb8:	2380      	movs	r3, #128	@ 0x80
 8011fba:	045c      	lsls	r4, r3, #17
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	697b      	ldr	r3, [r7, #20]
 8011fc0:	9300      	str	r3, [sp, #0]
 8011fc2:	0023      	movs	r3, r4
 8011fc4:	f001 f940 	bl	8013248 <I2C_TransferConfig>
 8011fc8:	e012      	b.n	8011ff0 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fd8:	b299      	uxth	r1, r3
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	2380      	movs	r3, #128	@ 0x80
 8011fe2:	049c      	lsls	r4, r3, #18
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	697b      	ldr	r3, [r7, #20]
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	0023      	movs	r3, r4
 8011fec:	f001 f92c 	bl	8013248 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ff4:	b29a      	uxth	r2, r3
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ffa:	1ad3      	subs	r3, r2, r3
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2241      	movs	r2, #65	@ 0x41
 8012006:	5c9b      	ldrb	r3, [r3, r2]
 8012008:	b2db      	uxtb	r3, r3
 801200a:	2b22      	cmp	r3, #34	@ 0x22
 801200c:	d109      	bne.n	8012022 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	2180      	movs	r1, #128	@ 0x80
 801201a:	0209      	lsls	r1, r1, #8
 801201c:	430a      	orrs	r2, r1
 801201e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012020:	e017      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2180      	movs	r1, #128	@ 0x80
 801202e:	01c9      	lsls	r1, r1, #7
 8012030:	430a      	orrs	r2, r1
 8012032:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012034:	e00d      	b.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2220      	movs	r2, #32
 801203a:	4013      	ands	r3, r2
 801203c:	d009      	beq.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2220      	movs	r2, #32
 8012042:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012044:	d005      	beq.n	8012052 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	0011      	movs	r1, r2
 801204c:	0018      	movs	r0, r3
 801204e:	f000 fa3d 	bl	80124cc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2240      	movs	r2, #64	@ 0x40
 8012056:	2100      	movs	r1, #0
 8012058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	0018      	movs	r0, r3
 801205e:	46bd      	mov	sp, r7
 8012060:	b007      	add	sp, #28
 8012062:	bd90      	pop	{r4, r7, pc}
 8012064:	80002000 	.word	0x80002000
 8012068:	80002400 	.word	0x80002400

0801206c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b088      	sub	sp, #32
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801207c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801207e:	2300      	movs	r3, #0
 8012080:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2240      	movs	r2, #64	@ 0x40
 8012086:	5c9b      	ldrb	r3, [r3, r2]
 8012088:	2b01      	cmp	r3, #1
 801208a:	d101      	bne.n	8012090 <I2C_Slave_ISR_DMA+0x24>
 801208c:	2302      	movs	r3, #2
 801208e:	e0cd      	b.n	801222c <I2C_Slave_ISR_DMA+0x1c0>
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2240      	movs	r2, #64	@ 0x40
 8012094:	2101      	movs	r1, #1
 8012096:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	2220      	movs	r2, #32
 801209c:	4013      	ands	r3, r2
 801209e:	d009      	beq.n	80120b4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2220      	movs	r2, #32
 80120a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80120a6:	d005      	beq.n	80120b4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80120a8:	68ba      	ldr	r2, [r7, #8]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	0011      	movs	r1, r2
 80120ae:	0018      	movs	r0, r3
 80120b0:	f000 fada 	bl	8012668 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	2210      	movs	r2, #16
 80120b8:	4013      	ands	r3, r2
 80120ba:	d100      	bne.n	80120be <I2C_Slave_ISR_DMA+0x52>
 80120bc:	e0a3      	b.n	8012206 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	2210      	movs	r2, #16
 80120c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80120c4:	d100      	bne.n	80120c8 <I2C_Slave_ISR_DMA+0x5c>
 80120c6:	e09e      	b.n	8012206 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80120c8:	687a      	ldr	r2, [r7, #4]
 80120ca:	2380      	movs	r3, #128	@ 0x80
 80120cc:	01db      	lsls	r3, r3, #7
 80120ce:	4013      	ands	r3, r2
 80120d0:	d105      	bne.n	80120de <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	2380      	movs	r3, #128	@ 0x80
 80120d6:	021b      	lsls	r3, r3, #8
 80120d8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80120da:	d100      	bne.n	80120de <I2C_Slave_ISR_DMA+0x72>
 80120dc:	e08c      	b.n	80121f8 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00c      	beq.n	8012100 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	2380      	movs	r3, #128	@ 0x80
 80120ea:	021b      	lsls	r3, r3, #8
 80120ec:	4013      	ands	r3, r2
 80120ee:	d007      	beq.n	8012100 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d101      	bne.n	8012100 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80120fc:	2301      	movs	r3, #1
 80120fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012104:	2b00      	cmp	r3, #0
 8012106:	d00c      	beq.n	8012122 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	2380      	movs	r3, #128	@ 0x80
 801210c:	01db      	lsls	r3, r3, #7
 801210e:	4013      	ands	r3, r2
 8012110:	d007      	beq.n	8012122 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d101      	bne.n	8012122 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801211e:	2301      	movs	r3, #1
 8012120:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	2b01      	cmp	r3, #1
 8012126:	d12d      	bne.n	8012184 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	2241      	movs	r2, #65	@ 0x41
 801212c:	5c9b      	ldrb	r3, [r3, r2]
 801212e:	b2db      	uxtb	r3, r3
 8012130:	2b28      	cmp	r3, #40	@ 0x28
 8012132:	d10b      	bne.n	801214c <I2C_Slave_ISR_DMA+0xe0>
 8012134:	69ba      	ldr	r2, [r7, #24]
 8012136:	2380      	movs	r3, #128	@ 0x80
 8012138:	049b      	lsls	r3, r3, #18
 801213a:	429a      	cmp	r2, r3
 801213c:	d106      	bne.n	801214c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	0011      	movs	r1, r2
 8012144:	0018      	movs	r0, r3
 8012146:	f000 fbaf 	bl	80128a8 <I2C_ITListenCplt>
 801214a:	e054      	b.n	80121f6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	2241      	movs	r2, #65	@ 0x41
 8012150:	5c9b      	ldrb	r3, [r3, r2]
 8012152:	b2db      	uxtb	r3, r3
 8012154:	2b29      	cmp	r3, #41	@ 0x29
 8012156:	d110      	bne.n	801217a <I2C_Slave_ISR_DMA+0x10e>
 8012158:	69bb      	ldr	r3, [r7, #24]
 801215a:	4a36      	ldr	r2, [pc, #216]	@ (8012234 <I2C_Slave_ISR_DMA+0x1c8>)
 801215c:	4293      	cmp	r3, r2
 801215e:	d00c      	beq.n	801217a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2210      	movs	r2, #16
 8012166:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	0018      	movs	r0, r3
 801216c:	f000 fd1f 	bl	8012bae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	0018      	movs	r0, r3
 8012174:	f000 f946 	bl	8012404 <I2C_ITSlaveSeqCplt>
 8012178:	e03d      	b.n	80121f6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2210      	movs	r2, #16
 8012180:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8012182:	e03e      	b.n	8012202 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2210      	movs	r2, #16
 801218a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012190:	2204      	movs	r2, #4
 8012192:	431a      	orrs	r2, r3
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8012198:	2317      	movs	r3, #23
 801219a:	18fb      	adds	r3, r7, r3
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	2141      	movs	r1, #65	@ 0x41
 80121a0:	5c52      	ldrb	r2, [r2, r1]
 80121a2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80121a4:	69bb      	ldr	r3, [r7, #24]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d004      	beq.n	80121b4 <I2C_Slave_ISR_DMA+0x148>
 80121aa:	69ba      	ldr	r2, [r7, #24]
 80121ac:	2380      	movs	r3, #128	@ 0x80
 80121ae:	045b      	lsls	r3, r3, #17
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d126      	bne.n	8012202 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80121b4:	2217      	movs	r2, #23
 80121b6:	18bb      	adds	r3, r7, r2
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	2b21      	cmp	r3, #33	@ 0x21
 80121bc:	d003      	beq.n	80121c6 <I2C_Slave_ISR_DMA+0x15a>
 80121be:	18bb      	adds	r3, r7, r2
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	2b29      	cmp	r3, #41	@ 0x29
 80121c4:	d103      	bne.n	80121ce <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2221      	movs	r2, #33	@ 0x21
 80121ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80121cc:	e00b      	b.n	80121e6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80121ce:	2217      	movs	r2, #23
 80121d0:	18bb      	adds	r3, r7, r2
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	2b22      	cmp	r3, #34	@ 0x22
 80121d6:	d003      	beq.n	80121e0 <I2C_Slave_ISR_DMA+0x174>
 80121d8:	18bb      	adds	r3, r7, r2
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80121de:	d102      	bne.n	80121e6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	2222      	movs	r2, #34	@ 0x22
 80121e4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	0011      	movs	r1, r2
 80121ee:	0018      	movs	r0, r3
 80121f0:	f000 fbb2 	bl	8012958 <I2C_ITError>
      if (treatdmanack == 1U)
 80121f4:	e005      	b.n	8012202 <I2C_Slave_ISR_DMA+0x196>
 80121f6:	e004      	b.n	8012202 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	2210      	movs	r2, #16
 80121fe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012200:	e00f      	b.n	8012222 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8012202:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8012204:	e00d      	b.n	8012222 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	2208      	movs	r2, #8
 801220a:	4013      	ands	r3, r2
 801220c:	d009      	beq.n	8012222 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2208      	movs	r2, #8
 8012212:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8012214:	d005      	beq.n	8012222 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	0011      	movs	r1, r2
 801221c:	0018      	movs	r0, r3
 801221e:	f000 f80b 	bl	8012238 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	2240      	movs	r2, #64	@ 0x40
 8012226:	2100      	movs	r1, #0
 8012228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	0018      	movs	r0, r3
 801222e:	46bd      	mov	sp, r7
 8012230:	b008      	add	sp, #32
 8012232:	bd80      	pop	{r7, pc}
 8012234:	ffff0000 	.word	0xffff0000

08012238 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012238:	b5b0      	push	{r4, r5, r7, lr}
 801223a:	b084      	sub	sp, #16
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2241      	movs	r2, #65	@ 0x41
 8012246:	5c9b      	ldrb	r3, [r3, r2]
 8012248:	b2db      	uxtb	r3, r3
 801224a:	001a      	movs	r2, r3
 801224c:	2328      	movs	r3, #40	@ 0x28
 801224e:	4013      	ands	r3, r2
 8012250:	2b28      	cmp	r3, #40	@ 0x28
 8012252:	d000      	beq.n	8012256 <I2C_ITAddrCplt+0x1e>
 8012254:	e088      	b.n	8012368 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	699b      	ldr	r3, [r3, #24]
 801225c:	0c1b      	lsrs	r3, r3, #16
 801225e:	b2da      	uxtb	r2, r3
 8012260:	250f      	movs	r5, #15
 8012262:	197b      	adds	r3, r7, r5
 8012264:	2101      	movs	r1, #1
 8012266:	400a      	ands	r2, r1
 8012268:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	699b      	ldr	r3, [r3, #24]
 8012270:	0c1b      	lsrs	r3, r3, #16
 8012272:	b29a      	uxth	r2, r3
 8012274:	200c      	movs	r0, #12
 8012276:	183b      	adds	r3, r7, r0
 8012278:	21fe      	movs	r1, #254	@ 0xfe
 801227a:	400a      	ands	r2, r1
 801227c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	689b      	ldr	r3, [r3, #8]
 8012284:	b29a      	uxth	r2, r3
 8012286:	240a      	movs	r4, #10
 8012288:	193b      	adds	r3, r7, r4
 801228a:	0592      	lsls	r2, r2, #22
 801228c:	0d92      	lsrs	r2, r2, #22
 801228e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	b29a      	uxth	r2, r3
 8012298:	2308      	movs	r3, #8
 801229a:	18fb      	adds	r3, r7, r3
 801229c:	21fe      	movs	r1, #254	@ 0xfe
 801229e:	400a      	ands	r2, r1
 80122a0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	d148      	bne.n	801233c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80122aa:	0021      	movs	r1, r4
 80122ac:	187b      	adds	r3, r7, r1
 80122ae:	881b      	ldrh	r3, [r3, #0]
 80122b0:	09db      	lsrs	r3, r3, #7
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	183b      	adds	r3, r7, r0
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	4053      	eors	r3, r2
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	001a      	movs	r2, r3
 80122be:	2306      	movs	r3, #6
 80122c0:	4013      	ands	r3, r2
 80122c2:	d120      	bne.n	8012306 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80122c4:	183b      	adds	r3, r7, r0
 80122c6:	187a      	adds	r2, r7, r1
 80122c8:	8812      	ldrh	r2, [r2, #0]
 80122ca:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122d0:	1c5a      	adds	r2, r3, #1
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122da:	2b02      	cmp	r3, #2
 80122dc:	d14c      	bne.n	8012378 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2200      	movs	r2, #0
 80122e2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2208      	movs	r2, #8
 80122ea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2240      	movs	r2, #64	@ 0x40
 80122f0:	2100      	movs	r1, #0
 80122f2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80122f4:	183b      	adds	r3, r7, r0
 80122f6:	881a      	ldrh	r2, [r3, #0]
 80122f8:	197b      	adds	r3, r7, r5
 80122fa:	7819      	ldrb	r1, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	0018      	movs	r0, r3
 8012300:	f7ff fa39 	bl	8011776 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8012304:	e038      	b.n	8012378 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8012306:	240c      	movs	r4, #12
 8012308:	193b      	adds	r3, r7, r4
 801230a:	2208      	movs	r2, #8
 801230c:	18ba      	adds	r2, r7, r2
 801230e:	8812      	ldrh	r2, [r2, #0]
 8012310:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8012312:	2380      	movs	r3, #128	@ 0x80
 8012314:	021a      	lsls	r2, r3, #8
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	0011      	movs	r1, r2
 801231a:	0018      	movs	r0, r3
 801231c:	f001 f85c 	bl	80133d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2240      	movs	r2, #64	@ 0x40
 8012324:	2100      	movs	r1, #0
 8012326:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8012328:	193b      	adds	r3, r7, r4
 801232a:	881a      	ldrh	r2, [r3, #0]
 801232c:	230f      	movs	r3, #15
 801232e:	18fb      	adds	r3, r7, r3
 8012330:	7819      	ldrb	r1, [r3, #0]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	0018      	movs	r0, r3
 8012336:	f7ff fa1e 	bl	8011776 <HAL_I2C_AddrCallback>
}
 801233a:	e01d      	b.n	8012378 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801233c:	2380      	movs	r3, #128	@ 0x80
 801233e:	021a      	lsls	r2, r3, #8
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	0011      	movs	r1, r2
 8012344:	0018      	movs	r0, r3
 8012346:	f001 f847 	bl	80133d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2240      	movs	r2, #64	@ 0x40
 801234e:	2100      	movs	r1, #0
 8012350:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8012352:	230c      	movs	r3, #12
 8012354:	18fb      	adds	r3, r7, r3
 8012356:	881a      	ldrh	r2, [r3, #0]
 8012358:	230f      	movs	r3, #15
 801235a:	18fb      	adds	r3, r7, r3
 801235c:	7819      	ldrb	r1, [r3, #0]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	0018      	movs	r0, r3
 8012362:	f7ff fa08 	bl	8011776 <HAL_I2C_AddrCallback>
}
 8012366:	e007      	b.n	8012378 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2208      	movs	r2, #8
 801236e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2240      	movs	r2, #64	@ 0x40
 8012374:	2100      	movs	r1, #0
 8012376:	5499      	strb	r1, [r3, r2]
}
 8012378:	46c0      	nop			@ (mov r8, r8)
 801237a:	46bd      	mov	sp, r7
 801237c:	b004      	add	sp, #16
 801237e:	bdb0      	pop	{r4, r5, r7, pc}

08012380 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2242      	movs	r2, #66	@ 0x42
 801238c:	2100      	movs	r1, #0
 801238e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2241      	movs	r2, #65	@ 0x41
 8012394:	5c9b      	ldrb	r3, [r3, r2]
 8012396:	b2db      	uxtb	r3, r3
 8012398:	2b21      	cmp	r3, #33	@ 0x21
 801239a:	d117      	bne.n	80123cc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2241      	movs	r2, #65	@ 0x41
 80123a0:	2120      	movs	r1, #32
 80123a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2211      	movs	r2, #17
 80123a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2200      	movs	r2, #0
 80123ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2101      	movs	r1, #1
 80123b4:	0018      	movs	r0, r3
 80123b6:	f001 f80f 	bl	80133d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	2240      	movs	r2, #64	@ 0x40
 80123be:	2100      	movs	r1, #0
 80123c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	0018      	movs	r0, r3
 80123c6:	f7ff f9b6 	bl	8011736 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80123ca:	e016      	b.n	80123fa <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	2241      	movs	r2, #65	@ 0x41
 80123d0:	2120      	movs	r1, #32
 80123d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2212      	movs	r2, #18
 80123d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2200      	movs	r2, #0
 80123de:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2102      	movs	r1, #2
 80123e4:	0018      	movs	r0, r3
 80123e6:	f000 fff7 	bl	80133d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2240      	movs	r2, #64	@ 0x40
 80123ee:	2100      	movs	r1, #0
 80123f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	0018      	movs	r0, r3
 80123f6:	f7ff f9a6 	bl	8011746 <HAL_I2C_MasterRxCpltCallback>
}
 80123fa:	46c0      	nop			@ (mov r8, r8)
 80123fc:	46bd      	mov	sp, r7
 80123fe:	b002      	add	sp, #8
 8012400:	bd80      	pop	{r7, pc}
	...

08012404 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b084      	sub	sp, #16
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2242      	movs	r2, #66	@ 0x42
 8012418:	2100      	movs	r1, #0
 801241a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801241c:	68fa      	ldr	r2, [r7, #12]
 801241e:	2380      	movs	r3, #128	@ 0x80
 8012420:	01db      	lsls	r3, r3, #7
 8012422:	4013      	ands	r3, r2
 8012424:	d008      	beq.n	8012438 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4924      	ldr	r1, [pc, #144]	@ (80124c4 <I2C_ITSlaveSeqCplt+0xc0>)
 8012432:	400a      	ands	r2, r1
 8012434:	601a      	str	r2, [r3, #0]
 8012436:	e00c      	b.n	8012452 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012438:	68fa      	ldr	r2, [r7, #12]
 801243a:	2380      	movs	r3, #128	@ 0x80
 801243c:	021b      	lsls	r3, r3, #8
 801243e:	4013      	ands	r3, r2
 8012440:	d007      	beq.n	8012452 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	491e      	ldr	r1, [pc, #120]	@ (80124c8 <I2C_ITSlaveSeqCplt+0xc4>)
 801244e:	400a      	ands	r2, r1
 8012450:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2241      	movs	r2, #65	@ 0x41
 8012456:	5c9b      	ldrb	r3, [r3, r2]
 8012458:	b2db      	uxtb	r3, r3
 801245a:	2b29      	cmp	r3, #41	@ 0x29
 801245c:	d114      	bne.n	8012488 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2241      	movs	r2, #65	@ 0x41
 8012462:	2128      	movs	r1, #40	@ 0x28
 8012464:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2221      	movs	r2, #33	@ 0x21
 801246a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2101      	movs	r1, #1
 8012470:	0018      	movs	r0, r3
 8012472:	f000 ffb1 	bl	80133d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2240      	movs	r2, #64	@ 0x40
 801247a:	2100      	movs	r1, #0
 801247c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	0018      	movs	r0, r3
 8012482:	f7ff f968 	bl	8011756 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8012486:	e019      	b.n	80124bc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2241      	movs	r2, #65	@ 0x41
 801248c:	5c9b      	ldrb	r3, [r3, r2]
 801248e:	b2db      	uxtb	r3, r3
 8012490:	2b2a      	cmp	r3, #42	@ 0x2a
 8012492:	d113      	bne.n	80124bc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2241      	movs	r2, #65	@ 0x41
 8012498:	2128      	movs	r1, #40	@ 0x28
 801249a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2222      	movs	r2, #34	@ 0x22
 80124a0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2102      	movs	r1, #2
 80124a6:	0018      	movs	r0, r3
 80124a8:	f000 ff96 	bl	80133d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2240      	movs	r2, #64	@ 0x40
 80124b0:	2100      	movs	r1, #0
 80124b2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	0018      	movs	r0, r3
 80124b8:	f7ff f955 	bl	8011766 <HAL_I2C_SlaveRxCpltCallback>
}
 80124bc:	46c0      	nop			@ (mov r8, r8)
 80124be:	46bd      	mov	sp, r7
 80124c0:	b004      	add	sp, #16
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	ffffbfff 	.word	0xffffbfff
 80124c8:	ffff7fff 	.word	0xffff7fff

080124cc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b086      	sub	sp, #24
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
 80124d4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	2220      	movs	r2, #32
 80124e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	2241      	movs	r2, #65	@ 0x41
 80124e6:	5c9b      	ldrb	r3, [r3, r2]
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	2b21      	cmp	r3, #33	@ 0x21
 80124ec:	d108      	bne.n	8012500 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2101      	movs	r1, #1
 80124f2:	0018      	movs	r0, r3
 80124f4:	f000 ff70 	bl	80133d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2211      	movs	r2, #17
 80124fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80124fe:	e00d      	b.n	801251c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2241      	movs	r2, #65	@ 0x41
 8012504:	5c9b      	ldrb	r3, [r3, r2]
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b22      	cmp	r3, #34	@ 0x22
 801250a:	d107      	bne.n	801251c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2102      	movs	r1, #2
 8012510:	0018      	movs	r0, r3
 8012512:	f000 ff61 	bl	80133d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2212      	movs	r2, #18
 801251a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	685a      	ldr	r2, [r3, #4]
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	494e      	ldr	r1, [pc, #312]	@ (8012660 <I2C_ITMasterCplt+0x194>)
 8012528:	400a      	ands	r2, r1
 801252a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	2200      	movs	r2, #0
 8012530:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4a4b      	ldr	r2, [pc, #300]	@ (8012664 <I2C_ITMasterCplt+0x198>)
 8012536:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	2210      	movs	r2, #16
 801253c:	4013      	ands	r3, r2
 801253e:	d009      	beq.n	8012554 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	2210      	movs	r2, #16
 8012546:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801254c:	2204      	movs	r2, #4
 801254e:	431a      	orrs	r2, r3
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2241      	movs	r2, #65	@ 0x41
 8012558:	5c9b      	ldrb	r3, [r3, r2]
 801255a:	b2db      	uxtb	r3, r3
 801255c:	2b60      	cmp	r3, #96	@ 0x60
 801255e:	d109      	bne.n	8012574 <I2C_ITMasterCplt+0xa8>
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	2204      	movs	r2, #4
 8012564:	4013      	ands	r3, r2
 8012566:	d005      	beq.n	8012574 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801256e:	b2db      	uxtb	r3, r3
 8012570:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8012572:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	0018      	movs	r0, r3
 8012578:	f000 fb19 	bl	8012bae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012580:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2241      	movs	r2, #65	@ 0x41
 8012586:	5c9b      	ldrb	r3, [r3, r2]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2b60      	cmp	r3, #96	@ 0x60
 801258c:	d002      	beq.n	8012594 <I2C_ITMasterCplt+0xc8>
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d007      	beq.n	80125a4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	0011      	movs	r1, r2
 801259c:	0018      	movs	r0, r3
 801259e:	f000 f9db 	bl	8012958 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80125a2:	e058      	b.n	8012656 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2241      	movs	r2, #65	@ 0x41
 80125a8:	5c9b      	ldrb	r3, [r3, r2]
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	2b21      	cmp	r3, #33	@ 0x21
 80125ae:	d126      	bne.n	80125fe <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2241      	movs	r2, #65	@ 0x41
 80125b4:	2120      	movs	r1, #32
 80125b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2200      	movs	r2, #0
 80125bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	2242      	movs	r2, #66	@ 0x42
 80125c2:	5c9b      	ldrb	r3, [r3, r2]
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b40      	cmp	r3, #64	@ 0x40
 80125c8:	d10c      	bne.n	80125e4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2242      	movs	r2, #66	@ 0x42
 80125ce:	2100      	movs	r1, #0
 80125d0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2240      	movs	r2, #64	@ 0x40
 80125d6:	2100      	movs	r1, #0
 80125d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	0018      	movs	r0, r3
 80125de:	f7ff f8e2 	bl	80117a6 <HAL_I2C_MemTxCpltCallback>
}
 80125e2:	e038      	b.n	8012656 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	2242      	movs	r2, #66	@ 0x42
 80125e8:	2100      	movs	r1, #0
 80125ea:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2240      	movs	r2, #64	@ 0x40
 80125f0:	2100      	movs	r1, #0
 80125f2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	0018      	movs	r0, r3
 80125f8:	f7ff f89d 	bl	8011736 <HAL_I2C_MasterTxCpltCallback>
}
 80125fc:	e02b      	b.n	8012656 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2241      	movs	r2, #65	@ 0x41
 8012602:	5c9b      	ldrb	r3, [r3, r2]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	2b22      	cmp	r3, #34	@ 0x22
 8012608:	d125      	bne.n	8012656 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2241      	movs	r2, #65	@ 0x41
 801260e:	2120      	movs	r1, #32
 8012610:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2200      	movs	r2, #0
 8012616:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2242      	movs	r2, #66	@ 0x42
 801261c:	5c9b      	ldrb	r3, [r3, r2]
 801261e:	b2db      	uxtb	r3, r3
 8012620:	2b40      	cmp	r3, #64	@ 0x40
 8012622:	d10c      	bne.n	801263e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2242      	movs	r2, #66	@ 0x42
 8012628:	2100      	movs	r1, #0
 801262a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2240      	movs	r2, #64	@ 0x40
 8012630:	2100      	movs	r1, #0
 8012632:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	0018      	movs	r0, r3
 8012638:	f7ff f8bd 	bl	80117b6 <HAL_I2C_MemRxCpltCallback>
}
 801263c:	e00b      	b.n	8012656 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2242      	movs	r2, #66	@ 0x42
 8012642:	2100      	movs	r1, #0
 8012644:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2240      	movs	r2, #64	@ 0x40
 801264a:	2100      	movs	r1, #0
 801264c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	0018      	movs	r0, r3
 8012652:	f7ff f878 	bl	8011746 <HAL_I2C_MasterRxCpltCallback>
}
 8012656:	46c0      	nop			@ (mov r8, r8)
 8012658:	46bd      	mov	sp, r7
 801265a:	b006      	add	sp, #24
 801265c:	bd80      	pop	{r7, pc}
 801265e:	46c0      	nop			@ (mov r8, r8)
 8012660:	fe00e800 	.word	0xfe00e800
 8012664:	ffff0000 	.word	0xffff0000

08012668 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b086      	sub	sp, #24
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801267e:	200f      	movs	r0, #15
 8012680:	183b      	adds	r3, r7, r0
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	2141      	movs	r1, #65	@ 0x41
 8012686:	5c52      	ldrb	r2, [r2, r1]
 8012688:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2220      	movs	r2, #32
 8012690:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8012692:	183b      	adds	r3, r7, r0
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	2b21      	cmp	r3, #33	@ 0x21
 8012698:	d003      	beq.n	80126a2 <I2C_ITSlaveCplt+0x3a>
 801269a:	183b      	adds	r3, r7, r0
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	2b29      	cmp	r3, #41	@ 0x29
 80126a0:	d109      	bne.n	80126b6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80126a2:	4a7b      	ldr	r2, [pc, #492]	@ (8012890 <I2C_ITSlaveCplt+0x228>)
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	0011      	movs	r1, r2
 80126a8:	0018      	movs	r0, r3
 80126aa:	f000 fe95 	bl	80133d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2221      	movs	r2, #33	@ 0x21
 80126b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80126b4:	e011      	b.n	80126da <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80126b6:	220f      	movs	r2, #15
 80126b8:	18bb      	adds	r3, r7, r2
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	2b22      	cmp	r3, #34	@ 0x22
 80126be:	d003      	beq.n	80126c8 <I2C_ITSlaveCplt+0x60>
 80126c0:	18bb      	adds	r3, r7, r2
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80126c6:	d108      	bne.n	80126da <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80126c8:	4a72      	ldr	r2, [pc, #456]	@ (8012894 <I2C_ITSlaveCplt+0x22c>)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	0011      	movs	r1, r2
 80126ce:	0018      	movs	r0, r3
 80126d0:	f000 fe82 	bl	80133d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2222      	movs	r2, #34	@ 0x22
 80126d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	685a      	ldr	r2, [r3, #4]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2180      	movs	r1, #128	@ 0x80
 80126e6:	0209      	lsls	r1, r1, #8
 80126e8:	430a      	orrs	r2, r1
 80126ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	4968      	ldr	r1, [pc, #416]	@ (8012898 <I2C_ITSlaveCplt+0x230>)
 80126f8:	400a      	ands	r2, r1
 80126fa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	0018      	movs	r0, r3
 8012700:	f000 fa55 	bl	8012bae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8012704:	693a      	ldr	r2, [r7, #16]
 8012706:	2380      	movs	r3, #128	@ 0x80
 8012708:	01db      	lsls	r3, r3, #7
 801270a:	4013      	ands	r3, r2
 801270c:	d013      	beq.n	8012736 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	4960      	ldr	r1, [pc, #384]	@ (801289c <I2C_ITSlaveCplt+0x234>)
 801271a:	400a      	ands	r2, r1
 801271c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012722:	2b00      	cmp	r3, #0
 8012724:	d01f      	beq.n	8012766 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	b29a      	uxth	r2, r3
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012734:	e017      	b.n	8012766 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8012736:	693a      	ldr	r2, [r7, #16]
 8012738:	2380      	movs	r3, #128	@ 0x80
 801273a:	021b      	lsls	r3, r3, #8
 801273c:	4013      	ands	r3, r2
 801273e:	d012      	beq.n	8012766 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	681a      	ldr	r2, [r3, #0]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4955      	ldr	r1, [pc, #340]	@ (80128a0 <I2C_ITSlaveCplt+0x238>)
 801274c:	400a      	ands	r2, r1
 801274e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012754:	2b00      	cmp	r3, #0
 8012756:	d006      	beq.n	8012766 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	685b      	ldr	r3, [r3, #4]
 8012760:	b29a      	uxth	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	2204      	movs	r2, #4
 801276a:	4013      	ands	r3, r2
 801276c:	d020      	beq.n	80127b0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	2204      	movs	r2, #4
 8012772:	4393      	bics	r3, r2
 8012774:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012780:	b2d2      	uxtb	r2, r2
 8012782:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012788:	1c5a      	adds	r2, r3, #1
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00c      	beq.n	80127b0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801279a:	3b01      	subs	r3, #1
 801279c:	b29a      	uxth	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	3b01      	subs	r3, #1
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d005      	beq.n	80127c6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127be:	2204      	movs	r2, #4
 80127c0:	431a      	orrs	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2242      	movs	r2, #66	@ 0x42
 80127ca:	2100      	movs	r1, #0
 80127cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d013      	beq.n	8012804 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	0011      	movs	r1, r2
 80127e4:	0018      	movs	r0, r3
 80127e6:	f000 f8b7 	bl	8012958 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2241      	movs	r2, #65	@ 0x41
 80127ee:	5c9b      	ldrb	r3, [r3, r2]
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	2b28      	cmp	r3, #40	@ 0x28
 80127f4:	d147      	bne.n	8012886 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80127f6:	697a      	ldr	r2, [r7, #20]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	0011      	movs	r1, r2
 80127fc:	0018      	movs	r0, r3
 80127fe:	f000 f853 	bl	80128a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012802:	e040      	b.n	8012886 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012808:	4a26      	ldr	r2, [pc, #152]	@ (80128a4 <I2C_ITSlaveCplt+0x23c>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d016      	beq.n	801283c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	0018      	movs	r0, r3
 8012812:	f7ff fdf7 	bl	8012404 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	4a22      	ldr	r2, [pc, #136]	@ (80128a4 <I2C_ITSlaveCplt+0x23c>)
 801281a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2241      	movs	r2, #65	@ 0x41
 8012820:	2120      	movs	r1, #32
 8012822:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2200      	movs	r2, #0
 8012828:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2240      	movs	r2, #64	@ 0x40
 801282e:	2100      	movs	r1, #0
 8012830:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	0018      	movs	r0, r3
 8012836:	f7fe ffae 	bl	8011796 <HAL_I2C_ListenCpltCallback>
}
 801283a:	e024      	b.n	8012886 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2241      	movs	r2, #65	@ 0x41
 8012840:	5c9b      	ldrb	r3, [r3, r2]
 8012842:	b2db      	uxtb	r3, r3
 8012844:	2b22      	cmp	r3, #34	@ 0x22
 8012846:	d10f      	bne.n	8012868 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2241      	movs	r2, #65	@ 0x41
 801284c:	2120      	movs	r1, #32
 801284e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	2200      	movs	r2, #0
 8012854:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2240      	movs	r2, #64	@ 0x40
 801285a:	2100      	movs	r1, #0
 801285c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	0018      	movs	r0, r3
 8012862:	f7fe ff80 	bl	8011766 <HAL_I2C_SlaveRxCpltCallback>
}
 8012866:	e00e      	b.n	8012886 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2241      	movs	r2, #65	@ 0x41
 801286c:	2120      	movs	r1, #32
 801286e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2200      	movs	r2, #0
 8012874:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2240      	movs	r2, #64	@ 0x40
 801287a:	2100      	movs	r1, #0
 801287c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	0018      	movs	r0, r3
 8012882:	f7fe ff68 	bl	8011756 <HAL_I2C_SlaveTxCpltCallback>
}
 8012886:	46c0      	nop			@ (mov r8, r8)
 8012888:	46bd      	mov	sp, r7
 801288a:	b006      	add	sp, #24
 801288c:	bd80      	pop	{r7, pc}
 801288e:	46c0      	nop			@ (mov r8, r8)
 8012890:	00008001 	.word	0x00008001
 8012894:	00008002 	.word	0x00008002
 8012898:	fe00e800 	.word	0xfe00e800
 801289c:	ffffbfff 	.word	0xffffbfff
 80128a0:	ffff7fff 	.word	0xffff7fff
 80128a4:	ffff0000 	.word	0xffff0000

080128a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	4a26      	ldr	r2, [pc, #152]	@ (8012950 <I2C_ITListenCplt+0xa8>)
 80128b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2200      	movs	r2, #0
 80128bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2241      	movs	r2, #65	@ 0x41
 80128c2:	2120      	movs	r1, #32
 80128c4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2242      	movs	r2, #66	@ 0x42
 80128ca:	2100      	movs	r1, #0
 80128cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2200      	movs	r2, #0
 80128d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	2204      	movs	r2, #4
 80128d8:	4013      	ands	r3, r2
 80128da:	d022      	beq.n	8012922 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128e6:	b2d2      	uxtb	r2, r2
 80128e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ee:	1c5a      	adds	r2, r3, #1
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d012      	beq.n	8012922 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012900:	3b01      	subs	r3, #1
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801290c:	b29b      	uxth	r3, r3
 801290e:	3b01      	subs	r3, #1
 8012910:	b29a      	uxth	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801291a:	2204      	movs	r2, #4
 801291c:	431a      	orrs	r2, r3
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012922:	4a0c      	ldr	r2, [pc, #48]	@ (8012954 <I2C_ITListenCplt+0xac>)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	0011      	movs	r1, r2
 8012928:	0018      	movs	r0, r3
 801292a:	f000 fd55 	bl	80133d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2210      	movs	r2, #16
 8012934:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2240      	movs	r2, #64	@ 0x40
 801293a:	2100      	movs	r1, #0
 801293c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	0018      	movs	r0, r3
 8012942:	f7fe ff28 	bl	8011796 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8012946:	46c0      	nop			@ (mov r8, r8)
 8012948:	46bd      	mov	sp, r7
 801294a:	b002      	add	sp, #8
 801294c:	bd80      	pop	{r7, pc}
 801294e:	46c0      	nop			@ (mov r8, r8)
 8012950:	ffff0000 	.word	0xffff0000
 8012954:	00008003 	.word	0x00008003

08012958 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8012962:	200f      	movs	r0, #15
 8012964:	183b      	adds	r3, r7, r0
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	2141      	movs	r1, #65	@ 0x41
 801296a:	5c52      	ldrb	r2, [r2, r1]
 801296c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2242      	movs	r2, #66	@ 0x42
 8012972:	2100      	movs	r1, #0
 8012974:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4a72      	ldr	r2, [pc, #456]	@ (8012b44 <I2C_ITError+0x1ec>)
 801297a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2200      	movs	r2, #0
 8012980:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	431a      	orrs	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801298e:	183b      	adds	r3, r7, r0
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	2b28      	cmp	r3, #40	@ 0x28
 8012994:	d007      	beq.n	80129a6 <I2C_ITError+0x4e>
 8012996:	183b      	adds	r3, r7, r0
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	2b29      	cmp	r3, #41	@ 0x29
 801299c:	d003      	beq.n	80129a6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801299e:	183b      	adds	r3, r7, r0
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80129a4:	d10c      	bne.n	80129c0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2103      	movs	r1, #3
 80129aa:	0018      	movs	r0, r3
 80129ac:	f000 fd14 	bl	80133d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2241      	movs	r2, #65	@ 0x41
 80129b4:	2128      	movs	r1, #40	@ 0x28
 80129b6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	4a63      	ldr	r2, [pc, #396]	@ (8012b48 <I2C_ITError+0x1f0>)
 80129bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80129be:	e032      	b.n	8012a26 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80129c0:	4a62      	ldr	r2, [pc, #392]	@ (8012b4c <I2C_ITError+0x1f4>)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	0011      	movs	r1, r2
 80129c6:	0018      	movs	r0, r3
 80129c8:	f000 fd06 	bl	80133d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	0018      	movs	r0, r3
 80129d0:	f000 f8ed 	bl	8012bae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2241      	movs	r2, #65	@ 0x41
 80129d8:	5c9b      	ldrb	r3, [r3, r2]
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	2b60      	cmp	r3, #96	@ 0x60
 80129de:	d01f      	beq.n	8012a20 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2241      	movs	r2, #65	@ 0x41
 80129e4:	2120      	movs	r1, #32
 80129e6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	699b      	ldr	r3, [r3, #24]
 80129ee:	2220      	movs	r2, #32
 80129f0:	4013      	ands	r3, r2
 80129f2:	2b20      	cmp	r3, #32
 80129f4:	d114      	bne.n	8012a20 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	699b      	ldr	r3, [r3, #24]
 80129fc:	2210      	movs	r2, #16
 80129fe:	4013      	ands	r3, r2
 8012a00:	2b10      	cmp	r3, #16
 8012a02:	d109      	bne.n	8012a18 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2210      	movs	r2, #16
 8012a0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a10:	2204      	movs	r2, #4
 8012a12:	431a      	orrs	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	2220      	movs	r2, #32
 8012a1e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a2a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d03b      	beq.n	8012aac <I2C_ITError+0x154>
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2b11      	cmp	r3, #17
 8012a38:	d002      	beq.n	8012a40 <I2C_ITError+0xe8>
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	2b21      	cmp	r3, #33	@ 0x21
 8012a3e:	d135      	bne.n	8012aac <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	2380      	movs	r3, #128	@ 0x80
 8012a48:	01db      	lsls	r3, r3, #7
 8012a4a:	401a      	ands	r2, r3
 8012a4c:	2380      	movs	r3, #128	@ 0x80
 8012a4e:	01db      	lsls	r3, r3, #7
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d107      	bne.n	8012a64 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	493c      	ldr	r1, [pc, #240]	@ (8012b50 <I2C_ITError+0x1f8>)
 8012a60:	400a      	ands	r2, r1
 8012a62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a68:	0018      	movs	r0, r3
 8012a6a:	f7fd fd62 	bl	8010532 <HAL_DMA_GetState>
 8012a6e:	0003      	movs	r3, r0
 8012a70:	2b01      	cmp	r3, #1
 8012a72:	d016      	beq.n	8012aa2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a78:	4a36      	ldr	r2, [pc, #216]	@ (8012b54 <I2C_ITError+0x1fc>)
 8012a7a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2240      	movs	r2, #64	@ 0x40
 8012a80:	2100      	movs	r1, #0
 8012a82:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a88:	0018      	movs	r0, r3
 8012a8a:	f7fd fc5d 	bl	8010348 <HAL_DMA_Abort_IT>
 8012a8e:	1e03      	subs	r3, r0, #0
 8012a90:	d051      	beq.n	8012b36 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012aa0:	e049      	b.n	8012b36 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	0018      	movs	r0, r3
 8012aa6:	f000 f859 	bl	8012b5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012aaa:	e044      	b.n	8012b36 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d03b      	beq.n	8012b2c <I2C_ITError+0x1d4>
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b12      	cmp	r3, #18
 8012ab8:	d002      	beq.n	8012ac0 <I2C_ITError+0x168>
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	2b22      	cmp	r3, #34	@ 0x22
 8012abe:	d135      	bne.n	8012b2c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	2380      	movs	r3, #128	@ 0x80
 8012ac8:	021b      	lsls	r3, r3, #8
 8012aca:	401a      	ands	r2, r3
 8012acc:	2380      	movs	r3, #128	@ 0x80
 8012ace:	021b      	lsls	r3, r3, #8
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d107      	bne.n	8012ae4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	681a      	ldr	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	491e      	ldr	r1, [pc, #120]	@ (8012b58 <I2C_ITError+0x200>)
 8012ae0:	400a      	ands	r2, r1
 8012ae2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ae8:	0018      	movs	r0, r3
 8012aea:	f7fd fd22 	bl	8010532 <HAL_DMA_GetState>
 8012aee:	0003      	movs	r3, r0
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d016      	beq.n	8012b22 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012af8:	4a16      	ldr	r2, [pc, #88]	@ (8012b54 <I2C_ITError+0x1fc>)
 8012afa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2240      	movs	r2, #64	@ 0x40
 8012b00:	2100      	movs	r1, #0
 8012b02:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b08:	0018      	movs	r0, r3
 8012b0a:	f7fd fc1d 	bl	8010348 <HAL_DMA_Abort_IT>
 8012b0e:	1e03      	subs	r3, r0, #0
 8012b10:	d013      	beq.n	8012b3a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012b1c:	0018      	movs	r0, r3
 8012b1e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012b20:	e00b      	b.n	8012b3a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	0018      	movs	r0, r3
 8012b26:	f000 f819 	bl	8012b5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012b2a:	e006      	b.n	8012b3a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	0018      	movs	r0, r3
 8012b30:	f000 f814 	bl	8012b5c <I2C_TreatErrorCallback>
  }
}
 8012b34:	e002      	b.n	8012b3c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012b36:	46c0      	nop			@ (mov r8, r8)
 8012b38:	e000      	b.n	8012b3c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012b3a:	46c0      	nop			@ (mov r8, r8)
}
 8012b3c:	46c0      	nop			@ (mov r8, r8)
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	b004      	add	sp, #16
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	ffff0000 	.word	0xffff0000
 8012b48:	08011a3d 	.word	0x08011a3d
 8012b4c:	00008003 	.word	0x00008003
 8012b50:	ffffbfff 	.word	0xffffbfff
 8012b54:	08012d67 	.word	0x08012d67
 8012b58:	ffff7fff 	.word	0xffff7fff

08012b5c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2241      	movs	r2, #65	@ 0x41
 8012b68:	5c9b      	ldrb	r3, [r3, r2]
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	2b60      	cmp	r3, #96	@ 0x60
 8012b6e:	d10f      	bne.n	8012b90 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2241      	movs	r2, #65	@ 0x41
 8012b74:	2120      	movs	r1, #32
 8012b76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2240      	movs	r2, #64	@ 0x40
 8012b82:	2100      	movs	r1, #0
 8012b84:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	0018      	movs	r0, r3
 8012b8a:	f7fe fe24 	bl	80117d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012b8e:	e00a      	b.n	8012ba6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2200      	movs	r2, #0
 8012b94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2240      	movs	r2, #64	@ 0x40
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	0018      	movs	r0, r3
 8012ba2:	f7fe fe10 	bl	80117c6 <HAL_I2C_ErrorCallback>
}
 8012ba6:	46c0      	nop			@ (mov r8, r8)
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	b002      	add	sp, #8
 8012bac:	bd80      	pop	{r7, pc}

08012bae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012bae:	b580      	push	{r7, lr}
 8012bb0:	b082      	sub	sp, #8
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	699b      	ldr	r3, [r3, #24]
 8012bbc:	2202      	movs	r2, #2
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	2b02      	cmp	r3, #2
 8012bc2:	d103      	bne.n	8012bcc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	699b      	ldr	r3, [r3, #24]
 8012bd2:	2201      	movs	r2, #1
 8012bd4:	4013      	ands	r3, r2
 8012bd6:	2b01      	cmp	r3, #1
 8012bd8:	d007      	beq.n	8012bea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	699a      	ldr	r2, [r3, #24]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2101      	movs	r1, #1
 8012be6:	430a      	orrs	r2, r1
 8012be8:	619a      	str	r2, [r3, #24]
  }
}
 8012bea:	46c0      	nop			@ (mov r8, r8)
 8012bec:	46bd      	mov	sp, r7
 8012bee:	b002      	add	sp, #8
 8012bf0:	bd80      	pop	{r7, pc}
	...

08012bf4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b084      	sub	sp, #16
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c00:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4920      	ldr	r1, [pc, #128]	@ (8012c90 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012c0e:	400a      	ands	r2, r1
 8012c10:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d105      	bne.n	8012c28 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	2120      	movs	r1, #32
 8012c20:	0018      	movs	r0, r3
 8012c22:	f000 fb4b 	bl	80132bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012c26:	e02e      	b.n	8012c86 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012c30:	189a      	adds	r2, r3, r2
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	2bff      	cmp	r3, #255	@ 0xff
 8012c3e:	d903      	bls.n	8012c48 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	22ff      	movs	r2, #255	@ 0xff
 8012c44:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012c46:	e004      	b.n	8012c52 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c4c:	b29a      	uxth	r2, r3
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c5a:	0019      	movs	r1, r3
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	3328      	adds	r3, #40	@ 0x28
 8012c62:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012c68:	f7fd fac8 	bl	80101fc <HAL_DMA_Start_IT>
 8012c6c:	1e03      	subs	r3, r0, #0
 8012c6e:	d005      	beq.n	8012c7c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2110      	movs	r1, #16
 8012c74:	0018      	movs	r0, r3
 8012c76:	f7ff fe6f 	bl	8012958 <I2C_ITError>
}
 8012c7a:	e004      	b.n	8012c86 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2140      	movs	r1, #64	@ 0x40
 8012c80:	0018      	movs	r0, r3
 8012c82:	f000 fb1b 	bl	80132bc <I2C_Enable_IRQ>
}
 8012c86:	46c0      	nop			@ (mov r8, r8)
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	b004      	add	sp, #16
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	46c0      	nop			@ (mov r8, r8)
 8012c90:	ffffbfff 	.word	0xffffbfff

08012c94 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ca0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4920      	ldr	r1, [pc, #128]	@ (8012d30 <I2C_DMAMasterReceiveCplt+0x9c>)
 8012cae:	400a      	ands	r2, r1
 8012cb0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cb6:	b29b      	uxth	r3, r3
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d105      	bne.n	8012cc8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2120      	movs	r1, #32
 8012cc0:	0018      	movs	r0, r3
 8012cc2:	f000 fafb 	bl	80132bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012cc6:	e02e      	b.n	8012d26 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012cd0:	189a      	adds	r2, r3, r2
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	2bff      	cmp	r3, #255	@ 0xff
 8012cde:	d903      	bls.n	8012ce8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	22ff      	movs	r2, #255	@ 0xff
 8012ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012ce6:	e004      	b.n	8012cf2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012cec:	b29a      	uxth	r2, r3
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	3324      	adds	r3, #36	@ 0x24
 8012cfc:	0019      	movs	r1, r3
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d02:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012d08:	f7fd fa78 	bl	80101fc <HAL_DMA_Start_IT>
 8012d0c:	1e03      	subs	r3, r0, #0
 8012d0e:	d005      	beq.n	8012d1c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2110      	movs	r1, #16
 8012d14:	0018      	movs	r0, r3
 8012d16:	f7ff fe1f 	bl	8012958 <I2C_ITError>
}
 8012d1a:	e004      	b.n	8012d26 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2140      	movs	r1, #64	@ 0x40
 8012d20:	0018      	movs	r0, r3
 8012d22:	f000 facb 	bl	80132bc <I2C_Enable_IRQ>
}
 8012d26:	46c0      	nop			@ (mov r8, r8)
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	b004      	add	sp, #16
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	46c0      	nop			@ (mov r8, r8)
 8012d30:	ffff7fff 	.word	0xffff7fff

08012d34 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b084      	sub	sp, #16
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d40:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	685a      	ldr	r2, [r3, #4]
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2180      	movs	r1, #128	@ 0x80
 8012d4e:	0209      	lsls	r1, r1, #8
 8012d50:	430a      	orrs	r2, r1
 8012d52:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2110      	movs	r1, #16
 8012d58:	0018      	movs	r0, r3
 8012d5a:	f7ff fdfd 	bl	8012958 <I2C_ITError>
}
 8012d5e:	46c0      	nop			@ (mov r8, r8)
 8012d60:	46bd      	mov	sp, r7
 8012d62:	b004      	add	sp, #16
 8012d64:	bd80      	pop	{r7, pc}

08012d66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8012d66:	b580      	push	{r7, lr}
 8012d68:	b084      	sub	sp, #16
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d003      	beq.n	8012d84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d80:	2200      	movs	r2, #0
 8012d82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d003      	beq.n	8012d94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d90:	2200      	movs	r2, #0
 8012d92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	0018      	movs	r0, r3
 8012d98:	f7ff fee0 	bl	8012b5c <I2C_TreatErrorCallback>
}
 8012d9c:	46c0      	nop			@ (mov r8, r8)
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	b004      	add	sp, #16
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b084      	sub	sp, #16
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	603b      	str	r3, [r7, #0]
 8012db0:	1dfb      	adds	r3, r7, #7
 8012db2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012db4:	e030      	b.n	8012e18 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	3301      	adds	r3, #1
 8012dba:	d02d      	beq.n	8012e18 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012dbc:	f7fc fccc 	bl	800f758 <HAL_GetTick>
 8012dc0:	0002      	movs	r2, r0
 8012dc2:	69bb      	ldr	r3, [r7, #24]
 8012dc4:	1ad3      	subs	r3, r2, r3
 8012dc6:	683a      	ldr	r2, [r7, #0]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d302      	bcc.n	8012dd2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d122      	bne.n	8012e18 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	699b      	ldr	r3, [r3, #24]
 8012dd8:	68ba      	ldr	r2, [r7, #8]
 8012dda:	4013      	ands	r3, r2
 8012ddc:	68ba      	ldr	r2, [r7, #8]
 8012dde:	1ad3      	subs	r3, r2, r3
 8012de0:	425a      	negs	r2, r3
 8012de2:	4153      	adcs	r3, r2
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	001a      	movs	r2, r3
 8012de8:	1dfb      	adds	r3, r7, #7
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d113      	bne.n	8012e18 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012df4:	2220      	movs	r2, #32
 8012df6:	431a      	orrs	r2, r3
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2241      	movs	r2, #65	@ 0x41
 8012e00:	2120      	movs	r1, #32
 8012e02:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2242      	movs	r2, #66	@ 0x42
 8012e08:	2100      	movs	r1, #0
 8012e0a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2240      	movs	r2, #64	@ 0x40
 8012e10:	2100      	movs	r1, #0
 8012e12:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012e14:	2301      	movs	r3, #1
 8012e16:	e00f      	b.n	8012e38 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	699b      	ldr	r3, [r3, #24]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	4013      	ands	r3, r2
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	425a      	negs	r2, r3
 8012e28:	4153      	adcs	r3, r2
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	001a      	movs	r2, r3
 8012e2e:	1dfb      	adds	r3, r7, #7
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d0bf      	beq.n	8012db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012e36:	2300      	movs	r3, #0
}
 8012e38:	0018      	movs	r0, r3
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	b004      	add	sp, #16
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012e4c:	e032      	b.n	8012eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	68b9      	ldr	r1, [r7, #8]
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	0018      	movs	r0, r3
 8012e56:	f000 f8ff 	bl	8013058 <I2C_IsErrorOccurred>
 8012e5a:	1e03      	subs	r3, r0, #0
 8012e5c:	d001      	beq.n	8012e62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e030      	b.n	8012ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	3301      	adds	r3, #1
 8012e66:	d025      	beq.n	8012eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012e68:	f7fc fc76 	bl	800f758 <HAL_GetTick>
 8012e6c:	0002      	movs	r2, r0
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	1ad3      	subs	r3, r2, r3
 8012e72:	68ba      	ldr	r2, [r7, #8]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d302      	bcc.n	8012e7e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d11a      	bne.n	8012eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	699b      	ldr	r3, [r3, #24]
 8012e84:	2202      	movs	r2, #2
 8012e86:	4013      	ands	r3, r2
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d013      	beq.n	8012eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e90:	2220      	movs	r2, #32
 8012e92:	431a      	orrs	r2, r3
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2241      	movs	r2, #65	@ 0x41
 8012e9c:	2120      	movs	r1, #32
 8012e9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2242      	movs	r2, #66	@ 0x42
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2240      	movs	r2, #64	@ 0x40
 8012eac:	2100      	movs	r1, #0
 8012eae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	e007      	b.n	8012ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	699b      	ldr	r3, [r3, #24]
 8012eba:	2202      	movs	r2, #2
 8012ebc:	4013      	ands	r3, r2
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	d1c5      	bne.n	8012e4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8012ec2:	2300      	movs	r3, #0
}
 8012ec4:	0018      	movs	r0, r3
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	b004      	add	sp, #16
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012ed8:	e02f      	b.n	8012f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	68b9      	ldr	r1, [r7, #8]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	0018      	movs	r0, r3
 8012ee2:	f000 f8b9 	bl	8013058 <I2C_IsErrorOccurred>
 8012ee6:	1e03      	subs	r3, r0, #0
 8012ee8:	d001      	beq.n	8012eee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012eea:	2301      	movs	r3, #1
 8012eec:	e02d      	b.n	8012f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012eee:	f7fc fc33 	bl	800f758 <HAL_GetTick>
 8012ef2:	0002      	movs	r2, r0
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	1ad3      	subs	r3, r2, r3
 8012ef8:	68ba      	ldr	r2, [r7, #8]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d302      	bcc.n	8012f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d11a      	bne.n	8012f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	699b      	ldr	r3, [r3, #24]
 8012f0a:	2220      	movs	r2, #32
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	2b20      	cmp	r3, #32
 8012f10:	d013      	beq.n	8012f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f16:	2220      	movs	r2, #32
 8012f18:	431a      	orrs	r2, r3
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	2241      	movs	r2, #65	@ 0x41
 8012f22:	2120      	movs	r1, #32
 8012f24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2242      	movs	r2, #66	@ 0x42
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2240      	movs	r2, #64	@ 0x40
 8012f32:	2100      	movs	r1, #0
 8012f34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012f36:	2301      	movs	r3, #1
 8012f38:	e007      	b.n	8012f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	699b      	ldr	r3, [r3, #24]
 8012f40:	2220      	movs	r2, #32
 8012f42:	4013      	ands	r3, r2
 8012f44:	2b20      	cmp	r3, #32
 8012f46:	d1c8      	bne.n	8012eda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012f48:	2300      	movs	r3, #0
}
 8012f4a:	0018      	movs	r0, r3
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	b004      	add	sp, #16
 8012f50:	bd80      	pop	{r7, pc}
	...

08012f54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b084      	sub	sp, #16
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012f60:	e06b      	b.n	801303a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	68b9      	ldr	r1, [r7, #8]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	0018      	movs	r0, r3
 8012f6a:	f000 f875 	bl	8013058 <I2C_IsErrorOccurred>
 8012f6e:	1e03      	subs	r3, r0, #0
 8012f70:	d001      	beq.n	8012f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012f72:	2301      	movs	r3, #1
 8012f74:	e069      	b.n	801304a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	2220      	movs	r2, #32
 8012f7e:	4013      	ands	r3, r2
 8012f80:	2b20      	cmp	r3, #32
 8012f82:	d138      	bne.n	8012ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	699b      	ldr	r3, [r3, #24]
 8012f8a:	2204      	movs	r2, #4
 8012f8c:	4013      	ands	r3, r2
 8012f8e:	2b04      	cmp	r3, #4
 8012f90:	d105      	bne.n	8012f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d001      	beq.n	8012f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	e055      	b.n	801304a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	699b      	ldr	r3, [r3, #24]
 8012fa4:	2210      	movs	r2, #16
 8012fa6:	4013      	ands	r3, r2
 8012fa8:	2b10      	cmp	r3, #16
 8012faa:	d107      	bne.n	8012fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	2210      	movs	r2, #16
 8012fb2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2204      	movs	r2, #4
 8012fb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8012fba:	e002      	b.n	8012fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2220      	movs	r2, #32
 8012fc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	685a      	ldr	r2, [r3, #4]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	491f      	ldr	r1, [pc, #124]	@ (8013054 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8012fd6:	400a      	ands	r2, r1
 8012fd8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2241      	movs	r2, #65	@ 0x41
 8012fde:	2120      	movs	r1, #32
 8012fe0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2242      	movs	r2, #66	@ 0x42
 8012fe6:	2100      	movs	r1, #0
 8012fe8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2240      	movs	r2, #64	@ 0x40
 8012fee:	2100      	movs	r1, #0
 8012ff0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	e029      	b.n	801304a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012ff6:	f7fc fbaf 	bl	800f758 <HAL_GetTick>
 8012ffa:	0002      	movs	r2, r0
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	1ad3      	subs	r3, r2, r3
 8013000:	68ba      	ldr	r2, [r7, #8]
 8013002:	429a      	cmp	r2, r3
 8013004:	d302      	bcc.n	801300c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d116      	bne.n	801303a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	699b      	ldr	r3, [r3, #24]
 8013012:	2204      	movs	r2, #4
 8013014:	4013      	ands	r3, r2
 8013016:	2b04      	cmp	r3, #4
 8013018:	d00f      	beq.n	801303a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801301e:	2220      	movs	r2, #32
 8013020:	431a      	orrs	r2, r3
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2241      	movs	r2, #65	@ 0x41
 801302a:	2120      	movs	r1, #32
 801302c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2240      	movs	r2, #64	@ 0x40
 8013032:	2100      	movs	r1, #0
 8013034:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013036:	2301      	movs	r3, #1
 8013038:	e007      	b.n	801304a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	699b      	ldr	r3, [r3, #24]
 8013040:	2204      	movs	r2, #4
 8013042:	4013      	ands	r3, r2
 8013044:	2b04      	cmp	r3, #4
 8013046:	d18c      	bne.n	8012f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013048:	2300      	movs	r3, #0
}
 801304a:	0018      	movs	r0, r3
 801304c:	46bd      	mov	sp, r7
 801304e:	b004      	add	sp, #16
 8013050:	bd80      	pop	{r7, pc}
 8013052:	46c0      	nop			@ (mov r8, r8)
 8013054:	fe00e800 	.word	0xfe00e800

08013058 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08a      	sub	sp, #40	@ 0x28
 801305c:	af00      	add	r7, sp, #0
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013064:	2327      	movs	r3, #39	@ 0x27
 8013066:	18fb      	adds	r3, r7, r3
 8013068:	2200      	movs	r2, #0
 801306a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	699b      	ldr	r3, [r3, #24]
 8013072:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8013074:	2300      	movs	r3, #0
 8013076:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801307c:	69bb      	ldr	r3, [r7, #24]
 801307e:	2210      	movs	r2, #16
 8013080:	4013      	ands	r3, r2
 8013082:	d100      	bne.n	8013086 <I2C_IsErrorOccurred+0x2e>
 8013084:	e079      	b.n	801317a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2210      	movs	r2, #16
 801308c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801308e:	e057      	b.n	8013140 <I2C_IsErrorOccurred+0xe8>
 8013090:	2227      	movs	r2, #39	@ 0x27
 8013092:	18bb      	adds	r3, r7, r2
 8013094:	18ba      	adds	r2, r7, r2
 8013096:	7812      	ldrb	r2, [r2, #0]
 8013098:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	3301      	adds	r3, #1
 801309e:	d04f      	beq.n	8013140 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80130a0:	f7fc fb5a 	bl	800f758 <HAL_GetTick>
 80130a4:	0002      	movs	r2, r0
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	1ad3      	subs	r3, r2, r3
 80130aa:	68ba      	ldr	r2, [r7, #8]
 80130ac:	429a      	cmp	r2, r3
 80130ae:	d302      	bcc.n	80130b6 <I2C_IsErrorOccurred+0x5e>
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d144      	bne.n	8013140 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	685a      	ldr	r2, [r3, #4]
 80130bc:	2380      	movs	r3, #128	@ 0x80
 80130be:	01db      	lsls	r3, r3, #7
 80130c0:	4013      	ands	r3, r2
 80130c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80130c4:	2013      	movs	r0, #19
 80130c6:	183b      	adds	r3, r7, r0
 80130c8:	68fa      	ldr	r2, [r7, #12]
 80130ca:	2142      	movs	r1, #66	@ 0x42
 80130cc:	5c52      	ldrb	r2, [r2, r1]
 80130ce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	699a      	ldr	r2, [r3, #24]
 80130d6:	2380      	movs	r3, #128	@ 0x80
 80130d8:	021b      	lsls	r3, r3, #8
 80130da:	401a      	ands	r2, r3
 80130dc:	2380      	movs	r3, #128	@ 0x80
 80130de:	021b      	lsls	r3, r3, #8
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d126      	bne.n	8013132 <I2C_IsErrorOccurred+0xda>
 80130e4:	697a      	ldr	r2, [r7, #20]
 80130e6:	2380      	movs	r3, #128	@ 0x80
 80130e8:	01db      	lsls	r3, r3, #7
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d021      	beq.n	8013132 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80130ee:	183b      	adds	r3, r7, r0
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b20      	cmp	r3, #32
 80130f4:	d01d      	beq.n	8013132 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2180      	movs	r1, #128	@ 0x80
 8013102:	01c9      	lsls	r1, r1, #7
 8013104:	430a      	orrs	r2, r1
 8013106:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8013108:	f7fc fb26 	bl	800f758 <HAL_GetTick>
 801310c:	0003      	movs	r3, r0
 801310e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013110:	e00f      	b.n	8013132 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8013112:	f7fc fb21 	bl	800f758 <HAL_GetTick>
 8013116:	0002      	movs	r2, r0
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	2b19      	cmp	r3, #25
 801311e:	d908      	bls.n	8013132 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8013120:	6a3b      	ldr	r3, [r7, #32]
 8013122:	2220      	movs	r2, #32
 8013124:	4313      	orrs	r3, r2
 8013126:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8013128:	2327      	movs	r3, #39	@ 0x27
 801312a:	18fb      	adds	r3, r7, r3
 801312c:	2201      	movs	r2, #1
 801312e:	701a      	strb	r2, [r3, #0]

              break;
 8013130:	e006      	b.n	8013140 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	699b      	ldr	r3, [r3, #24]
 8013138:	2220      	movs	r2, #32
 801313a:	4013      	ands	r3, r2
 801313c:	2b20      	cmp	r3, #32
 801313e:	d1e8      	bne.n	8013112 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	699b      	ldr	r3, [r3, #24]
 8013146:	2220      	movs	r2, #32
 8013148:	4013      	ands	r3, r2
 801314a:	2b20      	cmp	r3, #32
 801314c:	d004      	beq.n	8013158 <I2C_IsErrorOccurred+0x100>
 801314e:	2327      	movs	r3, #39	@ 0x27
 8013150:	18fb      	adds	r3, r7, r3
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d09b      	beq.n	8013090 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8013158:	2327      	movs	r3, #39	@ 0x27
 801315a:	18fb      	adds	r3, r7, r3
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d103      	bne.n	801316a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2220      	movs	r2, #32
 8013168:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801316a:	6a3b      	ldr	r3, [r7, #32]
 801316c:	2204      	movs	r2, #4
 801316e:	4313      	orrs	r3, r2
 8013170:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8013172:	2327      	movs	r3, #39	@ 0x27
 8013174:	18fb      	adds	r3, r7, r3
 8013176:	2201      	movs	r2, #1
 8013178:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	699b      	ldr	r3, [r3, #24]
 8013180:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8013182:	69ba      	ldr	r2, [r7, #24]
 8013184:	2380      	movs	r3, #128	@ 0x80
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	4013      	ands	r3, r2
 801318a:	d00c      	beq.n	80131a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801318c:	6a3b      	ldr	r3, [r7, #32]
 801318e:	2201      	movs	r2, #1
 8013190:	4313      	orrs	r3, r2
 8013192:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	2280      	movs	r2, #128	@ 0x80
 801319a:	0052      	lsls	r2, r2, #1
 801319c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801319e:	2327      	movs	r3, #39	@ 0x27
 80131a0:	18fb      	adds	r3, r7, r3
 80131a2:	2201      	movs	r2, #1
 80131a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80131a6:	69ba      	ldr	r2, [r7, #24]
 80131a8:	2380      	movs	r3, #128	@ 0x80
 80131aa:	00db      	lsls	r3, r3, #3
 80131ac:	4013      	ands	r3, r2
 80131ae:	d00c      	beq.n	80131ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80131b0:	6a3b      	ldr	r3, [r7, #32]
 80131b2:	2208      	movs	r2, #8
 80131b4:	4313      	orrs	r3, r2
 80131b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2280      	movs	r2, #128	@ 0x80
 80131be:	00d2      	lsls	r2, r2, #3
 80131c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80131c2:	2327      	movs	r3, #39	@ 0x27
 80131c4:	18fb      	adds	r3, r7, r3
 80131c6:	2201      	movs	r2, #1
 80131c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80131ca:	69ba      	ldr	r2, [r7, #24]
 80131cc:	2380      	movs	r3, #128	@ 0x80
 80131ce:	009b      	lsls	r3, r3, #2
 80131d0:	4013      	ands	r3, r2
 80131d2:	d00c      	beq.n	80131ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80131d4:	6a3b      	ldr	r3, [r7, #32]
 80131d6:	2202      	movs	r2, #2
 80131d8:	4313      	orrs	r3, r2
 80131da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	2280      	movs	r2, #128	@ 0x80
 80131e2:	0092      	lsls	r2, r2, #2
 80131e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80131e6:	2327      	movs	r3, #39	@ 0x27
 80131e8:	18fb      	adds	r3, r7, r3
 80131ea:	2201      	movs	r2, #1
 80131ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80131ee:	2327      	movs	r3, #39	@ 0x27
 80131f0:	18fb      	adds	r3, r7, r3
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d01d      	beq.n	8013234 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	0018      	movs	r0, r3
 80131fc:	f7ff fcd7 	bl	8012bae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	685a      	ldr	r2, [r3, #4]
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	490e      	ldr	r1, [pc, #56]	@ (8013244 <I2C_IsErrorOccurred+0x1ec>)
 801320c:	400a      	ands	r2, r1
 801320e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013214:	6a3b      	ldr	r3, [r7, #32]
 8013216:	431a      	orrs	r2, r3
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2241      	movs	r2, #65	@ 0x41
 8013220:	2120      	movs	r1, #32
 8013222:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2242      	movs	r2, #66	@ 0x42
 8013228:	2100      	movs	r1, #0
 801322a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	2240      	movs	r2, #64	@ 0x40
 8013230:	2100      	movs	r1, #0
 8013232:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8013234:	2327      	movs	r3, #39	@ 0x27
 8013236:	18fb      	adds	r3, r7, r3
 8013238:	781b      	ldrb	r3, [r3, #0]
}
 801323a:	0018      	movs	r0, r3
 801323c:	46bd      	mov	sp, r7
 801323e:	b00a      	add	sp, #40	@ 0x28
 8013240:	bd80      	pop	{r7, pc}
 8013242:	46c0      	nop			@ (mov r8, r8)
 8013244:	fe00e800 	.word	0xfe00e800

08013248 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8013248:	b590      	push	{r4, r7, lr}
 801324a:	b087      	sub	sp, #28
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	0008      	movs	r0, r1
 8013252:	0011      	movs	r1, r2
 8013254:	607b      	str	r3, [r7, #4]
 8013256:	240a      	movs	r4, #10
 8013258:	193b      	adds	r3, r7, r4
 801325a:	1c02      	adds	r2, r0, #0
 801325c:	801a      	strh	r2, [r3, #0]
 801325e:	2009      	movs	r0, #9
 8013260:	183b      	adds	r3, r7, r0
 8013262:	1c0a      	adds	r2, r1, #0
 8013264:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013266:	193b      	adds	r3, r7, r4
 8013268:	881b      	ldrh	r3, [r3, #0]
 801326a:	059b      	lsls	r3, r3, #22
 801326c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801326e:	183b      	adds	r3, r7, r0
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	0419      	lsls	r1, r3, #16
 8013274:	23ff      	movs	r3, #255	@ 0xff
 8013276:	041b      	lsls	r3, r3, #16
 8013278:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801327a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8013280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013282:	4313      	orrs	r3, r2
 8013284:	005b      	lsls	r3, r3, #1
 8013286:	085b      	lsrs	r3, r3, #1
 8013288:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013292:	0d51      	lsrs	r1, r2, #21
 8013294:	2280      	movs	r2, #128	@ 0x80
 8013296:	00d2      	lsls	r2, r2, #3
 8013298:	400a      	ands	r2, r1
 801329a:	4907      	ldr	r1, [pc, #28]	@ (80132b8 <I2C_TransferConfig+0x70>)
 801329c:	430a      	orrs	r2, r1
 801329e:	43d2      	mvns	r2, r2
 80132a0:	401a      	ands	r2, r3
 80132a2:	0011      	movs	r1, r2
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	697a      	ldr	r2, [r7, #20]
 80132aa:	430a      	orrs	r2, r1
 80132ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80132ae:	46c0      	nop			@ (mov r8, r8)
 80132b0:	46bd      	mov	sp, r7
 80132b2:	b007      	add	sp, #28
 80132b4:	bd90      	pop	{r4, r7, pc}
 80132b6:	46c0      	nop			@ (mov r8, r8)
 80132b8:	03ff63ff 	.word	0x03ff63ff

080132bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b084      	sub	sp, #16
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	000a      	movs	r2, r1
 80132c6:	1cbb      	adds	r3, r7, #2
 80132c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80132ca:	2300      	movs	r3, #0
 80132cc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80132d2:	4b3e      	ldr	r3, [pc, #248]	@ (80133cc <I2C_Enable_IRQ+0x110>)
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d035      	beq.n	8013344 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80132dc:	4b3c      	ldr	r3, [pc, #240]	@ (80133d0 <I2C_Enable_IRQ+0x114>)
 80132de:	429a      	cmp	r2, r3
 80132e0:	d030      	beq.n	8013344 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80132e6:	4b3b      	ldr	r3, [pc, #236]	@ (80133d4 <I2C_Enable_IRQ+0x118>)
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d02b      	beq.n	8013344 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80132ec:	1cbb      	adds	r3, r7, #2
 80132ee:	2200      	movs	r2, #0
 80132f0:	5e9b      	ldrsh	r3, [r3, r2]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	da03      	bge.n	80132fe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	22b8      	movs	r2, #184	@ 0xb8
 80132fa:	4313      	orrs	r3, r2
 80132fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80132fe:	1cbb      	adds	r3, r7, #2
 8013300:	881b      	ldrh	r3, [r3, #0]
 8013302:	2201      	movs	r2, #1
 8013304:	4013      	ands	r3, r2
 8013306:	d003      	beq.n	8013310 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	22f2      	movs	r2, #242	@ 0xf2
 801330c:	4313      	orrs	r3, r2
 801330e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013310:	1cbb      	adds	r3, r7, #2
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	2202      	movs	r2, #2
 8013316:	4013      	ands	r3, r2
 8013318:	d003      	beq.n	8013322 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	22f4      	movs	r2, #244	@ 0xf4
 801331e:	4313      	orrs	r3, r2
 8013320:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8013322:	1cbb      	adds	r3, r7, #2
 8013324:	881b      	ldrh	r3, [r3, #0]
 8013326:	2b10      	cmp	r3, #16
 8013328:	d103      	bne.n	8013332 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2290      	movs	r2, #144	@ 0x90
 801332e:	4313      	orrs	r3, r2
 8013330:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8013332:	1cbb      	adds	r3, r7, #2
 8013334:	881b      	ldrh	r3, [r3, #0]
 8013336:	2b20      	cmp	r3, #32
 8013338:	d13c      	bne.n	80133b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2220      	movs	r2, #32
 801333e:	4313      	orrs	r3, r2
 8013340:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8013342:	e037      	b.n	80133b4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8013344:	1cbb      	adds	r3, r7, #2
 8013346:	2200      	movs	r2, #0
 8013348:	5e9b      	ldrsh	r3, [r3, r2]
 801334a:	2b00      	cmp	r3, #0
 801334c:	da03      	bge.n	8013356 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	22b8      	movs	r2, #184	@ 0xb8
 8013352:	4313      	orrs	r3, r2
 8013354:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8013356:	1cbb      	adds	r3, r7, #2
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	2201      	movs	r2, #1
 801335c:	4013      	ands	r3, r2
 801335e:	d003      	beq.n	8013368 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	22f2      	movs	r2, #242	@ 0xf2
 8013364:	4313      	orrs	r3, r2
 8013366:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013368:	1cbb      	adds	r3, r7, #2
 801336a:	881b      	ldrh	r3, [r3, #0]
 801336c:	2202      	movs	r2, #2
 801336e:	4013      	ands	r3, r2
 8013370:	d003      	beq.n	801337a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	22f4      	movs	r2, #244	@ 0xf4
 8013376:	4313      	orrs	r3, r2
 8013378:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801337a:	1cbb      	adds	r3, r7, #2
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	2b10      	cmp	r3, #16
 8013380:	d103      	bne.n	801338a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2290      	movs	r2, #144	@ 0x90
 8013386:	4313      	orrs	r3, r2
 8013388:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801338a:	1cbb      	adds	r3, r7, #2
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	2b20      	cmp	r3, #32
 8013390:	d103      	bne.n	801339a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2260      	movs	r2, #96	@ 0x60
 8013396:	4313      	orrs	r3, r2
 8013398:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801339e:	4b0d      	ldr	r3, [pc, #52]	@ (80133d4 <I2C_Enable_IRQ+0x118>)
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d007      	beq.n	80133b4 <I2C_Enable_IRQ+0xf8>
 80133a4:	1cbb      	adds	r3, r7, #2
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	2b40      	cmp	r3, #64	@ 0x40
 80133aa:	d103      	bne.n	80133b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2240      	movs	r2, #64	@ 0x40
 80133b0:	4313      	orrs	r3, r2
 80133b2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	6819      	ldr	r1, [r3, #0]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	68fa      	ldr	r2, [r7, #12]
 80133c0:	430a      	orrs	r2, r1
 80133c2:	601a      	str	r2, [r3, #0]
}
 80133c4:	46c0      	nop			@ (mov r8, r8)
 80133c6:	46bd      	mov	sp, r7
 80133c8:	b004      	add	sp, #16
 80133ca:	bd80      	pop	{r7, pc}
 80133cc:	08011c3d 	.word	0x08011c3d
 80133d0:	0801206d 	.word	0x0801206d
 80133d4:	08011e35 	.word	0x08011e35

080133d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b084      	sub	sp, #16
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	000a      	movs	r2, r1
 80133e2:	1cbb      	adds	r3, r7, #2
 80133e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80133e6:	2300      	movs	r3, #0
 80133e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80133ea:	1cbb      	adds	r3, r7, #2
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	2201      	movs	r2, #1
 80133f0:	4013      	ands	r3, r2
 80133f2:	d010      	beq.n	8013416 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2242      	movs	r2, #66	@ 0x42
 80133f8:	4313      	orrs	r3, r2
 80133fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2241      	movs	r2, #65	@ 0x41
 8013400:	5c9b      	ldrb	r3, [r3, r2]
 8013402:	b2db      	uxtb	r3, r3
 8013404:	001a      	movs	r2, r3
 8013406:	2328      	movs	r3, #40	@ 0x28
 8013408:	4013      	ands	r3, r2
 801340a:	2b28      	cmp	r3, #40	@ 0x28
 801340c:	d003      	beq.n	8013416 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	22b0      	movs	r2, #176	@ 0xb0
 8013412:	4313      	orrs	r3, r2
 8013414:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8013416:	1cbb      	adds	r3, r7, #2
 8013418:	881b      	ldrh	r3, [r3, #0]
 801341a:	2202      	movs	r2, #2
 801341c:	4013      	ands	r3, r2
 801341e:	d010      	beq.n	8013442 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2244      	movs	r2, #68	@ 0x44
 8013424:	4313      	orrs	r3, r2
 8013426:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	2241      	movs	r2, #65	@ 0x41
 801342c:	5c9b      	ldrb	r3, [r3, r2]
 801342e:	b2db      	uxtb	r3, r3
 8013430:	001a      	movs	r2, r3
 8013432:	2328      	movs	r3, #40	@ 0x28
 8013434:	4013      	ands	r3, r2
 8013436:	2b28      	cmp	r3, #40	@ 0x28
 8013438:	d003      	beq.n	8013442 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	22b0      	movs	r2, #176	@ 0xb0
 801343e:	4313      	orrs	r3, r2
 8013440:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8013442:	1cbb      	adds	r3, r7, #2
 8013444:	2200      	movs	r2, #0
 8013446:	5e9b      	ldrsh	r3, [r3, r2]
 8013448:	2b00      	cmp	r3, #0
 801344a:	da03      	bge.n	8013454 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	22b8      	movs	r2, #184	@ 0xb8
 8013450:	4313      	orrs	r3, r2
 8013452:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8013454:	1cbb      	adds	r3, r7, #2
 8013456:	881b      	ldrh	r3, [r3, #0]
 8013458:	2b10      	cmp	r3, #16
 801345a:	d103      	bne.n	8013464 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2290      	movs	r2, #144	@ 0x90
 8013460:	4313      	orrs	r3, r2
 8013462:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8013464:	1cbb      	adds	r3, r7, #2
 8013466:	881b      	ldrh	r3, [r3, #0]
 8013468:	2b20      	cmp	r3, #32
 801346a:	d103      	bne.n	8013474 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2220      	movs	r2, #32
 8013470:	4313      	orrs	r3, r2
 8013472:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8013474:	1cbb      	adds	r3, r7, #2
 8013476:	881b      	ldrh	r3, [r3, #0]
 8013478:	2b40      	cmp	r3, #64	@ 0x40
 801347a:	d103      	bne.n	8013484 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2240      	movs	r2, #64	@ 0x40
 8013480:	4313      	orrs	r3, r2
 8013482:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	681a      	ldr	r2, [r3, #0]
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	43d9      	mvns	r1, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	400a      	ands	r2, r1
 8013494:	601a      	str	r2, [r3, #0]
}
 8013496:	46c0      	nop			@ (mov r8, r8)
 8013498:	46bd      	mov	sp, r7
 801349a:	b004      	add	sp, #16
 801349c:	bd80      	pop	{r7, pc}
	...

080134a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2241      	movs	r2, #65	@ 0x41
 80134ae:	5c9b      	ldrb	r3, [r3, r2]
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	2b20      	cmp	r3, #32
 80134b4:	d138      	bne.n	8013528 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2240      	movs	r2, #64	@ 0x40
 80134ba:	5c9b      	ldrb	r3, [r3, r2]
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d101      	bne.n	80134c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80134c0:	2302      	movs	r3, #2
 80134c2:	e032      	b.n	801352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2240      	movs	r2, #64	@ 0x40
 80134c8:	2101      	movs	r1, #1
 80134ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2241      	movs	r2, #65	@ 0x41
 80134d0:	2124      	movs	r1, #36	@ 0x24
 80134d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	681a      	ldr	r2, [r3, #0]
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2101      	movs	r1, #1
 80134e0:	438a      	bics	r2, r1
 80134e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	681a      	ldr	r2, [r3, #0]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	4911      	ldr	r1, [pc, #68]	@ (8013534 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80134f0:	400a      	ands	r2, r1
 80134f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	6819      	ldr	r1, [r3, #0]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	683a      	ldr	r2, [r7, #0]
 8013500:	430a      	orrs	r2, r1
 8013502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	681a      	ldr	r2, [r3, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2101      	movs	r1, #1
 8013510:	430a      	orrs	r2, r1
 8013512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2241      	movs	r2, #65	@ 0x41
 8013518:	2120      	movs	r1, #32
 801351a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2240      	movs	r2, #64	@ 0x40
 8013520:	2100      	movs	r1, #0
 8013522:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013524:	2300      	movs	r3, #0
 8013526:	e000      	b.n	801352a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013528:	2302      	movs	r3, #2
  }
}
 801352a:	0018      	movs	r0, r3
 801352c:	46bd      	mov	sp, r7
 801352e:	b002      	add	sp, #8
 8013530:	bd80      	pop	{r7, pc}
 8013532:	46c0      	nop			@ (mov r8, r8)
 8013534:	ffffefff 	.word	0xffffefff

08013538 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
 8013540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2241      	movs	r2, #65	@ 0x41
 8013546:	5c9b      	ldrb	r3, [r3, r2]
 8013548:	b2db      	uxtb	r3, r3
 801354a:	2b20      	cmp	r3, #32
 801354c:	d139      	bne.n	80135c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2240      	movs	r2, #64	@ 0x40
 8013552:	5c9b      	ldrb	r3, [r3, r2]
 8013554:	2b01      	cmp	r3, #1
 8013556:	d101      	bne.n	801355c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8013558:	2302      	movs	r3, #2
 801355a:	e033      	b.n	80135c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2240      	movs	r2, #64	@ 0x40
 8013560:	2101      	movs	r1, #1
 8013562:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2241      	movs	r2, #65	@ 0x41
 8013568:	2124      	movs	r1, #36	@ 0x24
 801356a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	681a      	ldr	r2, [r3, #0]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2101      	movs	r1, #1
 8013578:	438a      	bics	r2, r1
 801357a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	4a11      	ldr	r2, [pc, #68]	@ (80135cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8013588:	4013      	ands	r3, r2
 801358a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	021b      	lsls	r3, r3, #8
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	4313      	orrs	r3, r2
 8013594:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	68fa      	ldr	r2, [r7, #12]
 801359c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	2101      	movs	r1, #1
 80135aa:	430a      	orrs	r2, r1
 80135ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2241      	movs	r2, #65	@ 0x41
 80135b2:	2120      	movs	r1, #32
 80135b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2240      	movs	r2, #64	@ 0x40
 80135ba:	2100      	movs	r1, #0
 80135bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80135be:	2300      	movs	r3, #0
 80135c0:	e000      	b.n	80135c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80135c2:	2302      	movs	r3, #2
  }
}
 80135c4:	0018      	movs	r0, r3
 80135c6:	46bd      	mov	sp, r7
 80135c8:	b004      	add	sp, #16
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	fffff0ff 	.word	0xfffff0ff

080135d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b088      	sub	sp, #32
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d101      	bne.n	80135e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80135de:	2301      	movs	r3, #1
 80135e0:	e0e1      	b.n	80137a6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2235      	movs	r2, #53	@ 0x35
 80135e6:	5c9b      	ldrb	r3, [r3, r2]
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d107      	bne.n	80135fe <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2234      	movs	r2, #52	@ 0x34
 80135f2:	2100      	movs	r1, #0
 80135f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	0018      	movs	r0, r3
 80135fa:	f7f4 fec7 	bl	800838c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2235      	movs	r2, #53	@ 0x35
 8013602:	2102      	movs	r1, #2
 8013604:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	69da      	ldr	r2, [r3, #28]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	4967      	ldr	r1, [pc, #412]	@ (80137b0 <HAL_I2S_Init+0x1e0>)
 8013612:	400a      	ands	r2, r1
 8013614:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	2202      	movs	r2, #2
 801361c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	695b      	ldr	r3, [r3, #20]
 8013622:	2b02      	cmp	r3, #2
 8013624:	d073      	beq.n	801370e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d102      	bne.n	8013634 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801362e:	2310      	movs	r3, #16
 8013630:	617b      	str	r3, [r7, #20]
 8013632:	e001      	b.n	8013638 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8013634:	2320      	movs	r3, #32
 8013636:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	689b      	ldr	r3, [r3, #8]
 801363c:	2b20      	cmp	r3, #32
 801363e:	d802      	bhi.n	8013646 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	005b      	lsls	r3, r3, #1
 8013644:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8013646:	f002 fed3 	bl	80163f0 <HAL_RCC_GetSysClockFreq>
 801364a:	0003      	movs	r3, r0
 801364c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	691a      	ldr	r2, [r3, #16]
 8013652:	2380      	movs	r3, #128	@ 0x80
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	429a      	cmp	r2, r3
 8013658:	d131      	bne.n	80136be <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d016      	beq.n	8013690 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	009b      	lsls	r3, r3, #2
 8013666:	0019      	movs	r1, r3
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ec fd9b 	bl	80001a4 <__udivsi3>
 801366e:	0003      	movs	r3, r0
 8013670:	001a      	movs	r2, r3
 8013672:	0013      	movs	r3, r2
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	189b      	adds	r3, r3, r2
 8013678:	005b      	lsls	r3, r3, #1
 801367a:	001a      	movs	r2, r3
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	695b      	ldr	r3, [r3, #20]
 8013680:	0019      	movs	r1, r3
 8013682:	0010      	movs	r0, r2
 8013684:	f7ec fd8e 	bl	80001a4 <__udivsi3>
 8013688:	0003      	movs	r3, r0
 801368a:	3305      	adds	r3, #5
 801368c:	613b      	str	r3, [r7, #16]
 801368e:	e02a      	b.n	80136e6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	00db      	lsls	r3, r3, #3
 8013694:	0019      	movs	r1, r3
 8013696:	68f8      	ldr	r0, [r7, #12]
 8013698:	f7ec fd84 	bl	80001a4 <__udivsi3>
 801369c:	0003      	movs	r3, r0
 801369e:	001a      	movs	r2, r3
 80136a0:	0013      	movs	r3, r2
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	189b      	adds	r3, r3, r2
 80136a6:	005b      	lsls	r3, r3, #1
 80136a8:	001a      	movs	r2, r3
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	695b      	ldr	r3, [r3, #20]
 80136ae:	0019      	movs	r1, r3
 80136b0:	0010      	movs	r0, r2
 80136b2:	f7ec fd77 	bl	80001a4 <__udivsi3>
 80136b6:	0003      	movs	r3, r0
 80136b8:	3305      	adds	r3, #5
 80136ba:	613b      	str	r3, [r7, #16]
 80136bc:	e013      	b.n	80136e6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80136be:	6979      	ldr	r1, [r7, #20]
 80136c0:	68f8      	ldr	r0, [r7, #12]
 80136c2:	f7ec fd6f 	bl	80001a4 <__udivsi3>
 80136c6:	0003      	movs	r3, r0
 80136c8:	001a      	movs	r2, r3
 80136ca:	0013      	movs	r3, r2
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	189b      	adds	r3, r3, r2
 80136d0:	005b      	lsls	r3, r3, #1
 80136d2:	001a      	movs	r2, r3
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	695b      	ldr	r3, [r3, #20]
 80136d8:	0019      	movs	r1, r3
 80136da:	0010      	movs	r0, r2
 80136dc:	f7ec fd62 	bl	80001a4 <__udivsi3>
 80136e0:	0003      	movs	r3, r0
 80136e2:	3305      	adds	r3, #5
 80136e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	210a      	movs	r1, #10
 80136ea:	0018      	movs	r0, r3
 80136ec:	f7ec fd5a 	bl	80001a4 <__udivsi3>
 80136f0:	0003      	movs	r3, r0
 80136f2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	2201      	movs	r2, #1
 80136f8:	4013      	ands	r3, r2
 80136fa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80136fc:	693a      	ldr	r2, [r7, #16]
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	1ad3      	subs	r3, r2, r3
 8013702:	085b      	lsrs	r3, r3, #1
 8013704:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8013706:	69bb      	ldr	r3, [r7, #24]
 8013708:	021b      	lsls	r3, r3, #8
 801370a:	61bb      	str	r3, [r7, #24]
 801370c:	e003      	b.n	8013716 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801370e:	2302      	movs	r3, #2
 8013710:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8013712:	2300      	movs	r3, #0
 8013714:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8013716:	69fb      	ldr	r3, [r7, #28]
 8013718:	2b01      	cmp	r3, #1
 801371a:	d902      	bls.n	8013722 <HAL_I2S_Init+0x152>
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	2bff      	cmp	r3, #255	@ 0xff
 8013720:	d907      	bls.n	8013732 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013726:	2210      	movs	r2, #16
 8013728:	431a      	orrs	r2, r3
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801372e:	2301      	movs	r3, #1
 8013730:	e039      	b.n	80137a6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	691a      	ldr	r2, [r3, #16]
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	431a      	orrs	r2, r3
 801373a:	0011      	movs	r1, r2
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	69fa      	ldr	r2, [r7, #28]
 8013742:	430a      	orrs	r2, r1
 8013744:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	69db      	ldr	r3, [r3, #28]
 801374c:	4a18      	ldr	r2, [pc, #96]	@ (80137b0 <HAL_I2S_Init+0x1e0>)
 801374e:	401a      	ands	r2, r3
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6859      	ldr	r1, [r3, #4]
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	689b      	ldr	r3, [r3, #8]
 8013758:	4319      	orrs	r1, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	4319      	orrs	r1, r3
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	699b      	ldr	r3, [r3, #24]
 8013764:	430b      	orrs	r3, r1
 8013766:	431a      	orrs	r2, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	2180      	movs	r1, #128	@ 0x80
 801376e:	0109      	lsls	r1, r1, #4
 8013770:	430a      	orrs	r2, r1
 8013772:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	689b      	ldr	r3, [r3, #8]
 8013778:	2b30      	cmp	r3, #48	@ 0x30
 801377a:	d003      	beq.n	8013784 <HAL_I2S_Init+0x1b4>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	689b      	ldr	r3, [r3, #8]
 8013780:	2bb0      	cmp	r3, #176	@ 0xb0
 8013782:	d108      	bne.n	8013796 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	69da      	ldr	r2, [r3, #28]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2180      	movs	r1, #128	@ 0x80
 8013790:	0149      	lsls	r1, r1, #5
 8013792:	430a      	orrs	r2, r1
 8013794:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2200      	movs	r2, #0
 801379a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2235      	movs	r2, #53	@ 0x35
 80137a0:	2101      	movs	r1, #1
 80137a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80137a4:	2300      	movs	r3, #0
}
 80137a6:	0018      	movs	r0, r3
 80137a8:	46bd      	mov	sp, r7
 80137aa:	b008      	add	sp, #32
 80137ac:	bd80      	pop	{r7, pc}
 80137ae:	46c0      	nop			@ (mov r8, r8)
 80137b0:	fffff040 	.word	0xfffff040

080137b4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	1dbb      	adds	r3, r7, #6
 80137c0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d003      	beq.n	80137d0 <HAL_I2S_Receive_DMA+0x1c>
 80137c8:	1dbb      	adds	r3, r7, #6
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d101      	bne.n	80137d4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80137d0:	2301      	movs	r3, #1
 80137d2:	e0a6      	b.n	8013922 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	2234      	movs	r2, #52	@ 0x34
 80137d8:	5c9b      	ldrb	r3, [r3, r2]
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d101      	bne.n	80137e4 <HAL_I2S_Receive_DMA+0x30>
 80137e0:	2302      	movs	r3, #2
 80137e2:	e09e      	b.n	8013922 <HAL_I2S_Receive_DMA+0x16e>
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	2234      	movs	r2, #52	@ 0x34
 80137e8:	2101      	movs	r1, #1
 80137ea:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2235      	movs	r2, #53	@ 0x35
 80137f0:	5c9b      	ldrb	r3, [r3, r2]
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	d005      	beq.n	8013804 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2234      	movs	r2, #52	@ 0x34
 80137fc:	2100      	movs	r1, #0
 80137fe:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8013800:	2302      	movs	r3, #2
 8013802:	e08e      	b.n	8013922 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2235      	movs	r2, #53	@ 0x35
 8013808:	2104      	movs	r1, #4
 801380a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	68ba      	ldr	r2, [r7, #8]
 8013816:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	69db      	ldr	r3, [r3, #28]
 801381e:	2207      	movs	r2, #7
 8013820:	4013      	ands	r3, r2
 8013822:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	2b03      	cmp	r3, #3
 8013828:	d002      	beq.n	8013830 <HAL_I2S_Receive_DMA+0x7c>
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	2b05      	cmp	r3, #5
 801382e:	d10c      	bne.n	801384a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8013830:	1dbb      	adds	r3, r7, #6
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	18db      	adds	r3, r3, r3
 8013836:	b29a      	uxth	r2, r3
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801383c:	1dbb      	adds	r3, r7, #6
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	18db      	adds	r3, r3, r3
 8013842:	b29a      	uxth	r2, r3
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013848:	e007      	b.n	801385a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	1dba      	adds	r2, r7, #6
 801384e:	8812      	ldrh	r2, [r2, #0]
 8013850:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	1dba      	adds	r2, r7, #6
 8013856:	8812      	ldrh	r2, [r2, #0]
 8013858:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801385e:	4a33      	ldr	r2, [pc, #204]	@ (801392c <HAL_I2S_Receive_DMA+0x178>)
 8013860:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013866:	4a32      	ldr	r2, [pc, #200]	@ (8013930 <HAL_I2S_Receive_DMA+0x17c>)
 8013868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801386e:	4a31      	ldr	r2, [pc, #196]	@ (8013934 <HAL_I2S_Receive_DMA+0x180>)
 8013870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	69da      	ldr	r2, [r3, #28]
 8013878:	23c0      	movs	r3, #192	@ 0xc0
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	401a      	ands	r2, r3
 801387e:	23c0      	movs	r3, #192	@ 0xc0
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	429a      	cmp	r2, r3
 8013884:	d10a      	bne.n	801389c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013886:	2300      	movs	r3, #0
 8013888:	613b      	str	r3, [r7, #16]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	68db      	ldr	r3, [r3, #12]
 8013890:	613b      	str	r3, [r7, #16]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	613b      	str	r3, [r7, #16]
 801389a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	330c      	adds	r3, #12
 80138a6:	0019      	movs	r1, r3
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ac:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80138b4:	f7fc fca2 	bl	80101fc <HAL_DMA_Start_IT>
 80138b8:	1e03      	subs	r3, r0, #0
 80138ba:	d00f      	beq.n	80138dc <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138c0:	2208      	movs	r2, #8
 80138c2:	431a      	orrs	r2, r3
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2235      	movs	r2, #53	@ 0x35
 80138cc:	2101      	movs	r1, #1
 80138ce:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2234      	movs	r2, #52	@ 0x34
 80138d4:	2100      	movs	r1, #0
 80138d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80138d8:	2301      	movs	r3, #1
 80138da:	e022      	b.n	8013922 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	69da      	ldr	r2, [r3, #28]
 80138e2:	2380      	movs	r3, #128	@ 0x80
 80138e4:	00db      	lsls	r3, r3, #3
 80138e6:	4013      	ands	r3, r2
 80138e8:	d108      	bne.n	80138fc <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	69da      	ldr	r2, [r3, #28]
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2180      	movs	r1, #128	@ 0x80
 80138f6:	00c9      	lsls	r1, r1, #3
 80138f8:	430a      	orrs	r2, r1
 80138fa:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	2201      	movs	r2, #1
 8013904:	4013      	ands	r3, r2
 8013906:	d107      	bne.n	8013918 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	685a      	ldr	r2, [r3, #4]
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2101      	movs	r1, #1
 8013914:	430a      	orrs	r2, r1
 8013916:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	2234      	movs	r2, #52	@ 0x34
 801391c:	2100      	movs	r1, #0
 801391e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8013920:	2300      	movs	r3, #0
}
 8013922:	0018      	movs	r0, r3
 8013924:	46bd      	mov	sp, r7
 8013926:	b006      	add	sp, #24
 8013928:	bd80      	pop	{r7, pc}
 801392a:	46c0      	nop			@ (mov r8, r8)
 801392c:	08013b15 	.word	0x08013b15
 8013930:	08013ad1 	.word	0x08013ad1
 8013934:	08013b33 	.word	0x08013b33

08013938 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b086      	sub	sp, #24
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013940:	2317      	movs	r3, #23
 8013942:	18fb      	adds	r3, r7, r3
 8013944:	2200      	movs	r2, #0
 8013946:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	685a      	ldr	r2, [r3, #4]
 801394c:	2380      	movs	r3, #128	@ 0x80
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	429a      	cmp	r2, r3
 8013952:	d003      	beq.n	801395c <HAL_I2S_DMAStop+0x24>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d158      	bne.n	8013a0e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013960:	2b00      	cmp	r3, #0
 8013962:	d010      	beq.n	8013986 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013968:	0018      	movs	r0, r3
 801396a:	f7fc fcad 	bl	80102c8 <HAL_DMA_Abort>
 801396e:	1e03      	subs	r3, r0, #0
 8013970:	d009      	beq.n	8013986 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013976:	2208      	movs	r2, #8
 8013978:	431a      	orrs	r2, r3
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801397e:	2317      	movs	r3, #23
 8013980:	18fb      	adds	r3, r7, r3
 8013982:	2201      	movs	r2, #1
 8013984:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	2364      	movs	r3, #100	@ 0x64
 801398a:	2201      	movs	r2, #1
 801398c:	2102      	movs	r1, #2
 801398e:	f000 f8f7 	bl	8013b80 <I2S_WaitFlagStateUntilTimeout>
 8013992:	1e03      	subs	r3, r0, #0
 8013994:	d00d      	beq.n	80139b2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801399a:	2201      	movs	r2, #1
 801399c:	431a      	orrs	r2, r3
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2235      	movs	r2, #53	@ 0x35
 80139a6:	2101      	movs	r1, #1
 80139a8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80139aa:	2317      	movs	r3, #23
 80139ac:	18fb      	adds	r3, r7, r3
 80139ae:	2201      	movs	r2, #1
 80139b0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	2364      	movs	r3, #100	@ 0x64
 80139b6:	2200      	movs	r2, #0
 80139b8:	2180      	movs	r1, #128	@ 0x80
 80139ba:	f000 f8e1 	bl	8013b80 <I2S_WaitFlagStateUntilTimeout>
 80139be:	1e03      	subs	r3, r0, #0
 80139c0:	d00d      	beq.n	80139de <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139c6:	2201      	movs	r2, #1
 80139c8:	431a      	orrs	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2235      	movs	r2, #53	@ 0x35
 80139d2:	2101      	movs	r1, #1
 80139d4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80139d6:	2317      	movs	r3, #23
 80139d8:	18fb      	adds	r3, r7, r3
 80139da:	2201      	movs	r2, #1
 80139dc:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	69da      	ldr	r2, [r3, #28]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	4938      	ldr	r1, [pc, #224]	@ (8013acc <HAL_I2S_DMAStop+0x194>)
 80139ea:	400a      	ands	r2, r1
 80139ec:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80139ee:	2300      	movs	r3, #0
 80139f0:	613b      	str	r3, [r7, #16]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	689b      	ldr	r3, [r3, #8]
 80139f8:	613b      	str	r3, [r7, #16]
 80139fa:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	685a      	ldr	r2, [r3, #4]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	2102      	movs	r1, #2
 8013a08:	438a      	bics	r2, r1
 8013a0a:	605a      	str	r2, [r3, #4]
 8013a0c:	e053      	b.n	8013ab6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	685a      	ldr	r2, [r3, #4]
 8013a12:	23c0      	movs	r3, #192	@ 0xc0
 8013a14:	009b      	lsls	r3, r3, #2
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d005      	beq.n	8013a26 <HAL_I2S_DMAStop+0xee>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	2380      	movs	r3, #128	@ 0x80
 8013a20:	005b      	lsls	r3, r3, #1
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d147      	bne.n	8013ab6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d010      	beq.n	8013a50 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a32:	0018      	movs	r0, r3
 8013a34:	f7fc fc48 	bl	80102c8 <HAL_DMA_Abort>
 8013a38:	1e03      	subs	r3, r0, #0
 8013a3a:	d009      	beq.n	8013a50 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a40:	2208      	movs	r2, #8
 8013a42:	431a      	orrs	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8013a48:	2317      	movs	r3, #23
 8013a4a:	18fb      	adds	r3, r7, r3
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	69da      	ldr	r2, [r3, #28]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	491c      	ldr	r1, [pc, #112]	@ (8013acc <HAL_I2S_DMAStop+0x194>)
 8013a5c:	400a      	ands	r2, r1
 8013a5e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013a60:	2300      	movs	r3, #0
 8013a62:	60fb      	str	r3, [r7, #12]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	60fb      	str	r3, [r7, #12]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	689b      	ldr	r3, [r3, #8]
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	685a      	ldr	r2, [r3, #4]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2101      	movs	r1, #1
 8013a82:	438a      	bics	r2, r1
 8013a84:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	685a      	ldr	r2, [r3, #4]
 8013a8a:	2380      	movs	r3, #128	@ 0x80
 8013a8c:	005b      	lsls	r3, r3, #1
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d10e      	bne.n	8013ab0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a96:	2240      	movs	r2, #64	@ 0x40
 8013a98:	431a      	orrs	r2, r3
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2235      	movs	r2, #53	@ 0x35
 8013aa2:	2101      	movs	r1, #1
 8013aa4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8013aa6:	2317      	movs	r3, #23
 8013aa8:	18fb      	adds	r3, r7, r3
 8013aaa:	2201      	movs	r2, #1
 8013aac:	701a      	strb	r2, [r3, #0]
 8013aae:	e002      	b.n	8013ab6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	2235      	movs	r2, #53	@ 0x35
 8013aba:	2101      	movs	r1, #1
 8013abc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8013abe:	2317      	movs	r3, #23
 8013ac0:	18fb      	adds	r3, r7, r3
 8013ac2:	781b      	ldrb	r3, [r3, #0]
}
 8013ac4:	0018      	movs	r0, r3
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	b006      	add	sp, #24
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	fffffbff 	.word	0xfffffbff

08013ad0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b084      	sub	sp, #16
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013adc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	69db      	ldr	r3, [r3, #28]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d10e      	bne.n	8013b04 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	685a      	ldr	r2, [r3, #4]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2101      	movs	r1, #1
 8013af2:	438a      	bics	r2, r1
 8013af4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2200      	movs	r2, #0
 8013afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2235      	movs	r2, #53	@ 0x35
 8013b00:	2101      	movs	r1, #1
 8013b02:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	0018      	movs	r0, r3
 8013b08:	f7f9 f958 	bl	800cdbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013b0c:	46c0      	nop			@ (mov r8, r8)
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	b004      	add	sp, #16
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b084      	sub	sp, #16
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b20:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	0018      	movs	r0, r3
 8013b26:	f7f9 f937 	bl	800cd98 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013b2a:	46c0      	nop			@ (mov r8, r8)
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	b004      	add	sp, #16
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b084      	sub	sp, #16
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b3e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	685a      	ldr	r2, [r3, #4]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	2103      	movs	r1, #3
 8013b4c:	438a      	bics	r2, r1
 8013b4e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2200      	movs	r2, #0
 8013b54:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2235      	movs	r2, #53	@ 0x35
 8013b60:	2101      	movs	r1, #1
 8013b62:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b68:	2208      	movs	r2, #8
 8013b6a:	431a      	orrs	r2, r3
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	0018      	movs	r0, r3
 8013b74:	f7f9 f970 	bl	800ce58 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013b78:	46c0      	nop			@ (mov r8, r8)
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	b004      	add	sp, #16
 8013b7e:	bd80      	pop	{r7, pc}

08013b80 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b086      	sub	sp, #24
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	603b      	str	r3, [r7, #0]
 8013b8c:	1dfb      	adds	r3, r7, #7
 8013b8e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8013b90:	f7fb fde2 	bl	800f758 <HAL_GetTick>
 8013b94:	0003      	movs	r3, r0
 8013b96:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013b98:	e017      	b.n	8013bca <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	d014      	beq.n	8013bca <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8013ba0:	f7fb fdda 	bl	800f758 <HAL_GetTick>
 8013ba4:	0002      	movs	r2, r0
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	1ad3      	subs	r3, r2, r3
 8013baa:	683a      	ldr	r2, [r7, #0]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d902      	bls.n	8013bb6 <I2S_WaitFlagStateUntilTimeout+0x36>
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d109      	bne.n	8013bca <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2235      	movs	r2, #53	@ 0x35
 8013bba:	2101      	movs	r1, #1
 8013bbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2234      	movs	r2, #52	@ 0x34
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013bc6:	2303      	movs	r3, #3
 8013bc8:	e00f      	b.n	8013bea <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	4013      	ands	r3, r2
 8013bd4:	68ba      	ldr	r2, [r7, #8]
 8013bd6:	1ad3      	subs	r3, r2, r3
 8013bd8:	425a      	negs	r2, r3
 8013bda:	4153      	adcs	r3, r2
 8013bdc:	b2db      	uxtb	r3, r3
 8013bde:	001a      	movs	r2, r3
 8013be0:	1dfb      	adds	r3, r7, #7
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	429a      	cmp	r2, r3
 8013be6:	d1d8      	bne.n	8013b9a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013be8:	2300      	movs	r3, #0
}
 8013bea:	0018      	movs	r0, r3
 8013bec:	46bd      	mov	sp, r7
 8013bee:	b006      	add	sp, #24
 8013bf0:	bd80      	pop	{r7, pc}
	...

08013bf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bf6:	b08b      	sub	sp, #44	@ 0x2c
 8013bf8:	af06      	add	r7, sp, #24
 8013bfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d101      	bne.n	8013c06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013c02:	2301      	movs	r3, #1
 8013c04:	e0f0      	b.n	8013de8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4a79      	ldr	r2, [pc, #484]	@ (8013df0 <HAL_PCD_Init+0x1fc>)
 8013c0a:	5c9b      	ldrb	r3, [r3, r2]
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d108      	bne.n	8013c24 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	23aa      	movs	r3, #170	@ 0xaa
 8013c16:	009b      	lsls	r3, r3, #2
 8013c18:	2100      	movs	r1, #0
 8013c1a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	0018      	movs	r0, r3
 8013c20:	f009 ff4a 	bl	801dab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	4a72      	ldr	r2, [pc, #456]	@ (8013df0 <HAL_PCD_Init+0x1fc>)
 8013c28:	2103      	movs	r1, #3
 8013c2a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	0018      	movs	r0, r3
 8013c32:	f005 fefd 	bl	8019a30 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013c36:	230f      	movs	r3, #15
 8013c38:	18fb      	adds	r3, r7, r3
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	701a      	strb	r2, [r3, #0]
 8013c3e:	e049      	b.n	8013cd4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013c40:	200f      	movs	r0, #15
 8013c42:	183b      	adds	r3, r7, r0
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	6879      	ldr	r1, [r7, #4]
 8013c48:	1c5a      	adds	r2, r3, #1
 8013c4a:	0013      	movs	r3, r2
 8013c4c:	009b      	lsls	r3, r3, #2
 8013c4e:	189b      	adds	r3, r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	18cb      	adds	r3, r1, r3
 8013c54:	3301      	adds	r3, #1
 8013c56:	2201      	movs	r2, #1
 8013c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013c5a:	183b      	adds	r3, r7, r0
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	6879      	ldr	r1, [r7, #4]
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	0013      	movs	r3, r2
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	189b      	adds	r3, r3, r2
 8013c68:	00db      	lsls	r3, r3, #3
 8013c6a:	183a      	adds	r2, r7, r0
 8013c6c:	7812      	ldrb	r2, [r2, #0]
 8013c6e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013c70:	183b      	adds	r3, r7, r0
 8013c72:	781b      	ldrb	r3, [r3, #0]
 8013c74:	6879      	ldr	r1, [r7, #4]
 8013c76:	1c5a      	adds	r2, r3, #1
 8013c78:	0013      	movs	r3, r2
 8013c7a:	009b      	lsls	r3, r3, #2
 8013c7c:	189b      	adds	r3, r3, r2
 8013c7e:	00db      	lsls	r3, r3, #3
 8013c80:	18cb      	adds	r3, r1, r3
 8013c82:	3303      	adds	r3, #3
 8013c84:	2200      	movs	r2, #0
 8013c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013c88:	183b      	adds	r3, r7, r0
 8013c8a:	781a      	ldrb	r2, [r3, #0]
 8013c8c:	6879      	ldr	r1, [r7, #4]
 8013c8e:	0013      	movs	r3, r2
 8013c90:	009b      	lsls	r3, r3, #2
 8013c92:	189b      	adds	r3, r3, r2
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	18cb      	adds	r3, r1, r3
 8013c98:	3338      	adds	r3, #56	@ 0x38
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013c9e:	183b      	adds	r3, r7, r0
 8013ca0:	781a      	ldrb	r2, [r3, #0]
 8013ca2:	6879      	ldr	r1, [r7, #4]
 8013ca4:	0013      	movs	r3, r2
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	189b      	adds	r3, r3, r2
 8013caa:	00db      	lsls	r3, r3, #3
 8013cac:	18cb      	adds	r3, r1, r3
 8013cae:	333c      	adds	r3, #60	@ 0x3c
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013cb4:	183b      	adds	r3, r7, r0
 8013cb6:	781a      	ldrb	r2, [r3, #0]
 8013cb8:	6879      	ldr	r1, [r7, #4]
 8013cba:	0013      	movs	r3, r2
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	189b      	adds	r3, r3, r2
 8013cc0:	00db      	lsls	r3, r3, #3
 8013cc2:	18cb      	adds	r3, r1, r3
 8013cc4:	3340      	adds	r3, #64	@ 0x40
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013cca:	183b      	adds	r3, r7, r0
 8013ccc:	781a      	ldrb	r2, [r3, #0]
 8013cce:	183b      	adds	r3, r7, r0
 8013cd0:	3201      	adds	r2, #1
 8013cd2:	701a      	strb	r2, [r3, #0]
 8013cd4:	210f      	movs	r1, #15
 8013cd6:	187b      	adds	r3, r7, r1
 8013cd8:	781a      	ldrb	r2, [r3, #0]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d3ae      	bcc.n	8013c40 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ce2:	187b      	adds	r3, r7, r1
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	701a      	strb	r2, [r3, #0]
 8013ce8:	e056      	b.n	8013d98 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013cea:	240f      	movs	r4, #15
 8013cec:	193b      	adds	r3, r7, r4
 8013cee:	781a      	ldrb	r2, [r3, #0]
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	236a      	movs	r3, #106	@ 0x6a
 8013cf4:	33ff      	adds	r3, #255	@ 0xff
 8013cf6:	0019      	movs	r1, r3
 8013cf8:	0013      	movs	r3, r2
 8013cfa:	009b      	lsls	r3, r3, #2
 8013cfc:	189b      	adds	r3, r3, r2
 8013cfe:	00db      	lsls	r3, r3, #3
 8013d00:	18c3      	adds	r3, r0, r3
 8013d02:	185b      	adds	r3, r3, r1
 8013d04:	2200      	movs	r2, #0
 8013d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013d08:	193b      	adds	r3, r7, r4
 8013d0a:	781a      	ldrb	r2, [r3, #0]
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	23b4      	movs	r3, #180	@ 0xb4
 8013d10:	0059      	lsls	r1, r3, #1
 8013d12:	0013      	movs	r3, r2
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	189b      	adds	r3, r3, r2
 8013d18:	00db      	lsls	r3, r3, #3
 8013d1a:	18c3      	adds	r3, r0, r3
 8013d1c:	185b      	adds	r3, r3, r1
 8013d1e:	193a      	adds	r2, r7, r4
 8013d20:	7812      	ldrb	r2, [r2, #0]
 8013d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013d24:	193b      	adds	r3, r7, r4
 8013d26:	781a      	ldrb	r2, [r3, #0]
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	236c      	movs	r3, #108	@ 0x6c
 8013d2c:	33ff      	adds	r3, #255	@ 0xff
 8013d2e:	0019      	movs	r1, r3
 8013d30:	0013      	movs	r3, r2
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	189b      	adds	r3, r3, r2
 8013d36:	00db      	lsls	r3, r3, #3
 8013d38:	18c3      	adds	r3, r0, r3
 8013d3a:	185b      	adds	r3, r3, r1
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013d40:	193b      	adds	r3, r7, r4
 8013d42:	781a      	ldrb	r2, [r3, #0]
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	23bc      	movs	r3, #188	@ 0xbc
 8013d48:	0059      	lsls	r1, r3, #1
 8013d4a:	0013      	movs	r3, r2
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	189b      	adds	r3, r3, r2
 8013d50:	00db      	lsls	r3, r3, #3
 8013d52:	18c3      	adds	r3, r0, r3
 8013d54:	185b      	adds	r3, r3, r1
 8013d56:	2200      	movs	r2, #0
 8013d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013d5a:	193b      	adds	r3, r7, r4
 8013d5c:	781a      	ldrb	r2, [r3, #0]
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	23be      	movs	r3, #190	@ 0xbe
 8013d62:	0059      	lsls	r1, r3, #1
 8013d64:	0013      	movs	r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	189b      	adds	r3, r3, r2
 8013d6a:	00db      	lsls	r3, r3, #3
 8013d6c:	18c3      	adds	r3, r0, r3
 8013d6e:	185b      	adds	r3, r3, r1
 8013d70:	2200      	movs	r2, #0
 8013d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013d74:	193b      	adds	r3, r7, r4
 8013d76:	781a      	ldrb	r2, [r3, #0]
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	23c0      	movs	r3, #192	@ 0xc0
 8013d7c:	0059      	lsls	r1, r3, #1
 8013d7e:	0013      	movs	r3, r2
 8013d80:	009b      	lsls	r3, r3, #2
 8013d82:	189b      	adds	r3, r3, r2
 8013d84:	00db      	lsls	r3, r3, #3
 8013d86:	18c3      	adds	r3, r0, r3
 8013d88:	185b      	adds	r3, r3, r1
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013d8e:	193b      	adds	r3, r7, r4
 8013d90:	781a      	ldrb	r2, [r3, #0]
 8013d92:	193b      	adds	r3, r7, r4
 8013d94:	3201      	adds	r2, #1
 8013d96:	701a      	strb	r2, [r3, #0]
 8013d98:	230f      	movs	r3, #15
 8013d9a:	18fb      	adds	r3, r7, r3
 8013d9c:	781a      	ldrb	r2, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d3a1      	bcc.n	8013cea <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6818      	ldr	r0, [r3, #0]
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	466a      	mov	r2, sp
 8013dae:	0011      	movs	r1, r2
 8013db0:	001a      	movs	r2, r3
 8013db2:	3210      	adds	r2, #16
 8013db4:	ca70      	ldmia	r2!, {r4, r5, r6}
 8013db6:	c170      	stmia	r1!, {r4, r5, r6}
 8013db8:	ca30      	ldmia	r2!, {r4, r5}
 8013dba:	c130      	stmia	r1!, {r4, r5}
 8013dbc:	6859      	ldr	r1, [r3, #4]
 8013dbe:	689a      	ldr	r2, [r3, #8]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	f005 fe4f 	bl	8019a64 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2224      	movs	r2, #36	@ 0x24
 8013dca:	2100      	movs	r1, #0
 8013dcc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	4a07      	ldr	r2, [pc, #28]	@ (8013df0 <HAL_PCD_Init+0x1fc>)
 8013dd2:	2101      	movs	r1, #1
 8013dd4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	69db      	ldr	r3, [r3, #28]
 8013dda:	2b01      	cmp	r3, #1
 8013ddc:	d103      	bne.n	8013de6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	0018      	movs	r0, r3
 8013de2:	f001 fd23 	bl	801582c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	0018      	movs	r0, r3
 8013dea:	46bd      	mov	sp, r7
 8013dec:	b005      	add	sp, #20
 8013dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df0:	000002a9 	.word	0x000002a9

08013df4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	23aa      	movs	r3, #170	@ 0xaa
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	5cd3      	ldrb	r3, [r2, r3]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d101      	bne.n	8013e0c <HAL_PCD_Start+0x18>
 8013e08:	2302      	movs	r3, #2
 8013e0a:	e014      	b.n	8013e36 <HAL_PCD_Start+0x42>
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	23aa      	movs	r3, #170	@ 0xaa
 8013e10:	009b      	lsls	r3, r3, #2
 8013e12:	2101      	movs	r1, #1
 8013e14:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	0018      	movs	r0, r3
 8013e1c:	f005 fdf2 	bl	8019a04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	0018      	movs	r0, r3
 8013e26:	f007 fdf5 	bl	801ba14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	23aa      	movs	r3, #170	@ 0xaa
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	2100      	movs	r1, #0
 8013e32:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013e34:	2300      	movs	r3, #0
}
 8013e36:	0018      	movs	r0, r3
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	b002      	add	sp, #8
 8013e3c:	bd80      	pop	{r7, pc}
	...

08013e40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	0018      	movs	r0, r3
 8013e4e:	f007 fdf7 	bl	801ba40 <USB_ReadInterrupts>
 8013e52:	0003      	movs	r3, r0
 8013e54:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013e56:	68fa      	ldr	r2, [r7, #12]
 8013e58:	2380      	movs	r3, #128	@ 0x80
 8013e5a:	021b      	lsls	r3, r3, #8
 8013e5c:	4013      	ands	r3, r2
 8013e5e:	d004      	beq.n	8013e6a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	0018      	movs	r0, r3
 8013e64:	f000 fb62 	bl	801452c <PCD_EP_ISR_Handler>

    return;
 8013e68:	e11d      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013e6a:	68fa      	ldr	r2, [r7, #12]
 8013e6c:	2380      	movs	r3, #128	@ 0x80
 8013e6e:	00db      	lsls	r3, r3, #3
 8013e70:	4013      	ands	r3, r2
 8013e72:	d015      	beq.n	8013ea0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2244      	movs	r2, #68	@ 0x44
 8013e7a:	5a9b      	ldrh	r3, [r3, r2]
 8013e7c:	b29a      	uxth	r2, r3
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	498a      	ldr	r1, [pc, #552]	@ (80140ac <HAL_PCD_IRQHandler+0x26c>)
 8013e84:	400a      	ands	r2, r1
 8013e86:	b291      	uxth	r1, r2
 8013e88:	2244      	movs	r2, #68	@ 0x44
 8013e8a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	0018      	movs	r0, r3
 8013e90:	f009 fe95 	bl	801dbbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2100      	movs	r1, #0
 8013e98:	0018      	movs	r0, r3
 8013e9a:	f000 f915 	bl	80140c8 <HAL_PCD_SetAddress>

    return;
 8013e9e:	e102      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8013ea0:	68fa      	ldr	r2, [r7, #12]
 8013ea2:	2380      	movs	r3, #128	@ 0x80
 8013ea4:	01db      	lsls	r3, r3, #7
 8013ea6:	4013      	ands	r3, r2
 8013ea8:	d00c      	beq.n	8013ec4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	2244      	movs	r2, #68	@ 0x44
 8013eb0:	5a9b      	ldrh	r3, [r3, r2]
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	497d      	ldr	r1, [pc, #500]	@ (80140b0 <HAL_PCD_IRQHandler+0x270>)
 8013eba:	400a      	ands	r2, r1
 8013ebc:	b291      	uxth	r1, r2
 8013ebe:	2244      	movs	r2, #68	@ 0x44
 8013ec0:	5299      	strh	r1, [r3, r2]

    return;
 8013ec2:	e0f0      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8013ec4:	68fa      	ldr	r2, [r7, #12]
 8013ec6:	2380      	movs	r3, #128	@ 0x80
 8013ec8:	019b      	lsls	r3, r3, #6
 8013eca:	4013      	ands	r3, r2
 8013ecc:	d00c      	beq.n	8013ee8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	2244      	movs	r2, #68	@ 0x44
 8013ed4:	5a9b      	ldrh	r3, [r3, r2]
 8013ed6:	b29a      	uxth	r2, r3
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	4975      	ldr	r1, [pc, #468]	@ (80140b4 <HAL_PCD_IRQHandler+0x274>)
 8013ede:	400a      	ands	r2, r1
 8013ee0:	b291      	uxth	r1, r2
 8013ee2:	2244      	movs	r2, #68	@ 0x44
 8013ee4:	5299      	strh	r1, [r3, r2]

    return;
 8013ee6:	e0de      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	2380      	movs	r3, #128	@ 0x80
 8013eec:	015b      	lsls	r3, r3, #5
 8013eee:	4013      	ands	r3, r2
 8013ef0:	d038      	beq.n	8013f64 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	2240      	movs	r2, #64	@ 0x40
 8013ef8:	5a9b      	ldrh	r3, [r3, r2]
 8013efa:	b29a      	uxth	r2, r3
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2104      	movs	r1, #4
 8013f02:	438a      	bics	r2, r1
 8013f04:	b291      	uxth	r1, r2
 8013f06:	2240      	movs	r2, #64	@ 0x40
 8013f08:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	2240      	movs	r2, #64	@ 0x40
 8013f10:	5a9b      	ldrh	r3, [r3, r2]
 8013f12:	b29a      	uxth	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2108      	movs	r1, #8
 8013f1a:	438a      	bics	r2, r1
 8013f1c:	b291      	uxth	r1, r2
 8013f1e:	2240      	movs	r2, #64	@ 0x40
 8013f20:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	23b8      	movs	r3, #184	@ 0xb8
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	5cd3      	ldrb	r3, [r2, r3]
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d109      	bne.n	8013f42 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	23b8      	movs	r3, #184	@ 0xb8
 8013f32:	009b      	lsls	r3, r3, #2
 8013f34:	2100      	movs	r1, #0
 8013f36:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	2100      	movs	r1, #0
 8013f3c:	0018      	movs	r0, r3
 8013f3e:	f001 fc9f 	bl	8015880 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	0018      	movs	r0, r3
 8013f46:	f009 fe7b 	bl	801dc40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	2244      	movs	r2, #68	@ 0x44
 8013f50:	5a9b      	ldrh	r3, [r3, r2]
 8013f52:	b29a      	uxth	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4957      	ldr	r1, [pc, #348]	@ (80140b8 <HAL_PCD_IRQHandler+0x278>)
 8013f5a:	400a      	ands	r2, r1
 8013f5c:	b291      	uxth	r1, r2
 8013f5e:	2244      	movs	r2, #68	@ 0x44
 8013f60:	5299      	strh	r1, [r3, r2]

    return;
 8013f62:	e0a0      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013f64:	68fa      	ldr	r2, [r7, #12]
 8013f66:	2380      	movs	r3, #128	@ 0x80
 8013f68:	011b      	lsls	r3, r3, #4
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	d028      	beq.n	8013fc0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	2240      	movs	r2, #64	@ 0x40
 8013f74:	5a9b      	ldrh	r3, [r3, r2]
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2108      	movs	r1, #8
 8013f7e:	430a      	orrs	r2, r1
 8013f80:	b291      	uxth	r1, r2
 8013f82:	2240      	movs	r2, #64	@ 0x40
 8013f84:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2244      	movs	r2, #68	@ 0x44
 8013f8c:	5a9b      	ldrh	r3, [r3, r2]
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4949      	ldr	r1, [pc, #292]	@ (80140bc <HAL_PCD_IRQHandler+0x27c>)
 8013f96:	400a      	ands	r2, r1
 8013f98:	b291      	uxth	r1, r2
 8013f9a:	2244      	movs	r2, #68	@ 0x44
 8013f9c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2240      	movs	r2, #64	@ 0x40
 8013fa4:	5a9b      	ldrh	r3, [r3, r2]
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2104      	movs	r1, #4
 8013fae:	430a      	orrs	r2, r1
 8013fb0:	b291      	uxth	r1, r2
 8013fb2:	2240      	movs	r2, #64	@ 0x40
 8013fb4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	0018      	movs	r0, r3
 8013fba:	f009 fe25 	bl	801dc08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013fbe:	e072      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2280      	movs	r2, #128	@ 0x80
 8013fc4:	4013      	ands	r3, r2
 8013fc6:	d046      	beq.n	8014056 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2244      	movs	r2, #68	@ 0x44
 8013fce:	5a9b      	ldrh	r3, [r3, r2]
 8013fd0:	b29a      	uxth	r2, r3
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	2180      	movs	r1, #128	@ 0x80
 8013fd8:	438a      	bics	r2, r1
 8013fda:	b291      	uxth	r1, r2
 8013fdc:	2244      	movs	r2, #68	@ 0x44
 8013fde:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	23b8      	movs	r3, #184	@ 0xb8
 8013fe4:	009b      	lsls	r3, r3, #2
 8013fe6:	5cd3      	ldrb	r3, [r2, r3]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d12f      	bne.n	801404c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2240      	movs	r2, #64	@ 0x40
 8013ff2:	5a9b      	ldrh	r3, [r3, r2]
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2104      	movs	r1, #4
 8013ffc:	430a      	orrs	r2, r1
 8013ffe:	b291      	uxth	r1, r2
 8014000:	2240      	movs	r2, #64	@ 0x40
 8014002:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	2240      	movs	r2, #64	@ 0x40
 801400a:	5a9b      	ldrh	r3, [r3, r2]
 801400c:	b29a      	uxth	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	2108      	movs	r1, #8
 8014014:	430a      	orrs	r2, r1
 8014016:	b291      	uxth	r1, r2
 8014018:	2240      	movs	r2, #64	@ 0x40
 801401a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	23b8      	movs	r3, #184	@ 0xb8
 8014020:	009b      	lsls	r3, r3, #2
 8014022:	2101      	movs	r1, #1
 8014024:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2254      	movs	r2, #84	@ 0x54
 801402c:	5a9b      	ldrh	r3, [r3, r2]
 801402e:	b29b      	uxth	r3, r3
 8014030:	089b      	lsrs	r3, r3, #2
 8014032:	223c      	movs	r2, #60	@ 0x3c
 8014034:	4013      	ands	r3, r2
 8014036:	0019      	movs	r1, r3
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	23b9      	movs	r3, #185	@ 0xb9
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2101      	movs	r1, #1
 8014044:	0018      	movs	r0, r3
 8014046:	f001 fc1b 	bl	8015880 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801404a:	e02c      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	0018      	movs	r0, r3
 8014050:	f009 fdda 	bl	801dc08 <HAL_PCD_SuspendCallback>
    return;
 8014054:	e027      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8014056:	68fa      	ldr	r2, [r7, #12]
 8014058:	2380      	movs	r3, #128	@ 0x80
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	4013      	ands	r3, r2
 801405e:	d010      	beq.n	8014082 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	2244      	movs	r2, #68	@ 0x44
 8014066:	5a9b      	ldrh	r3, [r3, r2]
 8014068:	b29a      	uxth	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	4914      	ldr	r1, [pc, #80]	@ (80140c0 <HAL_PCD_IRQHandler+0x280>)
 8014070:	400a      	ands	r2, r1
 8014072:	b291      	uxth	r1, r2
 8014074:	2244      	movs	r2, #68	@ 0x44
 8014076:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	0018      	movs	r0, r3
 801407c:	f009 fd90 	bl	801dba0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8014080:	e011      	b.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8014082:	68fa      	ldr	r2, [r7, #12]
 8014084:	2380      	movs	r3, #128	@ 0x80
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	4013      	ands	r3, r2
 801408a:	d00c      	beq.n	80140a6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	2244      	movs	r2, #68	@ 0x44
 8014092:	5a9b      	ldrh	r3, [r3, r2]
 8014094:	b29a      	uxth	r2, r3
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	490a      	ldr	r1, [pc, #40]	@ (80140c4 <HAL_PCD_IRQHandler+0x284>)
 801409c:	400a      	ands	r2, r1
 801409e:	b291      	uxth	r1, r2
 80140a0:	2244      	movs	r2, #68	@ 0x44
 80140a2:	5299      	strh	r1, [r3, r2]

    return;
 80140a4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80140a6:	46bd      	mov	sp, r7
 80140a8:	b004      	add	sp, #16
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	fffffbff 	.word	0xfffffbff
 80140b0:	ffffbfff 	.word	0xffffbfff
 80140b4:	ffffdfff 	.word	0xffffdfff
 80140b8:	ffffefff 	.word	0xffffefff
 80140bc:	fffff7ff 	.word	0xfffff7ff
 80140c0:	fffffdff 	.word	0xfffffdff
 80140c4:	fffffeff 	.word	0xfffffeff

080140c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	000a      	movs	r2, r1
 80140d2:	1cfb      	adds	r3, r7, #3
 80140d4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80140d6:	687a      	ldr	r2, [r7, #4]
 80140d8:	23aa      	movs	r3, #170	@ 0xaa
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	5cd3      	ldrb	r3, [r2, r3]
 80140de:	2b01      	cmp	r3, #1
 80140e0:	d101      	bne.n	80140e6 <HAL_PCD_SetAddress+0x1e>
 80140e2:	2302      	movs	r3, #2
 80140e4:	e017      	b.n	8014116 <HAL_PCD_SetAddress+0x4e>
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	23aa      	movs	r3, #170	@ 0xaa
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	2101      	movs	r1, #1
 80140ee:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	1cfa      	adds	r2, r7, #3
 80140f4:	2124      	movs	r1, #36	@ 0x24
 80140f6:	7812      	ldrb	r2, [r2, #0]
 80140f8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	1cfb      	adds	r3, r7, #3
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	0019      	movs	r1, r3
 8014104:	0010      	movs	r0, r2
 8014106:	f007 fc71 	bl	801b9ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	23aa      	movs	r3, #170	@ 0xaa
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	2100      	movs	r1, #0
 8014112:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8014114:	2300      	movs	r3, #0
}
 8014116:	0018      	movs	r0, r3
 8014118:	46bd      	mov	sp, r7
 801411a:	b002      	add	sp, #8
 801411c:	bd80      	pop	{r7, pc}

0801411e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801411e:	b590      	push	{r4, r7, lr}
 8014120:	b085      	sub	sp, #20
 8014122:	af00      	add	r7, sp, #0
 8014124:	6078      	str	r0, [r7, #4]
 8014126:	000c      	movs	r4, r1
 8014128:	0010      	movs	r0, r2
 801412a:	0019      	movs	r1, r3
 801412c:	1cfb      	adds	r3, r7, #3
 801412e:	1c22      	adds	r2, r4, #0
 8014130:	701a      	strb	r2, [r3, #0]
 8014132:	003b      	movs	r3, r7
 8014134:	1c02      	adds	r2, r0, #0
 8014136:	801a      	strh	r2, [r3, #0]
 8014138:	1cbb      	adds	r3, r7, #2
 801413a:	1c0a      	adds	r2, r1, #0
 801413c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801413e:	230b      	movs	r3, #11
 8014140:	18fb      	adds	r3, r7, r3
 8014142:	2200      	movs	r2, #0
 8014144:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8014146:	1cfb      	adds	r3, r7, #3
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	b25b      	sxtb	r3, r3
 801414c:	2b00      	cmp	r3, #0
 801414e:	da0f      	bge.n	8014170 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014150:	1cfb      	adds	r3, r7, #3
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	2207      	movs	r2, #7
 8014156:	4013      	ands	r3, r2
 8014158:	1c5a      	adds	r2, r3, #1
 801415a:	0013      	movs	r3, r2
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	189b      	adds	r3, r3, r2
 8014160:	00db      	lsls	r3, r3, #3
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	18d3      	adds	r3, r2, r3
 8014166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2201      	movs	r2, #1
 801416c:	705a      	strb	r2, [r3, #1]
 801416e:	e00f      	b.n	8014190 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014170:	1cfb      	adds	r3, r7, #3
 8014172:	781b      	ldrb	r3, [r3, #0]
 8014174:	2207      	movs	r2, #7
 8014176:	401a      	ands	r2, r3
 8014178:	0013      	movs	r3, r2
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	189b      	adds	r3, r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	3369      	adds	r3, #105	@ 0x69
 8014182:	33ff      	adds	r3, #255	@ 0xff
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	18d3      	adds	r3, r2, r3
 8014188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8014190:	1cfb      	adds	r3, r7, #3
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	2207      	movs	r2, #7
 8014196:	4013      	ands	r3, r2
 8014198:	b2da      	uxtb	r2, r3
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801419e:	003b      	movs	r3, r7
 80141a0:	881a      	ldrh	r2, [r3, #0]
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	1cba      	adds	r2, r7, #2
 80141aa:	7812      	ldrb	r2, [r2, #0]
 80141ac:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80141ae:	1cbb      	adds	r3, r7, #2
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	2b02      	cmp	r3, #2
 80141b4:	d102      	bne.n	80141bc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2200      	movs	r2, #0
 80141ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	23aa      	movs	r3, #170	@ 0xaa
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	5cd3      	ldrb	r3, [r2, r3]
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d101      	bne.n	80141cc <HAL_PCD_EP_Open+0xae>
 80141c8:	2302      	movs	r3, #2
 80141ca:	e013      	b.n	80141f4 <HAL_PCD_EP_Open+0xd6>
 80141cc:	687a      	ldr	r2, [r7, #4]
 80141ce:	23aa      	movs	r3, #170	@ 0xaa
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	2101      	movs	r1, #1
 80141d4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	0011      	movs	r1, r2
 80141de:	0018      	movs	r0, r3
 80141e0:	f005 fc68 	bl	8019ab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	23aa      	movs	r3, #170	@ 0xaa
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	2100      	movs	r1, #0
 80141ec:	54d1      	strb	r1, [r2, r3]

  return ret;
 80141ee:	230b      	movs	r3, #11
 80141f0:	18fb      	adds	r3, r7, r3
 80141f2:	781b      	ldrb	r3, [r3, #0]
}
 80141f4:	0018      	movs	r0, r3
 80141f6:	46bd      	mov	sp, r7
 80141f8:	b005      	add	sp, #20
 80141fa:	bd90      	pop	{r4, r7, pc}

080141fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	000a      	movs	r2, r1
 8014206:	1cfb      	adds	r3, r7, #3
 8014208:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801420a:	1cfb      	adds	r3, r7, #3
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	b25b      	sxtb	r3, r3
 8014210:	2b00      	cmp	r3, #0
 8014212:	da0f      	bge.n	8014234 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014214:	1cfb      	adds	r3, r7, #3
 8014216:	781b      	ldrb	r3, [r3, #0]
 8014218:	2207      	movs	r2, #7
 801421a:	4013      	ands	r3, r2
 801421c:	1c5a      	adds	r2, r3, #1
 801421e:	0013      	movs	r3, r2
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	189b      	adds	r3, r3, r2
 8014224:	00db      	lsls	r3, r3, #3
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	18d3      	adds	r3, r2, r3
 801422a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	2201      	movs	r2, #1
 8014230:	705a      	strb	r2, [r3, #1]
 8014232:	e00f      	b.n	8014254 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014234:	1cfb      	adds	r3, r7, #3
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	2207      	movs	r2, #7
 801423a:	401a      	ands	r2, r3
 801423c:	0013      	movs	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	189b      	adds	r3, r3, r2
 8014242:	00db      	lsls	r3, r3, #3
 8014244:	3369      	adds	r3, #105	@ 0x69
 8014246:	33ff      	adds	r3, #255	@ 0xff
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	18d3      	adds	r3, r2, r3
 801424c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	2200      	movs	r2, #0
 8014252:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8014254:	1cfb      	adds	r3, r7, #3
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	2207      	movs	r2, #7
 801425a:	4013      	ands	r3, r2
 801425c:	b2da      	uxtb	r2, r3
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	23aa      	movs	r3, #170	@ 0xaa
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	5cd3      	ldrb	r3, [r2, r3]
 801426a:	2b01      	cmp	r3, #1
 801426c:	d101      	bne.n	8014272 <HAL_PCD_EP_Close+0x76>
 801426e:	2302      	movs	r3, #2
 8014270:	e011      	b.n	8014296 <HAL_PCD_EP_Close+0x9a>
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	23aa      	movs	r3, #170	@ 0xaa
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	2101      	movs	r1, #1
 801427a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	68fa      	ldr	r2, [r7, #12]
 8014282:	0011      	movs	r1, r2
 8014284:	0018      	movs	r0, r3
 8014286:	f005 ffb7 	bl	801a1f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	23aa      	movs	r3, #170	@ 0xaa
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	2100      	movs	r1, #0
 8014292:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8014294:	2300      	movs	r3, #0
}
 8014296:	0018      	movs	r0, r3
 8014298:	46bd      	mov	sp, r7
 801429a:	b004      	add	sp, #16
 801429c:	bd80      	pop	{r7, pc}

0801429e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801429e:	b580      	push	{r7, lr}
 80142a0:	b086      	sub	sp, #24
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	60f8      	str	r0, [r7, #12]
 80142a6:	607a      	str	r2, [r7, #4]
 80142a8:	603b      	str	r3, [r7, #0]
 80142aa:	200b      	movs	r0, #11
 80142ac:	183b      	adds	r3, r7, r0
 80142ae:	1c0a      	adds	r2, r1, #0
 80142b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80142b2:	0001      	movs	r1, r0
 80142b4:	187b      	adds	r3, r7, r1
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2207      	movs	r2, #7
 80142ba:	401a      	ands	r2, r3
 80142bc:	0013      	movs	r3, r2
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	189b      	adds	r3, r3, r2
 80142c2:	00db      	lsls	r3, r3, #3
 80142c4:	3369      	adds	r3, #105	@ 0x69
 80142c6:	33ff      	adds	r3, #255	@ 0xff
 80142c8:	68fa      	ldr	r2, [r7, #12]
 80142ca:	18d3      	adds	r3, r2, r3
 80142cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	683a      	ldr	r2, [r7, #0]
 80142d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	2200      	movs	r2, #0
 80142de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	2200      	movs	r2, #0
 80142e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80142e6:	187b      	adds	r3, r7, r1
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	2207      	movs	r2, #7
 80142ec:	4013      	ands	r3, r2
 80142ee:	b2da      	uxtb	r2, r3
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	697a      	ldr	r2, [r7, #20]
 80142fa:	0011      	movs	r1, r2
 80142fc:	0018      	movs	r0, r3
 80142fe:	f006 f93b 	bl	801a578 <USB_EPStartXfer>

  return HAL_OK;
 8014302:	2300      	movs	r3, #0
}
 8014304:	0018      	movs	r0, r3
 8014306:	46bd      	mov	sp, r7
 8014308:	b006      	add	sp, #24
 801430a:	bd80      	pop	{r7, pc}

0801430c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	000a      	movs	r2, r1
 8014316:	1cfb      	adds	r3, r7, #3
 8014318:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801431a:	1cfb      	adds	r3, r7, #3
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	2207      	movs	r2, #7
 8014320:	401a      	ands	r2, r3
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	23c2      	movs	r3, #194	@ 0xc2
 8014326:	0059      	lsls	r1, r3, #1
 8014328:	0013      	movs	r3, r2
 801432a:	009b      	lsls	r3, r3, #2
 801432c:	189b      	adds	r3, r3, r2
 801432e:	00db      	lsls	r3, r3, #3
 8014330:	18c3      	adds	r3, r0, r3
 8014332:	185b      	adds	r3, r3, r1
 8014334:	681b      	ldr	r3, [r3, #0]
}
 8014336:	0018      	movs	r0, r3
 8014338:	46bd      	mov	sp, r7
 801433a:	b002      	add	sp, #8
 801433c:	bd80      	pop	{r7, pc}

0801433e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801433e:	b580      	push	{r7, lr}
 8014340:	b086      	sub	sp, #24
 8014342:	af00      	add	r7, sp, #0
 8014344:	60f8      	str	r0, [r7, #12]
 8014346:	607a      	str	r2, [r7, #4]
 8014348:	603b      	str	r3, [r7, #0]
 801434a:	200b      	movs	r0, #11
 801434c:	183b      	adds	r3, r7, r0
 801434e:	1c0a      	adds	r2, r1, #0
 8014350:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014352:	183b      	adds	r3, r7, r0
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	2207      	movs	r2, #7
 8014358:	4013      	ands	r3, r2
 801435a:	1c5a      	adds	r2, r3, #1
 801435c:	0013      	movs	r3, r2
 801435e:	009b      	lsls	r3, r3, #2
 8014360:	189b      	adds	r3, r3, r2
 8014362:	00db      	lsls	r3, r3, #3
 8014364:	68fa      	ldr	r2, [r7, #12]
 8014366:	18d3      	adds	r3, r2, r3
 8014368:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	683a      	ldr	r2, [r7, #0]
 8014374:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	2224      	movs	r2, #36	@ 0x24
 801437a:	2101      	movs	r1, #1
 801437c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	683a      	ldr	r2, [r7, #0]
 8014382:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	2200      	movs	r2, #0
 8014388:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	2201      	movs	r2, #1
 801438e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014390:	183b      	adds	r3, r7, r0
 8014392:	781b      	ldrb	r3, [r3, #0]
 8014394:	2207      	movs	r2, #7
 8014396:	4013      	ands	r3, r2
 8014398:	b2da      	uxtb	r2, r3
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	697a      	ldr	r2, [r7, #20]
 80143a4:	0011      	movs	r1, r2
 80143a6:	0018      	movs	r0, r3
 80143a8:	f006 f8e6 	bl	801a578 <USB_EPStartXfer>

  return HAL_OK;
 80143ac:	2300      	movs	r3, #0
}
 80143ae:	0018      	movs	r0, r3
 80143b0:	46bd      	mov	sp, r7
 80143b2:	b006      	add	sp, #24
 80143b4:	bd80      	pop	{r7, pc}

080143b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80143b6:	b580      	push	{r7, lr}
 80143b8:	b084      	sub	sp, #16
 80143ba:	af00      	add	r7, sp, #0
 80143bc:	6078      	str	r0, [r7, #4]
 80143be:	000a      	movs	r2, r1
 80143c0:	1cfb      	adds	r3, r7, #3
 80143c2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80143c4:	1cfb      	adds	r3, r7, #3
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	2207      	movs	r2, #7
 80143ca:	401a      	ands	r2, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d901      	bls.n	80143d8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80143d4:	2301      	movs	r3, #1
 80143d6:	e046      	b.n	8014466 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80143d8:	1cfb      	adds	r3, r7, #3
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	b25b      	sxtb	r3, r3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	da0f      	bge.n	8014402 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80143e2:	1cfb      	adds	r3, r7, #3
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	2207      	movs	r2, #7
 80143e8:	4013      	ands	r3, r2
 80143ea:	1c5a      	adds	r2, r3, #1
 80143ec:	0013      	movs	r3, r2
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	189b      	adds	r3, r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	687a      	ldr	r2, [r7, #4]
 80143f6:	18d3      	adds	r3, r2, r3
 80143f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2201      	movs	r2, #1
 80143fe:	705a      	strb	r2, [r3, #1]
 8014400:	e00d      	b.n	801441e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014402:	1cfb      	adds	r3, r7, #3
 8014404:	781a      	ldrb	r2, [r3, #0]
 8014406:	0013      	movs	r3, r2
 8014408:	009b      	lsls	r3, r3, #2
 801440a:	189b      	adds	r3, r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	3369      	adds	r3, #105	@ 0x69
 8014410:	33ff      	adds	r3, #255	@ 0xff
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	18d3      	adds	r3, r2, r3
 8014416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2200      	movs	r2, #0
 801441c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	2201      	movs	r2, #1
 8014422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014424:	1cfb      	adds	r3, r7, #3
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	2207      	movs	r2, #7
 801442a:	4013      	ands	r3, r2
 801442c:	b2da      	uxtb	r2, r3
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014432:	687a      	ldr	r2, [r7, #4]
 8014434:	23aa      	movs	r3, #170	@ 0xaa
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	5cd3      	ldrb	r3, [r2, r3]
 801443a:	2b01      	cmp	r3, #1
 801443c:	d101      	bne.n	8014442 <HAL_PCD_EP_SetStall+0x8c>
 801443e:	2302      	movs	r3, #2
 8014440:	e011      	b.n	8014466 <HAL_PCD_EP_SetStall+0xb0>
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	23aa      	movs	r3, #170	@ 0xaa
 8014446:	009b      	lsls	r3, r3, #2
 8014448:	2101      	movs	r1, #1
 801444a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68fa      	ldr	r2, [r7, #12]
 8014452:	0011      	movs	r1, r2
 8014454:	0018      	movs	r0, r3
 8014456:	f007 f9c7 	bl	801b7e8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	23aa      	movs	r3, #170	@ 0xaa
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	2100      	movs	r1, #0
 8014462:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8014464:	2300      	movs	r3, #0
}
 8014466:	0018      	movs	r0, r3
 8014468:	46bd      	mov	sp, r7
 801446a:	b004      	add	sp, #16
 801446c:	bd80      	pop	{r7, pc}

0801446e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b084      	sub	sp, #16
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
 8014476:	000a      	movs	r2, r1
 8014478:	1cfb      	adds	r3, r7, #3
 801447a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801447c:	1cfb      	adds	r3, r7, #3
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	220f      	movs	r2, #15
 8014482:	401a      	ands	r2, r3
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	429a      	cmp	r2, r3
 801448a:	d901      	bls.n	8014490 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801448c:	2301      	movs	r3, #1
 801448e:	e048      	b.n	8014522 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014490:	1cfb      	adds	r3, r7, #3
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	b25b      	sxtb	r3, r3
 8014496:	2b00      	cmp	r3, #0
 8014498:	da0f      	bge.n	80144ba <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801449a:	1cfb      	adds	r3, r7, #3
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	2207      	movs	r2, #7
 80144a0:	4013      	ands	r3, r2
 80144a2:	1c5a      	adds	r2, r3, #1
 80144a4:	0013      	movs	r3, r2
 80144a6:	009b      	lsls	r3, r3, #2
 80144a8:	189b      	adds	r3, r3, r2
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	18d3      	adds	r3, r2, r3
 80144b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	2201      	movs	r2, #1
 80144b6:	705a      	strb	r2, [r3, #1]
 80144b8:	e00f      	b.n	80144da <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80144ba:	1cfb      	adds	r3, r7, #3
 80144bc:	781b      	ldrb	r3, [r3, #0]
 80144be:	2207      	movs	r2, #7
 80144c0:	401a      	ands	r2, r3
 80144c2:	0013      	movs	r3, r2
 80144c4:	009b      	lsls	r3, r3, #2
 80144c6:	189b      	adds	r3, r3, r2
 80144c8:	00db      	lsls	r3, r3, #3
 80144ca:	3369      	adds	r3, #105	@ 0x69
 80144cc:	33ff      	adds	r3, #255	@ 0xff
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	18d3      	adds	r3, r2, r3
 80144d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	2200      	movs	r2, #0
 80144d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	2200      	movs	r2, #0
 80144de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80144e0:	1cfb      	adds	r3, r7, #3
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	2207      	movs	r2, #7
 80144e6:	4013      	ands	r3, r2
 80144e8:	b2da      	uxtb	r2, r3
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80144ee:	687a      	ldr	r2, [r7, #4]
 80144f0:	23aa      	movs	r3, #170	@ 0xaa
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	5cd3      	ldrb	r3, [r2, r3]
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	d101      	bne.n	80144fe <HAL_PCD_EP_ClrStall+0x90>
 80144fa:	2302      	movs	r3, #2
 80144fc:	e011      	b.n	8014522 <HAL_PCD_EP_ClrStall+0xb4>
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	23aa      	movs	r3, #170	@ 0xaa
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	2101      	movs	r1, #1
 8014506:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	0011      	movs	r1, r2
 8014510:	0018      	movs	r0, r3
 8014512:	f007 f9b9 	bl	801b888 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	23aa      	movs	r3, #170	@ 0xaa
 801451a:	009b      	lsls	r3, r3, #2
 801451c:	2100      	movs	r1, #0
 801451e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8014520:	2300      	movs	r3, #0
}
 8014522:	0018      	movs	r0, r3
 8014524:	46bd      	mov	sp, r7
 8014526:	b004      	add	sp, #16
 8014528:	bd80      	pop	{r7, pc}
	...

0801452c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801452c:	b5b0      	push	{r4, r5, r7, lr}
 801452e:	b096      	sub	sp, #88	@ 0x58
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014534:	f000 fbec 	bl	8014d10 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	204e      	movs	r0, #78	@ 0x4e
 801453e:	183b      	adds	r3, r7, r0
 8014540:	2144      	movs	r1, #68	@ 0x44
 8014542:	5a52      	ldrh	r2, [r2, r1]
 8014544:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8014546:	183b      	adds	r3, r7, r0
 8014548:	881b      	ldrh	r3, [r3, #0]
 801454a:	b2da      	uxtb	r2, r3
 801454c:	244d      	movs	r4, #77	@ 0x4d
 801454e:	193b      	adds	r3, r7, r4
 8014550:	210f      	movs	r1, #15
 8014552:	400a      	ands	r2, r1
 8014554:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8014556:	193b      	adds	r3, r7, r4
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d000      	beq.n	8014560 <PCD_EP_ISR_Handler+0x34>
 801455e:	e18f      	b.n	8014880 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8014560:	183b      	adds	r3, r7, r0
 8014562:	881b      	ldrh	r3, [r3, #0]
 8014564:	2210      	movs	r2, #16
 8014566:	4013      	ands	r3, r2
 8014568:	d155      	bne.n	8014616 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	881b      	ldrh	r3, [r3, #0]
 8014570:	b29a      	uxth	r2, r3
 8014572:	200e      	movs	r0, #14
 8014574:	183b      	adds	r3, r7, r0
 8014576:	49bb      	ldr	r1, [pc, #748]	@ (8014864 <PCD_EP_ISR_Handler+0x338>)
 8014578:	400a      	ands	r2, r1
 801457a:	801a      	strh	r2, [r3, #0]
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	183a      	adds	r2, r7, r0
 8014582:	8812      	ldrh	r2, [r2, #0]
 8014584:	49b8      	ldr	r1, [pc, #736]	@ (8014868 <PCD_EP_ISR_Handler+0x33c>)
 8014586:	430a      	orrs	r2, r1
 8014588:	b292      	uxth	r2, r2
 801458a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	3328      	adds	r3, #40	@ 0x28
 8014590:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	2250      	movs	r2, #80	@ 0x50
 8014598:	5a9b      	ldrh	r3, [r3, r2]
 801459a:	b29b      	uxth	r3, r3
 801459c:	001a      	movs	r2, r3
 801459e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	00db      	lsls	r3, r3, #3
 80145a4:	18d2      	adds	r2, r2, r3
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	18d3      	adds	r3, r2, r3
 80145ac:	4aaf      	ldr	r2, [pc, #700]	@ (801486c <PCD_EP_ISR_Handler+0x340>)
 80145ae:	4694      	mov	ip, r2
 80145b0:	4463      	add	r3, ip
 80145b2:	881b      	ldrh	r3, [r3, #0]
 80145b4:	059b      	lsls	r3, r3, #22
 80145b6:	0d9a      	lsrs	r2, r3, #22
 80145b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80145bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145be:	695a      	ldr	r2, [r3, #20]
 80145c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145c2:	69db      	ldr	r3, [r3, #28]
 80145c4:	18d2      	adds	r2, r2, r3
 80145c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2100      	movs	r1, #0
 80145ce:	0018      	movs	r0, r3
 80145d0:	f009 fac8 	bl	801db64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2224      	movs	r2, #36	@ 0x24
 80145d8:	5c9b      	ldrb	r3, [r3, r2]
 80145da:	b2db      	uxtb	r3, r3
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d101      	bne.n	80145e4 <PCD_EP_ISR_Handler+0xb8>
 80145e0:	f000 fb96 	bl	8014d10 <PCD_EP_ISR_Handler+0x7e4>
 80145e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145e6:	699b      	ldr	r3, [r3, #24]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d001      	beq.n	80145f0 <PCD_EP_ISR_Handler+0xc4>
 80145ec:	f000 fb90 	bl	8014d10 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2224      	movs	r2, #36	@ 0x24
 80145f4:	5c9b      	ldrb	r3, [r3, r2]
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	2280      	movs	r2, #128	@ 0x80
 80145fa:	4252      	negs	r2, r2
 80145fc:	4313      	orrs	r3, r2
 80145fe:	b2da      	uxtb	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	0011      	movs	r1, r2
 8014606:	224c      	movs	r2, #76	@ 0x4c
 8014608:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2224      	movs	r2, #36	@ 0x24
 801460e:	2100      	movs	r1, #0
 8014610:	5499      	strb	r1, [r3, r2]
 8014612:	f000 fb7d 	bl	8014d10 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	3369      	adds	r3, #105	@ 0x69
 801461a:	33ff      	adds	r3, #255	@ 0xff
 801461c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681a      	ldr	r2, [r3, #0]
 8014622:	214a      	movs	r1, #74	@ 0x4a
 8014624:	187b      	adds	r3, r7, r1
 8014626:	8812      	ldrh	r2, [r2, #0]
 8014628:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801462a:	187b      	adds	r3, r7, r1
 801462c:	881a      	ldrh	r2, [r3, #0]
 801462e:	2380      	movs	r3, #128	@ 0x80
 8014630:	011b      	lsls	r3, r3, #4
 8014632:	4013      	ands	r3, r2
 8014634:	d037      	beq.n	80146a6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2250      	movs	r2, #80	@ 0x50
 801463c:	5a9b      	ldrh	r3, [r3, r2]
 801463e:	b29b      	uxth	r3, r3
 8014640:	001a      	movs	r2, r3
 8014642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014644:	781b      	ldrb	r3, [r3, #0]
 8014646:	00db      	lsls	r3, r3, #3
 8014648:	18d2      	adds	r2, r2, r3
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	18d3      	adds	r3, r2, r3
 8014650:	4a87      	ldr	r2, [pc, #540]	@ (8014870 <PCD_EP_ISR_Handler+0x344>)
 8014652:	4694      	mov	ip, r2
 8014654:	4463      	add	r3, ip
 8014656:	881b      	ldrh	r3, [r3, #0]
 8014658:	059b      	lsls	r3, r3, #22
 801465a:	0d9a      	lsrs	r2, r3, #22
 801465c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801465e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6818      	ldr	r0, [r3, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	22ac      	movs	r2, #172	@ 0xac
 8014668:	0092      	lsls	r2, r2, #2
 801466a:	1899      	adds	r1, r3, r2
 801466c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801466e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8014670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014672:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014674:	b29b      	uxth	r3, r3
 8014676:	f007 fa3a 	bl	801baee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	881b      	ldrh	r3, [r3, #0]
 8014680:	b29a      	uxth	r2, r3
 8014682:	2010      	movs	r0, #16
 8014684:	183b      	adds	r3, r7, r0
 8014686:	497b      	ldr	r1, [pc, #492]	@ (8014874 <PCD_EP_ISR_Handler+0x348>)
 8014688:	400a      	ands	r2, r1
 801468a:	801a      	strh	r2, [r3, #0]
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	183a      	adds	r2, r7, r0
 8014692:	8812      	ldrh	r2, [r2, #0]
 8014694:	2180      	movs	r1, #128	@ 0x80
 8014696:	430a      	orrs	r2, r1
 8014698:	b292      	uxth	r2, r2
 801469a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	0018      	movs	r0, r3
 80146a0:	f009 fa2a 	bl	801daf8 <HAL_PCD_SetupStageCallback>
 80146a4:	e334      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80146a6:	234a      	movs	r3, #74	@ 0x4a
 80146a8:	18fb      	adds	r3, r7, r3
 80146aa:	2200      	movs	r2, #0
 80146ac:	5e9b      	ldrsh	r3, [r3, r2]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	db00      	blt.n	80146b4 <PCD_EP_ISR_Handler+0x188>
 80146b2:	e32d      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	881b      	ldrh	r3, [r3, #0]
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	201e      	movs	r0, #30
 80146be:	183b      	adds	r3, r7, r0
 80146c0:	496c      	ldr	r1, [pc, #432]	@ (8014874 <PCD_EP_ISR_Handler+0x348>)
 80146c2:	400a      	ands	r2, r1
 80146c4:	801a      	strh	r2, [r3, #0]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	183a      	adds	r2, r7, r0
 80146cc:	8812      	ldrh	r2, [r2, #0]
 80146ce:	2180      	movs	r1, #128	@ 0x80
 80146d0:	430a      	orrs	r2, r1
 80146d2:	b292      	uxth	r2, r2
 80146d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	2250      	movs	r2, #80	@ 0x50
 80146dc:	5a9b      	ldrh	r3, [r3, r2]
 80146de:	b29b      	uxth	r3, r3
 80146e0:	001a      	movs	r2, r3
 80146e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	00db      	lsls	r3, r3, #3
 80146e8:	18d2      	adds	r2, r2, r3
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	18d3      	adds	r3, r2, r3
 80146f0:	4a5f      	ldr	r2, [pc, #380]	@ (8014870 <PCD_EP_ISR_Handler+0x344>)
 80146f2:	4694      	mov	ip, r2
 80146f4:	4463      	add	r3, ip
 80146f6:	881b      	ldrh	r3, [r3, #0]
 80146f8:	059b      	lsls	r3, r3, #22
 80146fa:	0d9a      	lsrs	r2, r3, #22
 80146fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8014700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014702:	69db      	ldr	r3, [r3, #28]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d01a      	beq.n	801473e <PCD_EP_ISR_Handler+0x212>
 8014708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801470a:	695b      	ldr	r3, [r3, #20]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d016      	beq.n	801473e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6818      	ldr	r0, [r3, #0]
 8014714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014716:	6959      	ldr	r1, [r3, #20]
 8014718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801471a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801471c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801471e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014720:	b29b      	uxth	r3, r3
 8014722:	f007 f9e4 	bl	801baee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8014726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014728:	695a      	ldr	r2, [r3, #20]
 801472a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801472c:	69db      	ldr	r3, [r3, #28]
 801472e:	18d2      	adds	r2, r2, r3
 8014730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014732:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2100      	movs	r1, #0
 8014738:	0018      	movs	r0, r3
 801473a:	f009 f9f2 	bl	801db22 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	214a      	movs	r1, #74	@ 0x4a
 8014744:	187b      	adds	r3, r7, r1
 8014746:	8812      	ldrh	r2, [r2, #0]
 8014748:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801474a:	187b      	adds	r3, r7, r1
 801474c:	881a      	ldrh	r2, [r3, #0]
 801474e:	2380      	movs	r3, #128	@ 0x80
 8014750:	011b      	lsls	r3, r3, #4
 8014752:	4013      	ands	r3, r2
 8014754:	d000      	beq.n	8014758 <PCD_EP_ISR_Handler+0x22c>
 8014756:	e2db      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
 8014758:	187b      	adds	r3, r7, r1
 801475a:	881a      	ldrh	r2, [r3, #0]
 801475c:	23c0      	movs	r3, #192	@ 0xc0
 801475e:	019b      	lsls	r3, r3, #6
 8014760:	401a      	ands	r2, r3
 8014762:	23c0      	movs	r3, #192	@ 0xc0
 8014764:	019b      	lsls	r3, r3, #6
 8014766:	429a      	cmp	r2, r3
 8014768:	d100      	bne.n	801476c <PCD_EP_ISR_Handler+0x240>
 801476a:	e2d1      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	61bb      	str	r3, [r7, #24]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	2250      	movs	r2, #80	@ 0x50
 8014778:	5a9b      	ldrh	r3, [r3, r2]
 801477a:	b29b      	uxth	r3, r3
 801477c:	001a      	movs	r2, r3
 801477e:	69bb      	ldr	r3, [r7, #24]
 8014780:	189b      	adds	r3, r3, r2
 8014782:	61bb      	str	r3, [r7, #24]
 8014784:	69bb      	ldr	r3, [r7, #24]
 8014786:	4a3a      	ldr	r2, [pc, #232]	@ (8014870 <PCD_EP_ISR_Handler+0x344>)
 8014788:	4694      	mov	ip, r2
 801478a:	4463      	add	r3, ip
 801478c:	617b      	str	r3, [r7, #20]
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	881b      	ldrh	r3, [r3, #0]
 8014792:	b29b      	uxth	r3, r3
 8014794:	059b      	lsls	r3, r3, #22
 8014796:	0d9b      	lsrs	r3, r3, #22
 8014798:	b29a      	uxth	r2, r3
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	801a      	strh	r2, [r3, #0]
 801479e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80147a4:	d91a      	bls.n	80147dc <PCD_EP_ISR_Handler+0x2b0>
 80147a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147a8:	691b      	ldr	r3, [r3, #16]
 80147aa:	095b      	lsrs	r3, r3, #5
 80147ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80147ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147b0:	691b      	ldr	r3, [r3, #16]
 80147b2:	221f      	movs	r2, #31
 80147b4:	4013      	ands	r3, r2
 80147b6:	d102      	bne.n	80147be <PCD_EP_ISR_Handler+0x292>
 80147b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147ba:	3b01      	subs	r3, #1
 80147bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	881b      	ldrh	r3, [r3, #0]
 80147c2:	b29a      	uxth	r2, r3
 80147c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	029b      	lsls	r3, r3, #10
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	4313      	orrs	r3, r2
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	4a25      	ldr	r2, [pc, #148]	@ (8014868 <PCD_EP_ISR_Handler+0x33c>)
 80147d2:	4313      	orrs	r3, r2
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	801a      	strh	r2, [r3, #0]
 80147da:	e023      	b.n	8014824 <PCD_EP_ISR_Handler+0x2f8>
 80147dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147de:	691b      	ldr	r3, [r3, #16]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d108      	bne.n	80147f6 <PCD_EP_ISR_Handler+0x2ca>
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	881b      	ldrh	r3, [r3, #0]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	4a1f      	ldr	r2, [pc, #124]	@ (8014868 <PCD_EP_ISR_Handler+0x33c>)
 80147ec:	4313      	orrs	r3, r2
 80147ee:	b29a      	uxth	r2, r3
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	801a      	strh	r2, [r3, #0]
 80147f4:	e016      	b.n	8014824 <PCD_EP_ISR_Handler+0x2f8>
 80147f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147f8:	691b      	ldr	r3, [r3, #16]
 80147fa:	085b      	lsrs	r3, r3, #1
 80147fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80147fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	2201      	movs	r2, #1
 8014804:	4013      	ands	r3, r2
 8014806:	d002      	beq.n	801480e <PCD_EP_ISR_Handler+0x2e2>
 8014808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801480a:	3301      	adds	r3, #1
 801480c:	647b      	str	r3, [r7, #68]	@ 0x44
 801480e:	697b      	ldr	r3, [r7, #20]
 8014810:	881b      	ldrh	r3, [r3, #0]
 8014812:	b29a      	uxth	r2, r3
 8014814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014816:	b29b      	uxth	r3, r3
 8014818:	029b      	lsls	r3, r3, #10
 801481a:	b29b      	uxth	r3, r3
 801481c:	4313      	orrs	r3, r2
 801481e:	b29a      	uxth	r2, r3
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	881b      	ldrh	r3, [r3, #0]
 801482a:	b29a      	uxth	r2, r3
 801482c:	2012      	movs	r0, #18
 801482e:	183b      	adds	r3, r7, r0
 8014830:	4911      	ldr	r1, [pc, #68]	@ (8014878 <PCD_EP_ISR_Handler+0x34c>)
 8014832:	400a      	ands	r2, r1
 8014834:	801a      	strh	r2, [r3, #0]
 8014836:	183b      	adds	r3, r7, r0
 8014838:	183a      	adds	r2, r7, r0
 801483a:	8812      	ldrh	r2, [r2, #0]
 801483c:	2180      	movs	r1, #128	@ 0x80
 801483e:	0149      	lsls	r1, r1, #5
 8014840:	404a      	eors	r2, r1
 8014842:	801a      	strh	r2, [r3, #0]
 8014844:	183b      	adds	r3, r7, r0
 8014846:	183a      	adds	r2, r7, r0
 8014848:	8812      	ldrh	r2, [r2, #0]
 801484a:	2180      	movs	r1, #128	@ 0x80
 801484c:	0189      	lsls	r1, r1, #6
 801484e:	404a      	eors	r2, r1
 8014850:	801a      	strh	r2, [r3, #0]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	183a      	adds	r2, r7, r0
 8014858:	8812      	ldrh	r2, [r2, #0]
 801485a:	4908      	ldr	r1, [pc, #32]	@ (801487c <PCD_EP_ISR_Handler+0x350>)
 801485c:	430a      	orrs	r2, r1
 801485e:	b292      	uxth	r2, r2
 8014860:	801a      	strh	r2, [r3, #0]
 8014862:	e255      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
 8014864:	ffff8f0f 	.word	0xffff8f0f
 8014868:	ffff8000 	.word	0xffff8000
 801486c:	00000402 	.word	0x00000402
 8014870:	00000406 	.word	0x00000406
 8014874:	00000f8f 	.word	0x00000f8f
 8014878:	ffffbf8f 	.word	0xffffbf8f
 801487c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	001a      	movs	r2, r3
 8014886:	204d      	movs	r0, #77	@ 0x4d
 8014888:	183b      	adds	r3, r7, r0
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	18d2      	adds	r2, r2, r3
 8014890:	214a      	movs	r1, #74	@ 0x4a
 8014892:	187b      	adds	r3, r7, r1
 8014894:	8812      	ldrh	r2, [r2, #0]
 8014896:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8014898:	187b      	adds	r3, r7, r1
 801489a:	2200      	movs	r2, #0
 801489c:	5e9b      	ldrsh	r3, [r3, r2]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	db00      	blt.n	80148a4 <PCD_EP_ISR_Handler+0x378>
 80148a2:	e0fa      	b.n	8014a9a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	001a      	movs	r2, r3
 80148aa:	183b      	adds	r3, r7, r0
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	009b      	lsls	r3, r3, #2
 80148b0:	18d3      	adds	r3, r2, r3
 80148b2:	881b      	ldrh	r3, [r3, #0]
 80148b4:	b29a      	uxth	r2, r3
 80148b6:	2448      	movs	r4, #72	@ 0x48
 80148b8:	193b      	adds	r3, r7, r4
 80148ba:	49d1      	ldr	r1, [pc, #836]	@ (8014c00 <PCD_EP_ISR_Handler+0x6d4>)
 80148bc:	400a      	ands	r2, r1
 80148be:	801a      	strh	r2, [r3, #0]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	001a      	movs	r2, r3
 80148c6:	183b      	adds	r3, r7, r0
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	18d3      	adds	r3, r2, r3
 80148ce:	193a      	adds	r2, r7, r4
 80148d0:	8812      	ldrh	r2, [r2, #0]
 80148d2:	2180      	movs	r1, #128	@ 0x80
 80148d4:	430a      	orrs	r2, r1
 80148d6:	b292      	uxth	r2, r2
 80148d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80148da:	183b      	adds	r3, r7, r0
 80148dc:	781a      	ldrb	r2, [r3, #0]
 80148de:	0013      	movs	r3, r2
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	189b      	adds	r3, r3, r2
 80148e4:	00db      	lsls	r3, r3, #3
 80148e6:	3369      	adds	r3, #105	@ 0x69
 80148e8:	33ff      	adds	r3, #255	@ 0xff
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	18d3      	adds	r3, r2, r3
 80148ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80148f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148f2:	7b1b      	ldrb	r3, [r3, #12]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d125      	bne.n	8014944 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2250      	movs	r2, #80	@ 0x50
 80148fe:	5a9b      	ldrh	r3, [r3, r2]
 8014900:	b29b      	uxth	r3, r3
 8014902:	001a      	movs	r2, r3
 8014904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	00db      	lsls	r3, r3, #3
 801490a:	18d2      	adds	r2, r2, r3
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	18d3      	adds	r3, r2, r3
 8014912:	4abc      	ldr	r2, [pc, #752]	@ (8014c04 <PCD_EP_ISR_Handler+0x6d8>)
 8014914:	4694      	mov	ip, r2
 8014916:	4463      	add	r3, ip
 8014918:	881a      	ldrh	r2, [r3, #0]
 801491a:	2450      	movs	r4, #80	@ 0x50
 801491c:	193b      	adds	r3, r7, r4
 801491e:	0592      	lsls	r2, r2, #22
 8014920:	0d92      	lsrs	r2, r2, #22
 8014922:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8014924:	193b      	adds	r3, r7, r4
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d100      	bne.n	801492e <PCD_EP_ISR_Handler+0x402>
 801492c:	e08d      	b.n	8014a4a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	6818      	ldr	r0, [r3, #0]
 8014932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014934:	6959      	ldr	r1, [r3, #20]
 8014936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014938:	88da      	ldrh	r2, [r3, #6]
 801493a:	193b      	adds	r3, r7, r4
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	f007 f8d6 	bl	801baee <USB_ReadPMA>
 8014942:	e082      	b.n	8014a4a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8014944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014946:	78db      	ldrb	r3, [r3, #3]
 8014948:	2b02      	cmp	r3, #2
 801494a:	d10c      	bne.n	8014966 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801494c:	2350      	movs	r3, #80	@ 0x50
 801494e:	18fc      	adds	r4, r7, r3
 8014950:	234a      	movs	r3, #74	@ 0x4a
 8014952:	18fb      	adds	r3, r7, r3
 8014954:	881a      	ldrh	r2, [r3, #0]
 8014956:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	0018      	movs	r0, r3
 801495c:	f000 f9ec 	bl	8014d38 <HAL_PCD_EP_DB_Receive>
 8014960:	0003      	movs	r3, r0
 8014962:	8023      	strh	r3, [r4, #0]
 8014964:	e071      	b.n	8014a4a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	001a      	movs	r2, r3
 801496c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	18d3      	adds	r3, r2, r3
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	b29a      	uxth	r2, r3
 8014978:	2052      	movs	r0, #82	@ 0x52
 801497a:	183b      	adds	r3, r7, r0
 801497c:	49a2      	ldr	r1, [pc, #648]	@ (8014c08 <PCD_EP_ISR_Handler+0x6dc>)
 801497e:	400a      	ands	r2, r1
 8014980:	801a      	strh	r2, [r3, #0]
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	001a      	movs	r2, r3
 8014988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	009b      	lsls	r3, r3, #2
 801498e:	18d3      	adds	r3, r2, r3
 8014990:	183a      	adds	r2, r7, r0
 8014992:	8812      	ldrh	r2, [r2, #0]
 8014994:	499d      	ldr	r1, [pc, #628]	@ (8014c0c <PCD_EP_ISR_Handler+0x6e0>)
 8014996:	430a      	orrs	r2, r1
 8014998:	b292      	uxth	r2, r2
 801499a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	001a      	movs	r2, r3
 80149a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	18d3      	adds	r3, r2, r3
 80149aa:	881b      	ldrh	r3, [r3, #0]
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	001a      	movs	r2, r3
 80149b0:	2380      	movs	r3, #128	@ 0x80
 80149b2:	01db      	lsls	r3, r3, #7
 80149b4:	4013      	ands	r3, r2
 80149b6:	d024      	beq.n	8014a02 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	2250      	movs	r2, #80	@ 0x50
 80149be:	5a9b      	ldrh	r3, [r3, r2]
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	001a      	movs	r2, r3
 80149c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	00db      	lsls	r3, r3, #3
 80149ca:	18d2      	adds	r2, r2, r3
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	18d3      	adds	r3, r2, r3
 80149d2:	4a8f      	ldr	r2, [pc, #572]	@ (8014c10 <PCD_EP_ISR_Handler+0x6e4>)
 80149d4:	4694      	mov	ip, r2
 80149d6:	4463      	add	r3, ip
 80149d8:	881a      	ldrh	r2, [r3, #0]
 80149da:	2450      	movs	r4, #80	@ 0x50
 80149dc:	193b      	adds	r3, r7, r4
 80149de:	0592      	lsls	r2, r2, #22
 80149e0:	0d92      	lsrs	r2, r2, #22
 80149e2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80149e4:	193b      	adds	r3, r7, r4
 80149e6:	881b      	ldrh	r3, [r3, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d02e      	beq.n	8014a4a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	6818      	ldr	r0, [r3, #0]
 80149f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149f2:	6959      	ldr	r1, [r3, #20]
 80149f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80149f6:	891a      	ldrh	r2, [r3, #8]
 80149f8:	193b      	adds	r3, r7, r4
 80149fa:	881b      	ldrh	r3, [r3, #0]
 80149fc:	f007 f877 	bl	801baee <USB_ReadPMA>
 8014a00:	e023      	b.n	8014a4a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2250      	movs	r2, #80	@ 0x50
 8014a08:	5a9b      	ldrh	r3, [r3, r2]
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	001a      	movs	r2, r3
 8014a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	00db      	lsls	r3, r3, #3
 8014a14:	18d2      	adds	r2, r2, r3
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	18d3      	adds	r3, r2, r3
 8014a1c:	4a79      	ldr	r2, [pc, #484]	@ (8014c04 <PCD_EP_ISR_Handler+0x6d8>)
 8014a1e:	4694      	mov	ip, r2
 8014a20:	4463      	add	r3, ip
 8014a22:	881a      	ldrh	r2, [r3, #0]
 8014a24:	2450      	movs	r4, #80	@ 0x50
 8014a26:	193b      	adds	r3, r7, r4
 8014a28:	0592      	lsls	r2, r2, #22
 8014a2a:	0d92      	lsrs	r2, r2, #22
 8014a2c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014a2e:	193b      	adds	r3, r7, r4
 8014a30:	881b      	ldrh	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d009      	beq.n	8014a4a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	6818      	ldr	r0, [r3, #0]
 8014a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a3c:	6959      	ldr	r1, [r3, #20]
 8014a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a40:	895a      	ldrh	r2, [r3, #10]
 8014a42:	193b      	adds	r3, r7, r4
 8014a44:	881b      	ldrh	r3, [r3, #0]
 8014a46:	f007 f852 	bl	801baee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8014a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a4c:	69da      	ldr	r2, [r3, #28]
 8014a4e:	2150      	movs	r1, #80	@ 0x50
 8014a50:	187b      	adds	r3, r7, r1
 8014a52:	881b      	ldrh	r3, [r3, #0]
 8014a54:	18d2      	adds	r2, r2, r3
 8014a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8014a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a5c:	695a      	ldr	r2, [r3, #20]
 8014a5e:	187b      	adds	r3, r7, r1
 8014a60:	881b      	ldrh	r3, [r3, #0]
 8014a62:	18d2      	adds	r2, r2, r3
 8014a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a66:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8014a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a6a:	699b      	ldr	r3, [r3, #24]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d005      	beq.n	8014a7c <PCD_EP_ISR_Handler+0x550>
 8014a70:	187b      	adds	r3, r7, r1
 8014a72:	881a      	ldrh	r2, [r3, #0]
 8014a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a76:	691b      	ldr	r3, [r3, #16]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d207      	bcs.n	8014a8c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8014a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a7e:	781a      	ldrb	r2, [r3, #0]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	0011      	movs	r1, r2
 8014a84:	0018      	movs	r0, r3
 8014a86:	f009 f84c 	bl	801db22 <HAL_PCD_DataOutStageCallback>
 8014a8a:	e006      	b.n	8014a9a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a92:	0011      	movs	r1, r2
 8014a94:	0018      	movs	r0, r3
 8014a96:	f005 fd6f 	bl	801a578 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014a9a:	244a      	movs	r4, #74	@ 0x4a
 8014a9c:	193b      	adds	r3, r7, r4
 8014a9e:	881b      	ldrh	r3, [r3, #0]
 8014aa0:	2280      	movs	r2, #128	@ 0x80
 8014aa2:	4013      	ands	r3, r2
 8014aa4:	d100      	bne.n	8014aa8 <PCD_EP_ISR_Handler+0x57c>
 8014aa6:	e133      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8014aa8:	204d      	movs	r0, #77	@ 0x4d
 8014aaa:	183b      	adds	r3, r7, r0
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	0013      	movs	r3, r2
 8014ab2:	009b      	lsls	r3, r3, #2
 8014ab4:	189b      	adds	r3, r3, r2
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	18d3      	adds	r3, r2, r3
 8014abc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	001a      	movs	r2, r3
 8014ac4:	183b      	adds	r3, r7, r0
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	18d3      	adds	r3, r2, r3
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	2542      	movs	r5, #66	@ 0x42
 8014ad2:	197b      	adds	r3, r7, r5
 8014ad4:	494f      	ldr	r1, [pc, #316]	@ (8014c14 <PCD_EP_ISR_Handler+0x6e8>)
 8014ad6:	400a      	ands	r2, r1
 8014ad8:	801a      	strh	r2, [r3, #0]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	001a      	movs	r2, r3
 8014ae0:	183b      	adds	r3, r7, r0
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	18d3      	adds	r3, r2, r3
 8014ae8:	197a      	adds	r2, r7, r5
 8014aea:	8812      	ldrh	r2, [r2, #0]
 8014aec:	494a      	ldr	r1, [pc, #296]	@ (8014c18 <PCD_EP_ISR_Handler+0x6ec>)
 8014aee:	430a      	orrs	r2, r1
 8014af0:	b292      	uxth	r2, r2
 8014af2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014af6:	78db      	ldrb	r3, [r3, #3]
 8014af8:	2b01      	cmp	r3, #1
 8014afa:	d000      	beq.n	8014afe <PCD_EP_ISR_Handler+0x5d2>
 8014afc:	e0af      	b.n	8014c5e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b00:	2200      	movs	r2, #0
 8014b02:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b06:	7b1b      	ldrb	r3, [r3, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d100      	bne.n	8014b0e <PCD_EP_ISR_Handler+0x5e2>
 8014b0c:	e09f      	b.n	8014c4e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014b0e:	193b      	adds	r3, r7, r4
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	2240      	movs	r2, #64	@ 0x40
 8014b14:	4013      	ands	r3, r2
 8014b16:	d046      	beq.n	8014ba6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b1a:	785b      	ldrb	r3, [r3, #1]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d125      	bne.n	8014b6c <PCD_EP_ISR_Handler+0x640>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2250      	movs	r2, #80	@ 0x50
 8014b2c:	5a9b      	ldrh	r3, [r3, r2]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	001a      	movs	r2, r3
 8014b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b34:	189b      	adds	r3, r3, r2
 8014b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	00da      	lsls	r2, r3, #3
 8014b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b40:	18d3      	adds	r3, r2, r3
 8014b42:	4a33      	ldr	r2, [pc, #204]	@ (8014c10 <PCD_EP_ISR_Handler+0x6e4>)
 8014b44:	4694      	mov	ip, r2
 8014b46:	4463      	add	r3, ip
 8014b48:	623b      	str	r3, [r7, #32]
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	059b      	lsls	r3, r3, #22
 8014b52:	0d9b      	lsrs	r3, r3, #22
 8014b54:	b29a      	uxth	r2, r3
 8014b56:	6a3b      	ldr	r3, [r7, #32]
 8014b58:	801a      	strh	r2, [r3, #0]
 8014b5a:	6a3b      	ldr	r3, [r7, #32]
 8014b5c:	881b      	ldrh	r3, [r3, #0]
 8014b5e:	b29b      	uxth	r3, r3
 8014b60:	4a2d      	ldr	r2, [pc, #180]	@ (8014c18 <PCD_EP_ISR_Handler+0x6ec>)
 8014b62:	4313      	orrs	r3, r2
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	6a3b      	ldr	r3, [r7, #32]
 8014b68:	801a      	strh	r2, [r3, #0]
 8014b6a:	e070      	b.n	8014c4e <PCD_EP_ISR_Handler+0x722>
 8014b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b6e:	785b      	ldrb	r3, [r3, #1]
 8014b70:	2b01      	cmp	r3, #1
 8014b72:	d16c      	bne.n	8014c4e <PCD_EP_ISR_Handler+0x722>
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2250      	movs	r2, #80	@ 0x50
 8014b80:	5a9b      	ldrh	r3, [r3, r2]
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	001a      	movs	r2, r3
 8014b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b88:	189b      	adds	r3, r3, r2
 8014b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	00da      	lsls	r2, r3, #3
 8014b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b94:	18d3      	adds	r3, r2, r3
 8014b96:	4a1e      	ldr	r2, [pc, #120]	@ (8014c10 <PCD_EP_ISR_Handler+0x6e4>)
 8014b98:	4694      	mov	ip, r2
 8014b9a:	4463      	add	r3, ip
 8014b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	801a      	strh	r2, [r3, #0]
 8014ba4:	e053      	b.n	8014c4e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014bae:	785b      	ldrb	r3, [r3, #1]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d133      	bne.n	8014c1c <PCD_EP_ISR_Handler+0x6f0>
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	2250      	movs	r2, #80	@ 0x50
 8014bc0:	5a9b      	ldrh	r3, [r3, r2]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	001a      	movs	r2, r3
 8014bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bc8:	189b      	adds	r3, r3, r2
 8014bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	00da      	lsls	r2, r3, #3
 8014bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bd4:	18d3      	adds	r3, r2, r3
 8014bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8014c04 <PCD_EP_ISR_Handler+0x6d8>)
 8014bd8:	4694      	mov	ip, r2
 8014bda:	4463      	add	r3, ip
 8014bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8014bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014be0:	881b      	ldrh	r3, [r3, #0]
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	059b      	lsls	r3, r3, #22
 8014be6:	0d9b      	lsrs	r3, r3, #22
 8014be8:	b29a      	uxth	r2, r3
 8014bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bec:	801a      	strh	r2, [r3, #0]
 8014bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf0:	881b      	ldrh	r3, [r3, #0]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	4a08      	ldr	r2, [pc, #32]	@ (8014c18 <PCD_EP_ISR_Handler+0x6ec>)
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	b29a      	uxth	r2, r3
 8014bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bfc:	801a      	strh	r2, [r3, #0]
 8014bfe:	e026      	b.n	8014c4e <PCD_EP_ISR_Handler+0x722>
 8014c00:	00000f8f 	.word	0x00000f8f
 8014c04:	00000406 	.word	0x00000406
 8014c08:	ffff8f8f 	.word	0xffff8f8f
 8014c0c:	ffff80c0 	.word	0xffff80c0
 8014c10:	00000402 	.word	0x00000402
 8014c14:	ffff8f0f 	.word	0xffff8f0f
 8014c18:	ffff8000 	.word	0xffff8000
 8014c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c1e:	785b      	ldrb	r3, [r3, #1]
 8014c20:	2b01      	cmp	r3, #1
 8014c22:	d114      	bne.n	8014c4e <PCD_EP_ISR_Handler+0x722>
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2250      	movs	r2, #80	@ 0x50
 8014c2a:	5a9b      	ldrh	r3, [r3, r2]
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	001a      	movs	r2, r3
 8014c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c32:	189b      	adds	r3, r3, r2
 8014c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	00da      	lsls	r2, r3, #3
 8014c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c3e:	18d3      	adds	r3, r2, r3
 8014c40:	4a3b      	ldr	r2, [pc, #236]	@ (8014d30 <PCD_EP_ISR_Handler+0x804>)
 8014c42:	4694      	mov	ip, r2
 8014c44:	4463      	add	r3, ip
 8014c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c50:	781a      	ldrb	r2, [r3, #0]
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	0011      	movs	r1, r2
 8014c56:	0018      	movs	r0, r3
 8014c58:	f008 ff84 	bl	801db64 <HAL_PCD_DataInStageCallback>
 8014c5c:	e058      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8014c5e:	234a      	movs	r3, #74	@ 0x4a
 8014c60:	18fb      	adds	r3, r7, r3
 8014c62:	881a      	ldrh	r2, [r3, #0]
 8014c64:	2380      	movs	r3, #128	@ 0x80
 8014c66:	005b      	lsls	r3, r3, #1
 8014c68:	4013      	ands	r3, r2
 8014c6a:	d149      	bne.n	8014d00 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	2250      	movs	r2, #80	@ 0x50
 8014c72:	5a9b      	ldrh	r3, [r3, r2]
 8014c74:	b29b      	uxth	r3, r3
 8014c76:	001a      	movs	r2, r3
 8014c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	00db      	lsls	r3, r3, #3
 8014c7e:	18d2      	adds	r2, r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	18d3      	adds	r3, r2, r3
 8014c86:	4a2b      	ldr	r2, [pc, #172]	@ (8014d34 <PCD_EP_ISR_Handler+0x808>)
 8014c88:	4694      	mov	ip, r2
 8014c8a:	4463      	add	r3, ip
 8014c8c:	881a      	ldrh	r2, [r3, #0]
 8014c8e:	2140      	movs	r1, #64	@ 0x40
 8014c90:	187b      	adds	r3, r7, r1
 8014c92:	0592      	lsls	r2, r2, #22
 8014c94:	0d92      	lsrs	r2, r2, #22
 8014c96:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c9a:	699a      	ldr	r2, [r3, #24]
 8014c9c:	187b      	adds	r3, r7, r1
 8014c9e:	881b      	ldrh	r3, [r3, #0]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d907      	bls.n	8014cb4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8014ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ca6:	699a      	ldr	r2, [r3, #24]
 8014ca8:	187b      	adds	r3, r7, r1
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	1ad2      	subs	r2, r2, r3
 8014cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cb0:	619a      	str	r2, [r3, #24]
 8014cb2:	e002      	b.n	8014cba <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8014cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cbc:	699b      	ldr	r3, [r3, #24]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d107      	bne.n	8014cd2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cc4:	781a      	ldrb	r2, [r3, #0]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	0011      	movs	r1, r2
 8014cca:	0018      	movs	r0, r3
 8014ccc:	f008 ff4a 	bl	801db64 <HAL_PCD_DataInStageCallback>
 8014cd0:	e01e      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8014cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cd4:	695a      	ldr	r2, [r3, #20]
 8014cd6:	2140      	movs	r1, #64	@ 0x40
 8014cd8:	187b      	adds	r3, r7, r1
 8014cda:	881b      	ldrh	r3, [r3, #0]
 8014cdc:	18d2      	adds	r2, r2, r3
 8014cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ce0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8014ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ce4:	69da      	ldr	r2, [r3, #28]
 8014ce6:	187b      	adds	r3, r7, r1
 8014ce8:	881b      	ldrh	r3, [r3, #0]
 8014cea:	18d2      	adds	r2, r2, r3
 8014cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014cf6:	0011      	movs	r1, r2
 8014cf8:	0018      	movs	r0, r3
 8014cfa:	f005 fc3d 	bl	801a578 <USB_EPStartXfer>
 8014cfe:	e007      	b.n	8014d10 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014d00:	234a      	movs	r3, #74	@ 0x4a
 8014d02:	18fb      	adds	r3, r7, r3
 8014d04:	881a      	ldrh	r2, [r3, #0]
 8014d06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	0018      	movs	r0, r3
 8014d0c:	f000 f930 	bl	8014f70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2244      	movs	r2, #68	@ 0x44
 8014d16:	5a9b      	ldrh	r3, [r3, r2]
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	b21b      	sxth	r3, r3
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	da01      	bge.n	8014d24 <PCD_EP_ISR_Handler+0x7f8>
 8014d20:	f7ff fc0a 	bl	8014538 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014d24:	2300      	movs	r3, #0
}
 8014d26:	0018      	movs	r0, r3
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	b016      	add	sp, #88	@ 0x58
 8014d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d2e:	46c0      	nop			@ (mov r8, r8)
 8014d30:	00000406 	.word	0x00000406
 8014d34:	00000402 	.word	0x00000402

08014d38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014d38:	b590      	push	{r4, r7, lr}
 8014d3a:	b089      	sub	sp, #36	@ 0x24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	1dbb      	adds	r3, r7, #6
 8014d44:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014d46:	1dbb      	adds	r3, r7, #6
 8014d48:	881a      	ldrh	r2, [r3, #0]
 8014d4a:	2380      	movs	r3, #128	@ 0x80
 8014d4c:	01db      	lsls	r3, r3, #7
 8014d4e:	4013      	ands	r3, r2
 8014d50:	d100      	bne.n	8014d54 <HAL_PCD_EP_DB_Receive+0x1c>
 8014d52:	e07d      	b.n	8014e50 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2250      	movs	r2, #80	@ 0x50
 8014d5a:	5a9b      	ldrh	r3, [r3, r2]
 8014d5c:	b29b      	uxth	r3, r3
 8014d5e:	001a      	movs	r2, r3
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	00db      	lsls	r3, r3, #3
 8014d66:	18d2      	adds	r2, r2, r3
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	18d3      	adds	r3, r2, r3
 8014d6e:	4a7a      	ldr	r2, [pc, #488]	@ (8014f58 <HAL_PCD_EP_DB_Receive+0x220>)
 8014d70:	4694      	mov	ip, r2
 8014d72:	4463      	add	r3, ip
 8014d74:	881a      	ldrh	r2, [r3, #0]
 8014d76:	211a      	movs	r1, #26
 8014d78:	187b      	adds	r3, r7, r1
 8014d7a:	0592      	lsls	r2, r2, #22
 8014d7c:	0d92      	lsrs	r2, r2, #22
 8014d7e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	699a      	ldr	r2, [r3, #24]
 8014d84:	187b      	adds	r3, r7, r1
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d307      	bcc.n	8014d9c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	699a      	ldr	r2, [r3, #24]
 8014d90:	187b      	adds	r3, r7, r1
 8014d92:	881b      	ldrh	r3, [r3, #0]
 8014d94:	1ad2      	subs	r2, r2, r3
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	619a      	str	r2, [r3, #24]
 8014d9a:	e002      	b.n	8014da2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	699b      	ldr	r3, [r3, #24]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d121      	bne.n	8014dee <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	001a      	movs	r2, r3
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	18d3      	adds	r3, r2, r3
 8014db8:	881b      	ldrh	r3, [r3, #0]
 8014dba:	b29a      	uxth	r2, r3
 8014dbc:	2018      	movs	r0, #24
 8014dbe:	183b      	adds	r3, r7, r0
 8014dc0:	4966      	ldr	r1, [pc, #408]	@ (8014f5c <HAL_PCD_EP_DB_Receive+0x224>)
 8014dc2:	400a      	ands	r2, r1
 8014dc4:	801a      	strh	r2, [r3, #0]
 8014dc6:	183b      	adds	r3, r7, r0
 8014dc8:	183a      	adds	r2, r7, r0
 8014dca:	8812      	ldrh	r2, [r2, #0]
 8014dcc:	2180      	movs	r1, #128	@ 0x80
 8014dce:	0189      	lsls	r1, r1, #6
 8014dd0:	404a      	eors	r2, r1
 8014dd2:	801a      	strh	r2, [r3, #0]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	001a      	movs	r2, r3
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	781b      	ldrb	r3, [r3, #0]
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	18d3      	adds	r3, r2, r3
 8014de2:	183a      	adds	r2, r7, r0
 8014de4:	8812      	ldrh	r2, [r2, #0]
 8014de6:	495e      	ldr	r1, [pc, #376]	@ (8014f60 <HAL_PCD_EP_DB_Receive+0x228>)
 8014de8:	430a      	orrs	r2, r1
 8014dea:	b292      	uxth	r2, r2
 8014dec:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014dee:	1dbb      	adds	r3, r7, #6
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	2240      	movs	r2, #64	@ 0x40
 8014df4:	4013      	ands	r3, r2
 8014df6:	d01a      	beq.n	8014e2e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	001a      	movs	r2, r3
 8014dfe:	68bb      	ldr	r3, [r7, #8]
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	18d3      	adds	r3, r2, r3
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	b29a      	uxth	r2, r3
 8014e0a:	2016      	movs	r0, #22
 8014e0c:	183b      	adds	r3, r7, r0
 8014e0e:	4955      	ldr	r1, [pc, #340]	@ (8014f64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014e10:	400a      	ands	r2, r1
 8014e12:	801a      	strh	r2, [r3, #0]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	001a      	movs	r2, r3
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	009b      	lsls	r3, r3, #2
 8014e20:	18d3      	adds	r3, r2, r3
 8014e22:	183a      	adds	r2, r7, r0
 8014e24:	8812      	ldrh	r2, [r2, #0]
 8014e26:	4950      	ldr	r1, [pc, #320]	@ (8014f68 <HAL_PCD_EP_DB_Receive+0x230>)
 8014e28:	430a      	orrs	r2, r1
 8014e2a:	b292      	uxth	r2, r2
 8014e2c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014e2e:	241a      	movs	r4, #26
 8014e30:	193b      	adds	r3, r7, r4
 8014e32:	881b      	ldrh	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d100      	bne.n	8014e3a <HAL_PCD_EP_DB_Receive+0x102>
 8014e38:	e086      	b.n	8014f48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	6818      	ldr	r0, [r3, #0]
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	6959      	ldr	r1, [r3, #20]
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	891a      	ldrh	r2, [r3, #8]
 8014e46:	193b      	adds	r3, r7, r4
 8014e48:	881b      	ldrh	r3, [r3, #0]
 8014e4a:	f006 fe50 	bl	801baee <USB_ReadPMA>
 8014e4e:	e07b      	b.n	8014f48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2250      	movs	r2, #80	@ 0x50
 8014e56:	5a9b      	ldrh	r3, [r3, r2]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	001a      	movs	r2, r3
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	00db      	lsls	r3, r3, #3
 8014e62:	18d2      	adds	r2, r2, r3
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	18d3      	adds	r3, r2, r3
 8014e6a:	4a40      	ldr	r2, [pc, #256]	@ (8014f6c <HAL_PCD_EP_DB_Receive+0x234>)
 8014e6c:	4694      	mov	ip, r2
 8014e6e:	4463      	add	r3, ip
 8014e70:	881a      	ldrh	r2, [r3, #0]
 8014e72:	211a      	movs	r1, #26
 8014e74:	187b      	adds	r3, r7, r1
 8014e76:	0592      	lsls	r2, r2, #22
 8014e78:	0d92      	lsrs	r2, r2, #22
 8014e7a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	699a      	ldr	r2, [r3, #24]
 8014e80:	187b      	adds	r3, r7, r1
 8014e82:	881b      	ldrh	r3, [r3, #0]
 8014e84:	429a      	cmp	r2, r3
 8014e86:	d307      	bcc.n	8014e98 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	699a      	ldr	r2, [r3, #24]
 8014e8c:	187b      	adds	r3, r7, r1
 8014e8e:	881b      	ldrh	r3, [r3, #0]
 8014e90:	1ad2      	subs	r2, r2, r3
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	619a      	str	r2, [r3, #24]
 8014e96:	e002      	b.n	8014e9e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	699b      	ldr	r3, [r3, #24]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d121      	bne.n	8014eea <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	001a      	movs	r2, r3
 8014eac:	68bb      	ldr	r3, [r7, #8]
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	009b      	lsls	r3, r3, #2
 8014eb2:	18d3      	adds	r3, r2, r3
 8014eb4:	881b      	ldrh	r3, [r3, #0]
 8014eb6:	b29a      	uxth	r2, r3
 8014eb8:	201e      	movs	r0, #30
 8014eba:	183b      	adds	r3, r7, r0
 8014ebc:	4927      	ldr	r1, [pc, #156]	@ (8014f5c <HAL_PCD_EP_DB_Receive+0x224>)
 8014ebe:	400a      	ands	r2, r1
 8014ec0:	801a      	strh	r2, [r3, #0]
 8014ec2:	183b      	adds	r3, r7, r0
 8014ec4:	183a      	adds	r2, r7, r0
 8014ec6:	8812      	ldrh	r2, [r2, #0]
 8014ec8:	2180      	movs	r1, #128	@ 0x80
 8014eca:	0189      	lsls	r1, r1, #6
 8014ecc:	404a      	eors	r2, r1
 8014ece:	801a      	strh	r2, [r3, #0]
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	001a      	movs	r2, r3
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	781b      	ldrb	r3, [r3, #0]
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	18d3      	adds	r3, r2, r3
 8014ede:	183a      	adds	r2, r7, r0
 8014ee0:	8812      	ldrh	r2, [r2, #0]
 8014ee2:	491f      	ldr	r1, [pc, #124]	@ (8014f60 <HAL_PCD_EP_DB_Receive+0x228>)
 8014ee4:	430a      	orrs	r2, r1
 8014ee6:	b292      	uxth	r2, r2
 8014ee8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014eea:	1dbb      	adds	r3, r7, #6
 8014eec:	881b      	ldrh	r3, [r3, #0]
 8014eee:	2240      	movs	r2, #64	@ 0x40
 8014ef0:	4013      	ands	r3, r2
 8014ef2:	d11a      	bne.n	8014f2a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	001a      	movs	r2, r3
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	781b      	ldrb	r3, [r3, #0]
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	18d3      	adds	r3, r2, r3
 8014f02:	881b      	ldrh	r3, [r3, #0]
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	201c      	movs	r0, #28
 8014f08:	183b      	adds	r3, r7, r0
 8014f0a:	4916      	ldr	r1, [pc, #88]	@ (8014f64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014f0c:	400a      	ands	r2, r1
 8014f0e:	801a      	strh	r2, [r3, #0]
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	001a      	movs	r2, r3
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	18d3      	adds	r3, r2, r3
 8014f1e:	183a      	adds	r2, r7, r0
 8014f20:	8812      	ldrh	r2, [r2, #0]
 8014f22:	4911      	ldr	r1, [pc, #68]	@ (8014f68 <HAL_PCD_EP_DB_Receive+0x230>)
 8014f24:	430a      	orrs	r2, r1
 8014f26:	b292      	uxth	r2, r2
 8014f28:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014f2a:	241a      	movs	r4, #26
 8014f2c:	193b      	adds	r3, r7, r4
 8014f2e:	881b      	ldrh	r3, [r3, #0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d009      	beq.n	8014f48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	6818      	ldr	r0, [r3, #0]
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	6959      	ldr	r1, [r3, #20]
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	895a      	ldrh	r2, [r3, #10]
 8014f40:	193b      	adds	r3, r7, r4
 8014f42:	881b      	ldrh	r3, [r3, #0]
 8014f44:	f006 fdd3 	bl	801baee <USB_ReadPMA>
    }
  }

  return count;
 8014f48:	231a      	movs	r3, #26
 8014f4a:	18fb      	adds	r3, r7, r3
 8014f4c:	881b      	ldrh	r3, [r3, #0]
}
 8014f4e:	0018      	movs	r0, r3
 8014f50:	46bd      	mov	sp, r7
 8014f52:	b009      	add	sp, #36	@ 0x24
 8014f54:	bd90      	pop	{r4, r7, pc}
 8014f56:	46c0      	nop			@ (mov r8, r8)
 8014f58:	00000402 	.word	0x00000402
 8014f5c:	ffffbf8f 	.word	0xffffbf8f
 8014f60:	ffff8080 	.word	0xffff8080
 8014f64:	ffff8f8f 	.word	0xffff8f8f
 8014f68:	ffff80c0 	.word	0xffff80c0
 8014f6c:	00000406 	.word	0x00000406

08014f70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b0a4      	sub	sp, #144	@ 0x90
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	60f8      	str	r0, [r7, #12]
 8014f78:	60b9      	str	r1, [r7, #8]
 8014f7a:	1dbb      	adds	r3, r7, #6
 8014f7c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014f7e:	1dbb      	adds	r3, r7, #6
 8014f80:	881b      	ldrh	r3, [r3, #0]
 8014f82:	2240      	movs	r2, #64	@ 0x40
 8014f84:	4013      	ands	r3, r2
 8014f86:	d100      	bne.n	8014f8a <HAL_PCD_EP_DB_Transmit+0x1a>
 8014f88:	e1e4      	b.n	8015354 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	2250      	movs	r2, #80	@ 0x50
 8014f90:	5a9b      	ldrh	r3, [r3, r2]
 8014f92:	b29b      	uxth	r3, r3
 8014f94:	001a      	movs	r2, r3
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	18d2      	adds	r2, r2, r3
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	18d3      	adds	r3, r2, r3
 8014fa4:	4ad0      	ldr	r2, [pc, #832]	@ (80152e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014fa6:	4694      	mov	ip, r2
 8014fa8:	4463      	add	r3, ip
 8014faa:	881a      	ldrh	r2, [r3, #0]
 8014fac:	2186      	movs	r1, #134	@ 0x86
 8014fae:	187b      	adds	r3, r7, r1
 8014fb0:	0592      	lsls	r2, r2, #22
 8014fb2:	0d92      	lsrs	r2, r2, #22
 8014fb4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	699a      	ldr	r2, [r3, #24]
 8014fba:	187b      	adds	r3, r7, r1
 8014fbc:	881b      	ldrh	r3, [r3, #0]
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d907      	bls.n	8014fd2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8014fc2:	68bb      	ldr	r3, [r7, #8]
 8014fc4:	699a      	ldr	r2, [r3, #24]
 8014fc6:	187b      	adds	r3, r7, r1
 8014fc8:	881b      	ldrh	r3, [r3, #0]
 8014fca:	1ad2      	subs	r2, r2, r3
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	619a      	str	r2, [r3, #24]
 8014fd0:	e002      	b.n	8014fd8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8014fd2:	68bb      	ldr	r3, [r7, #8]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014fd8:	68bb      	ldr	r3, [r7, #8]
 8014fda:	699b      	ldr	r3, [r3, #24]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d000      	beq.n	8014fe2 <HAL_PCD_EP_DB_Transmit+0x72>
 8014fe0:	e0b5      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	785b      	ldrb	r3, [r3, #1]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d125      	bne.n	8015036 <HAL_PCD_EP_DB_Transmit+0xc6>
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2250      	movs	r2, #80	@ 0x50
 8014ff6:	5a9b      	ldrh	r3, [r3, r2]
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	001a      	movs	r2, r3
 8014ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ffe:	189b      	adds	r3, r3, r2
 8015000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	00da      	lsls	r2, r3, #3
 8015008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801500a:	18d3      	adds	r3, r2, r3
 801500c:	4ab6      	ldr	r2, [pc, #728]	@ (80152e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 801500e:	4694      	mov	ip, r2
 8015010:	4463      	add	r3, ip
 8015012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015016:	881b      	ldrh	r3, [r3, #0]
 8015018:	b29b      	uxth	r3, r3
 801501a:	059b      	lsls	r3, r3, #22
 801501c:	0d9b      	lsrs	r3, r3, #22
 801501e:	b29a      	uxth	r2, r3
 8015020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015022:	801a      	strh	r2, [r3, #0]
 8015024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015026:	881b      	ldrh	r3, [r3, #0]
 8015028:	b29b      	uxth	r3, r3
 801502a:	4ab0      	ldr	r2, [pc, #704]	@ (80152ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 801502c:	4313      	orrs	r3, r2
 801502e:	b29a      	uxth	r2, r3
 8015030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015032:	801a      	strh	r2, [r3, #0]
 8015034:	e01b      	b.n	801506e <HAL_PCD_EP_DB_Transmit+0xfe>
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	785b      	ldrb	r3, [r3, #1]
 801503a:	2b01      	cmp	r3, #1
 801503c:	d117      	bne.n	801506e <HAL_PCD_EP_DB_Transmit+0xfe>
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	637b      	str	r3, [r7, #52]	@ 0x34
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2250      	movs	r2, #80	@ 0x50
 801504a:	5a9b      	ldrh	r3, [r3, r2]
 801504c:	b29b      	uxth	r3, r3
 801504e:	001a      	movs	r2, r3
 8015050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015052:	189b      	adds	r3, r3, r2
 8015054:	637b      	str	r3, [r7, #52]	@ 0x34
 8015056:	68bb      	ldr	r3, [r7, #8]
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	00da      	lsls	r2, r3, #3
 801505c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801505e:	18d3      	adds	r3, r2, r3
 8015060:	4aa1      	ldr	r2, [pc, #644]	@ (80152e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8015062:	4694      	mov	ip, r2
 8015064:	4463      	add	r3, ip
 8015066:	633b      	str	r3, [r7, #48]	@ 0x30
 8015068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801506a:	2200      	movs	r2, #0
 801506c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	627b      	str	r3, [r7, #36]	@ 0x24
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	785b      	ldrb	r3, [r3, #1]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d125      	bne.n	80150c8 <HAL_PCD_EP_DB_Transmit+0x158>
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	61fb      	str	r3, [r7, #28]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2250      	movs	r2, #80	@ 0x50
 8015088:	5a9b      	ldrh	r3, [r3, r2]
 801508a:	b29b      	uxth	r3, r3
 801508c:	001a      	movs	r2, r3
 801508e:	69fb      	ldr	r3, [r7, #28]
 8015090:	189b      	adds	r3, r3, r2
 8015092:	61fb      	str	r3, [r7, #28]
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	00da      	lsls	r2, r3, #3
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	18d3      	adds	r3, r2, r3
 801509e:	4a94      	ldr	r2, [pc, #592]	@ (80152f0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80150a0:	4694      	mov	ip, r2
 80150a2:	4463      	add	r3, ip
 80150a4:	61bb      	str	r3, [r7, #24]
 80150a6:	69bb      	ldr	r3, [r7, #24]
 80150a8:	881b      	ldrh	r3, [r3, #0]
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	059b      	lsls	r3, r3, #22
 80150ae:	0d9b      	lsrs	r3, r3, #22
 80150b0:	b29a      	uxth	r2, r3
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	801a      	strh	r2, [r3, #0]
 80150b6:	69bb      	ldr	r3, [r7, #24]
 80150b8:	881b      	ldrh	r3, [r3, #0]
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	4a8b      	ldr	r2, [pc, #556]	@ (80152ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 80150be:	4313      	orrs	r3, r2
 80150c0:	b29a      	uxth	r2, r3
 80150c2:	69bb      	ldr	r3, [r7, #24]
 80150c4:	801a      	strh	r2, [r3, #0]
 80150c6:	e018      	b.n	80150fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	785b      	ldrb	r3, [r3, #1]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d114      	bne.n	80150fa <HAL_PCD_EP_DB_Transmit+0x18a>
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2250      	movs	r2, #80	@ 0x50
 80150d6:	5a9b      	ldrh	r3, [r3, r2]
 80150d8:	b29b      	uxth	r3, r3
 80150da:	001a      	movs	r2, r3
 80150dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150de:	189b      	adds	r3, r3, r2
 80150e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	00da      	lsls	r2, r3, #3
 80150e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ea:	18d3      	adds	r3, r2, r3
 80150ec:	4a80      	ldr	r2, [pc, #512]	@ (80152f0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80150ee:	4694      	mov	ip, r2
 80150f0:	4463      	add	r3, ip
 80150f2:	623b      	str	r3, [r7, #32]
 80150f4:	6a3b      	ldr	r3, [r7, #32]
 80150f6:	2200      	movs	r2, #0
 80150f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	781a      	ldrb	r2, [r3, #0]
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	0011      	movs	r1, r2
 8015102:	0018      	movs	r0, r3
 8015104:	f008 fd2e 	bl	801db64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8015108:	1dbb      	adds	r3, r7, #6
 801510a:	881a      	ldrh	r2, [r3, #0]
 801510c:	2380      	movs	r3, #128	@ 0x80
 801510e:	01db      	lsls	r3, r3, #7
 8015110:	4013      	ands	r3, r2
 8015112:	d100      	bne.n	8015116 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8015114:	e309      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	001a      	movs	r2, r3
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	18d3      	adds	r3, r2, r3
 8015124:	881b      	ldrh	r3, [r3, #0]
 8015126:	b29a      	uxth	r2, r3
 8015128:	2016      	movs	r0, #22
 801512a:	183b      	adds	r3, r7, r0
 801512c:	4971      	ldr	r1, [pc, #452]	@ (80152f4 <HAL_PCD_EP_DB_Transmit+0x384>)
 801512e:	400a      	ands	r2, r1
 8015130:	801a      	strh	r2, [r3, #0]
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	001a      	movs	r2, r3
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	009b      	lsls	r3, r3, #2
 801513e:	18d3      	adds	r3, r2, r3
 8015140:	183a      	adds	r2, r7, r0
 8015142:	8812      	ldrh	r2, [r2, #0]
 8015144:	496c      	ldr	r1, [pc, #432]	@ (80152f8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8015146:	430a      	orrs	r2, r1
 8015148:	b292      	uxth	r2, r2
 801514a:	801a      	strh	r2, [r3, #0]
 801514c:	e2ed      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801514e:	1dbb      	adds	r3, r7, #6
 8015150:	881a      	ldrh	r2, [r3, #0]
 8015152:	2380      	movs	r3, #128	@ 0x80
 8015154:	01db      	lsls	r3, r3, #7
 8015156:	4013      	ands	r3, r2
 8015158:	d01a      	beq.n	8015190 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	001a      	movs	r2, r3
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	18d3      	adds	r3, r2, r3
 8015168:	881b      	ldrh	r3, [r3, #0]
 801516a:	b29a      	uxth	r2, r3
 801516c:	208a      	movs	r0, #138	@ 0x8a
 801516e:	183b      	adds	r3, r7, r0
 8015170:	4960      	ldr	r1, [pc, #384]	@ (80152f4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8015172:	400a      	ands	r2, r1
 8015174:	801a      	strh	r2, [r3, #0]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	001a      	movs	r2, r3
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	781b      	ldrb	r3, [r3, #0]
 8015180:	009b      	lsls	r3, r3, #2
 8015182:	18d3      	adds	r3, r2, r3
 8015184:	183a      	adds	r2, r7, r0
 8015186:	8812      	ldrh	r2, [r2, #0]
 8015188:	495b      	ldr	r1, [pc, #364]	@ (80152f8 <HAL_PCD_EP_DB_Transmit+0x388>)
 801518a:	430a      	orrs	r2, r1
 801518c:	b292      	uxth	r2, r2
 801518e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	2224      	movs	r2, #36	@ 0x24
 8015194:	5c9b      	ldrb	r3, [r3, r2]
 8015196:	2b01      	cmp	r3, #1
 8015198:	d000      	beq.n	801519c <HAL_PCD_EP_DB_Transmit+0x22c>
 801519a:	e2c6      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	695a      	ldr	r2, [r3, #20]
 80151a0:	2186      	movs	r1, #134	@ 0x86
 80151a2:	187b      	adds	r3, r7, r1
 80151a4:	881b      	ldrh	r3, [r3, #0]
 80151a6:	18d2      	adds	r2, r2, r3
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	69da      	ldr	r2, [r3, #28]
 80151b0:	187b      	adds	r3, r7, r1
 80151b2:	881b      	ldrh	r3, [r3, #0]
 80151b4:	18d2      	adds	r2, r2, r3
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	6a1a      	ldr	r2, [r3, #32]
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	691b      	ldr	r3, [r3, #16]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d30c      	bcc.n	80151e0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80151c6:	68bb      	ldr	r3, [r7, #8]
 80151c8:	691b      	ldr	r3, [r3, #16]
 80151ca:	218c      	movs	r1, #140	@ 0x8c
 80151cc:	187a      	adds	r2, r7, r1
 80151ce:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	6a1a      	ldr	r2, [r3, #32]
 80151d4:	187b      	adds	r3, r7, r1
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	1ad2      	subs	r2, r2, r3
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	621a      	str	r2, [r3, #32]
 80151de:	e01a      	b.n	8015216 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	6a1b      	ldr	r3, [r3, #32]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d10a      	bne.n	80151fe <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80151e8:	2386      	movs	r3, #134	@ 0x86
 80151ea:	18fb      	adds	r3, r7, r3
 80151ec:	881b      	ldrh	r3, [r3, #0]
 80151ee:	228c      	movs	r2, #140	@ 0x8c
 80151f0:	18ba      	adds	r2, r7, r2
 80151f2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	2224      	movs	r2, #36	@ 0x24
 80151f8:	2100      	movs	r1, #0
 80151fa:	5499      	strb	r1, [r3, r2]
 80151fc:	e00b      	b.n	8015216 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	2224      	movs	r2, #36	@ 0x24
 8015202:	2100      	movs	r1, #0
 8015204:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	6a1b      	ldr	r3, [r3, #32]
 801520a:	228c      	movs	r2, #140	@ 0x8c
 801520c:	18ba      	adds	r2, r7, r2
 801520e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	2200      	movs	r2, #0
 8015214:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	785b      	ldrb	r3, [r3, #1]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d000      	beq.n	8015220 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801521e:	e06d      	b.n	80152fc <HAL_PCD_EP_DB_Transmit+0x38c>
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	681b      	ldr	r3, [r3, #0]
 8015224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	2250      	movs	r2, #80	@ 0x50
 801522c:	5a9b      	ldrh	r3, [r3, r2]
 801522e:	b29b      	uxth	r3, r3
 8015230:	001a      	movs	r2, r3
 8015232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015234:	189b      	adds	r3, r3, r2
 8015236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	00da      	lsls	r2, r3, #3
 801523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015240:	18d3      	adds	r3, r2, r3
 8015242:	4a29      	ldr	r2, [pc, #164]	@ (80152e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8015244:	4694      	mov	ip, r2
 8015246:	4463      	add	r3, ip
 8015248:	63bb      	str	r3, [r7, #56]	@ 0x38
 801524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801524c:	881b      	ldrh	r3, [r3, #0]
 801524e:	b29b      	uxth	r3, r3
 8015250:	059b      	lsls	r3, r3, #22
 8015252:	0d9b      	lsrs	r3, r3, #22
 8015254:	b29a      	uxth	r2, r3
 8015256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015258:	801a      	strh	r2, [r3, #0]
 801525a:	228c      	movs	r2, #140	@ 0x8c
 801525c:	18bb      	adds	r3, r7, r2
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	2b3e      	cmp	r3, #62	@ 0x3e
 8015262:	d91a      	bls.n	801529a <HAL_PCD_EP_DB_Transmit+0x32a>
 8015264:	18bb      	adds	r3, r7, r2
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	095b      	lsrs	r3, r3, #5
 801526a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801526c:	18bb      	adds	r3, r7, r2
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	221f      	movs	r2, #31
 8015272:	4013      	ands	r3, r2
 8015274:	d102      	bne.n	801527c <HAL_PCD_EP_DB_Transmit+0x30c>
 8015276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015278:	3b01      	subs	r3, #1
 801527a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801527c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801527e:	881b      	ldrh	r3, [r3, #0]
 8015280:	b29a      	uxth	r2, r3
 8015282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015284:	b29b      	uxth	r3, r3
 8015286:	029b      	lsls	r3, r3, #10
 8015288:	b29b      	uxth	r3, r3
 801528a:	4313      	orrs	r3, r2
 801528c:	b29b      	uxth	r3, r3
 801528e:	4a17      	ldr	r2, [pc, #92]	@ (80152ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 8015290:	4313      	orrs	r3, r2
 8015292:	b29a      	uxth	r2, r3
 8015294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015296:	801a      	strh	r2, [r3, #0]
 8015298:	e04f      	b.n	801533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801529a:	238c      	movs	r3, #140	@ 0x8c
 801529c:	18fb      	adds	r3, r7, r3
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d108      	bne.n	80152b6 <HAL_PCD_EP_DB_Transmit+0x346>
 80152a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152a6:	881b      	ldrh	r3, [r3, #0]
 80152a8:	b29b      	uxth	r3, r3
 80152aa:	4a10      	ldr	r2, [pc, #64]	@ (80152ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 80152ac:	4313      	orrs	r3, r2
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152b2:	801a      	strh	r2, [r3, #0]
 80152b4:	e041      	b.n	801533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80152b6:	228c      	movs	r2, #140	@ 0x8c
 80152b8:	18bb      	adds	r3, r7, r2
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	085b      	lsrs	r3, r3, #1
 80152be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80152c0:	18bb      	adds	r3, r7, r2
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	2201      	movs	r2, #1
 80152c6:	4013      	ands	r3, r2
 80152c8:	d002      	beq.n	80152d0 <HAL_PCD_EP_DB_Transmit+0x360>
 80152ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80152cc:	3301      	adds	r3, #1
 80152ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80152d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152d2:	881b      	ldrh	r3, [r3, #0]
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80152d8:	b29b      	uxth	r3, r3
 80152da:	029b      	lsls	r3, r3, #10
 80152dc:	b29b      	uxth	r3, r3
 80152de:	4313      	orrs	r3, r2
 80152e0:	b29a      	uxth	r2, r3
 80152e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152e4:	801a      	strh	r2, [r3, #0]
 80152e6:	e028      	b.n	801533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80152e8:	00000402 	.word	0x00000402
 80152ec:	ffff8000 	.word	0xffff8000
 80152f0:	00000406 	.word	0x00000406
 80152f4:	ffff8f8f 	.word	0xffff8f8f
 80152f8:	ffffc080 	.word	0xffffc080
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	785b      	ldrb	r3, [r3, #1]
 8015300:	2b01      	cmp	r3, #1
 8015302:	d11a      	bne.n	801533a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	647b      	str	r3, [r7, #68]	@ 0x44
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2250      	movs	r2, #80	@ 0x50
 8015310:	5a9b      	ldrh	r3, [r3, r2]
 8015312:	b29b      	uxth	r3, r3
 8015314:	001a      	movs	r2, r3
 8015316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015318:	189b      	adds	r3, r3, r2
 801531a:	647b      	str	r3, [r7, #68]	@ 0x44
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	00da      	lsls	r2, r3, #3
 8015322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015324:	18d3      	adds	r3, r2, r3
 8015326:	4adb      	ldr	r2, [pc, #876]	@ (8015694 <HAL_PCD_EP_DB_Transmit+0x724>)
 8015328:	4694      	mov	ip, r2
 801532a:	4463      	add	r3, ip
 801532c:	643b      	str	r3, [r7, #64]	@ 0x40
 801532e:	238c      	movs	r3, #140	@ 0x8c
 8015330:	18fb      	adds	r3, r7, r3
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	b29a      	uxth	r2, r3
 8015336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015338:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	6818      	ldr	r0, [r3, #0]
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	6959      	ldr	r1, [r3, #20]
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	891a      	ldrh	r2, [r3, #8]
 8015346:	238c      	movs	r3, #140	@ 0x8c
 8015348:	18fb      	adds	r3, r7, r3
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	b29b      	uxth	r3, r3
 801534e:	f006 fb85 	bl	801ba5c <USB_WritePMA>
 8015352:	e1ea      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	2250      	movs	r2, #80	@ 0x50
 801535a:	5a9b      	ldrh	r3, [r3, r2]
 801535c:	b29b      	uxth	r3, r3
 801535e:	001a      	movs	r2, r3
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	00db      	lsls	r3, r3, #3
 8015366:	18d2      	adds	r2, r2, r3
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	18d3      	adds	r3, r2, r3
 801536e:	4aca      	ldr	r2, [pc, #808]	@ (8015698 <HAL_PCD_EP_DB_Transmit+0x728>)
 8015370:	4694      	mov	ip, r2
 8015372:	4463      	add	r3, ip
 8015374:	881a      	ldrh	r2, [r3, #0]
 8015376:	2186      	movs	r1, #134	@ 0x86
 8015378:	187b      	adds	r3, r7, r1
 801537a:	0592      	lsls	r2, r2, #22
 801537c:	0d92      	lsrs	r2, r2, #22
 801537e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	699a      	ldr	r2, [r3, #24]
 8015384:	187b      	adds	r3, r7, r1
 8015386:	881b      	ldrh	r3, [r3, #0]
 8015388:	429a      	cmp	r2, r3
 801538a:	d307      	bcc.n	801539c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	699a      	ldr	r2, [r3, #24]
 8015390:	187b      	adds	r3, r7, r1
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	1ad2      	subs	r2, r2, r3
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	619a      	str	r2, [r3, #24]
 801539a:	e002      	b.n	80153a2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	2200      	movs	r2, #0
 80153a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	699b      	ldr	r3, [r3, #24]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d000      	beq.n	80153ac <HAL_PCD_EP_DB_Transmit+0x43c>
 80153aa:	e0bb      	b.n	8015524 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	785b      	ldrb	r3, [r3, #1]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d125      	bne.n	8015400 <HAL_PCD_EP_DB_Transmit+0x490>
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	2250      	movs	r2, #80	@ 0x50
 80153c0:	5a9b      	ldrh	r3, [r3, r2]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	001a      	movs	r2, r3
 80153c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80153c8:	189b      	adds	r3, r3, r2
 80153ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	781b      	ldrb	r3, [r3, #0]
 80153d0:	00da      	lsls	r2, r3, #3
 80153d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80153d4:	18d3      	adds	r3, r2, r3
 80153d6:	4aaf      	ldr	r2, [pc, #700]	@ (8015694 <HAL_PCD_EP_DB_Transmit+0x724>)
 80153d8:	4694      	mov	ip, r2
 80153da:	4463      	add	r3, ip
 80153dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80153de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153e0:	881b      	ldrh	r3, [r3, #0]
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	059b      	lsls	r3, r3, #22
 80153e6:	0d9b      	lsrs	r3, r3, #22
 80153e8:	b29a      	uxth	r2, r3
 80153ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153ec:	801a      	strh	r2, [r3, #0]
 80153ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	4aa9      	ldr	r2, [pc, #676]	@ (801569c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80153f6:	4313      	orrs	r3, r2
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80153fc:	801a      	strh	r2, [r3, #0]
 80153fe:	e01b      	b.n	8015438 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	785b      	ldrb	r3, [r3, #1]
 8015404:	2b01      	cmp	r3, #1
 8015406:	d117      	bne.n	8015438 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	667b      	str	r3, [r7, #100]	@ 0x64
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2250      	movs	r2, #80	@ 0x50
 8015414:	5a9b      	ldrh	r3, [r3, r2]
 8015416:	b29b      	uxth	r3, r3
 8015418:	001a      	movs	r2, r3
 801541a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801541c:	189b      	adds	r3, r3, r2
 801541e:	667b      	str	r3, [r7, #100]	@ 0x64
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	781b      	ldrb	r3, [r3, #0]
 8015424:	00da      	lsls	r2, r3, #3
 8015426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015428:	18d3      	adds	r3, r2, r3
 801542a:	4a9a      	ldr	r2, [pc, #616]	@ (8015694 <HAL_PCD_EP_DB_Transmit+0x724>)
 801542c:	4694      	mov	ip, r2
 801542e:	4463      	add	r3, ip
 8015430:	663b      	str	r3, [r7, #96]	@ 0x60
 8015432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015434:	2200      	movs	r2, #0
 8015436:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	677b      	str	r3, [r7, #116]	@ 0x74
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	785b      	ldrb	r3, [r3, #1]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d12b      	bne.n	801549e <HAL_PCD_EP_DB_Transmit+0x52e>
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	2250      	movs	r2, #80	@ 0x50
 8015452:	5a9b      	ldrh	r3, [r3, r2]
 8015454:	b29b      	uxth	r3, r3
 8015456:	001a      	movs	r2, r3
 8015458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801545a:	189b      	adds	r3, r3, r2
 801545c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	00da      	lsls	r2, r3, #3
 8015464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015466:	18d3      	adds	r3, r2, r3
 8015468:	4a8b      	ldr	r2, [pc, #556]	@ (8015698 <HAL_PCD_EP_DB_Transmit+0x728>)
 801546a:	4694      	mov	ip, r2
 801546c:	4463      	add	r3, ip
 801546e:	2180      	movs	r1, #128	@ 0x80
 8015470:	187a      	adds	r2, r7, r1
 8015472:	6013      	str	r3, [r2, #0]
 8015474:	187b      	adds	r3, r7, r1
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	881b      	ldrh	r3, [r3, #0]
 801547a:	b29b      	uxth	r3, r3
 801547c:	059b      	lsls	r3, r3, #22
 801547e:	0d9b      	lsrs	r3, r3, #22
 8015480:	b29a      	uxth	r2, r3
 8015482:	187b      	adds	r3, r7, r1
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	801a      	strh	r2, [r3, #0]
 8015488:	187b      	adds	r3, r7, r1
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	881b      	ldrh	r3, [r3, #0]
 801548e:	b29b      	uxth	r3, r3
 8015490:	4a82      	ldr	r2, [pc, #520]	@ (801569c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8015492:	4313      	orrs	r3, r2
 8015494:	b29a      	uxth	r2, r3
 8015496:	187b      	adds	r3, r7, r1
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	801a      	strh	r2, [r3, #0]
 801549c:	e018      	b.n	80154d0 <HAL_PCD_EP_DB_Transmit+0x560>
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	785b      	ldrb	r3, [r3, #1]
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	d114      	bne.n	80154d0 <HAL_PCD_EP_DB_Transmit+0x560>
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	2250      	movs	r2, #80	@ 0x50
 80154ac:	5a9b      	ldrh	r3, [r3, r2]
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	001a      	movs	r2, r3
 80154b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80154b4:	189b      	adds	r3, r3, r2
 80154b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	00da      	lsls	r2, r3, #3
 80154be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80154c0:	18d3      	adds	r3, r2, r3
 80154c2:	4a75      	ldr	r2, [pc, #468]	@ (8015698 <HAL_PCD_EP_DB_Transmit+0x728>)
 80154c4:	4694      	mov	ip, r2
 80154c6:	4463      	add	r3, ip
 80154c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80154ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80154cc:	2200      	movs	r2, #0
 80154ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	781a      	ldrb	r2, [r3, #0]
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	0011      	movs	r1, r2
 80154d8:	0018      	movs	r0, r3
 80154da:	f008 fb43 	bl	801db64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80154de:	1dbb      	adds	r3, r7, #6
 80154e0:	881a      	ldrh	r2, [r3, #0]
 80154e2:	2380      	movs	r3, #128	@ 0x80
 80154e4:	01db      	lsls	r3, r3, #7
 80154e6:	4013      	ands	r3, r2
 80154e8:	d000      	beq.n	80154ec <HAL_PCD_EP_DB_Transmit+0x57c>
 80154ea:	e11e      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	001a      	movs	r2, r3
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	18d3      	adds	r3, r2, r3
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	2088      	movs	r0, #136	@ 0x88
 8015500:	183b      	adds	r3, r7, r0
 8015502:	4967      	ldr	r1, [pc, #412]	@ (80156a0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8015504:	400a      	ands	r2, r1
 8015506:	801a      	strh	r2, [r3, #0]
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	001a      	movs	r2, r3
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	009b      	lsls	r3, r3, #2
 8015514:	18d3      	adds	r3, r2, r3
 8015516:	183a      	adds	r2, r7, r0
 8015518:	8812      	ldrh	r2, [r2, #0]
 801551a:	4962      	ldr	r1, [pc, #392]	@ (80156a4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801551c:	430a      	orrs	r2, r1
 801551e:	b292      	uxth	r2, r2
 8015520:	801a      	strh	r2, [r3, #0]
 8015522:	e102      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8015524:	1dbb      	adds	r3, r7, #6
 8015526:	881a      	ldrh	r2, [r3, #0]
 8015528:	2380      	movs	r3, #128	@ 0x80
 801552a:	01db      	lsls	r3, r3, #7
 801552c:	4013      	ands	r3, r2
 801552e:	d11a      	bne.n	8015566 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	001a      	movs	r2, r3
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	781b      	ldrb	r3, [r3, #0]
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	18d3      	adds	r3, r2, r3
 801553e:	881b      	ldrh	r3, [r3, #0]
 8015540:	b29a      	uxth	r2, r3
 8015542:	204e      	movs	r0, #78	@ 0x4e
 8015544:	183b      	adds	r3, r7, r0
 8015546:	4956      	ldr	r1, [pc, #344]	@ (80156a0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8015548:	400a      	ands	r2, r1
 801554a:	801a      	strh	r2, [r3, #0]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	001a      	movs	r2, r3
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	781b      	ldrb	r3, [r3, #0]
 8015556:	009b      	lsls	r3, r3, #2
 8015558:	18d3      	adds	r3, r2, r3
 801555a:	183a      	adds	r2, r7, r0
 801555c:	8812      	ldrh	r2, [r2, #0]
 801555e:	4951      	ldr	r1, [pc, #324]	@ (80156a4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8015560:	430a      	orrs	r2, r1
 8015562:	b292      	uxth	r2, r2
 8015564:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	2224      	movs	r2, #36	@ 0x24
 801556a:	5c9b      	ldrb	r3, [r3, r2]
 801556c:	2b01      	cmp	r3, #1
 801556e:	d000      	beq.n	8015572 <HAL_PCD_EP_DB_Transmit+0x602>
 8015570:	e0db      	b.n	801572a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8015572:	68bb      	ldr	r3, [r7, #8]
 8015574:	695a      	ldr	r2, [r3, #20]
 8015576:	2186      	movs	r1, #134	@ 0x86
 8015578:	187b      	adds	r3, r7, r1
 801557a:	881b      	ldrh	r3, [r3, #0]
 801557c:	18d2      	adds	r2, r2, r3
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	69da      	ldr	r2, [r3, #28]
 8015586:	187b      	adds	r3, r7, r1
 8015588:	881b      	ldrh	r3, [r3, #0]
 801558a:	18d2      	adds	r2, r2, r3
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	6a1a      	ldr	r2, [r3, #32]
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	691b      	ldr	r3, [r3, #16]
 8015598:	429a      	cmp	r2, r3
 801559a:	d30c      	bcc.n	80155b6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801559c:	68bb      	ldr	r3, [r7, #8]
 801559e:	691b      	ldr	r3, [r3, #16]
 80155a0:	218c      	movs	r1, #140	@ 0x8c
 80155a2:	187a      	adds	r2, r7, r1
 80155a4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	6a1a      	ldr	r2, [r3, #32]
 80155aa:	187b      	adds	r3, r7, r1
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	1ad2      	subs	r2, r2, r3
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	621a      	str	r2, [r3, #32]
 80155b4:	e01a      	b.n	80155ec <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	6a1b      	ldr	r3, [r3, #32]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d10a      	bne.n	80155d4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80155be:	2386      	movs	r3, #134	@ 0x86
 80155c0:	18fb      	adds	r3, r7, r3
 80155c2:	881b      	ldrh	r3, [r3, #0]
 80155c4:	228c      	movs	r2, #140	@ 0x8c
 80155c6:	18ba      	adds	r2, r7, r2
 80155c8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	2224      	movs	r2, #36	@ 0x24
 80155ce:	2100      	movs	r1, #0
 80155d0:	5499      	strb	r1, [r3, r2]
 80155d2:	e00b      	b.n	80155ec <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	6a1b      	ldr	r3, [r3, #32]
 80155d8:	228c      	movs	r2, #140	@ 0x8c
 80155da:	18ba      	adds	r2, r7, r2
 80155dc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	2200      	movs	r2, #0
 80155e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	2224      	movs	r2, #36	@ 0x24
 80155e8:	2100      	movs	r1, #0
 80155ea:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	785b      	ldrb	r3, [r3, #1]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d000      	beq.n	80155fc <HAL_PCD_EP_DB_Transmit+0x68c>
 80155fa:	e06e      	b.n	80156da <HAL_PCD_EP_DB_Transmit+0x76a>
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	2250      	movs	r2, #80	@ 0x50
 8015608:	5a9b      	ldrh	r3, [r3, r2]
 801560a:	b29b      	uxth	r3, r3
 801560c:	001a      	movs	r2, r3
 801560e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015610:	189b      	adds	r3, r3, r2
 8015612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	00da      	lsls	r2, r3, #3
 801561a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801561c:	18d3      	adds	r3, r2, r3
 801561e:	4a1e      	ldr	r2, [pc, #120]	@ (8015698 <HAL_PCD_EP_DB_Transmit+0x728>)
 8015620:	4694      	mov	ip, r2
 8015622:	4463      	add	r3, ip
 8015624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015626:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015628:	881b      	ldrh	r3, [r3, #0]
 801562a:	b29b      	uxth	r3, r3
 801562c:	059b      	lsls	r3, r3, #22
 801562e:	0d9b      	lsrs	r3, r3, #22
 8015630:	b29a      	uxth	r2, r3
 8015632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015634:	801a      	strh	r2, [r3, #0]
 8015636:	228c      	movs	r2, #140	@ 0x8c
 8015638:	18bb      	adds	r3, r7, r2
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	2b3e      	cmp	r3, #62	@ 0x3e
 801563e:	d91a      	bls.n	8015676 <HAL_PCD_EP_DB_Transmit+0x706>
 8015640:	18bb      	adds	r3, r7, r2
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	095b      	lsrs	r3, r3, #5
 8015646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015648:	18bb      	adds	r3, r7, r2
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	221f      	movs	r2, #31
 801564e:	4013      	ands	r3, r2
 8015650:	d102      	bne.n	8015658 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8015652:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015654:	3b01      	subs	r3, #1
 8015656:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801565a:	881b      	ldrh	r3, [r3, #0]
 801565c:	b29a      	uxth	r2, r3
 801565e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015660:	b29b      	uxth	r3, r3
 8015662:	029b      	lsls	r3, r3, #10
 8015664:	b29b      	uxth	r3, r3
 8015666:	4313      	orrs	r3, r2
 8015668:	b29b      	uxth	r3, r3
 801566a:	4a0c      	ldr	r2, [pc, #48]	@ (801569c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801566c:	4313      	orrs	r3, r2
 801566e:	b29a      	uxth	r2, r3
 8015670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015672:	801a      	strh	r2, [r3, #0]
 8015674:	e04d      	b.n	8015712 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015676:	238c      	movs	r3, #140	@ 0x8c
 8015678:	18fb      	adds	r3, r7, r3
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d113      	bne.n	80156a8 <HAL_PCD_EP_DB_Transmit+0x738>
 8015680:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015682:	881b      	ldrh	r3, [r3, #0]
 8015684:	b29b      	uxth	r3, r3
 8015686:	4a05      	ldr	r2, [pc, #20]	@ (801569c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8015688:	4313      	orrs	r3, r2
 801568a:	b29a      	uxth	r2, r3
 801568c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801568e:	801a      	strh	r2, [r3, #0]
 8015690:	e03f      	b.n	8015712 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015692:	46c0      	nop			@ (mov r8, r8)
 8015694:	00000402 	.word	0x00000402
 8015698:	00000406 	.word	0x00000406
 801569c:	ffff8000 	.word	0xffff8000
 80156a0:	ffff8f8f 	.word	0xffff8f8f
 80156a4:	ffffc080 	.word	0xffffc080
 80156a8:	228c      	movs	r2, #140	@ 0x8c
 80156aa:	18bb      	adds	r3, r7, r2
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	085b      	lsrs	r3, r3, #1
 80156b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80156b2:	18bb      	adds	r3, r7, r2
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	2201      	movs	r2, #1
 80156b8:	4013      	ands	r3, r2
 80156ba:	d002      	beq.n	80156c2 <HAL_PCD_EP_DB_Transmit+0x752>
 80156bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80156be:	3301      	adds	r3, #1
 80156c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80156c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80156c4:	881b      	ldrh	r3, [r3, #0]
 80156c6:	b29a      	uxth	r2, r3
 80156c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80156ca:	b29b      	uxth	r3, r3
 80156cc:	029b      	lsls	r3, r3, #10
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	4313      	orrs	r3, r2
 80156d2:	b29a      	uxth	r2, r3
 80156d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80156d6:	801a      	strh	r2, [r3, #0]
 80156d8:	e01b      	b.n	8015712 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	785b      	ldrb	r3, [r3, #1]
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d117      	bne.n	8015712 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	2250      	movs	r2, #80	@ 0x50
 80156e8:	5a9b      	ldrh	r3, [r3, r2]
 80156ea:	b29b      	uxth	r3, r3
 80156ec:	001a      	movs	r2, r3
 80156ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156f0:	189b      	adds	r3, r3, r2
 80156f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	00da      	lsls	r2, r3, #3
 80156fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156fc:	18d3      	adds	r3, r2, r3
 80156fe:	4a21      	ldr	r2, [pc, #132]	@ (8015784 <HAL_PCD_EP_DB_Transmit+0x814>)
 8015700:	4694      	mov	ip, r2
 8015702:	4463      	add	r3, ip
 8015704:	653b      	str	r3, [r7, #80]	@ 0x50
 8015706:	238c      	movs	r3, #140	@ 0x8c
 8015708:	18fb      	adds	r3, r7, r3
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	b29a      	uxth	r2, r3
 801570e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015710:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	6818      	ldr	r0, [r3, #0]
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	6959      	ldr	r1, [r3, #20]
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	895a      	ldrh	r2, [r3, #10]
 801571e:	238c      	movs	r3, #140	@ 0x8c
 8015720:	18fb      	adds	r3, r7, r3
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	b29b      	uxth	r3, r3
 8015726:	f006 f999 	bl	801ba5c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	001a      	movs	r2, r3
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	781b      	ldrb	r3, [r3, #0]
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	18d3      	adds	r3, r2, r3
 8015738:	881b      	ldrh	r3, [r3, #0]
 801573a:	b29a      	uxth	r2, r3
 801573c:	2014      	movs	r0, #20
 801573e:	183b      	adds	r3, r7, r0
 8015740:	4911      	ldr	r1, [pc, #68]	@ (8015788 <HAL_PCD_EP_DB_Transmit+0x818>)
 8015742:	400a      	ands	r2, r1
 8015744:	801a      	strh	r2, [r3, #0]
 8015746:	183b      	adds	r3, r7, r0
 8015748:	183a      	adds	r2, r7, r0
 801574a:	8812      	ldrh	r2, [r2, #0]
 801574c:	2110      	movs	r1, #16
 801574e:	404a      	eors	r2, r1
 8015750:	801a      	strh	r2, [r3, #0]
 8015752:	183b      	adds	r3, r7, r0
 8015754:	183a      	adds	r2, r7, r0
 8015756:	8812      	ldrh	r2, [r2, #0]
 8015758:	2120      	movs	r1, #32
 801575a:	404a      	eors	r2, r1
 801575c:	801a      	strh	r2, [r3, #0]
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	001a      	movs	r2, r3
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	009b      	lsls	r3, r3, #2
 801576a:	18d3      	adds	r3, r2, r3
 801576c:	183a      	adds	r2, r7, r0
 801576e:	8812      	ldrh	r2, [r2, #0]
 8015770:	4906      	ldr	r1, [pc, #24]	@ (801578c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8015772:	430a      	orrs	r2, r1
 8015774:	b292      	uxth	r2, r2
 8015776:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8015778:	2300      	movs	r3, #0
}
 801577a:	0018      	movs	r0, r3
 801577c:	46bd      	mov	sp, r7
 801577e:	b024      	add	sp, #144	@ 0x90
 8015780:	bd80      	pop	{r7, pc}
 8015782:	46c0      	nop			@ (mov r8, r8)
 8015784:	00000406 	.word	0x00000406
 8015788:	ffff8fbf 	.word	0xffff8fbf
 801578c:	ffff8080 	.word	0xffff8080

08015790 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8015790:	b590      	push	{r4, r7, lr}
 8015792:	b087      	sub	sp, #28
 8015794:	af00      	add	r7, sp, #0
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	0008      	movs	r0, r1
 801579a:	0011      	movs	r1, r2
 801579c:	607b      	str	r3, [r7, #4]
 801579e:	240a      	movs	r4, #10
 80157a0:	193b      	adds	r3, r7, r4
 80157a2:	1c02      	adds	r2, r0, #0
 80157a4:	801a      	strh	r2, [r3, #0]
 80157a6:	2308      	movs	r3, #8
 80157a8:	18fb      	adds	r3, r7, r3
 80157aa:	1c0a      	adds	r2, r1, #0
 80157ac:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80157ae:	0021      	movs	r1, r4
 80157b0:	187b      	adds	r3, r7, r1
 80157b2:	881b      	ldrh	r3, [r3, #0]
 80157b4:	2280      	movs	r2, #128	@ 0x80
 80157b6:	4013      	ands	r3, r2
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d00c      	beq.n	80157d8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80157be:	187b      	adds	r3, r7, r1
 80157c0:	881b      	ldrh	r3, [r3, #0]
 80157c2:	2207      	movs	r2, #7
 80157c4:	4013      	ands	r3, r2
 80157c6:	1c5a      	adds	r2, r3, #1
 80157c8:	0013      	movs	r3, r2
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	189b      	adds	r3, r3, r2
 80157ce:	00db      	lsls	r3, r3, #3
 80157d0:	68fa      	ldr	r2, [r7, #12]
 80157d2:	18d3      	adds	r3, r2, r3
 80157d4:	617b      	str	r3, [r7, #20]
 80157d6:	e00b      	b.n	80157f0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80157d8:	230a      	movs	r3, #10
 80157da:	18fb      	adds	r3, r7, r3
 80157dc:	881a      	ldrh	r2, [r3, #0]
 80157de:	0013      	movs	r3, r2
 80157e0:	009b      	lsls	r3, r3, #2
 80157e2:	189b      	adds	r3, r3, r2
 80157e4:	00db      	lsls	r3, r3, #3
 80157e6:	3369      	adds	r3, #105	@ 0x69
 80157e8:	33ff      	adds	r3, #255	@ 0xff
 80157ea:	68fa      	ldr	r2, [r7, #12]
 80157ec:	18d3      	adds	r3, r2, r3
 80157ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80157f0:	2308      	movs	r3, #8
 80157f2:	18fb      	adds	r3, r7, r3
 80157f4:	881b      	ldrh	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d107      	bne.n	801580a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	2200      	movs	r2, #0
 80157fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	b29a      	uxth	r2, r3
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	80da      	strh	r2, [r3, #6]
 8015808:	e00b      	b.n	8015822 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	2201      	movs	r2, #1
 801580e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	b29a      	uxth	r2, r3
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	0c1b      	lsrs	r3, r3, #16
 801581c:	b29a      	uxth	r2, r3
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015822:	2300      	movs	r3, #0
}
 8015824:	0018      	movs	r0, r3
 8015826:	46bd      	mov	sp, r7
 8015828:	b007      	add	sp, #28
 801582a:	bd90      	pop	{r4, r7, pc}

0801582c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b084      	sub	sp, #16
 8015830:	af00      	add	r7, sp, #0
 8015832:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	23ba      	movs	r3, #186	@ 0xba
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	2101      	movs	r1, #1
 8015842:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8015844:	687a      	ldr	r2, [r7, #4]
 8015846:	23b8      	movs	r3, #184	@ 0xb8
 8015848:	009b      	lsls	r3, r3, #2
 801584a:	2100      	movs	r1, #0
 801584c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2254      	movs	r2, #84	@ 0x54
 8015852:	5a9b      	ldrh	r3, [r3, r2]
 8015854:	b29b      	uxth	r3, r3
 8015856:	2201      	movs	r2, #1
 8015858:	4313      	orrs	r3, r2
 801585a:	b299      	uxth	r1, r3
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	2254      	movs	r2, #84	@ 0x54
 8015860:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2254      	movs	r2, #84	@ 0x54
 8015866:	5a9b      	ldrh	r3, [r3, r2]
 8015868:	b29b      	uxth	r3, r3
 801586a:	2202      	movs	r2, #2
 801586c:	4313      	orrs	r3, r2
 801586e:	b299      	uxth	r1, r3
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	2254      	movs	r2, #84	@ 0x54
 8015874:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015876:	2300      	movs	r3, #0
}
 8015878:	0018      	movs	r0, r3
 801587a:	46bd      	mov	sp, r7
 801587c:	b004      	add	sp, #16
 801587e:	bd80      	pop	{r7, pc}

08015880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b082      	sub	sp, #8
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	000a      	movs	r2, r1
 801588a:	1cfb      	adds	r3, r7, #3
 801588c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801588e:	46c0      	nop			@ (mov r8, r8)
 8015890:	46bd      	mov	sp, r7
 8015892:	b002      	add	sp, #8
 8015894:	bd80      	pop	{r7, pc}
	...

08015898 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801589c:	4b04      	ldr	r3, [pc, #16]	@ (80158b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	4b03      	ldr	r3, [pc, #12]	@ (80158b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80158a2:	2180      	movs	r1, #128	@ 0x80
 80158a4:	0049      	lsls	r1, r1, #1
 80158a6:	430a      	orrs	r2, r1
 80158a8:	601a      	str	r2, [r3, #0]
}
 80158aa:	46c0      	nop			@ (mov r8, r8)
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	40007000 	.word	0x40007000

080158b4 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80158b8:	4b04      	ldr	r3, [pc, #16]	@ (80158cc <HAL_PWR_DisableBkUpAccess+0x18>)
 80158ba:	681a      	ldr	r2, [r3, #0]
 80158bc:	4b03      	ldr	r3, [pc, #12]	@ (80158cc <HAL_PWR_DisableBkUpAccess+0x18>)
 80158be:	4904      	ldr	r1, [pc, #16]	@ (80158d0 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80158c0:	400a      	ands	r2, r1
 80158c2:	601a      	str	r2, [r3, #0]
}
 80158c4:	46c0      	nop			@ (mov r8, r8)
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	46c0      	nop			@ (mov r8, r8)
 80158cc:	40007000 	.word	0x40007000
 80158d0:	fffffeff 	.word	0xfffffeff

080158d4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b086      	sub	sp, #24
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	000a      	movs	r2, r1
 80158de:	1cfb      	adds	r3, r7, #3
 80158e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80158e2:	2300      	movs	r3, #0
 80158e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80158e6:	4b25      	ldr	r3, [pc, #148]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 80158e8:	681a      	ldr	r2, [r3, #0]
 80158ea:	2380      	movs	r3, #128	@ 0x80
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	4013      	ands	r3, r2
 80158f0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80158f2:	4b23      	ldr	r3, [pc, #140]	@ (8015980 <HAL_PWR_EnterSTOPMode+0xac>)
 80158f4:	6a1b      	ldr	r3, [r3, #32]
 80158f6:	2201      	movs	r2, #1
 80158f8:	4013      	ands	r3, r2
 80158fa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d008      	beq.n	8015914 <HAL_PWR_EnterSTOPMode+0x40>
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d005      	beq.n	8015914 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8015908:	4b1c      	ldr	r3, [pc, #112]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 801590a:	681a      	ldr	r2, [r3, #0]
 801590c:	4b1b      	ldr	r3, [pc, #108]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 801590e:	491d      	ldr	r1, [pc, #116]	@ (8015984 <HAL_PWR_EnterSTOPMode+0xb0>)
 8015910:	400a      	ands	r2, r1
 8015912:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8015914:	4b19      	ldr	r3, [pc, #100]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	2203      	movs	r2, #3
 801591e:	4393      	bics	r3, r2
 8015920:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8015922:	697a      	ldr	r2, [r7, #20]
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	4313      	orrs	r3, r2
 8015928:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801592a:	4b14      	ldr	r3, [pc, #80]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 801592c:	697a      	ldr	r2, [r7, #20]
 801592e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015930:	4b15      	ldr	r3, [pc, #84]	@ (8015988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015932:	691a      	ldr	r2, [r3, #16]
 8015934:	4b14      	ldr	r3, [pc, #80]	@ (8015988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015936:	2104      	movs	r1, #4
 8015938:	430a      	orrs	r2, r1
 801593a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801593c:	1cfb      	adds	r3, r7, #3
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	2b01      	cmp	r3, #1
 8015942:	d101      	bne.n	8015948 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8015944:	bf30      	wfi
 8015946:	e002      	b.n	801594e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8015948:	bf40      	sev
    __WFE();
 801594a:	bf20      	wfe
    __WFE();
 801594c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801594e:	4b0e      	ldr	r3, [pc, #56]	@ (8015988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015950:	691a      	ldr	r2, [r3, #16]
 8015952:	4b0d      	ldr	r3, [pc, #52]	@ (8015988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8015954:	2104      	movs	r1, #4
 8015956:	438a      	bics	r2, r1
 8015958:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d009      	beq.n	8015974 <HAL_PWR_EnterSTOPMode+0xa0>
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d006      	beq.n	8015974 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8015966:	4b05      	ldr	r3, [pc, #20]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 8015968:	681a      	ldr	r2, [r3, #0]
 801596a:	4b04      	ldr	r3, [pc, #16]	@ (801597c <HAL_PWR_EnterSTOPMode+0xa8>)
 801596c:	2180      	movs	r1, #128	@ 0x80
 801596e:	0089      	lsls	r1, r1, #2
 8015970:	430a      	orrs	r2, r1
 8015972:	601a      	str	r2, [r3, #0]
  }
}
 8015974:	46c0      	nop			@ (mov r8, r8)
 8015976:	46bd      	mov	sp, r7
 8015978:	b006      	add	sp, #24
 801597a:	bd80      	pop	{r7, pc}
 801597c:	40007000 	.word	0x40007000
 8015980:	40010000 	.word	0x40010000
 8015984:	fffffdff 	.word	0xfffffdff
 8015988:	e000ed00 	.word	0xe000ed00

0801598c <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8015990:	4b07      	ldr	r3, [pc, #28]	@ (80159b0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	4b06      	ldr	r3, [pc, #24]	@ (80159b0 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8015996:	2102      	movs	r1, #2
 8015998:	430a      	orrs	r2, r1
 801599a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801599c:	4b05      	ldr	r3, [pc, #20]	@ (80159b4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801599e:	691a      	ldr	r2, [r3, #16]
 80159a0:	4b04      	ldr	r3, [pc, #16]	@ (80159b4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80159a2:	2104      	movs	r1, #4
 80159a4:	430a      	orrs	r2, r1
 80159a6:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80159a8:	bf30      	wfi
}
 80159aa:	46c0      	nop			@ (mov r8, r8)
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}
 80159b0:	40007000 	.word	0x40007000
 80159b4:	e000ed00 	.word	0xe000ed00

080159b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80159b8:	b5b0      	push	{r4, r5, r7, lr}
 80159ba:	b08a      	sub	sp, #40	@ 0x28
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d102      	bne.n	80159cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80159c6:	2301      	movs	r3, #1
 80159c8:	f000 fbbf 	bl	801614a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80159cc:	4bc9      	ldr	r3, [pc, #804]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 80159ce:	68db      	ldr	r3, [r3, #12]
 80159d0:	220c      	movs	r2, #12
 80159d2:	4013      	ands	r3, r2
 80159d4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80159d6:	4bc7      	ldr	r3, [pc, #796]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 80159d8:	68da      	ldr	r2, [r3, #12]
 80159da:	2380      	movs	r3, #128	@ 0x80
 80159dc:	025b      	lsls	r3, r3, #9
 80159de:	4013      	ands	r3, r2
 80159e0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2201      	movs	r2, #1
 80159e8:	4013      	ands	r3, r2
 80159ea:	d100      	bne.n	80159ee <HAL_RCC_OscConfig+0x36>
 80159ec:	e07e      	b.n	8015aec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80159ee:	69fb      	ldr	r3, [r7, #28]
 80159f0:	2b08      	cmp	r3, #8
 80159f2:	d007      	beq.n	8015a04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	2b0c      	cmp	r3, #12
 80159f8:	d112      	bne.n	8015a20 <HAL_RCC_OscConfig+0x68>
 80159fa:	69ba      	ldr	r2, [r7, #24]
 80159fc:	2380      	movs	r3, #128	@ 0x80
 80159fe:	025b      	lsls	r3, r3, #9
 8015a00:	429a      	cmp	r2, r3
 8015a02:	d10d      	bne.n	8015a20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015a04:	4bbb      	ldr	r3, [pc, #748]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a06:	681a      	ldr	r2, [r3, #0]
 8015a08:	2380      	movs	r3, #128	@ 0x80
 8015a0a:	029b      	lsls	r3, r3, #10
 8015a0c:	4013      	ands	r3, r2
 8015a0e:	d100      	bne.n	8015a12 <HAL_RCC_OscConfig+0x5a>
 8015a10:	e06b      	b.n	8015aea <HAL_RCC_OscConfig+0x132>
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d167      	bne.n	8015aea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	f000 fb95 	bl	801614a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	685a      	ldr	r2, [r3, #4]
 8015a24:	2380      	movs	r3, #128	@ 0x80
 8015a26:	025b      	lsls	r3, r3, #9
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d107      	bne.n	8015a3c <HAL_RCC_OscConfig+0x84>
 8015a2c:	4bb1      	ldr	r3, [pc, #708]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a2e:	681a      	ldr	r2, [r3, #0]
 8015a30:	4bb0      	ldr	r3, [pc, #704]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a32:	2180      	movs	r1, #128	@ 0x80
 8015a34:	0249      	lsls	r1, r1, #9
 8015a36:	430a      	orrs	r2, r1
 8015a38:	601a      	str	r2, [r3, #0]
 8015a3a:	e027      	b.n	8015a8c <HAL_RCC_OscConfig+0xd4>
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	685a      	ldr	r2, [r3, #4]
 8015a40:	23a0      	movs	r3, #160	@ 0xa0
 8015a42:	02db      	lsls	r3, r3, #11
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d10e      	bne.n	8015a66 <HAL_RCC_OscConfig+0xae>
 8015a48:	4baa      	ldr	r3, [pc, #680]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	4ba9      	ldr	r3, [pc, #676]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a4e:	2180      	movs	r1, #128	@ 0x80
 8015a50:	02c9      	lsls	r1, r1, #11
 8015a52:	430a      	orrs	r2, r1
 8015a54:	601a      	str	r2, [r3, #0]
 8015a56:	4ba7      	ldr	r3, [pc, #668]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a58:	681a      	ldr	r2, [r3, #0]
 8015a5a:	4ba6      	ldr	r3, [pc, #664]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a5c:	2180      	movs	r1, #128	@ 0x80
 8015a5e:	0249      	lsls	r1, r1, #9
 8015a60:	430a      	orrs	r2, r1
 8015a62:	601a      	str	r2, [r3, #0]
 8015a64:	e012      	b.n	8015a8c <HAL_RCC_OscConfig+0xd4>
 8015a66:	4ba3      	ldr	r3, [pc, #652]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	4ba2      	ldr	r3, [pc, #648]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a6c:	49a2      	ldr	r1, [pc, #648]	@ (8015cf8 <HAL_RCC_OscConfig+0x340>)
 8015a6e:	400a      	ands	r2, r1
 8015a70:	601a      	str	r2, [r3, #0]
 8015a72:	4ba0      	ldr	r3, [pc, #640]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	2380      	movs	r3, #128	@ 0x80
 8015a78:	025b      	lsls	r3, r3, #9
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	60fb      	str	r3, [r7, #12]
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	4b9c      	ldr	r3, [pc, #624]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	4b9b      	ldr	r3, [pc, #620]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015a86:	499d      	ldr	r1, [pc, #628]	@ (8015cfc <HAL_RCC_OscConfig+0x344>)
 8015a88:	400a      	ands	r2, r1
 8015a8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d015      	beq.n	8015ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015a94:	f7f9 fe60 	bl	800f758 <HAL_GetTick>
 8015a98:	0003      	movs	r3, r0
 8015a9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015a9c:	e009      	b.n	8015ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015a9e:	f7f9 fe5b 	bl	800f758 <HAL_GetTick>
 8015aa2:	0002      	movs	r2, r0
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	2b64      	cmp	r3, #100	@ 0x64
 8015aaa:	d902      	bls.n	8015ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015aac:	2303      	movs	r3, #3
 8015aae:	f000 fb4c 	bl	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015ab2:	4b90      	ldr	r3, [pc, #576]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015ab4:	681a      	ldr	r2, [r3, #0]
 8015ab6:	2380      	movs	r3, #128	@ 0x80
 8015ab8:	029b      	lsls	r3, r3, #10
 8015aba:	4013      	ands	r3, r2
 8015abc:	d0ef      	beq.n	8015a9e <HAL_RCC_OscConfig+0xe6>
 8015abe:	e015      	b.n	8015aec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015ac0:	f7f9 fe4a 	bl	800f758 <HAL_GetTick>
 8015ac4:	0003      	movs	r3, r0
 8015ac6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015ac8:	e008      	b.n	8015adc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015aca:	f7f9 fe45 	bl	800f758 <HAL_GetTick>
 8015ace:	0002      	movs	r2, r0
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	1ad3      	subs	r3, r2, r3
 8015ad4:	2b64      	cmp	r3, #100	@ 0x64
 8015ad6:	d901      	bls.n	8015adc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8015ad8:	2303      	movs	r3, #3
 8015ada:	e336      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015adc:	4b85      	ldr	r3, [pc, #532]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015ade:	681a      	ldr	r2, [r3, #0]
 8015ae0:	2380      	movs	r3, #128	@ 0x80
 8015ae2:	029b      	lsls	r3, r3, #10
 8015ae4:	4013      	ands	r3, r2
 8015ae6:	d1f0      	bne.n	8015aca <HAL_RCC_OscConfig+0x112>
 8015ae8:	e000      	b.n	8015aec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015aea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	2202      	movs	r2, #2
 8015af2:	4013      	ands	r3, r2
 8015af4:	d100      	bne.n	8015af8 <HAL_RCC_OscConfig+0x140>
 8015af6:	e099      	b.n	8015c2c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	68db      	ldr	r3, [r3, #12]
 8015afc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b00:	2220      	movs	r2, #32
 8015b02:	4013      	ands	r3, r2
 8015b04:	d009      	beq.n	8015b1a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8015b06:	4b7b      	ldr	r3, [pc, #492]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b0c:	2120      	movs	r1, #32
 8015b0e:	430a      	orrs	r2, r1
 8015b10:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8015b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b14:	2220      	movs	r2, #32
 8015b16:	4393      	bics	r3, r2
 8015b18:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	2b04      	cmp	r3, #4
 8015b1e:	d005      	beq.n	8015b2c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	2b0c      	cmp	r3, #12
 8015b24:	d13e      	bne.n	8015ba4 <HAL_RCC_OscConfig+0x1ec>
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d13b      	bne.n	8015ba4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015b2c:	4b71      	ldr	r3, [pc, #452]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	2204      	movs	r2, #4
 8015b32:	4013      	ands	r3, r2
 8015b34:	d004      	beq.n	8015b40 <HAL_RCC_OscConfig+0x188>
 8015b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d101      	bne.n	8015b40 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	e304      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015b40:	4b6c      	ldr	r3, [pc, #432]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	4a6e      	ldr	r2, [pc, #440]	@ (8015d00 <HAL_RCC_OscConfig+0x348>)
 8015b46:	4013      	ands	r3, r2
 8015b48:	0019      	movs	r1, r3
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	691b      	ldr	r3, [r3, #16]
 8015b4e:	021a      	lsls	r2, r3, #8
 8015b50:	4b68      	ldr	r3, [pc, #416]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b52:	430a      	orrs	r2, r1
 8015b54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015b56:	4b67      	ldr	r3, [pc, #412]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	2209      	movs	r2, #9
 8015b5c:	4393      	bics	r3, r2
 8015b5e:	0019      	movs	r1, r3
 8015b60:	4b64      	ldr	r3, [pc, #400]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b64:	430a      	orrs	r2, r1
 8015b66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015b68:	f000 fc42 	bl	80163f0 <HAL_RCC_GetSysClockFreq>
 8015b6c:	0001      	movs	r1, r0
 8015b6e:	4b61      	ldr	r3, [pc, #388]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015b70:	68db      	ldr	r3, [r3, #12]
 8015b72:	091b      	lsrs	r3, r3, #4
 8015b74:	220f      	movs	r2, #15
 8015b76:	4013      	ands	r3, r2
 8015b78:	4a62      	ldr	r2, [pc, #392]	@ (8015d04 <HAL_RCC_OscConfig+0x34c>)
 8015b7a:	5cd3      	ldrb	r3, [r2, r3]
 8015b7c:	000a      	movs	r2, r1
 8015b7e:	40da      	lsrs	r2, r3
 8015b80:	4b61      	ldr	r3, [pc, #388]	@ (8015d08 <HAL_RCC_OscConfig+0x350>)
 8015b82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8015b84:	4b61      	ldr	r3, [pc, #388]	@ (8015d0c <HAL_RCC_OscConfig+0x354>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2513      	movs	r5, #19
 8015b8a:	197c      	adds	r4, r7, r5
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	f7f9 fd9d 	bl	800f6cc <HAL_InitTick>
 8015b92:	0003      	movs	r3, r0
 8015b94:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8015b96:	197b      	adds	r3, r7, r5
 8015b98:	781b      	ldrb	r3, [r3, #0]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d046      	beq.n	8015c2c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8015b9e:	197b      	adds	r3, r7, r5
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	e2d2      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8015ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d027      	beq.n	8015bfa <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015baa:	4b52      	ldr	r3, [pc, #328]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2209      	movs	r2, #9
 8015bb0:	4393      	bics	r3, r2
 8015bb2:	0019      	movs	r1, r3
 8015bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015bb8:	430a      	orrs	r2, r1
 8015bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015bbc:	f7f9 fdcc 	bl	800f758 <HAL_GetTick>
 8015bc0:	0003      	movs	r3, r0
 8015bc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015bc4:	e008      	b.n	8015bd8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015bc6:	f7f9 fdc7 	bl	800f758 <HAL_GetTick>
 8015bca:	0002      	movs	r2, r0
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	2b02      	cmp	r3, #2
 8015bd2:	d901      	bls.n	8015bd8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8015bd4:	2303      	movs	r3, #3
 8015bd6:	e2b8      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015bd8:	4b46      	ldr	r3, [pc, #280]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2204      	movs	r2, #4
 8015bde:	4013      	ands	r3, r2
 8015be0:	d0f1      	beq.n	8015bc6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015be2:	4b44      	ldr	r3, [pc, #272]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	4a46      	ldr	r2, [pc, #280]	@ (8015d00 <HAL_RCC_OscConfig+0x348>)
 8015be8:	4013      	ands	r3, r2
 8015bea:	0019      	movs	r1, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	691b      	ldr	r3, [r3, #16]
 8015bf0:	021a      	lsls	r2, r3, #8
 8015bf2:	4b40      	ldr	r3, [pc, #256]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015bf4:	430a      	orrs	r2, r1
 8015bf6:	605a      	str	r2, [r3, #4]
 8015bf8:	e018      	b.n	8015c2c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015bfc:	681a      	ldr	r2, [r3, #0]
 8015bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c00:	2101      	movs	r1, #1
 8015c02:	438a      	bics	r2, r1
 8015c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c06:	f7f9 fda7 	bl	800f758 <HAL_GetTick>
 8015c0a:	0003      	movs	r3, r0
 8015c0c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015c0e:	e008      	b.n	8015c22 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015c10:	f7f9 fda2 	bl	800f758 <HAL_GetTick>
 8015c14:	0002      	movs	r2, r0
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	1ad3      	subs	r3, r2, r3
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	d901      	bls.n	8015c22 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8015c1e:	2303      	movs	r3, #3
 8015c20:	e293      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015c22:	4b34      	ldr	r3, [pc, #208]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2204      	movs	r2, #4
 8015c28:	4013      	ands	r3, r2
 8015c2a:	d1f1      	bne.n	8015c10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	2210      	movs	r2, #16
 8015c32:	4013      	ands	r3, r2
 8015c34:	d100      	bne.n	8015c38 <HAL_RCC_OscConfig+0x280>
 8015c36:	e0a2      	b.n	8015d7e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015c38:	69fb      	ldr	r3, [r7, #28]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d140      	bne.n	8015cc0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	2380      	movs	r3, #128	@ 0x80
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	4013      	ands	r3, r2
 8015c48:	d005      	beq.n	8015c56 <HAL_RCC_OscConfig+0x29e>
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	69db      	ldr	r3, [r3, #28]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d101      	bne.n	8015c56 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8015c52:	2301      	movs	r3, #1
 8015c54:	e279      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015c56:	4b27      	ldr	r3, [pc, #156]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	4a2d      	ldr	r2, [pc, #180]	@ (8015d10 <HAL_RCC_OscConfig+0x358>)
 8015c5c:	4013      	ands	r3, r2
 8015c5e:	0019      	movs	r1, r3
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c64:	4b23      	ldr	r3, [pc, #140]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c66:	430a      	orrs	r2, r1
 8015c68:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015c6a:	4b22      	ldr	r3, [pc, #136]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c6c:	685b      	ldr	r3, [r3, #4]
 8015c6e:	021b      	lsls	r3, r3, #8
 8015c70:	0a19      	lsrs	r1, r3, #8
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6a1b      	ldr	r3, [r3, #32]
 8015c76:	061a      	lsls	r2, r3, #24
 8015c78:	4b1e      	ldr	r3, [pc, #120]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c7a:	430a      	orrs	r2, r1
 8015c7c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c82:	0b5b      	lsrs	r3, r3, #13
 8015c84:	3301      	adds	r3, #1
 8015c86:	2280      	movs	r2, #128	@ 0x80
 8015c88:	0212      	lsls	r2, r2, #8
 8015c8a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015c8c:	4b19      	ldr	r3, [pc, #100]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015c8e:	68db      	ldr	r3, [r3, #12]
 8015c90:	091b      	lsrs	r3, r3, #4
 8015c92:	210f      	movs	r1, #15
 8015c94:	400b      	ands	r3, r1
 8015c96:	491b      	ldr	r1, [pc, #108]	@ (8015d04 <HAL_RCC_OscConfig+0x34c>)
 8015c98:	5ccb      	ldrb	r3, [r1, r3]
 8015c9a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8015d08 <HAL_RCC_OscConfig+0x350>)
 8015c9e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8015ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8015d0c <HAL_RCC_OscConfig+0x354>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	2513      	movs	r5, #19
 8015ca6:	197c      	adds	r4, r7, r5
 8015ca8:	0018      	movs	r0, r3
 8015caa:	f7f9 fd0f 	bl	800f6cc <HAL_InitTick>
 8015cae:	0003      	movs	r3, r0
 8015cb0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8015cb2:	197b      	adds	r3, r7, r5
 8015cb4:	781b      	ldrb	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d061      	beq.n	8015d7e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015cba:	197b      	adds	r3, r7, r5
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	e244      	b.n	801614a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	69db      	ldr	r3, [r3, #28]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d040      	beq.n	8015d4a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015cca:	681a      	ldr	r2, [r3, #0]
 8015ccc:	4b09      	ldr	r3, [pc, #36]	@ (8015cf4 <HAL_RCC_OscConfig+0x33c>)
 8015cce:	2180      	movs	r1, #128	@ 0x80
 8015cd0:	0049      	lsls	r1, r1, #1
 8015cd2:	430a      	orrs	r2, r1
 8015cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cd6:	f7f9 fd3f 	bl	800f758 <HAL_GetTick>
 8015cda:	0003      	movs	r3, r0
 8015cdc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015cde:	e019      	b.n	8015d14 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015ce0:	f7f9 fd3a 	bl	800f758 <HAL_GetTick>
 8015ce4:	0002      	movs	r2, r0
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	1ad3      	subs	r3, r2, r3
 8015cea:	2b02      	cmp	r3, #2
 8015cec:	d912      	bls.n	8015d14 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015cee:	2303      	movs	r3, #3
 8015cf0:	e22b      	b.n	801614a <HAL_RCC_OscConfig+0x792>
 8015cf2:	46c0      	nop			@ (mov r8, r8)
 8015cf4:	40021000 	.word	0x40021000
 8015cf8:	fffeffff 	.word	0xfffeffff
 8015cfc:	fffbffff 	.word	0xfffbffff
 8015d00:	ffffe0ff 	.word	0xffffe0ff
 8015d04:	080266f0 	.word	0x080266f0
 8015d08:	200000d0 	.word	0x200000d0
 8015d0c:	200000e0 	.word	0x200000e0
 8015d10:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015d14:	4bca      	ldr	r3, [pc, #808]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	2380      	movs	r3, #128	@ 0x80
 8015d1a:	009b      	lsls	r3, r3, #2
 8015d1c:	4013      	ands	r3, r2
 8015d1e:	d0df      	beq.n	8015ce0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015d20:	4bc7      	ldr	r3, [pc, #796]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	4ac7      	ldr	r2, [pc, #796]	@ (8016044 <HAL_RCC_OscConfig+0x68c>)
 8015d26:	4013      	ands	r3, r2
 8015d28:	0019      	movs	r1, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d2e:	4bc4      	ldr	r3, [pc, #784]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d30:	430a      	orrs	r2, r1
 8015d32:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015d34:	4bc2      	ldr	r3, [pc, #776]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	021b      	lsls	r3, r3, #8
 8015d3a:	0a19      	lsrs	r1, r3, #8
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6a1b      	ldr	r3, [r3, #32]
 8015d40:	061a      	lsls	r2, r3, #24
 8015d42:	4bbf      	ldr	r3, [pc, #764]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d44:	430a      	orrs	r2, r1
 8015d46:	605a      	str	r2, [r3, #4]
 8015d48:	e019      	b.n	8015d7e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015d4a:	4bbd      	ldr	r3, [pc, #756]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	4bbc      	ldr	r3, [pc, #752]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d50:	49bd      	ldr	r1, [pc, #756]	@ (8016048 <HAL_RCC_OscConfig+0x690>)
 8015d52:	400a      	ands	r2, r1
 8015d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015d56:	f7f9 fcff 	bl	800f758 <HAL_GetTick>
 8015d5a:	0003      	movs	r3, r0
 8015d5c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015d5e:	e008      	b.n	8015d72 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015d60:	f7f9 fcfa 	bl	800f758 <HAL_GetTick>
 8015d64:	0002      	movs	r2, r0
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	1ad3      	subs	r3, r2, r3
 8015d6a:	2b02      	cmp	r3, #2
 8015d6c:	d901      	bls.n	8015d72 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8015d6e:	2303      	movs	r3, #3
 8015d70:	e1eb      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015d72:	4bb3      	ldr	r3, [pc, #716]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	2380      	movs	r3, #128	@ 0x80
 8015d78:	009b      	lsls	r3, r3, #2
 8015d7a:	4013      	ands	r3, r2
 8015d7c:	d1f0      	bne.n	8015d60 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	2208      	movs	r2, #8
 8015d84:	4013      	ands	r3, r2
 8015d86:	d036      	beq.n	8015df6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	695b      	ldr	r3, [r3, #20]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d019      	beq.n	8015dc4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015d90:	4bab      	ldr	r3, [pc, #684]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d94:	4baa      	ldr	r3, [pc, #680]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015d96:	2101      	movs	r1, #1
 8015d98:	430a      	orrs	r2, r1
 8015d9a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015d9c:	f7f9 fcdc 	bl	800f758 <HAL_GetTick>
 8015da0:	0003      	movs	r3, r0
 8015da2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015da4:	e008      	b.n	8015db8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015da6:	f7f9 fcd7 	bl	800f758 <HAL_GetTick>
 8015daa:	0002      	movs	r2, r0
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	1ad3      	subs	r3, r2, r3
 8015db0:	2b02      	cmp	r3, #2
 8015db2:	d901      	bls.n	8015db8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8015db4:	2303      	movs	r3, #3
 8015db6:	e1c8      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015db8:	4ba1      	ldr	r3, [pc, #644]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dbc:	2202      	movs	r2, #2
 8015dbe:	4013      	ands	r3, r2
 8015dc0:	d0f1      	beq.n	8015da6 <HAL_RCC_OscConfig+0x3ee>
 8015dc2:	e018      	b.n	8015df6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015dc4:	4b9e      	ldr	r3, [pc, #632]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015dc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015dca:	2101      	movs	r1, #1
 8015dcc:	438a      	bics	r2, r1
 8015dce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015dd0:	f7f9 fcc2 	bl	800f758 <HAL_GetTick>
 8015dd4:	0003      	movs	r3, r0
 8015dd6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015dd8:	e008      	b.n	8015dec <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015dda:	f7f9 fcbd 	bl	800f758 <HAL_GetTick>
 8015dde:	0002      	movs	r2, r0
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	1ad3      	subs	r3, r2, r3
 8015de4:	2b02      	cmp	r3, #2
 8015de6:	d901      	bls.n	8015dec <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015de8:	2303      	movs	r3, #3
 8015dea:	e1ae      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015dec:	4b94      	ldr	r3, [pc, #592]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015df0:	2202      	movs	r2, #2
 8015df2:	4013      	ands	r3, r2
 8015df4:	d1f1      	bne.n	8015dda <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2204      	movs	r2, #4
 8015dfc:	4013      	ands	r3, r2
 8015dfe:	d100      	bne.n	8015e02 <HAL_RCC_OscConfig+0x44a>
 8015e00:	e0ae      	b.n	8015f60 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015e02:	2023      	movs	r0, #35	@ 0x23
 8015e04:	183b      	adds	r3, r7, r0
 8015e06:	2200      	movs	r2, #0
 8015e08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015e0e:	2380      	movs	r3, #128	@ 0x80
 8015e10:	055b      	lsls	r3, r3, #21
 8015e12:	4013      	ands	r3, r2
 8015e14:	d109      	bne.n	8015e2a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015e16:	4b8a      	ldr	r3, [pc, #552]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015e1a:	4b89      	ldr	r3, [pc, #548]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e1c:	2180      	movs	r1, #128	@ 0x80
 8015e1e:	0549      	lsls	r1, r1, #21
 8015e20:	430a      	orrs	r2, r1
 8015e22:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015e24:	183b      	adds	r3, r7, r0
 8015e26:	2201      	movs	r2, #1
 8015e28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e2a:	4b88      	ldr	r3, [pc, #544]	@ (801604c <HAL_RCC_OscConfig+0x694>)
 8015e2c:	681a      	ldr	r2, [r3, #0]
 8015e2e:	2380      	movs	r3, #128	@ 0x80
 8015e30:	005b      	lsls	r3, r3, #1
 8015e32:	4013      	ands	r3, r2
 8015e34:	d11a      	bne.n	8015e6c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015e36:	4b85      	ldr	r3, [pc, #532]	@ (801604c <HAL_RCC_OscConfig+0x694>)
 8015e38:	681a      	ldr	r2, [r3, #0]
 8015e3a:	4b84      	ldr	r3, [pc, #528]	@ (801604c <HAL_RCC_OscConfig+0x694>)
 8015e3c:	2180      	movs	r1, #128	@ 0x80
 8015e3e:	0049      	lsls	r1, r1, #1
 8015e40:	430a      	orrs	r2, r1
 8015e42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015e44:	f7f9 fc88 	bl	800f758 <HAL_GetTick>
 8015e48:	0003      	movs	r3, r0
 8015e4a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e4c:	e008      	b.n	8015e60 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015e4e:	f7f9 fc83 	bl	800f758 <HAL_GetTick>
 8015e52:	0002      	movs	r2, r0
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	1ad3      	subs	r3, r2, r3
 8015e58:	2b64      	cmp	r3, #100	@ 0x64
 8015e5a:	d901      	bls.n	8015e60 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015e5c:	2303      	movs	r3, #3
 8015e5e:	e174      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e60:	4b7a      	ldr	r3, [pc, #488]	@ (801604c <HAL_RCC_OscConfig+0x694>)
 8015e62:	681a      	ldr	r2, [r3, #0]
 8015e64:	2380      	movs	r3, #128	@ 0x80
 8015e66:	005b      	lsls	r3, r3, #1
 8015e68:	4013      	ands	r3, r2
 8015e6a:	d0f0      	beq.n	8015e4e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	689a      	ldr	r2, [r3, #8]
 8015e70:	2380      	movs	r3, #128	@ 0x80
 8015e72:	005b      	lsls	r3, r3, #1
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d107      	bne.n	8015e88 <HAL_RCC_OscConfig+0x4d0>
 8015e78:	4b71      	ldr	r3, [pc, #452]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e7c:	4b70      	ldr	r3, [pc, #448]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e7e:	2180      	movs	r1, #128	@ 0x80
 8015e80:	0049      	lsls	r1, r1, #1
 8015e82:	430a      	orrs	r2, r1
 8015e84:	651a      	str	r2, [r3, #80]	@ 0x50
 8015e86:	e031      	b.n	8015eec <HAL_RCC_OscConfig+0x534>
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	689b      	ldr	r3, [r3, #8]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d10c      	bne.n	8015eaa <HAL_RCC_OscConfig+0x4f2>
 8015e90:	4b6b      	ldr	r3, [pc, #428]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e94:	4b6a      	ldr	r3, [pc, #424]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e96:	496c      	ldr	r1, [pc, #432]	@ (8016048 <HAL_RCC_OscConfig+0x690>)
 8015e98:	400a      	ands	r2, r1
 8015e9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8015e9c:	4b68      	ldr	r3, [pc, #416]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015e9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ea0:	4b67      	ldr	r3, [pc, #412]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ea2:	496b      	ldr	r1, [pc, #428]	@ (8016050 <HAL_RCC_OscConfig+0x698>)
 8015ea4:	400a      	ands	r2, r1
 8015ea6:	651a      	str	r2, [r3, #80]	@ 0x50
 8015ea8:	e020      	b.n	8015eec <HAL_RCC_OscConfig+0x534>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	689a      	ldr	r2, [r3, #8]
 8015eae:	23a0      	movs	r3, #160	@ 0xa0
 8015eb0:	00db      	lsls	r3, r3, #3
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d10e      	bne.n	8015ed4 <HAL_RCC_OscConfig+0x51c>
 8015eb6:	4b62      	ldr	r3, [pc, #392]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015eba:	4b61      	ldr	r3, [pc, #388]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ebc:	2180      	movs	r1, #128	@ 0x80
 8015ebe:	00c9      	lsls	r1, r1, #3
 8015ec0:	430a      	orrs	r2, r1
 8015ec2:	651a      	str	r2, [r3, #80]	@ 0x50
 8015ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ec6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ec8:	4b5d      	ldr	r3, [pc, #372]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015eca:	2180      	movs	r1, #128	@ 0x80
 8015ecc:	0049      	lsls	r1, r1, #1
 8015ece:	430a      	orrs	r2, r1
 8015ed0:	651a      	str	r2, [r3, #80]	@ 0x50
 8015ed2:	e00b      	b.n	8015eec <HAL_RCC_OscConfig+0x534>
 8015ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ed6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ed8:	4b59      	ldr	r3, [pc, #356]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015eda:	495b      	ldr	r1, [pc, #364]	@ (8016048 <HAL_RCC_OscConfig+0x690>)
 8015edc:	400a      	ands	r2, r1
 8015ede:	651a      	str	r2, [r3, #80]	@ 0x50
 8015ee0:	4b57      	ldr	r3, [pc, #348]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ee2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ee4:	4b56      	ldr	r3, [pc, #344]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ee6:	495a      	ldr	r1, [pc, #360]	@ (8016050 <HAL_RCC_OscConfig+0x698>)
 8015ee8:	400a      	ands	r2, r1
 8015eea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	689b      	ldr	r3, [r3, #8]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d015      	beq.n	8015f20 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015ef4:	f7f9 fc30 	bl	800f758 <HAL_GetTick>
 8015ef8:	0003      	movs	r3, r0
 8015efa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015efc:	e009      	b.n	8015f12 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015efe:	f7f9 fc2b 	bl	800f758 <HAL_GetTick>
 8015f02:	0002      	movs	r2, r0
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	1ad3      	subs	r3, r2, r3
 8015f08:	4a52      	ldr	r2, [pc, #328]	@ (8016054 <HAL_RCC_OscConfig+0x69c>)
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	d901      	bls.n	8015f12 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015f0e:	2303      	movs	r3, #3
 8015f10:	e11b      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015f12:	4b4b      	ldr	r3, [pc, #300]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f16:	2380      	movs	r3, #128	@ 0x80
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	4013      	ands	r3, r2
 8015f1c:	d0ef      	beq.n	8015efe <HAL_RCC_OscConfig+0x546>
 8015f1e:	e014      	b.n	8015f4a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015f20:	f7f9 fc1a 	bl	800f758 <HAL_GetTick>
 8015f24:	0003      	movs	r3, r0
 8015f26:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015f28:	e009      	b.n	8015f3e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015f2a:	f7f9 fc15 	bl	800f758 <HAL_GetTick>
 8015f2e:	0002      	movs	r2, r0
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	1ad3      	subs	r3, r2, r3
 8015f34:	4a47      	ldr	r2, [pc, #284]	@ (8016054 <HAL_RCC_OscConfig+0x69c>)
 8015f36:	4293      	cmp	r3, r2
 8015f38:	d901      	bls.n	8015f3e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015f3a:	2303      	movs	r3, #3
 8015f3c:	e105      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015f3e:	4b40      	ldr	r3, [pc, #256]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f42:	2380      	movs	r3, #128	@ 0x80
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	4013      	ands	r3, r2
 8015f48:	d1ef      	bne.n	8015f2a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015f4a:	2323      	movs	r3, #35	@ 0x23
 8015f4c:	18fb      	adds	r3, r7, r3
 8015f4e:	781b      	ldrb	r3, [r3, #0]
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	d105      	bne.n	8015f60 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015f54:	4b3a      	ldr	r3, [pc, #232]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f58:	4b39      	ldr	r3, [pc, #228]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f5a:	493f      	ldr	r1, [pc, #252]	@ (8016058 <HAL_RCC_OscConfig+0x6a0>)
 8015f5c:	400a      	ands	r2, r1
 8015f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	2220      	movs	r2, #32
 8015f66:	4013      	ands	r3, r2
 8015f68:	d049      	beq.n	8015ffe <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	699b      	ldr	r3, [r3, #24]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d026      	beq.n	8015fc0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8015f72:	4b33      	ldr	r3, [pc, #204]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f74:	689a      	ldr	r2, [r3, #8]
 8015f76:	4b32      	ldr	r3, [pc, #200]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f78:	2101      	movs	r1, #1
 8015f7a:	430a      	orrs	r2, r1
 8015f7c:	609a      	str	r2, [r3, #8]
 8015f7e:	4b30      	ldr	r3, [pc, #192]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015f82:	4b2f      	ldr	r3, [pc, #188]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015f84:	2101      	movs	r1, #1
 8015f86:	430a      	orrs	r2, r1
 8015f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8015f8a:	4b34      	ldr	r3, [pc, #208]	@ (801605c <HAL_RCC_OscConfig+0x6a4>)
 8015f8c:	6a1a      	ldr	r2, [r3, #32]
 8015f8e:	4b33      	ldr	r3, [pc, #204]	@ (801605c <HAL_RCC_OscConfig+0x6a4>)
 8015f90:	2180      	movs	r1, #128	@ 0x80
 8015f92:	0189      	lsls	r1, r1, #6
 8015f94:	430a      	orrs	r2, r1
 8015f96:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015f98:	f7f9 fbde 	bl	800f758 <HAL_GetTick>
 8015f9c:	0003      	movs	r3, r0
 8015f9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015fa0:	e008      	b.n	8015fb4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015fa2:	f7f9 fbd9 	bl	800f758 <HAL_GetTick>
 8015fa6:	0002      	movs	r2, r0
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	1ad3      	subs	r3, r2, r3
 8015fac:	2b02      	cmp	r3, #2
 8015fae:	d901      	bls.n	8015fb4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8015fb0:	2303      	movs	r3, #3
 8015fb2:	e0ca      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015fb4:	4b22      	ldr	r3, [pc, #136]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015fb6:	689b      	ldr	r3, [r3, #8]
 8015fb8:	2202      	movs	r2, #2
 8015fba:	4013      	ands	r3, r2
 8015fbc:	d0f1      	beq.n	8015fa2 <HAL_RCC_OscConfig+0x5ea>
 8015fbe:	e01e      	b.n	8015ffe <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8015fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015fc2:	689a      	ldr	r2, [r3, #8]
 8015fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015fc6:	2101      	movs	r1, #1
 8015fc8:	438a      	bics	r2, r1
 8015fca:	609a      	str	r2, [r3, #8]
 8015fcc:	4b23      	ldr	r3, [pc, #140]	@ (801605c <HAL_RCC_OscConfig+0x6a4>)
 8015fce:	6a1a      	ldr	r2, [r3, #32]
 8015fd0:	4b22      	ldr	r3, [pc, #136]	@ (801605c <HAL_RCC_OscConfig+0x6a4>)
 8015fd2:	4923      	ldr	r1, [pc, #140]	@ (8016060 <HAL_RCC_OscConfig+0x6a8>)
 8015fd4:	400a      	ands	r2, r1
 8015fd6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015fd8:	f7f9 fbbe 	bl	800f758 <HAL_GetTick>
 8015fdc:	0003      	movs	r3, r0
 8015fde:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015fe0:	e008      	b.n	8015ff4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015fe2:	f7f9 fbb9 	bl	800f758 <HAL_GetTick>
 8015fe6:	0002      	movs	r2, r0
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	1ad3      	subs	r3, r2, r3
 8015fec:	2b02      	cmp	r3, #2
 8015fee:	d901      	bls.n	8015ff4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015ff0:	2303      	movs	r3, #3
 8015ff2:	e0aa      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015ff4:	4b12      	ldr	r3, [pc, #72]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 8015ff6:	689b      	ldr	r3, [r3, #8]
 8015ff8:	2202      	movs	r2, #2
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	d1f1      	bne.n	8015fe2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016002:	2b00      	cmp	r3, #0
 8016004:	d100      	bne.n	8016008 <HAL_RCC_OscConfig+0x650>
 8016006:	e09f      	b.n	8016148 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016008:	69fb      	ldr	r3, [r7, #28]
 801600a:	2b0c      	cmp	r3, #12
 801600c:	d100      	bne.n	8016010 <HAL_RCC_OscConfig+0x658>
 801600e:	e078      	b.n	8016102 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016014:	2b02      	cmp	r3, #2
 8016016:	d159      	bne.n	80160cc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016018:	4b09      	ldr	r3, [pc, #36]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 801601a:	681a      	ldr	r2, [r3, #0]
 801601c:	4b08      	ldr	r3, [pc, #32]	@ (8016040 <HAL_RCC_OscConfig+0x688>)
 801601e:	4911      	ldr	r1, [pc, #68]	@ (8016064 <HAL_RCC_OscConfig+0x6ac>)
 8016020:	400a      	ands	r2, r1
 8016022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016024:	f7f9 fb98 	bl	800f758 <HAL_GetTick>
 8016028:	0003      	movs	r3, r0
 801602a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801602c:	e01c      	b.n	8016068 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801602e:	f7f9 fb93 	bl	800f758 <HAL_GetTick>
 8016032:	0002      	movs	r2, r0
 8016034:	697b      	ldr	r3, [r7, #20]
 8016036:	1ad3      	subs	r3, r2, r3
 8016038:	2b02      	cmp	r3, #2
 801603a:	d915      	bls.n	8016068 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801603c:	2303      	movs	r3, #3
 801603e:	e084      	b.n	801614a <HAL_RCC_OscConfig+0x792>
 8016040:	40021000 	.word	0x40021000
 8016044:	ffff1fff 	.word	0xffff1fff
 8016048:	fffffeff 	.word	0xfffffeff
 801604c:	40007000 	.word	0x40007000
 8016050:	fffffbff 	.word	0xfffffbff
 8016054:	00001388 	.word	0x00001388
 8016058:	efffffff 	.word	0xefffffff
 801605c:	40010000 	.word	0x40010000
 8016060:	ffffdfff 	.word	0xffffdfff
 8016064:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8016068:	4b3a      	ldr	r3, [pc, #232]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 801606a:	681a      	ldr	r2, [r3, #0]
 801606c:	2380      	movs	r3, #128	@ 0x80
 801606e:	049b      	lsls	r3, r3, #18
 8016070:	4013      	ands	r3, r2
 8016072:	d1dc      	bne.n	801602e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8016074:	4b37      	ldr	r3, [pc, #220]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 8016076:	68db      	ldr	r3, [r3, #12]
 8016078:	4a37      	ldr	r2, [pc, #220]	@ (8016158 <HAL_RCC_OscConfig+0x7a0>)
 801607a:	4013      	ands	r3, r2
 801607c:	0019      	movs	r1, r3
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016086:	431a      	orrs	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801608c:	431a      	orrs	r2, r3
 801608e:	4b31      	ldr	r3, [pc, #196]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 8016090:	430a      	orrs	r2, r1
 8016092:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016094:	4b2f      	ldr	r3, [pc, #188]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 8016096:	681a      	ldr	r2, [r3, #0]
 8016098:	4b2e      	ldr	r3, [pc, #184]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 801609a:	2180      	movs	r1, #128	@ 0x80
 801609c:	0449      	lsls	r1, r1, #17
 801609e:	430a      	orrs	r2, r1
 80160a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160a2:	f7f9 fb59 	bl	800f758 <HAL_GetTick>
 80160a6:	0003      	movs	r3, r0
 80160a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80160aa:	e008      	b.n	80160be <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80160ac:	f7f9 fb54 	bl	800f758 <HAL_GetTick>
 80160b0:	0002      	movs	r2, r0
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	1ad3      	subs	r3, r2, r3
 80160b6:	2b02      	cmp	r3, #2
 80160b8:	d901      	bls.n	80160be <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80160ba:	2303      	movs	r3, #3
 80160bc:	e045      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80160be:	4b25      	ldr	r3, [pc, #148]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	2380      	movs	r3, #128	@ 0x80
 80160c4:	049b      	lsls	r3, r3, #18
 80160c6:	4013      	ands	r3, r2
 80160c8:	d0f0      	beq.n	80160ac <HAL_RCC_OscConfig+0x6f4>
 80160ca:	e03d      	b.n	8016148 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80160cc:	4b21      	ldr	r3, [pc, #132]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 80160ce:	681a      	ldr	r2, [r3, #0]
 80160d0:	4b20      	ldr	r3, [pc, #128]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 80160d2:	4922      	ldr	r1, [pc, #136]	@ (801615c <HAL_RCC_OscConfig+0x7a4>)
 80160d4:	400a      	ands	r2, r1
 80160d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160d8:	f7f9 fb3e 	bl	800f758 <HAL_GetTick>
 80160dc:	0003      	movs	r3, r0
 80160de:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80160e0:	e008      	b.n	80160f4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80160e2:	f7f9 fb39 	bl	800f758 <HAL_GetTick>
 80160e6:	0002      	movs	r2, r0
 80160e8:	697b      	ldr	r3, [r7, #20]
 80160ea:	1ad3      	subs	r3, r2, r3
 80160ec:	2b02      	cmp	r3, #2
 80160ee:	d901      	bls.n	80160f4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80160f0:	2303      	movs	r3, #3
 80160f2:	e02a      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80160f4:	4b17      	ldr	r3, [pc, #92]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	2380      	movs	r3, #128	@ 0x80
 80160fa:	049b      	lsls	r3, r3, #18
 80160fc:	4013      	ands	r3, r2
 80160fe:	d1f0      	bne.n	80160e2 <HAL_RCC_OscConfig+0x72a>
 8016100:	e022      	b.n	8016148 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016106:	2b01      	cmp	r3, #1
 8016108:	d101      	bne.n	801610e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801610a:	2301      	movs	r3, #1
 801610c:	e01d      	b.n	801614a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801610e:	4b11      	ldr	r3, [pc, #68]	@ (8016154 <HAL_RCC_OscConfig+0x79c>)
 8016110:	68db      	ldr	r3, [r3, #12]
 8016112:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016114:	69ba      	ldr	r2, [r7, #24]
 8016116:	2380      	movs	r3, #128	@ 0x80
 8016118:	025b      	lsls	r3, r3, #9
 801611a:	401a      	ands	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016120:	429a      	cmp	r2, r3
 8016122:	d10f      	bne.n	8016144 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8016124:	69ba      	ldr	r2, [r7, #24]
 8016126:	23f0      	movs	r3, #240	@ 0xf0
 8016128:	039b      	lsls	r3, r3, #14
 801612a:	401a      	ands	r2, r3
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016130:	429a      	cmp	r2, r3
 8016132:	d107      	bne.n	8016144 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8016134:	69ba      	ldr	r2, [r7, #24]
 8016136:	23c0      	movs	r3, #192	@ 0xc0
 8016138:	041b      	lsls	r3, r3, #16
 801613a:	401a      	ands	r2, r3
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8016140:	429a      	cmp	r2, r3
 8016142:	d001      	beq.n	8016148 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8016144:	2301      	movs	r3, #1
 8016146:	e000      	b.n	801614a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8016148:	2300      	movs	r3, #0
}
 801614a:	0018      	movs	r0, r3
 801614c:	46bd      	mov	sp, r7
 801614e:	b00a      	add	sp, #40	@ 0x28
 8016150:	bdb0      	pop	{r4, r5, r7, pc}
 8016152:	46c0      	nop			@ (mov r8, r8)
 8016154:	40021000 	.word	0x40021000
 8016158:	ff02ffff 	.word	0xff02ffff
 801615c:	feffffff 	.word	0xfeffffff

08016160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016160:	b5b0      	push	{r4, r5, r7, lr}
 8016162:	b084      	sub	sp, #16
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
 8016168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d101      	bne.n	8016174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016170:	2301      	movs	r3, #1
 8016172:	e128      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016174:	4b96      	ldr	r3, [pc, #600]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	2201      	movs	r2, #1
 801617a:	4013      	ands	r3, r2
 801617c:	683a      	ldr	r2, [r7, #0]
 801617e:	429a      	cmp	r2, r3
 8016180:	d91e      	bls.n	80161c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016182:	4b93      	ldr	r3, [pc, #588]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	2201      	movs	r2, #1
 8016188:	4393      	bics	r3, r2
 801618a:	0019      	movs	r1, r3
 801618c:	4b90      	ldr	r3, [pc, #576]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 801618e:	683a      	ldr	r2, [r7, #0]
 8016190:	430a      	orrs	r2, r1
 8016192:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8016194:	f7f9 fae0 	bl	800f758 <HAL_GetTick>
 8016198:	0003      	movs	r3, r0
 801619a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801619c:	e009      	b.n	80161b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801619e:	f7f9 fadb 	bl	800f758 <HAL_GetTick>
 80161a2:	0002      	movs	r2, r0
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	1ad3      	subs	r3, r2, r3
 80161a8:	4a8a      	ldr	r2, [pc, #552]	@ (80163d4 <HAL_RCC_ClockConfig+0x274>)
 80161aa:	4293      	cmp	r3, r2
 80161ac:	d901      	bls.n	80161b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80161ae:	2303      	movs	r3, #3
 80161b0:	e109      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80161b2:	4b87      	ldr	r3, [pc, #540]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	2201      	movs	r2, #1
 80161b8:	4013      	ands	r3, r2
 80161ba:	683a      	ldr	r2, [r7, #0]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d1ee      	bne.n	801619e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2202      	movs	r2, #2
 80161c6:	4013      	ands	r3, r2
 80161c8:	d009      	beq.n	80161de <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80161ca:	4b83      	ldr	r3, [pc, #524]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 80161cc:	68db      	ldr	r3, [r3, #12]
 80161ce:	22f0      	movs	r2, #240	@ 0xf0
 80161d0:	4393      	bics	r3, r2
 80161d2:	0019      	movs	r1, r3
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	689a      	ldr	r2, [r3, #8]
 80161d8:	4b7f      	ldr	r3, [pc, #508]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 80161da:	430a      	orrs	r2, r1
 80161dc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	2201      	movs	r2, #1
 80161e4:	4013      	ands	r3, r2
 80161e6:	d100      	bne.n	80161ea <HAL_RCC_ClockConfig+0x8a>
 80161e8:	e089      	b.n	80162fe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	685b      	ldr	r3, [r3, #4]
 80161ee:	2b02      	cmp	r3, #2
 80161f0:	d107      	bne.n	8016202 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80161f2:	4b79      	ldr	r3, [pc, #484]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 80161f4:	681a      	ldr	r2, [r3, #0]
 80161f6:	2380      	movs	r3, #128	@ 0x80
 80161f8:	029b      	lsls	r3, r3, #10
 80161fa:	4013      	ands	r3, r2
 80161fc:	d120      	bne.n	8016240 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80161fe:	2301      	movs	r3, #1
 8016200:	e0e1      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	2b03      	cmp	r3, #3
 8016208:	d107      	bne.n	801621a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801620a:	4b73      	ldr	r3, [pc, #460]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 801620c:	681a      	ldr	r2, [r3, #0]
 801620e:	2380      	movs	r3, #128	@ 0x80
 8016210:	049b      	lsls	r3, r3, #18
 8016212:	4013      	ands	r3, r2
 8016214:	d114      	bne.n	8016240 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8016216:	2301      	movs	r3, #1
 8016218:	e0d5      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	2b01      	cmp	r3, #1
 8016220:	d106      	bne.n	8016230 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8016222:	4b6d      	ldr	r3, [pc, #436]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	2204      	movs	r2, #4
 8016228:	4013      	ands	r3, r2
 801622a:	d109      	bne.n	8016240 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801622c:	2301      	movs	r3, #1
 801622e:	e0ca      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8016230:	4b69      	ldr	r3, [pc, #420]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	2380      	movs	r3, #128	@ 0x80
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	4013      	ands	r3, r2
 801623a:	d101      	bne.n	8016240 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801623c:	2301      	movs	r3, #1
 801623e:	e0c2      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016240:	4b65      	ldr	r3, [pc, #404]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016242:	68db      	ldr	r3, [r3, #12]
 8016244:	2203      	movs	r2, #3
 8016246:	4393      	bics	r3, r2
 8016248:	0019      	movs	r1, r3
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	685a      	ldr	r2, [r3, #4]
 801624e:	4b62      	ldr	r3, [pc, #392]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016250:	430a      	orrs	r2, r1
 8016252:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016254:	f7f9 fa80 	bl	800f758 <HAL_GetTick>
 8016258:	0003      	movs	r3, r0
 801625a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	2b02      	cmp	r3, #2
 8016262:	d111      	bne.n	8016288 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8016264:	e009      	b.n	801627a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016266:	f7f9 fa77 	bl	800f758 <HAL_GetTick>
 801626a:	0002      	movs	r2, r0
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	1ad3      	subs	r3, r2, r3
 8016270:	4a58      	ldr	r2, [pc, #352]	@ (80163d4 <HAL_RCC_ClockConfig+0x274>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d901      	bls.n	801627a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8016276:	2303      	movs	r3, #3
 8016278:	e0a5      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801627a:	4b57      	ldr	r3, [pc, #348]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 801627c:	68db      	ldr	r3, [r3, #12]
 801627e:	220c      	movs	r2, #12
 8016280:	4013      	ands	r3, r2
 8016282:	2b08      	cmp	r3, #8
 8016284:	d1ef      	bne.n	8016266 <HAL_RCC_ClockConfig+0x106>
 8016286:	e03a      	b.n	80162fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	2b03      	cmp	r3, #3
 801628e:	d111      	bne.n	80162b4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8016290:	e009      	b.n	80162a6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016292:	f7f9 fa61 	bl	800f758 <HAL_GetTick>
 8016296:	0002      	movs	r2, r0
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	1ad3      	subs	r3, r2, r3
 801629c:	4a4d      	ldr	r2, [pc, #308]	@ (80163d4 <HAL_RCC_ClockConfig+0x274>)
 801629e:	4293      	cmp	r3, r2
 80162a0:	d901      	bls.n	80162a6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80162a2:	2303      	movs	r3, #3
 80162a4:	e08f      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80162a6:	4b4c      	ldr	r3, [pc, #304]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 80162a8:	68db      	ldr	r3, [r3, #12]
 80162aa:	220c      	movs	r2, #12
 80162ac:	4013      	ands	r3, r2
 80162ae:	2b0c      	cmp	r3, #12
 80162b0:	d1ef      	bne.n	8016292 <HAL_RCC_ClockConfig+0x132>
 80162b2:	e024      	b.n	80162fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	2b01      	cmp	r3, #1
 80162ba:	d11b      	bne.n	80162f4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80162bc:	e009      	b.n	80162d2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80162be:	f7f9 fa4b 	bl	800f758 <HAL_GetTick>
 80162c2:	0002      	movs	r2, r0
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	4a42      	ldr	r2, [pc, #264]	@ (80163d4 <HAL_RCC_ClockConfig+0x274>)
 80162ca:	4293      	cmp	r3, r2
 80162cc:	d901      	bls.n	80162d2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80162ce:	2303      	movs	r3, #3
 80162d0:	e079      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80162d2:	4b41      	ldr	r3, [pc, #260]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	220c      	movs	r2, #12
 80162d8:	4013      	ands	r3, r2
 80162da:	2b04      	cmp	r3, #4
 80162dc:	d1ef      	bne.n	80162be <HAL_RCC_ClockConfig+0x15e>
 80162de:	e00e      	b.n	80162fe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80162e0:	f7f9 fa3a 	bl	800f758 <HAL_GetTick>
 80162e4:	0002      	movs	r2, r0
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	1ad3      	subs	r3, r2, r3
 80162ea:	4a3a      	ldr	r2, [pc, #232]	@ (80163d4 <HAL_RCC_ClockConfig+0x274>)
 80162ec:	4293      	cmp	r3, r2
 80162ee:	d901      	bls.n	80162f4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80162f0:	2303      	movs	r3, #3
 80162f2:	e068      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80162f4:	4b38      	ldr	r3, [pc, #224]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	220c      	movs	r2, #12
 80162fa:	4013      	ands	r3, r2
 80162fc:	d1f0      	bne.n	80162e0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80162fe:	4b34      	ldr	r3, [pc, #208]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2201      	movs	r2, #1
 8016304:	4013      	ands	r3, r2
 8016306:	683a      	ldr	r2, [r7, #0]
 8016308:	429a      	cmp	r2, r3
 801630a:	d21e      	bcs.n	801634a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801630c:	4b30      	ldr	r3, [pc, #192]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	2201      	movs	r2, #1
 8016312:	4393      	bics	r3, r2
 8016314:	0019      	movs	r1, r3
 8016316:	4b2e      	ldr	r3, [pc, #184]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 8016318:	683a      	ldr	r2, [r7, #0]
 801631a:	430a      	orrs	r2, r1
 801631c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801631e:	f7f9 fa1b 	bl	800f758 <HAL_GetTick>
 8016322:	0003      	movs	r3, r0
 8016324:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8016326:	e009      	b.n	801633c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016328:	f7f9 fa16 	bl	800f758 <HAL_GetTick>
 801632c:	0002      	movs	r2, r0
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	1ad3      	subs	r3, r2, r3
 8016332:	4a28      	ldr	r2, [pc, #160]	@ (80163d4 <HAL_RCC_ClockConfig+0x274>)
 8016334:	4293      	cmp	r3, r2
 8016336:	d901      	bls.n	801633c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8016338:	2303      	movs	r3, #3
 801633a:	e044      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801633c:	4b24      	ldr	r3, [pc, #144]	@ (80163d0 <HAL_RCC_ClockConfig+0x270>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2201      	movs	r2, #1
 8016342:	4013      	ands	r3, r2
 8016344:	683a      	ldr	r2, [r7, #0]
 8016346:	429a      	cmp	r2, r3
 8016348:	d1ee      	bne.n	8016328 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	2204      	movs	r2, #4
 8016350:	4013      	ands	r3, r2
 8016352:	d009      	beq.n	8016368 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016354:	4b20      	ldr	r3, [pc, #128]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016356:	68db      	ldr	r3, [r3, #12]
 8016358:	4a20      	ldr	r2, [pc, #128]	@ (80163dc <HAL_RCC_ClockConfig+0x27c>)
 801635a:	4013      	ands	r3, r2
 801635c:	0019      	movs	r1, r3
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	68da      	ldr	r2, [r3, #12]
 8016362:	4b1d      	ldr	r3, [pc, #116]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016364:	430a      	orrs	r2, r1
 8016366:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2208      	movs	r2, #8
 801636e:	4013      	ands	r3, r2
 8016370:	d00a      	beq.n	8016388 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8016372:	4b19      	ldr	r3, [pc, #100]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	4a1a      	ldr	r2, [pc, #104]	@ (80163e0 <HAL_RCC_ClockConfig+0x280>)
 8016378:	4013      	ands	r3, r2
 801637a:	0019      	movs	r1, r3
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	691b      	ldr	r3, [r3, #16]
 8016380:	00da      	lsls	r2, r3, #3
 8016382:	4b15      	ldr	r3, [pc, #84]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016384:	430a      	orrs	r2, r1
 8016386:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016388:	f000 f832 	bl	80163f0 <HAL_RCC_GetSysClockFreq>
 801638c:	0001      	movs	r1, r0
 801638e:	4b12      	ldr	r3, [pc, #72]	@ (80163d8 <HAL_RCC_ClockConfig+0x278>)
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	091b      	lsrs	r3, r3, #4
 8016394:	220f      	movs	r2, #15
 8016396:	4013      	ands	r3, r2
 8016398:	4a12      	ldr	r2, [pc, #72]	@ (80163e4 <HAL_RCC_ClockConfig+0x284>)
 801639a:	5cd3      	ldrb	r3, [r2, r3]
 801639c:	000a      	movs	r2, r1
 801639e:	40da      	lsrs	r2, r3
 80163a0:	4b11      	ldr	r3, [pc, #68]	@ (80163e8 <HAL_RCC_ClockConfig+0x288>)
 80163a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80163a4:	4b11      	ldr	r3, [pc, #68]	@ (80163ec <HAL_RCC_ClockConfig+0x28c>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	250b      	movs	r5, #11
 80163aa:	197c      	adds	r4, r7, r5
 80163ac:	0018      	movs	r0, r3
 80163ae:	f7f9 f98d 	bl	800f6cc <HAL_InitTick>
 80163b2:	0003      	movs	r3, r0
 80163b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80163b6:	197b      	adds	r3, r7, r5
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d002      	beq.n	80163c4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80163be:	197b      	adds	r3, r7, r5
 80163c0:	781b      	ldrb	r3, [r3, #0]
 80163c2:	e000      	b.n	80163c6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80163c4:	2300      	movs	r3, #0
}
 80163c6:	0018      	movs	r0, r3
 80163c8:	46bd      	mov	sp, r7
 80163ca:	b004      	add	sp, #16
 80163cc:	bdb0      	pop	{r4, r5, r7, pc}
 80163ce:	46c0      	nop			@ (mov r8, r8)
 80163d0:	40022000 	.word	0x40022000
 80163d4:	00001388 	.word	0x00001388
 80163d8:	40021000 	.word	0x40021000
 80163dc:	fffff8ff 	.word	0xfffff8ff
 80163e0:	ffffc7ff 	.word	0xffffc7ff
 80163e4:	080266f0 	.word	0x080266f0
 80163e8:	200000d0 	.word	0x200000d0
 80163ec:	200000e0 	.word	0x200000e0

080163f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80163f0:	b5b0      	push	{r4, r5, r7, lr}
 80163f2:	b08e      	sub	sp, #56	@ 0x38
 80163f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80163f6:	4b4c      	ldr	r3, [pc, #304]	@ (8016528 <HAL_RCC_GetSysClockFreq+0x138>)
 80163f8:	68db      	ldr	r3, [r3, #12]
 80163fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80163fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163fe:	230c      	movs	r3, #12
 8016400:	4013      	ands	r3, r2
 8016402:	2b0c      	cmp	r3, #12
 8016404:	d014      	beq.n	8016430 <HAL_RCC_GetSysClockFreq+0x40>
 8016406:	d900      	bls.n	801640a <HAL_RCC_GetSysClockFreq+0x1a>
 8016408:	e07b      	b.n	8016502 <HAL_RCC_GetSysClockFreq+0x112>
 801640a:	2b04      	cmp	r3, #4
 801640c:	d002      	beq.n	8016414 <HAL_RCC_GetSysClockFreq+0x24>
 801640e:	2b08      	cmp	r3, #8
 8016410:	d00b      	beq.n	801642a <HAL_RCC_GetSysClockFreq+0x3a>
 8016412:	e076      	b.n	8016502 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8016414:	4b44      	ldr	r3, [pc, #272]	@ (8016528 <HAL_RCC_GetSysClockFreq+0x138>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	2210      	movs	r2, #16
 801641a:	4013      	ands	r3, r2
 801641c:	d002      	beq.n	8016424 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801641e:	4b43      	ldr	r3, [pc, #268]	@ (801652c <HAL_RCC_GetSysClockFreq+0x13c>)
 8016420:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8016422:	e07c      	b.n	801651e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8016424:	4b42      	ldr	r3, [pc, #264]	@ (8016530 <HAL_RCC_GetSysClockFreq+0x140>)
 8016426:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8016428:	e079      	b.n	801651e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801642a:	4b42      	ldr	r3, [pc, #264]	@ (8016534 <HAL_RCC_GetSysClockFreq+0x144>)
 801642c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801642e:	e076      	b.n	801651e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8016430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016432:	0c9a      	lsrs	r2, r3, #18
 8016434:	230f      	movs	r3, #15
 8016436:	401a      	ands	r2, r3
 8016438:	4b3f      	ldr	r3, [pc, #252]	@ (8016538 <HAL_RCC_GetSysClockFreq+0x148>)
 801643a:	5c9b      	ldrb	r3, [r3, r2]
 801643c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016440:	0d9a      	lsrs	r2, r3, #22
 8016442:	2303      	movs	r3, #3
 8016444:	4013      	ands	r3, r2
 8016446:	3301      	adds	r3, #1
 8016448:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801644a:	4b37      	ldr	r3, [pc, #220]	@ (8016528 <HAL_RCC_GetSysClockFreq+0x138>)
 801644c:	68da      	ldr	r2, [r3, #12]
 801644e:	2380      	movs	r3, #128	@ 0x80
 8016450:	025b      	lsls	r3, r3, #9
 8016452:	4013      	ands	r3, r2
 8016454:	d01a      	beq.n	801648c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8016456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016458:	61bb      	str	r3, [r7, #24]
 801645a:	2300      	movs	r3, #0
 801645c:	61fb      	str	r3, [r7, #28]
 801645e:	4a35      	ldr	r2, [pc, #212]	@ (8016534 <HAL_RCC_GetSysClockFreq+0x144>)
 8016460:	2300      	movs	r3, #0
 8016462:	69b8      	ldr	r0, [r7, #24]
 8016464:	69f9      	ldr	r1, [r7, #28]
 8016466:	f7ea f8ab 	bl	80005c0 <__aeabi_lmul>
 801646a:	0002      	movs	r2, r0
 801646c:	000b      	movs	r3, r1
 801646e:	0010      	movs	r0, r2
 8016470:	0019      	movs	r1, r3
 8016472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016474:	613b      	str	r3, [r7, #16]
 8016476:	2300      	movs	r3, #0
 8016478:	617b      	str	r3, [r7, #20]
 801647a:	693a      	ldr	r2, [r7, #16]
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	f7ea f87f 	bl	8000580 <__aeabi_uldivmod>
 8016482:	0002      	movs	r2, r0
 8016484:	000b      	movs	r3, r1
 8016486:	0013      	movs	r3, r2
 8016488:	637b      	str	r3, [r7, #52]	@ 0x34
 801648a:	e037      	b.n	80164fc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801648c:	4b26      	ldr	r3, [pc, #152]	@ (8016528 <HAL_RCC_GetSysClockFreq+0x138>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2210      	movs	r2, #16
 8016492:	4013      	ands	r3, r2
 8016494:	d01a      	beq.n	80164cc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8016496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016498:	60bb      	str	r3, [r7, #8]
 801649a:	2300      	movs	r3, #0
 801649c:	60fb      	str	r3, [r7, #12]
 801649e:	4a23      	ldr	r2, [pc, #140]	@ (801652c <HAL_RCC_GetSysClockFreq+0x13c>)
 80164a0:	2300      	movs	r3, #0
 80164a2:	68b8      	ldr	r0, [r7, #8]
 80164a4:	68f9      	ldr	r1, [r7, #12]
 80164a6:	f7ea f88b 	bl	80005c0 <__aeabi_lmul>
 80164aa:	0002      	movs	r2, r0
 80164ac:	000b      	movs	r3, r1
 80164ae:	0010      	movs	r0, r2
 80164b0:	0019      	movs	r1, r3
 80164b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164b4:	603b      	str	r3, [r7, #0]
 80164b6:	2300      	movs	r3, #0
 80164b8:	607b      	str	r3, [r7, #4]
 80164ba:	683a      	ldr	r2, [r7, #0]
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	f7ea f85f 	bl	8000580 <__aeabi_uldivmod>
 80164c2:	0002      	movs	r2, r0
 80164c4:	000b      	movs	r3, r1
 80164c6:	0013      	movs	r3, r2
 80164c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80164ca:	e017      	b.n	80164fc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80164cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ce:	0018      	movs	r0, r3
 80164d0:	2300      	movs	r3, #0
 80164d2:	0019      	movs	r1, r3
 80164d4:	4a16      	ldr	r2, [pc, #88]	@ (8016530 <HAL_RCC_GetSysClockFreq+0x140>)
 80164d6:	2300      	movs	r3, #0
 80164d8:	f7ea f872 	bl	80005c0 <__aeabi_lmul>
 80164dc:	0002      	movs	r2, r0
 80164de:	000b      	movs	r3, r1
 80164e0:	0010      	movs	r0, r2
 80164e2:	0019      	movs	r1, r3
 80164e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164e6:	001c      	movs	r4, r3
 80164e8:	2300      	movs	r3, #0
 80164ea:	001d      	movs	r5, r3
 80164ec:	0022      	movs	r2, r4
 80164ee:	002b      	movs	r3, r5
 80164f0:	f7ea f846 	bl	8000580 <__aeabi_uldivmod>
 80164f4:	0002      	movs	r2, r0
 80164f6:	000b      	movs	r3, r1
 80164f8:	0013      	movs	r3, r2
 80164fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80164fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164fe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8016500:	e00d      	b.n	801651e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8016502:	4b09      	ldr	r3, [pc, #36]	@ (8016528 <HAL_RCC_GetSysClockFreq+0x138>)
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	0b5b      	lsrs	r3, r3, #13
 8016508:	2207      	movs	r2, #7
 801650a:	4013      	ands	r3, r2
 801650c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801650e:	6a3b      	ldr	r3, [r7, #32]
 8016510:	3301      	adds	r3, #1
 8016512:	2280      	movs	r2, #128	@ 0x80
 8016514:	0212      	lsls	r2, r2, #8
 8016516:	409a      	lsls	r2, r3
 8016518:	0013      	movs	r3, r2
 801651a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801651c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801651e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8016520:	0018      	movs	r0, r3
 8016522:	46bd      	mov	sp, r7
 8016524:	b00e      	add	sp, #56	@ 0x38
 8016526:	bdb0      	pop	{r4, r5, r7, pc}
 8016528:	40021000 	.word	0x40021000
 801652c:	003d0900 	.word	0x003d0900
 8016530:	00f42400 	.word	0x00f42400
 8016534:	007a1200 	.word	0x007a1200
 8016538:	08026708 	.word	0x08026708

0801653c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016540:	4b02      	ldr	r3, [pc, #8]	@ (801654c <HAL_RCC_GetHCLKFreq+0x10>)
 8016542:	681b      	ldr	r3, [r3, #0]
}
 8016544:	0018      	movs	r0, r3
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	46c0      	nop			@ (mov r8, r8)
 801654c:	200000d0 	.word	0x200000d0

08016550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8016554:	f7ff fff2 	bl	801653c <HAL_RCC_GetHCLKFreq>
 8016558:	0001      	movs	r1, r0
 801655a:	4b06      	ldr	r3, [pc, #24]	@ (8016574 <HAL_RCC_GetPCLK1Freq+0x24>)
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	0a1b      	lsrs	r3, r3, #8
 8016560:	2207      	movs	r2, #7
 8016562:	4013      	ands	r3, r2
 8016564:	4a04      	ldr	r2, [pc, #16]	@ (8016578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8016566:	5cd3      	ldrb	r3, [r2, r3]
 8016568:	40d9      	lsrs	r1, r3
 801656a:	000b      	movs	r3, r1
}
 801656c:	0018      	movs	r0, r3
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
 8016572:	46c0      	nop			@ (mov r8, r8)
 8016574:	40021000 	.word	0x40021000
 8016578:	08026700 	.word	0x08026700

0801657c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8016580:	f7ff ffdc 	bl	801653c <HAL_RCC_GetHCLKFreq>
 8016584:	0001      	movs	r1, r0
 8016586:	4b06      	ldr	r3, [pc, #24]	@ (80165a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016588:	68db      	ldr	r3, [r3, #12]
 801658a:	0adb      	lsrs	r3, r3, #11
 801658c:	2207      	movs	r2, #7
 801658e:	4013      	ands	r3, r2
 8016590:	4a04      	ldr	r2, [pc, #16]	@ (80165a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8016592:	5cd3      	ldrb	r3, [r2, r3]
 8016594:	40d9      	lsrs	r1, r3
 8016596:	000b      	movs	r3, r1
}
 8016598:	0018      	movs	r0, r3
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	46c0      	nop			@ (mov r8, r8)
 80165a0:	40021000 	.word	0x40021000
 80165a4:	08026700 	.word	0x08026700

080165a8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b086      	sub	sp, #24
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80165b0:	2017      	movs	r0, #23
 80165b2:	183b      	adds	r3, r7, r0
 80165b4:	2200      	movs	r2, #0
 80165b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	2220      	movs	r2, #32
 80165be:	4013      	ands	r3, r2
 80165c0:	d100      	bne.n	80165c4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80165c2:	e0c7      	b.n	8016754 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80165c4:	4b9b      	ldr	r3, [pc, #620]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80165c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80165c8:	2380      	movs	r3, #128	@ 0x80
 80165ca:	055b      	lsls	r3, r3, #21
 80165cc:	4013      	ands	r3, r2
 80165ce:	d109      	bne.n	80165e4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80165d0:	4b98      	ldr	r3, [pc, #608]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80165d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80165d4:	4b97      	ldr	r3, [pc, #604]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80165d6:	2180      	movs	r1, #128	@ 0x80
 80165d8:	0549      	lsls	r1, r1, #21
 80165da:	430a      	orrs	r2, r1
 80165dc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80165de:	183b      	adds	r3, r7, r0
 80165e0:	2201      	movs	r2, #1
 80165e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80165e4:	4b94      	ldr	r3, [pc, #592]	@ (8016838 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80165e6:	681a      	ldr	r2, [r3, #0]
 80165e8:	2380      	movs	r3, #128	@ 0x80
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	4013      	ands	r3, r2
 80165ee:	d11a      	bne.n	8016626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80165f0:	4b91      	ldr	r3, [pc, #580]	@ (8016838 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	4b90      	ldr	r3, [pc, #576]	@ (8016838 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80165f6:	2180      	movs	r1, #128	@ 0x80
 80165f8:	0049      	lsls	r1, r1, #1
 80165fa:	430a      	orrs	r2, r1
 80165fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80165fe:	f7f9 f8ab 	bl	800f758 <HAL_GetTick>
 8016602:	0003      	movs	r3, r0
 8016604:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016606:	e008      	b.n	801661a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016608:	f7f9 f8a6 	bl	800f758 <HAL_GetTick>
 801660c:	0002      	movs	r2, r0
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	1ad3      	subs	r3, r2, r3
 8016612:	2b64      	cmp	r3, #100	@ 0x64
 8016614:	d901      	bls.n	801661a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8016616:	2303      	movs	r3, #3
 8016618:	e107      	b.n	801682a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801661a:	4b87      	ldr	r3, [pc, #540]	@ (8016838 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	2380      	movs	r3, #128	@ 0x80
 8016620:	005b      	lsls	r3, r3, #1
 8016622:	4013      	ands	r3, r2
 8016624:	d0f0      	beq.n	8016608 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8016626:	4b83      	ldr	r3, [pc, #524]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016628:	681a      	ldr	r2, [r3, #0]
 801662a:	23c0      	movs	r3, #192	@ 0xc0
 801662c:	039b      	lsls	r3, r3, #14
 801662e:	4013      	ands	r3, r2
 8016630:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	685a      	ldr	r2, [r3, #4]
 8016636:	23c0      	movs	r3, #192	@ 0xc0
 8016638:	039b      	lsls	r3, r3, #14
 801663a:	4013      	ands	r3, r2
 801663c:	68fa      	ldr	r2, [r7, #12]
 801663e:	429a      	cmp	r2, r3
 8016640:	d013      	beq.n	801666a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	685a      	ldr	r2, [r3, #4]
 8016646:	23c0      	movs	r3, #192	@ 0xc0
 8016648:	029b      	lsls	r3, r3, #10
 801664a:	401a      	ands	r2, r3
 801664c:	23c0      	movs	r3, #192	@ 0xc0
 801664e:	029b      	lsls	r3, r3, #10
 8016650:	429a      	cmp	r2, r3
 8016652:	d10a      	bne.n	801666a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016654:	4b77      	ldr	r3, [pc, #476]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016656:	681a      	ldr	r2, [r3, #0]
 8016658:	2380      	movs	r3, #128	@ 0x80
 801665a:	029b      	lsls	r3, r3, #10
 801665c:	401a      	ands	r2, r3
 801665e:	2380      	movs	r3, #128	@ 0x80
 8016660:	029b      	lsls	r3, r3, #10
 8016662:	429a      	cmp	r2, r3
 8016664:	d101      	bne.n	801666a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8016666:	2301      	movs	r3, #1
 8016668:	e0df      	b.n	801682a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801666a:	4b72      	ldr	r3, [pc, #456]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801666c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801666e:	23c0      	movs	r3, #192	@ 0xc0
 8016670:	029b      	lsls	r3, r3, #10
 8016672:	4013      	ands	r3, r2
 8016674:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d03b      	beq.n	80166f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	685a      	ldr	r2, [r3, #4]
 8016680:	23c0      	movs	r3, #192	@ 0xc0
 8016682:	029b      	lsls	r3, r3, #10
 8016684:	4013      	ands	r3, r2
 8016686:	68fa      	ldr	r2, [r7, #12]
 8016688:	429a      	cmp	r2, r3
 801668a:	d033      	beq.n	80166f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	2220      	movs	r2, #32
 8016692:	4013      	ands	r3, r2
 8016694:	d02e      	beq.n	80166f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8016696:	4b67      	ldr	r3, [pc, #412]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801669a:	4a68      	ldr	r2, [pc, #416]	@ (801683c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801669c:	4013      	ands	r3, r2
 801669e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80166a0:	4b64      	ldr	r3, [pc, #400]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80166a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80166a4:	4b63      	ldr	r3, [pc, #396]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80166a6:	2180      	movs	r1, #128	@ 0x80
 80166a8:	0309      	lsls	r1, r1, #12
 80166aa:	430a      	orrs	r2, r1
 80166ac:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80166ae:	4b61      	ldr	r3, [pc, #388]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80166b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80166b2:	4b60      	ldr	r3, [pc, #384]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80166b4:	4962      	ldr	r1, [pc, #392]	@ (8016840 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80166b6:	400a      	ands	r2, r1
 80166b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80166ba:	4b5e      	ldr	r3, [pc, #376]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80166bc:	68fa      	ldr	r2, [r7, #12]
 80166be:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80166c0:	68fa      	ldr	r2, [r7, #12]
 80166c2:	2380      	movs	r3, #128	@ 0x80
 80166c4:	005b      	lsls	r3, r3, #1
 80166c6:	4013      	ands	r3, r2
 80166c8:	d014      	beq.n	80166f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80166ca:	f7f9 f845 	bl	800f758 <HAL_GetTick>
 80166ce:	0003      	movs	r3, r0
 80166d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80166d2:	e009      	b.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80166d4:	f7f9 f840 	bl	800f758 <HAL_GetTick>
 80166d8:	0002      	movs	r2, r0
 80166da:	693b      	ldr	r3, [r7, #16]
 80166dc:	1ad3      	subs	r3, r2, r3
 80166de:	4a59      	ldr	r2, [pc, #356]	@ (8016844 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80166e0:	4293      	cmp	r3, r2
 80166e2:	d901      	bls.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80166e4:	2303      	movs	r3, #3
 80166e6:	e0a0      	b.n	801682a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80166e8:	4b52      	ldr	r3, [pc, #328]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80166ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80166ec:	2380      	movs	r3, #128	@ 0x80
 80166ee:	009b      	lsls	r3, r3, #2
 80166f0:	4013      	ands	r3, r2
 80166f2:	d0ef      	beq.n	80166d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2220      	movs	r2, #32
 80166fa:	4013      	ands	r3, r2
 80166fc:	d01f      	beq.n	801673e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	685a      	ldr	r2, [r3, #4]
 8016702:	23c0      	movs	r3, #192	@ 0xc0
 8016704:	029b      	lsls	r3, r3, #10
 8016706:	401a      	ands	r2, r3
 8016708:	23c0      	movs	r3, #192	@ 0xc0
 801670a:	029b      	lsls	r3, r3, #10
 801670c:	429a      	cmp	r2, r3
 801670e:	d10c      	bne.n	801672a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8016710:	4b48      	ldr	r3, [pc, #288]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	4a4c      	ldr	r2, [pc, #304]	@ (8016848 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8016716:	4013      	ands	r3, r2
 8016718:	0019      	movs	r1, r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	685a      	ldr	r2, [r3, #4]
 801671e:	23c0      	movs	r3, #192	@ 0xc0
 8016720:	039b      	lsls	r3, r3, #14
 8016722:	401a      	ands	r2, r3
 8016724:	4b43      	ldr	r3, [pc, #268]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016726:	430a      	orrs	r2, r1
 8016728:	601a      	str	r2, [r3, #0]
 801672a:	4b42      	ldr	r3, [pc, #264]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801672c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	685a      	ldr	r2, [r3, #4]
 8016732:	23c0      	movs	r3, #192	@ 0xc0
 8016734:	029b      	lsls	r3, r3, #10
 8016736:	401a      	ands	r2, r3
 8016738:	4b3e      	ldr	r3, [pc, #248]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801673a:	430a      	orrs	r2, r1
 801673c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801673e:	2317      	movs	r3, #23
 8016740:	18fb      	adds	r3, r7, r3
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	2b01      	cmp	r3, #1
 8016746:	d105      	bne.n	8016754 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016748:	4b3a      	ldr	r3, [pc, #232]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801674a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801674c:	4b39      	ldr	r3, [pc, #228]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801674e:	493f      	ldr	r1, [pc, #252]	@ (801684c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8016750:	400a      	ands	r2, r1
 8016752:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2201      	movs	r2, #1
 801675a:	4013      	ands	r3, r2
 801675c:	d009      	beq.n	8016772 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801675e:	4b35      	ldr	r3, [pc, #212]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016762:	2203      	movs	r2, #3
 8016764:	4393      	bics	r3, r2
 8016766:	0019      	movs	r1, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	689a      	ldr	r2, [r3, #8]
 801676c:	4b31      	ldr	r3, [pc, #196]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801676e:	430a      	orrs	r2, r1
 8016770:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	2202      	movs	r2, #2
 8016778:	4013      	ands	r3, r2
 801677a:	d009      	beq.n	8016790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801677c:	4b2d      	ldr	r3, [pc, #180]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801677e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016780:	220c      	movs	r2, #12
 8016782:	4393      	bics	r3, r2
 8016784:	0019      	movs	r1, r3
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	68da      	ldr	r2, [r3, #12]
 801678a:	4b2a      	ldr	r3, [pc, #168]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801678c:	430a      	orrs	r2, r1
 801678e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	2204      	movs	r2, #4
 8016796:	4013      	ands	r3, r2
 8016798:	d009      	beq.n	80167ae <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801679a:	4b26      	ldr	r3, [pc, #152]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801679e:	4a2c      	ldr	r2, [pc, #176]	@ (8016850 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80167a0:	4013      	ands	r3, r2
 80167a2:	0019      	movs	r1, r3
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	691a      	ldr	r2, [r3, #16]
 80167a8:	4b22      	ldr	r3, [pc, #136]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167aa:	430a      	orrs	r2, r1
 80167ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2208      	movs	r2, #8
 80167b4:	4013      	ands	r3, r2
 80167b6:	d009      	beq.n	80167cc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80167b8:	4b1e      	ldr	r3, [pc, #120]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80167bc:	4a25      	ldr	r2, [pc, #148]	@ (8016854 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80167be:	4013      	ands	r3, r2
 80167c0:	0019      	movs	r1, r3
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	695a      	ldr	r2, [r3, #20]
 80167c6:	4b1b      	ldr	r3, [pc, #108]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167c8:	430a      	orrs	r2, r1
 80167ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	681a      	ldr	r2, [r3, #0]
 80167d0:	2380      	movs	r3, #128	@ 0x80
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	4013      	ands	r3, r2
 80167d6:	d009      	beq.n	80167ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80167d8:	4b16      	ldr	r3, [pc, #88]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80167dc:	4a17      	ldr	r2, [pc, #92]	@ (801683c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80167de:	4013      	ands	r3, r2
 80167e0:	0019      	movs	r1, r3
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	699a      	ldr	r2, [r3, #24]
 80167e6:	4b13      	ldr	r3, [pc, #76]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167e8:	430a      	orrs	r2, r1
 80167ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2240      	movs	r2, #64	@ 0x40
 80167f2:	4013      	ands	r3, r2
 80167f4:	d009      	beq.n	801680a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80167f6:	4b0f      	ldr	r3, [pc, #60]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80167f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80167fa:	4a17      	ldr	r2, [pc, #92]	@ (8016858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80167fc:	4013      	ands	r3, r2
 80167fe:	0019      	movs	r1, r3
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	6a1a      	ldr	r2, [r3, #32]
 8016804:	4b0b      	ldr	r3, [pc, #44]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016806:	430a      	orrs	r2, r1
 8016808:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	2280      	movs	r2, #128	@ 0x80
 8016810:	4013      	ands	r3, r2
 8016812:	d009      	beq.n	8016828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8016814:	4b07      	ldr	r3, [pc, #28]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016818:	4a10      	ldr	r2, [pc, #64]	@ (801685c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801681a:	4013      	ands	r3, r2
 801681c:	0019      	movs	r1, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	69da      	ldr	r2, [r3, #28]
 8016822:	4b04      	ldr	r3, [pc, #16]	@ (8016834 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016824:	430a      	orrs	r2, r1
 8016826:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8016828:	2300      	movs	r3, #0
}
 801682a:	0018      	movs	r0, r3
 801682c:	46bd      	mov	sp, r7
 801682e:	b006      	add	sp, #24
 8016830:	bd80      	pop	{r7, pc}
 8016832:	46c0      	nop			@ (mov r8, r8)
 8016834:	40021000 	.word	0x40021000
 8016838:	40007000 	.word	0x40007000
 801683c:	fffcffff 	.word	0xfffcffff
 8016840:	fff7ffff 	.word	0xfff7ffff
 8016844:	00001388 	.word	0x00001388
 8016848:	ffcfffff 	.word	0xffcfffff
 801684c:	efffffff 	.word	0xefffffff
 8016850:	fffff3ff 	.word	0xfffff3ff
 8016854:	ffffcfff 	.word	0xffffcfff
 8016858:	fbffffff 	.word	0xfbffffff
 801685c:	fff3ffff 	.word	0xfff3ffff

08016860 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8016860:	b5b0      	push	{r4, r5, r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8016868:	230f      	movs	r3, #15
 801686a:	18fb      	adds	r3, r7, r3
 801686c:	2201      	movs	r2, #1
 801686e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d101      	bne.n	801687a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8016876:	2301      	movs	r3, #1
 8016878:	e088      	b.n	801698c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2221      	movs	r2, #33	@ 0x21
 801687e:	5c9b      	ldrb	r3, [r3, r2]
 8016880:	b2db      	uxtb	r3, r3
 8016882:	2b00      	cmp	r3, #0
 8016884:	d107      	bne.n	8016896 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2220      	movs	r2, #32
 801688a:	2100      	movs	r1, #0
 801688c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	0018      	movs	r0, r3
 8016892:	f7f3 f84b 	bl	800992c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2221      	movs	r2, #33	@ 0x21
 801689a:	2102      	movs	r1, #2
 801689c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	68db      	ldr	r3, [r3, #12]
 80168a4:	2210      	movs	r2, #16
 80168a6:	4013      	ands	r3, r2
 80168a8:	2b10      	cmp	r3, #16
 80168aa:	d05f      	beq.n	801696c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	22ca      	movs	r2, #202	@ 0xca
 80168b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	2253      	movs	r2, #83	@ 0x53
 80168ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80168bc:	250f      	movs	r5, #15
 80168be:	197c      	adds	r4, r7, r5
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	0018      	movs	r0, r3
 80168c4:	f000 fa7c 	bl	8016dc0 <RTC_EnterInitMode>
 80168c8:	0003      	movs	r3, r0
 80168ca:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80168cc:	0028      	movs	r0, r5
 80168ce:	183b      	adds	r3, r7, r0
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d12c      	bne.n	8016930 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	689a      	ldr	r2, [r3, #8]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	492c      	ldr	r1, [pc, #176]	@ (8016994 <HAL_RTC_Init+0x134>)
 80168e2:	400a      	ands	r2, r1
 80168e4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	6899      	ldr	r1, [r3, #8]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	685a      	ldr	r2, [r3, #4]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	691b      	ldr	r3, [r3, #16]
 80168f4:	431a      	orrs	r2, r3
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	699b      	ldr	r3, [r3, #24]
 80168fa:	431a      	orrs	r2, r3
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	430a      	orrs	r2, r1
 8016902:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	68d2      	ldr	r2, [r2, #12]
 801690c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	6919      	ldr	r1, [r3, #16]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	689b      	ldr	r3, [r3, #8]
 8016918:	041a      	lsls	r2, r3, #16
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	430a      	orrs	r2, r1
 8016920:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8016922:	183c      	adds	r4, r7, r0
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	0018      	movs	r0, r3
 8016928:	f000 fa8e 	bl	8016e48 <RTC_ExitInitMode>
 801692c:	0003      	movs	r3, r0
 801692e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8016930:	230f      	movs	r3, #15
 8016932:	18fb      	adds	r3, r7, r3
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d113      	bne.n	8016962 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2103      	movs	r1, #3
 8016946:	438a      	bics	r2, r1
 8016948:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	69da      	ldr	r2, [r3, #28]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	695b      	ldr	r3, [r3, #20]
 8016958:	431a      	orrs	r2, r3
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	430a      	orrs	r2, r1
 8016960:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	22ff      	movs	r2, #255	@ 0xff
 8016968:	625a      	str	r2, [r3, #36]	@ 0x24
 801696a:	e003      	b.n	8016974 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801696c:	230f      	movs	r3, #15
 801696e:	18fb      	adds	r3, r7, r3
 8016970:	2200      	movs	r2, #0
 8016972:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8016974:	230f      	movs	r3, #15
 8016976:	18fb      	adds	r3, r7, r3
 8016978:	781b      	ldrb	r3, [r3, #0]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d103      	bne.n	8016986 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2221      	movs	r2, #33	@ 0x21
 8016982:	2101      	movs	r1, #1
 8016984:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8016986:	230f      	movs	r3, #15
 8016988:	18fb      	adds	r3, r7, r3
 801698a:	781b      	ldrb	r3, [r3, #0]
}
 801698c:	0018      	movs	r0, r3
 801698e:	46bd      	mov	sp, r7
 8016990:	b004      	add	sp, #16
 8016992:	bdb0      	pop	{r4, r5, r7, pc}
 8016994:	ff8fffbf 	.word	0xff8fffbf

08016998 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016998:	b5b0      	push	{r4, r5, r7, lr}
 801699a:	b086      	sub	sp, #24
 801699c:	af00      	add	r7, sp, #0
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80169a4:	2300      	movs	r3, #0
 80169a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2220      	movs	r2, #32
 80169ac:	5c9b      	ldrb	r3, [r3, r2]
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	d101      	bne.n	80169b6 <HAL_RTC_SetTime+0x1e>
 80169b2:	2302      	movs	r3, #2
 80169b4:	e092      	b.n	8016adc <HAL_RTC_SetTime+0x144>
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2220      	movs	r2, #32
 80169ba:	2101      	movs	r1, #1
 80169bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2221      	movs	r2, #33	@ 0x21
 80169c2:	2102      	movs	r1, #2
 80169c4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d125      	bne.n	8016a18 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	689b      	ldr	r3, [r3, #8]
 80169d2:	2240      	movs	r2, #64	@ 0x40
 80169d4:	4013      	ands	r3, r2
 80169d6:	d102      	bne.n	80169de <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	2200      	movs	r2, #0
 80169dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	0018      	movs	r0, r3
 80169e4:	f000 fa5a 	bl	8016e9c <RTC_ByteToBcd2>
 80169e8:	0003      	movs	r3, r0
 80169ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	785b      	ldrb	r3, [r3, #1]
 80169f0:	0018      	movs	r0, r3
 80169f2:	f000 fa53 	bl	8016e9c <RTC_ByteToBcd2>
 80169f6:	0003      	movs	r3, r0
 80169f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80169fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	789b      	ldrb	r3, [r3, #2]
 8016a00:	0018      	movs	r0, r3
 8016a02:	f000 fa4b 	bl	8016e9c <RTC_ByteToBcd2>
 8016a06:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016a08:	0022      	movs	r2, r4
 8016a0a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	78db      	ldrb	r3, [r3, #3]
 8016a10:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016a12:	4313      	orrs	r3, r2
 8016a14:	617b      	str	r3, [r7, #20]
 8016a16:	e017      	b.n	8016a48 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	689b      	ldr	r3, [r3, #8]
 8016a1e:	2240      	movs	r2, #64	@ 0x40
 8016a20:	4013      	ands	r3, r2
 8016a22:	d102      	bne.n	8016a2a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016a24:	68bb      	ldr	r3, [r7, #8]
 8016a26:	2200      	movs	r2, #0
 8016a28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	785b      	ldrb	r3, [r3, #1]
 8016a34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016a36:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8016a38:	68ba      	ldr	r2, [r7, #8]
 8016a3a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016a3c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8016a3e:	68bb      	ldr	r3, [r7, #8]
 8016a40:	78db      	ldrb	r3, [r3, #3]
 8016a42:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016a44:	4313      	orrs	r3, r2
 8016a46:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	22ca      	movs	r2, #202	@ 0xca
 8016a4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	2253      	movs	r2, #83	@ 0x53
 8016a56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016a58:	2513      	movs	r5, #19
 8016a5a:	197c      	adds	r4, r7, r5
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	0018      	movs	r0, r3
 8016a60:	f000 f9ae 	bl	8016dc0 <RTC_EnterInitMode>
 8016a64:	0003      	movs	r3, r0
 8016a66:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016a68:	0028      	movs	r0, r5
 8016a6a:	183b      	adds	r3, r7, r0
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d120      	bne.n	8016ab4 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	697a      	ldr	r2, [r7, #20]
 8016a78:	491a      	ldr	r1, [pc, #104]	@ (8016ae4 <HAL_RTC_SetTime+0x14c>)
 8016a7a:	400a      	ands	r2, r1
 8016a7c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	689a      	ldr	r2, [r3, #8]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	4917      	ldr	r1, [pc, #92]	@ (8016ae8 <HAL_RTC_SetTime+0x150>)
 8016a8a:	400a      	ands	r2, r1
 8016a8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	6899      	ldr	r1, [r3, #8]
 8016a94:	68bb      	ldr	r3, [r7, #8]
 8016a96:	68da      	ldr	r2, [r3, #12]
 8016a98:	68bb      	ldr	r3, [r7, #8]
 8016a9a:	691b      	ldr	r3, [r3, #16]
 8016a9c:	431a      	orrs	r2, r3
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	430a      	orrs	r2, r1
 8016aa4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016aa6:	183c      	adds	r4, r7, r0
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	0018      	movs	r0, r3
 8016aac:	f000 f9cc 	bl	8016e48 <RTC_ExitInitMode>
 8016ab0:	0003      	movs	r3, r0
 8016ab2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016ab4:	2313      	movs	r3, #19
 8016ab6:	18fb      	adds	r3, r7, r3
 8016ab8:	781b      	ldrb	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d103      	bne.n	8016ac6 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	2221      	movs	r2, #33	@ 0x21
 8016ac2:	2101      	movs	r1, #1
 8016ac4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	22ff      	movs	r2, #255	@ 0xff
 8016acc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2220      	movs	r2, #32
 8016ad2:	2100      	movs	r1, #0
 8016ad4:	5499      	strb	r1, [r3, r2]

  return status;
 8016ad6:	2313      	movs	r3, #19
 8016ad8:	18fb      	adds	r3, r7, r3
 8016ada:	781b      	ldrb	r3, [r3, #0]
}
 8016adc:	0018      	movs	r0, r3
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	b006      	add	sp, #24
 8016ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8016ae4:	007f7f7f 	.word	0x007f7f7f
 8016ae8:	fffbffff 	.word	0xfffbffff

08016aec <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b086      	sub	sp, #24
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	60f8      	str	r0, [r7, #12]
 8016af4:	60b9      	str	r1, [r7, #8]
 8016af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016af8:	2300      	movs	r3, #0
 8016afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	691b      	ldr	r3, [r3, #16]
 8016b0c:	045b      	lsls	r3, r3, #17
 8016b0e:	0c5a      	lsrs	r2, r3, #17
 8016b10:	68bb      	ldr	r3, [r7, #8]
 8016b12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	4a22      	ldr	r2, [pc, #136]	@ (8016ba4 <HAL_RTC_GetTime+0xb8>)
 8016b1c:	4013      	ands	r3, r2
 8016b1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	0c1b      	lsrs	r3, r3, #16
 8016b24:	b2db      	uxtb	r3, r3
 8016b26:	223f      	movs	r2, #63	@ 0x3f
 8016b28:	4013      	ands	r3, r2
 8016b2a:	b2da      	uxtb	r2, r3
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016b30:	697b      	ldr	r3, [r7, #20]
 8016b32:	0a1b      	lsrs	r3, r3, #8
 8016b34:	b2db      	uxtb	r3, r3
 8016b36:	227f      	movs	r2, #127	@ 0x7f
 8016b38:	4013      	ands	r3, r2
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	b2db      	uxtb	r3, r3
 8016b44:	227f      	movs	r2, #127	@ 0x7f
 8016b46:	4013      	ands	r3, r2
 8016b48:	b2da      	uxtb	r2, r3
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8016b4e:	697b      	ldr	r3, [r7, #20]
 8016b50:	0d9b      	lsrs	r3, r3, #22
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	2201      	movs	r2, #1
 8016b56:	4013      	ands	r3, r2
 8016b58:	b2da      	uxtb	r2, r3
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d11a      	bne.n	8016b9a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016b64:	68bb      	ldr	r3, [r7, #8]
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	0018      	movs	r0, r3
 8016b6a:	f000 f9b8 	bl	8016ede <RTC_Bcd2ToByte>
 8016b6e:	0003      	movs	r3, r0
 8016b70:	001a      	movs	r2, r3
 8016b72:	68bb      	ldr	r3, [r7, #8]
 8016b74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	785b      	ldrb	r3, [r3, #1]
 8016b7a:	0018      	movs	r0, r3
 8016b7c:	f000 f9af 	bl	8016ede <RTC_Bcd2ToByte>
 8016b80:	0003      	movs	r3, r0
 8016b82:	001a      	movs	r2, r3
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	789b      	ldrb	r3, [r3, #2]
 8016b8c:	0018      	movs	r0, r3
 8016b8e:	f000 f9a6 	bl	8016ede <RTC_Bcd2ToByte>
 8016b92:	0003      	movs	r3, r0
 8016b94:	001a      	movs	r2, r3
 8016b96:	68bb      	ldr	r3, [r7, #8]
 8016b98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016b9a:	2300      	movs	r3, #0
}
 8016b9c:	0018      	movs	r0, r3
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	b006      	add	sp, #24
 8016ba2:	bd80      	pop	{r7, pc}
 8016ba4:	007f7f7f 	.word	0x007f7f7f

08016ba8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016ba8:	b5b0      	push	{r4, r5, r7, lr}
 8016baa:	b086      	sub	sp, #24
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	60f8      	str	r0, [r7, #12]
 8016bb0:	60b9      	str	r1, [r7, #8]
 8016bb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	2220      	movs	r2, #32
 8016bbc:	5c9b      	ldrb	r3, [r3, r2]
 8016bbe:	2b01      	cmp	r3, #1
 8016bc0:	d101      	bne.n	8016bc6 <HAL_RTC_SetDate+0x1e>
 8016bc2:	2302      	movs	r3, #2
 8016bc4:	e07e      	b.n	8016cc4 <HAL_RTC_SetDate+0x11c>
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	2220      	movs	r2, #32
 8016bca:	2101      	movs	r1, #1
 8016bcc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	2221      	movs	r2, #33	@ 0x21
 8016bd2:	2102      	movs	r1, #2
 8016bd4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d10e      	bne.n	8016bfa <HAL_RTC_SetDate+0x52>
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	785b      	ldrb	r3, [r3, #1]
 8016be0:	001a      	movs	r2, r3
 8016be2:	2310      	movs	r3, #16
 8016be4:	4013      	ands	r3, r2
 8016be6:	d008      	beq.n	8016bfa <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	785b      	ldrb	r3, [r3, #1]
 8016bec:	2210      	movs	r2, #16
 8016bee:	4393      	bics	r3, r2
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	330a      	adds	r3, #10
 8016bf4:	b2da      	uxtb	r2, r3
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d11c      	bne.n	8016c3a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	78db      	ldrb	r3, [r3, #3]
 8016c04:	0018      	movs	r0, r3
 8016c06:	f000 f949 	bl	8016e9c <RTC_ByteToBcd2>
 8016c0a:	0003      	movs	r3, r0
 8016c0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	785b      	ldrb	r3, [r3, #1]
 8016c12:	0018      	movs	r0, r3
 8016c14:	f000 f942 	bl	8016e9c <RTC_ByteToBcd2>
 8016c18:	0003      	movs	r3, r0
 8016c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016c1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	789b      	ldrb	r3, [r3, #2]
 8016c22:	0018      	movs	r0, r3
 8016c24:	f000 f93a 	bl	8016e9c <RTC_ByteToBcd2>
 8016c28:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016c2a:	0022      	movs	r2, r4
 8016c2c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016c2e:	68bb      	ldr	r3, [r7, #8]
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016c34:	4313      	orrs	r3, r2
 8016c36:	617b      	str	r3, [r7, #20]
 8016c38:	e00e      	b.n	8016c58 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	78db      	ldrb	r3, [r3, #3]
 8016c3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	785b      	ldrb	r3, [r3, #1]
 8016c44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016c46:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016c48:	68ba      	ldr	r2, [r7, #8]
 8016c4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016c4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016c4e:	68bb      	ldr	r3, [r7, #8]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016c54:	4313      	orrs	r3, r2
 8016c56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	22ca      	movs	r2, #202	@ 0xca
 8016c5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	2253      	movs	r2, #83	@ 0x53
 8016c66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8016c68:	2513      	movs	r5, #19
 8016c6a:	197c      	adds	r4, r7, r5
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	0018      	movs	r0, r3
 8016c70:	f000 f8a6 	bl	8016dc0 <RTC_EnterInitMode>
 8016c74:	0003      	movs	r3, r0
 8016c76:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016c78:	0028      	movs	r0, r5
 8016c7a:	183b      	adds	r3, r7, r0
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d10c      	bne.n	8016c9c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	697a      	ldr	r2, [r7, #20]
 8016c88:	4910      	ldr	r1, [pc, #64]	@ (8016ccc <HAL_RTC_SetDate+0x124>)
 8016c8a:	400a      	ands	r2, r1
 8016c8c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016c8e:	183c      	adds	r4, r7, r0
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	0018      	movs	r0, r3
 8016c94:	f000 f8d8 	bl	8016e48 <RTC_ExitInitMode>
 8016c98:	0003      	movs	r3, r0
 8016c9a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016c9c:	2313      	movs	r3, #19
 8016c9e:	18fb      	adds	r3, r7, r3
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d103      	bne.n	8016cae <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2221      	movs	r2, #33	@ 0x21
 8016caa:	2101      	movs	r1, #1
 8016cac:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	22ff      	movs	r2, #255	@ 0xff
 8016cb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	2220      	movs	r2, #32
 8016cba:	2100      	movs	r1, #0
 8016cbc:	5499      	strb	r1, [r3, r2]

  return status;
 8016cbe:	2313      	movs	r3, #19
 8016cc0:	18fb      	adds	r3, r7, r3
 8016cc2:	781b      	ldrb	r3, [r3, #0]
}
 8016cc4:	0018      	movs	r0, r3
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	b006      	add	sp, #24
 8016cca:	bdb0      	pop	{r4, r5, r7, pc}
 8016ccc:	00ffff3f 	.word	0x00ffff3f

08016cd0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b086      	sub	sp, #24
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	60f8      	str	r0, [r7, #12]
 8016cd8:	60b9      	str	r1, [r7, #8]
 8016cda:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	4a21      	ldr	r2, [pc, #132]	@ (8016d6c <HAL_RTC_GetDate+0x9c>)
 8016ce8:	4013      	ands	r3, r2
 8016cea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	0c1b      	lsrs	r3, r3, #16
 8016cf0:	b2da      	uxtb	r2, r3
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8016cf6:	697b      	ldr	r3, [r7, #20]
 8016cf8:	0a1b      	lsrs	r3, r3, #8
 8016cfa:	b2db      	uxtb	r3, r3
 8016cfc:	221f      	movs	r2, #31
 8016cfe:	4013      	ands	r3, r2
 8016d00:	b2da      	uxtb	r2, r3
 8016d02:	68bb      	ldr	r3, [r7, #8]
 8016d04:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	b2db      	uxtb	r3, r3
 8016d0a:	223f      	movs	r2, #63	@ 0x3f
 8016d0c:	4013      	ands	r3, r2
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	0b5b      	lsrs	r3, r3, #13
 8016d18:	b2db      	uxtb	r3, r3
 8016d1a:	2207      	movs	r2, #7
 8016d1c:	4013      	ands	r3, r2
 8016d1e:	b2da      	uxtb	r2, r3
 8016d20:	68bb      	ldr	r3, [r7, #8]
 8016d22:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d11a      	bne.n	8016d60 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	78db      	ldrb	r3, [r3, #3]
 8016d2e:	0018      	movs	r0, r3
 8016d30:	f000 f8d5 	bl	8016ede <RTC_Bcd2ToByte>
 8016d34:	0003      	movs	r3, r0
 8016d36:	001a      	movs	r2, r3
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	785b      	ldrb	r3, [r3, #1]
 8016d40:	0018      	movs	r0, r3
 8016d42:	f000 f8cc 	bl	8016ede <RTC_Bcd2ToByte>
 8016d46:	0003      	movs	r3, r0
 8016d48:	001a      	movs	r2, r3
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016d4e:	68bb      	ldr	r3, [r7, #8]
 8016d50:	789b      	ldrb	r3, [r3, #2]
 8016d52:	0018      	movs	r0, r3
 8016d54:	f000 f8c3 	bl	8016ede <RTC_Bcd2ToByte>
 8016d58:	0003      	movs	r3, r0
 8016d5a:	001a      	movs	r2, r3
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8016d60:	2300      	movs	r3, #0
}
 8016d62:	0018      	movs	r0, r3
 8016d64:	46bd      	mov	sp, r7
 8016d66:	b006      	add	sp, #24
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	46c0      	nop			@ (mov r8, r8)
 8016d6c:	00ffff3f 	.word	0x00ffff3f

08016d70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b084      	sub	sp, #16
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4a0e      	ldr	r2, [pc, #56]	@ (8016dbc <HAL_RTC_WaitForSynchro+0x4c>)
 8016d82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016d84:	f7f8 fce8 	bl	800f758 <HAL_GetTick>
 8016d88:	0003      	movs	r3, r0
 8016d8a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016d8c:	e00a      	b.n	8016da4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016d8e:	f7f8 fce3 	bl	800f758 <HAL_GetTick>
 8016d92:	0002      	movs	r2, r0
 8016d94:	68fb      	ldr	r3, [r7, #12]
 8016d96:	1ad2      	subs	r2, r2, r3
 8016d98:	23fa      	movs	r3, #250	@ 0xfa
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	429a      	cmp	r2, r3
 8016d9e:	d901      	bls.n	8016da4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8016da0:	2303      	movs	r3, #3
 8016da2:	e006      	b.n	8016db2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	68db      	ldr	r3, [r3, #12]
 8016daa:	2220      	movs	r2, #32
 8016dac:	4013      	ands	r3, r2
 8016dae:	d0ee      	beq.n	8016d8e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8016db0:	2300      	movs	r3, #0
}
 8016db2:	0018      	movs	r0, r3
 8016db4:	46bd      	mov	sp, r7
 8016db6:	b004      	add	sp, #16
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	46c0      	nop			@ (mov r8, r8)
 8016dbc:	0001ff5f 	.word	0x0001ff5f

08016dc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016dcc:	230f      	movs	r3, #15
 8016dce:	18fb      	adds	r3, r7, r3
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	68db      	ldr	r3, [r3, #12]
 8016dda:	2240      	movs	r2, #64	@ 0x40
 8016ddc:	4013      	ands	r3, r2
 8016dde:	d12c      	bne.n	8016e3a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	68da      	ldr	r2, [r3, #12]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	2180      	movs	r1, #128	@ 0x80
 8016dec:	430a      	orrs	r2, r1
 8016dee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016df0:	f7f8 fcb2 	bl	800f758 <HAL_GetTick>
 8016df4:	0003      	movs	r3, r0
 8016df6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016df8:	e014      	b.n	8016e24 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016dfa:	f7f8 fcad 	bl	800f758 <HAL_GetTick>
 8016dfe:	0002      	movs	r2, r0
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	1ad2      	subs	r2, r2, r3
 8016e04:	200f      	movs	r0, #15
 8016e06:	183b      	adds	r3, r7, r0
 8016e08:	1839      	adds	r1, r7, r0
 8016e0a:	7809      	ldrb	r1, [r1, #0]
 8016e0c:	7019      	strb	r1, [r3, #0]
 8016e0e:	23fa      	movs	r3, #250	@ 0xfa
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d906      	bls.n	8016e24 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2221      	movs	r2, #33	@ 0x21
 8016e1a:	2104      	movs	r1, #4
 8016e1c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8016e1e:	183b      	adds	r3, r7, r0
 8016e20:	2201      	movs	r2, #1
 8016e22:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	68db      	ldr	r3, [r3, #12]
 8016e2a:	2240      	movs	r2, #64	@ 0x40
 8016e2c:	4013      	ands	r3, r2
 8016e2e:	d104      	bne.n	8016e3a <RTC_EnterInitMode+0x7a>
 8016e30:	230f      	movs	r3, #15
 8016e32:	18fb      	adds	r3, r7, r3
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	2b01      	cmp	r3, #1
 8016e38:	d1df      	bne.n	8016dfa <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016e3a:	230f      	movs	r3, #15
 8016e3c:	18fb      	adds	r3, r7, r3
 8016e3e:	781b      	ldrb	r3, [r3, #0]
}
 8016e40:	0018      	movs	r0, r3
 8016e42:	46bd      	mov	sp, r7
 8016e44:	b004      	add	sp, #16
 8016e46:	bd80      	pop	{r7, pc}

08016e48 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016e48:	b590      	push	{r4, r7, lr}
 8016e4a:	b085      	sub	sp, #20
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016e50:	240f      	movs	r4, #15
 8016e52:	193b      	adds	r3, r7, r4
 8016e54:	2200      	movs	r2, #0
 8016e56:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	68da      	ldr	r2, [r3, #12]
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	2180      	movs	r1, #128	@ 0x80
 8016e64:	438a      	bics	r2, r1
 8016e66:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	689b      	ldr	r3, [r3, #8]
 8016e6e:	2220      	movs	r2, #32
 8016e70:	4013      	ands	r3, r2
 8016e72:	d10c      	bne.n	8016e8e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	0018      	movs	r0, r3
 8016e78:	f7ff ff7a 	bl	8016d70 <HAL_RTC_WaitForSynchro>
 8016e7c:	1e03      	subs	r3, r0, #0
 8016e7e:	d006      	beq.n	8016e8e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2221      	movs	r2, #33	@ 0x21
 8016e84:	2104      	movs	r1, #4
 8016e86:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016e88:	193b      	adds	r3, r7, r4
 8016e8a:	2201      	movs	r2, #1
 8016e8c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8016e8e:	230f      	movs	r3, #15
 8016e90:	18fb      	adds	r3, r7, r3
 8016e92:	781b      	ldrb	r3, [r3, #0]
}
 8016e94:	0018      	movs	r0, r3
 8016e96:	46bd      	mov	sp, r7
 8016e98:	b005      	add	sp, #20
 8016e9a:	bd90      	pop	{r4, r7, pc}

08016e9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	0002      	movs	r2, r0
 8016ea4:	1dfb      	adds	r3, r7, #7
 8016ea6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8016eac:	e007      	b.n	8016ebe <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8016eb4:	1dfb      	adds	r3, r7, #7
 8016eb6:	1dfa      	adds	r2, r7, #7
 8016eb8:	7812      	ldrb	r2, [r2, #0]
 8016eba:	3a0a      	subs	r2, #10
 8016ebc:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8016ebe:	1dfb      	adds	r3, r7, #7
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	2b09      	cmp	r3, #9
 8016ec4:	d8f3      	bhi.n	8016eae <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	b2db      	uxtb	r3, r3
 8016eca:	011b      	lsls	r3, r3, #4
 8016ecc:	b2da      	uxtb	r2, r3
 8016ece:	1dfb      	adds	r3, r7, #7
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	4313      	orrs	r3, r2
 8016ed4:	b2db      	uxtb	r3, r3
}
 8016ed6:	0018      	movs	r0, r3
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	b004      	add	sp, #16
 8016edc:	bd80      	pop	{r7, pc}

08016ede <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016ede:	b580      	push	{r7, lr}
 8016ee0:	b084      	sub	sp, #16
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	0002      	movs	r2, r0
 8016ee6:	1dfb      	adds	r3, r7, #7
 8016ee8:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016eea:	2300      	movs	r3, #0
 8016eec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016eee:	1dfb      	adds	r3, r7, #7
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	091b      	lsrs	r3, r3, #4
 8016ef4:	b2db      	uxtb	r3, r3
 8016ef6:	001a      	movs	r2, r3
 8016ef8:	0013      	movs	r3, r2
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	189b      	adds	r3, r3, r2
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	b2da      	uxtb	r2, r3
 8016f06:	1dfb      	adds	r3, r7, #7
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	210f      	movs	r1, #15
 8016f0c:	400b      	ands	r3, r1
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	18d3      	adds	r3, r2, r3
 8016f12:	b2db      	uxtb	r3, r3
}
 8016f14:	0018      	movs	r0, r3
 8016f16:	46bd      	mov	sp, r7
 8016f18:	b004      	add	sp, #16
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b086      	sub	sp, #24
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	60b9      	str	r1, [r7, #8]
 8016f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016f28:	4b64      	ldr	r3, [pc, #400]	@ (80170bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	22fa      	movs	r2, #250	@ 0xfa
 8016f2e:	01d1      	lsls	r1, r2, #7
 8016f30:	0018      	movs	r0, r3
 8016f32:	f7e9 f937 	bl	80001a4 <__udivsi3>
 8016f36:	0003      	movs	r3, r0
 8016f38:	001a      	movs	r2, r3
 8016f3a:	0013      	movs	r3, r2
 8016f3c:	015b      	lsls	r3, r3, #5
 8016f3e:	1a9b      	subs	r3, r3, r2
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	189b      	adds	r3, r3, r2
 8016f44:	00db      	lsls	r3, r3, #3
 8016f46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	2220      	movs	r2, #32
 8016f4c:	5c9b      	ldrb	r3, [r3, r2]
 8016f4e:	2b01      	cmp	r3, #1
 8016f50:	d101      	bne.n	8016f56 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8016f52:	2302      	movs	r3, #2
 8016f54:	e0ad      	b.n	80170b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	2220      	movs	r2, #32
 8016f5a:	2101      	movs	r1, #1
 8016f5c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	2221      	movs	r2, #33	@ 0x21
 8016f62:	2102      	movs	r1, #2
 8016f64:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	22ca      	movs	r2, #202	@ 0xca
 8016f6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	2253      	movs	r2, #83	@ 0x53
 8016f74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	689a      	ldr	r2, [r3, #8]
 8016f7c:	2380      	movs	r3, #128	@ 0x80
 8016f7e:	00db      	lsls	r3, r3, #3
 8016f80:	4013      	ands	r3, r2
 8016f82:	d019      	beq.n	8016fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	3b01      	subs	r3, #1
 8016f88:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d10d      	bne.n	8016fac <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	22ff      	movs	r2, #255	@ 0xff
 8016f96:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2221      	movs	r2, #33	@ 0x21
 8016f9c:	2103      	movs	r1, #3
 8016f9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	2220      	movs	r2, #32
 8016fa4:	2100      	movs	r1, #0
 8016fa6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016fa8:	2303      	movs	r3, #3
 8016faa:	e082      	b.n	80170b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	2204      	movs	r2, #4
 8016fb4:	4013      	ands	r3, r2
 8016fb6:	d1e5      	bne.n	8016f84 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	689a      	ldr	r2, [r3, #8]
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	493f      	ldr	r1, [pc, #252]	@ (80170c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8016fc4:	400a      	ands	r2, r1
 8016fc6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	68db      	ldr	r3, [r3, #12]
 8016fce:	22ff      	movs	r2, #255	@ 0xff
 8016fd0:	401a      	ands	r2, r3
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	493b      	ldr	r1, [pc, #236]	@ (80170c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016fd8:	430a      	orrs	r2, r1
 8016fda:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016fdc:	4b37      	ldr	r3, [pc, #220]	@ (80170bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	22fa      	movs	r2, #250	@ 0xfa
 8016fe2:	01d1      	lsls	r1, r2, #7
 8016fe4:	0018      	movs	r0, r3
 8016fe6:	f7e9 f8dd 	bl	80001a4 <__udivsi3>
 8016fea:	0003      	movs	r3, r0
 8016fec:	001a      	movs	r2, r3
 8016fee:	0013      	movs	r3, r2
 8016ff0:	015b      	lsls	r3, r3, #5
 8016ff2:	1a9b      	subs	r3, r3, r2
 8016ff4:	009b      	lsls	r3, r3, #2
 8016ff6:	189b      	adds	r3, r3, r2
 8016ff8:	00db      	lsls	r3, r3, #3
 8016ffa:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	3b01      	subs	r3, #1
 8017000:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8017002:	697b      	ldr	r3, [r7, #20]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d10d      	bne.n	8017024 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	22ff      	movs	r2, #255	@ 0xff
 801700e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	2221      	movs	r2, #33	@ 0x21
 8017014:	2103      	movs	r1, #3
 8017016:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	2220      	movs	r2, #32
 801701c:	2100      	movs	r1, #0
 801701e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8017020:	2303      	movs	r3, #3
 8017022:	e046      	b.n	80170b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	68db      	ldr	r3, [r3, #12]
 801702a:	2204      	movs	r2, #4
 801702c:	4013      	ands	r3, r2
 801702e:	d0e5      	beq.n	8016ffc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	689a      	ldr	r2, [r3, #8]
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	2107      	movs	r1, #7
 801703c:	438a      	bics	r2, r1
 801703e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	6899      	ldr	r1, [r3, #8]
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	430a      	orrs	r2, r1
 801704e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	68ba      	ldr	r2, [r7, #8]
 8017056:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8017058:	4b1b      	ldr	r3, [pc, #108]	@ (80170c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801705a:	681a      	ldr	r2, [r3, #0]
 801705c:	4b1a      	ldr	r3, [pc, #104]	@ (80170c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801705e:	2180      	movs	r1, #128	@ 0x80
 8017060:	0349      	lsls	r1, r1, #13
 8017062:	430a      	orrs	r2, r1
 8017064:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8017066:	4b18      	ldr	r3, [pc, #96]	@ (80170c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8017068:	689a      	ldr	r2, [r3, #8]
 801706a:	4b17      	ldr	r3, [pc, #92]	@ (80170c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801706c:	2180      	movs	r1, #128	@ 0x80
 801706e:	0349      	lsls	r1, r1, #13
 8017070:	430a      	orrs	r2, r1
 8017072:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	689a      	ldr	r2, [r3, #8]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	2180      	movs	r1, #128	@ 0x80
 8017080:	01c9      	lsls	r1, r1, #7
 8017082:	430a      	orrs	r2, r1
 8017084:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	689a      	ldr	r2, [r3, #8]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	2180      	movs	r1, #128	@ 0x80
 8017092:	00c9      	lsls	r1, r1, #3
 8017094:	430a      	orrs	r2, r1
 8017096:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	22ff      	movs	r2, #255	@ 0xff
 801709e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	2221      	movs	r2, #33	@ 0x21
 80170a4:	2101      	movs	r1, #1
 80170a6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	2220      	movs	r2, #32
 80170ac:	2100      	movs	r1, #0
 80170ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80170b0:	2300      	movs	r3, #0
}
 80170b2:	0018      	movs	r0, r3
 80170b4:	46bd      	mov	sp, r7
 80170b6:	b006      	add	sp, #24
 80170b8:	bd80      	pop	{r7, pc}
 80170ba:	46c0      	nop			@ (mov r8, r8)
 80170bc:	200000d0 	.word	0x200000d0
 80170c0:	fffffbff 	.word	0xfffffbff
 80170c4:	fffffb7f 	.word	0xfffffb7f
 80170c8:	40010400 	.word	0x40010400

080170cc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b084      	sub	sp, #16
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80170d4:	2300      	movs	r3, #0
 80170d6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2220      	movs	r2, #32
 80170dc:	5c9b      	ldrb	r3, [r3, r2]
 80170de:	2b01      	cmp	r3, #1
 80170e0:	d101      	bne.n	80170e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80170e2:	2302      	movs	r3, #2
 80170e4:	e04e      	b.n	8017184 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2220      	movs	r2, #32
 80170ea:	2101      	movs	r1, #1
 80170ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2221      	movs	r2, #33	@ 0x21
 80170f2:	2102      	movs	r1, #2
 80170f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	22ca      	movs	r2, #202	@ 0xca
 80170fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	2253      	movs	r2, #83	@ 0x53
 8017104:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	689a      	ldr	r2, [r3, #8]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	491e      	ldr	r1, [pc, #120]	@ (801718c <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8017112:	400a      	ands	r2, r1
 8017114:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	689a      	ldr	r2, [r3, #8]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	491b      	ldr	r1, [pc, #108]	@ (8017190 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8017122:	400a      	ands	r2, r1
 8017124:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017126:	f7f8 fb17 	bl	800f758 <HAL_GetTick>
 801712a:	0003      	movs	r3, r0
 801712c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801712e:	e016      	b.n	801715e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8017130:	f7f8 fb12 	bl	800f758 <HAL_GetTick>
 8017134:	0002      	movs	r2, r0
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	1ad2      	subs	r2, r2, r3
 801713a:	23fa      	movs	r3, #250	@ 0xfa
 801713c:	009b      	lsls	r3, r3, #2
 801713e:	429a      	cmp	r2, r3
 8017140:	d90d      	bls.n	801715e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	22ff      	movs	r2, #255	@ 0xff
 8017148:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2221      	movs	r2, #33	@ 0x21
 801714e:	2103      	movs	r1, #3
 8017150:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2220      	movs	r2, #32
 8017156:	2100      	movs	r1, #0
 8017158:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801715a:	2303      	movs	r3, #3
 801715c:	e012      	b.n	8017184 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	68db      	ldr	r3, [r3, #12]
 8017164:	2204      	movs	r2, #4
 8017166:	4013      	ands	r3, r2
 8017168:	d0e2      	beq.n	8017130 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	22ff      	movs	r2, #255	@ 0xff
 8017170:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2221      	movs	r2, #33	@ 0x21
 8017176:	2101      	movs	r1, #1
 8017178:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	2220      	movs	r2, #32
 801717e:	2100      	movs	r1, #0
 8017180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017182:	2300      	movs	r3, #0
}
 8017184:	0018      	movs	r0, r3
 8017186:	46bd      	mov	sp, r7
 8017188:	b004      	add	sp, #16
 801718a:	bd80      	pop	{r7, pc}
 801718c:	fffffbff 	.word	0xfffffbff
 8017190:	ffffbfff 	.word	0xffffbfff

08017194 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8017194:	b580      	push	{r7, lr}
 8017196:	b082      	sub	sp, #8
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801719c:	4b13      	ldr	r3, [pc, #76]	@ (80171ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801719e:	2280      	movs	r2, #128	@ 0x80
 80171a0:	0352      	lsls	r2, r2, #13
 80171a2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	689a      	ldr	r2, [r3, #8]
 80171aa:	2380      	movs	r3, #128	@ 0x80
 80171ac:	01db      	lsls	r3, r3, #7
 80171ae:	4013      	ands	r3, r2
 80171b0:	d014      	beq.n	80171dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	68da      	ldr	r2, [r3, #12]
 80171b8:	2380      	movs	r3, #128	@ 0x80
 80171ba:	00db      	lsls	r3, r3, #3
 80171bc:	4013      	ands	r3, r2
 80171be:	d00d      	beq.n	80171dc <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	68db      	ldr	r3, [r3, #12]
 80171c6:	22ff      	movs	r2, #255	@ 0xff
 80171c8:	401a      	ands	r2, r3
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	4908      	ldr	r1, [pc, #32]	@ (80171f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80171d0:	430a      	orrs	r2, r1
 80171d2:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	0018      	movs	r0, r3
 80171d8:	f000 f80c 	bl	80171f4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2221      	movs	r2, #33	@ 0x21
 80171e0:	2101      	movs	r1, #1
 80171e2:	5499      	strb	r1, [r3, r2]
}
 80171e4:	46c0      	nop			@ (mov r8, r8)
 80171e6:	46bd      	mov	sp, r7
 80171e8:	b002      	add	sp, #8
 80171ea:	bd80      	pop	{r7, pc}
 80171ec:	40010400 	.word	0x40010400
 80171f0:	fffffb7f 	.word	0xfffffb7f

080171f4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80171fc:	46c0      	nop			@ (mov r8, r8)
 80171fe:	46bd      	mov	sp, r7
 8017200:	b002      	add	sp, #8
 8017202:	bd80      	pop	{r7, pc}

08017204 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b086      	sub	sp, #24
 8017208:	af00      	add	r7, sp, #0
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8017210:	2300      	movs	r3, #0
 8017212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	3350      	adds	r3, #80	@ 0x50
 801721a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	009b      	lsls	r3, r3, #2
 8017220:	697a      	ldr	r2, [r7, #20]
 8017222:	18d3      	adds	r3, r2, r3
 8017224:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8017226:	697b      	ldr	r3, [r7, #20]
 8017228:	687a      	ldr	r2, [r7, #4]
 801722a:	601a      	str	r2, [r3, #0]
}
 801722c:	46c0      	nop			@ (mov r8, r8)
 801722e:	46bd      	mov	sp, r7
 8017230:	b006      	add	sp, #24
 8017232:	bd80      	pop	{r7, pc}

08017234 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b084      	sub	sp, #16
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801723e:	2300      	movs	r3, #0
 8017240:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	3350      	adds	r3, #80	@ 0x50
 8017248:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	68fa      	ldr	r2, [r7, #12]
 8017250:	18d3      	adds	r3, r2, r3
 8017252:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681b      	ldr	r3, [r3, #0]
}
 8017258:	0018      	movs	r0, r3
 801725a:	46bd      	mov	sp, r7
 801725c:	b004      	add	sp, #16
 801725e:	bd80      	pop	{r7, pc}

08017260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b082      	sub	sp, #8
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d101      	bne.n	8017272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801726e:	2301      	movs	r3, #1
 8017270:	e032      	b.n	80172d8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2239      	movs	r2, #57	@ 0x39
 8017276:	5c9b      	ldrb	r3, [r3, r2]
 8017278:	b2db      	uxtb	r3, r3
 801727a:	2b00      	cmp	r3, #0
 801727c:	d107      	bne.n	801728e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	2238      	movs	r2, #56	@ 0x38
 8017282:	2100      	movs	r1, #0
 8017284:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	0018      	movs	r0, r3
 801728a:	f7f7 fb7d 	bl	800e988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	2239      	movs	r2, #57	@ 0x39
 8017292:	2102      	movs	r1, #2
 8017294:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681a      	ldr	r2, [r3, #0]
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	3304      	adds	r3, #4
 801729e:	0019      	movs	r1, r3
 80172a0:	0010      	movs	r0, r2
 80172a2:	f000 fa1d 	bl	80176e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	223e      	movs	r2, #62	@ 0x3e
 80172aa:	2101      	movs	r1, #1
 80172ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	223a      	movs	r2, #58	@ 0x3a
 80172b2:	2101      	movs	r1, #1
 80172b4:	5499      	strb	r1, [r3, r2]
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	223b      	movs	r2, #59	@ 0x3b
 80172ba:	2101      	movs	r1, #1
 80172bc:	5499      	strb	r1, [r3, r2]
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	223c      	movs	r2, #60	@ 0x3c
 80172c2:	2101      	movs	r1, #1
 80172c4:	5499      	strb	r1, [r3, r2]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	223d      	movs	r2, #61	@ 0x3d
 80172ca:	2101      	movs	r1, #1
 80172cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2239      	movs	r2, #57	@ 0x39
 80172d2:	2101      	movs	r1, #1
 80172d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80172d6:	2300      	movs	r3, #0
}
 80172d8:	0018      	movs	r0, r3
 80172da:	46bd      	mov	sp, r7
 80172dc:	b002      	add	sp, #8
 80172de:	bd80      	pop	{r7, pc}

080172e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b084      	sub	sp, #16
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2239      	movs	r2, #57	@ 0x39
 80172ec:	5c9b      	ldrb	r3, [r3, r2]
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	2b01      	cmp	r3, #1
 80172f2:	d001      	beq.n	80172f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80172f4:	2301      	movs	r3, #1
 80172f6:	e033      	b.n	8017360 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2239      	movs	r2, #57	@ 0x39
 80172fc:	2102      	movs	r1, #2
 80172fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681a      	ldr	r2, [r3, #0]
 8017304:	2380      	movs	r3, #128	@ 0x80
 8017306:	05db      	lsls	r3, r3, #23
 8017308:	429a      	cmp	r2, r3
 801730a:	d00e      	beq.n	801732a <HAL_TIM_Base_Start+0x4a>
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	4a15      	ldr	r2, [pc, #84]	@ (8017368 <HAL_TIM_Base_Start+0x88>)
 8017312:	4293      	cmp	r3, r2
 8017314:	d009      	beq.n	801732a <HAL_TIM_Base_Start+0x4a>
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	4a14      	ldr	r2, [pc, #80]	@ (801736c <HAL_TIM_Base_Start+0x8c>)
 801731c:	4293      	cmp	r3, r2
 801731e:	d004      	beq.n	801732a <HAL_TIM_Base_Start+0x4a>
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	4a12      	ldr	r2, [pc, #72]	@ (8017370 <HAL_TIM_Base_Start+0x90>)
 8017326:	4293      	cmp	r3, r2
 8017328:	d111      	bne.n	801734e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	681b      	ldr	r3, [r3, #0]
 801732e:	689b      	ldr	r3, [r3, #8]
 8017330:	2207      	movs	r2, #7
 8017332:	4013      	ands	r3, r2
 8017334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	2b06      	cmp	r3, #6
 801733a:	d010      	beq.n	801735e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	681a      	ldr	r2, [r3, #0]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	2101      	movs	r1, #1
 8017348:	430a      	orrs	r2, r1
 801734a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801734c:	e007      	b.n	801735e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	681a      	ldr	r2, [r3, #0]
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	2101      	movs	r1, #1
 801735a:	430a      	orrs	r2, r1
 801735c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801735e:	2300      	movs	r3, #0
}
 8017360:	0018      	movs	r0, r3
 8017362:	46bd      	mov	sp, r7
 8017364:	b004      	add	sp, #16
 8017366:	bd80      	pop	{r7, pc}
 8017368:	40000400 	.word	0x40000400
 801736c:	40010800 	.word	0x40010800
 8017370:	40011400 	.word	0x40011400

08017374 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	6a1b      	ldr	r3, [r3, #32]
 8017382:	4a0a      	ldr	r2, [pc, #40]	@ (80173ac <HAL_TIM_Base_Stop+0x38>)
 8017384:	4013      	ands	r3, r2
 8017386:	d107      	bne.n	8017398 <HAL_TIM_Base_Stop+0x24>
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	2101      	movs	r1, #1
 8017394:	438a      	bics	r2, r1
 8017396:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2239      	movs	r2, #57	@ 0x39
 801739c:	2101      	movs	r1, #1
 801739e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	0018      	movs	r0, r3
 80173a4:	46bd      	mov	sp, r7
 80173a6:	b002      	add	sp, #8
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	46c0      	nop			@ (mov r8, r8)
 80173ac:	00001111 	.word	0x00001111

080173b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d101      	bne.n	80173c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80173be:	2301      	movs	r3, #1
 80173c0:	e032      	b.n	8017428 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	2239      	movs	r2, #57	@ 0x39
 80173c6:	5c9b      	ldrb	r3, [r3, r2]
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d107      	bne.n	80173de <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2238      	movs	r2, #56	@ 0x38
 80173d2:	2100      	movs	r1, #0
 80173d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	0018      	movs	r0, r3
 80173da:	f7f7 fab1 	bl	800e940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2239      	movs	r2, #57	@ 0x39
 80173e2:	2102      	movs	r1, #2
 80173e4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	3304      	adds	r3, #4
 80173ee:	0019      	movs	r1, r3
 80173f0:	0010      	movs	r0, r2
 80173f2:	f000 f975 	bl	80176e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	223e      	movs	r2, #62	@ 0x3e
 80173fa:	2101      	movs	r1, #1
 80173fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	223a      	movs	r2, #58	@ 0x3a
 8017402:	2101      	movs	r1, #1
 8017404:	5499      	strb	r1, [r3, r2]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	223b      	movs	r2, #59	@ 0x3b
 801740a:	2101      	movs	r1, #1
 801740c:	5499      	strb	r1, [r3, r2]
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	223c      	movs	r2, #60	@ 0x3c
 8017412:	2101      	movs	r1, #1
 8017414:	5499      	strb	r1, [r3, r2]
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	223d      	movs	r2, #61	@ 0x3d
 801741a:	2101      	movs	r1, #1
 801741c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2239      	movs	r2, #57	@ 0x39
 8017422:	2101      	movs	r1, #1
 8017424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017426:	2300      	movs	r3, #0
}
 8017428:	0018      	movs	r0, r3
 801742a:	46bd      	mov	sp, r7
 801742c:	b002      	add	sp, #8
 801742e:	bd80      	pop	{r7, pc}

08017430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801743a:	683b      	ldr	r3, [r7, #0]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d108      	bne.n	8017452 <HAL_TIM_PWM_Start+0x22>
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	223a      	movs	r2, #58	@ 0x3a
 8017444:	5c9b      	ldrb	r3, [r3, r2]
 8017446:	b2db      	uxtb	r3, r3
 8017448:	3b01      	subs	r3, #1
 801744a:	1e5a      	subs	r2, r3, #1
 801744c:	4193      	sbcs	r3, r2
 801744e:	b2db      	uxtb	r3, r3
 8017450:	e01f      	b.n	8017492 <HAL_TIM_PWM_Start+0x62>
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	2b04      	cmp	r3, #4
 8017456:	d108      	bne.n	801746a <HAL_TIM_PWM_Start+0x3a>
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	223b      	movs	r2, #59	@ 0x3b
 801745c:	5c9b      	ldrb	r3, [r3, r2]
 801745e:	b2db      	uxtb	r3, r3
 8017460:	3b01      	subs	r3, #1
 8017462:	1e5a      	subs	r2, r3, #1
 8017464:	4193      	sbcs	r3, r2
 8017466:	b2db      	uxtb	r3, r3
 8017468:	e013      	b.n	8017492 <HAL_TIM_PWM_Start+0x62>
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	2b08      	cmp	r3, #8
 801746e:	d108      	bne.n	8017482 <HAL_TIM_PWM_Start+0x52>
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	223c      	movs	r2, #60	@ 0x3c
 8017474:	5c9b      	ldrb	r3, [r3, r2]
 8017476:	b2db      	uxtb	r3, r3
 8017478:	3b01      	subs	r3, #1
 801747a:	1e5a      	subs	r2, r3, #1
 801747c:	4193      	sbcs	r3, r2
 801747e:	b2db      	uxtb	r3, r3
 8017480:	e007      	b.n	8017492 <HAL_TIM_PWM_Start+0x62>
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	223d      	movs	r2, #61	@ 0x3d
 8017486:	5c9b      	ldrb	r3, [r3, r2]
 8017488:	b2db      	uxtb	r3, r3
 801748a:	3b01      	subs	r3, #1
 801748c:	1e5a      	subs	r2, r3, #1
 801748e:	4193      	sbcs	r3, r2
 8017490:	b2db      	uxtb	r3, r3
 8017492:	2b00      	cmp	r3, #0
 8017494:	d001      	beq.n	801749a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8017496:	2301      	movs	r3, #1
 8017498:	e052      	b.n	8017540 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d104      	bne.n	80174aa <HAL_TIM_PWM_Start+0x7a>
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	223a      	movs	r2, #58	@ 0x3a
 80174a4:	2102      	movs	r1, #2
 80174a6:	5499      	strb	r1, [r3, r2]
 80174a8:	e013      	b.n	80174d2 <HAL_TIM_PWM_Start+0xa2>
 80174aa:	683b      	ldr	r3, [r7, #0]
 80174ac:	2b04      	cmp	r3, #4
 80174ae:	d104      	bne.n	80174ba <HAL_TIM_PWM_Start+0x8a>
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	223b      	movs	r2, #59	@ 0x3b
 80174b4:	2102      	movs	r1, #2
 80174b6:	5499      	strb	r1, [r3, r2]
 80174b8:	e00b      	b.n	80174d2 <HAL_TIM_PWM_Start+0xa2>
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	2b08      	cmp	r3, #8
 80174be:	d104      	bne.n	80174ca <HAL_TIM_PWM_Start+0x9a>
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	223c      	movs	r2, #60	@ 0x3c
 80174c4:	2102      	movs	r1, #2
 80174c6:	5499      	strb	r1, [r3, r2]
 80174c8:	e003      	b.n	80174d2 <HAL_TIM_PWM_Start+0xa2>
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	223d      	movs	r2, #61	@ 0x3d
 80174ce:	2102      	movs	r1, #2
 80174d0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	6839      	ldr	r1, [r7, #0]
 80174d8:	2201      	movs	r2, #1
 80174da:	0018      	movs	r0, r3
 80174dc:	f000 fa62 	bl	80179a4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	2380      	movs	r3, #128	@ 0x80
 80174e6:	05db      	lsls	r3, r3, #23
 80174e8:	429a      	cmp	r2, r3
 80174ea:	d00e      	beq.n	801750a <HAL_TIM_PWM_Start+0xda>
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	4a15      	ldr	r2, [pc, #84]	@ (8017548 <HAL_TIM_PWM_Start+0x118>)
 80174f2:	4293      	cmp	r3, r2
 80174f4:	d009      	beq.n	801750a <HAL_TIM_PWM_Start+0xda>
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	4a14      	ldr	r2, [pc, #80]	@ (801754c <HAL_TIM_PWM_Start+0x11c>)
 80174fc:	4293      	cmp	r3, r2
 80174fe:	d004      	beq.n	801750a <HAL_TIM_PWM_Start+0xda>
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	4a12      	ldr	r2, [pc, #72]	@ (8017550 <HAL_TIM_PWM_Start+0x120>)
 8017506:	4293      	cmp	r3, r2
 8017508:	d111      	bne.n	801752e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	689b      	ldr	r3, [r3, #8]
 8017510:	2207      	movs	r2, #7
 8017512:	4013      	ands	r3, r2
 8017514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	2b06      	cmp	r3, #6
 801751a:	d010      	beq.n	801753e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	681a      	ldr	r2, [r3, #0]
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	2101      	movs	r1, #1
 8017528:	430a      	orrs	r2, r1
 801752a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801752c:	e007      	b.n	801753e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	681a      	ldr	r2, [r3, #0]
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	2101      	movs	r1, #1
 801753a:	430a      	orrs	r2, r1
 801753c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801753e:	2300      	movs	r3, #0
}
 8017540:	0018      	movs	r0, r3
 8017542:	46bd      	mov	sp, r7
 8017544:	b004      	add	sp, #16
 8017546:	bd80      	pop	{r7, pc}
 8017548:	40000400 	.word	0x40000400
 801754c:	40010800 	.word	0x40010800
 8017550:	40011400 	.word	0x40011400

08017554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b086      	sub	sp, #24
 8017558:	af00      	add	r7, sp, #0
 801755a:	60f8      	str	r0, [r7, #12]
 801755c:	60b9      	str	r1, [r7, #8]
 801755e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017560:	2317      	movs	r3, #23
 8017562:	18fb      	adds	r3, r7, r3
 8017564:	2200      	movs	r2, #0
 8017566:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	2238      	movs	r2, #56	@ 0x38
 801756c:	5c9b      	ldrb	r3, [r3, r2]
 801756e:	2b01      	cmp	r3, #1
 8017570:	d101      	bne.n	8017576 <HAL_TIM_PWM_ConfigChannel+0x22>
 8017572:	2302      	movs	r3, #2
 8017574:	e0ad      	b.n	80176d2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	2238      	movs	r2, #56	@ 0x38
 801757a:	2101      	movs	r1, #1
 801757c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	2b0c      	cmp	r3, #12
 8017582:	d100      	bne.n	8017586 <HAL_TIM_PWM_ConfigChannel+0x32>
 8017584:	e076      	b.n	8017674 <HAL_TIM_PWM_ConfigChannel+0x120>
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2b0c      	cmp	r3, #12
 801758a:	d900      	bls.n	801758e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801758c:	e095      	b.n	80176ba <HAL_TIM_PWM_ConfigChannel+0x166>
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2b08      	cmp	r3, #8
 8017592:	d04e      	beq.n	8017632 <HAL_TIM_PWM_ConfigChannel+0xde>
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b08      	cmp	r3, #8
 8017598:	d900      	bls.n	801759c <HAL_TIM_PWM_ConfigChannel+0x48>
 801759a:	e08e      	b.n	80176ba <HAL_TIM_PWM_ConfigChannel+0x166>
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d003      	beq.n	80175aa <HAL_TIM_PWM_ConfigChannel+0x56>
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	2b04      	cmp	r3, #4
 80175a6:	d021      	beq.n	80175ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80175a8:	e087      	b.n	80176ba <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	68ba      	ldr	r2, [r7, #8]
 80175b0:	0011      	movs	r1, r2
 80175b2:	0018      	movs	r0, r3
 80175b4:	f000 f8f2 	bl	801779c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	699a      	ldr	r2, [r3, #24]
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2108      	movs	r1, #8
 80175c4:	430a      	orrs	r2, r1
 80175c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	699a      	ldr	r2, [r3, #24]
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	2104      	movs	r1, #4
 80175d4:	438a      	bics	r2, r1
 80175d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	6999      	ldr	r1, [r3, #24]
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	68da      	ldr	r2, [r3, #12]
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	430a      	orrs	r2, r1
 80175e8:	619a      	str	r2, [r3, #24]
      break;
 80175ea:	e06b      	b.n	80176c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	68ba      	ldr	r2, [r7, #8]
 80175f2:	0011      	movs	r1, r2
 80175f4:	0018      	movs	r0, r3
 80175f6:	f000 f90d 	bl	8017814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	699a      	ldr	r2, [r3, #24]
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	2180      	movs	r1, #128	@ 0x80
 8017606:	0109      	lsls	r1, r1, #4
 8017608:	430a      	orrs	r2, r1
 801760a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	699a      	ldr	r2, [r3, #24]
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	4931      	ldr	r1, [pc, #196]	@ (80176dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8017618:	400a      	ands	r2, r1
 801761a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	6999      	ldr	r1, [r3, #24]
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	68db      	ldr	r3, [r3, #12]
 8017626:	021a      	lsls	r2, r3, #8
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	430a      	orrs	r2, r1
 801762e:	619a      	str	r2, [r3, #24]
      break;
 8017630:	e048      	b.n	80176c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	68ba      	ldr	r2, [r7, #8]
 8017638:	0011      	movs	r1, r2
 801763a:	0018      	movs	r0, r3
 801763c:	f000 f92c 	bl	8017898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	69da      	ldr	r2, [r3, #28]
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	2108      	movs	r1, #8
 801764c:	430a      	orrs	r2, r1
 801764e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	69da      	ldr	r2, [r3, #28]
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	2104      	movs	r1, #4
 801765c:	438a      	bics	r2, r1
 801765e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	69d9      	ldr	r1, [r3, #28]
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	68da      	ldr	r2, [r3, #12]
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	430a      	orrs	r2, r1
 8017670:	61da      	str	r2, [r3, #28]
      break;
 8017672:	e027      	b.n	80176c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	68ba      	ldr	r2, [r7, #8]
 801767a:	0011      	movs	r1, r2
 801767c:	0018      	movs	r0, r3
 801767e:	f000 f94b 	bl	8017918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	69da      	ldr	r2, [r3, #28]
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	2180      	movs	r1, #128	@ 0x80
 801768e:	0109      	lsls	r1, r1, #4
 8017690:	430a      	orrs	r2, r1
 8017692:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	69da      	ldr	r2, [r3, #28]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	490f      	ldr	r1, [pc, #60]	@ (80176dc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80176a0:	400a      	ands	r2, r1
 80176a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	69d9      	ldr	r1, [r3, #28]
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	68db      	ldr	r3, [r3, #12]
 80176ae:	021a      	lsls	r2, r3, #8
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	430a      	orrs	r2, r1
 80176b6:	61da      	str	r2, [r3, #28]
      break;
 80176b8:	e004      	b.n	80176c4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80176ba:	2317      	movs	r3, #23
 80176bc:	18fb      	adds	r3, r7, r3
 80176be:	2201      	movs	r2, #1
 80176c0:	701a      	strb	r2, [r3, #0]
      break;
 80176c2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2238      	movs	r2, #56	@ 0x38
 80176c8:	2100      	movs	r1, #0
 80176ca:	5499      	strb	r1, [r3, r2]

  return status;
 80176cc:	2317      	movs	r3, #23
 80176ce:	18fb      	adds	r3, r7, r3
 80176d0:	781b      	ldrb	r3, [r3, #0]
}
 80176d2:	0018      	movs	r0, r3
 80176d4:	46bd      	mov	sp, r7
 80176d6:	b006      	add	sp, #24
 80176d8:	bd80      	pop	{r7, pc}
 80176da:	46c0      	nop			@ (mov r8, r8)
 80176dc:	fffffbff 	.word	0xfffffbff

080176e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b084      	sub	sp, #16
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80176f0:	687a      	ldr	r2, [r7, #4]
 80176f2:	2380      	movs	r3, #128	@ 0x80
 80176f4:	05db      	lsls	r3, r3, #23
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d00b      	beq.n	8017712 <TIM_Base_SetConfig+0x32>
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	4a23      	ldr	r2, [pc, #140]	@ (801778c <TIM_Base_SetConfig+0xac>)
 80176fe:	4293      	cmp	r3, r2
 8017700:	d007      	beq.n	8017712 <TIM_Base_SetConfig+0x32>
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	4a22      	ldr	r2, [pc, #136]	@ (8017790 <TIM_Base_SetConfig+0xb0>)
 8017706:	4293      	cmp	r3, r2
 8017708:	d003      	beq.n	8017712 <TIM_Base_SetConfig+0x32>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	4a21      	ldr	r2, [pc, #132]	@ (8017794 <TIM_Base_SetConfig+0xb4>)
 801770e:	4293      	cmp	r3, r2
 8017710:	d108      	bne.n	8017724 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	2270      	movs	r2, #112	@ 0x70
 8017716:	4393      	bics	r3, r2
 8017718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	4313      	orrs	r3, r2
 8017722:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017724:	687a      	ldr	r2, [r7, #4]
 8017726:	2380      	movs	r3, #128	@ 0x80
 8017728:	05db      	lsls	r3, r3, #23
 801772a:	429a      	cmp	r2, r3
 801772c:	d00b      	beq.n	8017746 <TIM_Base_SetConfig+0x66>
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	4a16      	ldr	r2, [pc, #88]	@ (801778c <TIM_Base_SetConfig+0xac>)
 8017732:	4293      	cmp	r3, r2
 8017734:	d007      	beq.n	8017746 <TIM_Base_SetConfig+0x66>
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	4a15      	ldr	r2, [pc, #84]	@ (8017790 <TIM_Base_SetConfig+0xb0>)
 801773a:	4293      	cmp	r3, r2
 801773c:	d003      	beq.n	8017746 <TIM_Base_SetConfig+0x66>
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	4a14      	ldr	r2, [pc, #80]	@ (8017794 <TIM_Base_SetConfig+0xb4>)
 8017742:	4293      	cmp	r3, r2
 8017744:	d108      	bne.n	8017758 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	4a13      	ldr	r2, [pc, #76]	@ (8017798 <TIM_Base_SetConfig+0xb8>)
 801774a:	4013      	ands	r3, r2
 801774c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	68fa      	ldr	r2, [r7, #12]
 8017754:	4313      	orrs	r3, r2
 8017756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	2280      	movs	r2, #128	@ 0x80
 801775c:	4393      	bics	r3, r2
 801775e:	001a      	movs	r2, r3
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	691b      	ldr	r3, [r3, #16]
 8017764:	4313      	orrs	r3, r2
 8017766:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	68fa      	ldr	r2, [r7, #12]
 801776c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801776e:	683b      	ldr	r3, [r7, #0]
 8017770:	689a      	ldr	r2, [r3, #8]
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	681a      	ldr	r2, [r3, #0]
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2201      	movs	r2, #1
 8017782:	615a      	str	r2, [r3, #20]
}
 8017784:	46c0      	nop			@ (mov r8, r8)
 8017786:	46bd      	mov	sp, r7
 8017788:	b004      	add	sp, #16
 801778a:	bd80      	pop	{r7, pc}
 801778c:	40000400 	.word	0x40000400
 8017790:	40010800 	.word	0x40010800
 8017794:	40011400 	.word	0x40011400
 8017798:	fffffcff 	.word	0xfffffcff

0801779c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b086      	sub	sp, #24
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	6a1b      	ldr	r3, [r3, #32]
 80177aa:	2201      	movs	r2, #1
 80177ac:	4393      	bics	r3, r2
 80177ae:	001a      	movs	r2, r3
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6a1b      	ldr	r3, [r3, #32]
 80177b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	699b      	ldr	r3, [r3, #24]
 80177c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2270      	movs	r2, #112	@ 0x70
 80177ca:	4393      	bics	r3, r2
 80177cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	2203      	movs	r2, #3
 80177d2:	4393      	bics	r3, r2
 80177d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	4313      	orrs	r3, r2
 80177de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	2202      	movs	r2, #2
 80177e4:	4393      	bics	r3, r2
 80177e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	689b      	ldr	r3, [r3, #8]
 80177ec:	697a      	ldr	r2, [r7, #20]
 80177ee:	4313      	orrs	r3, r2
 80177f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	693a      	ldr	r2, [r7, #16]
 80177f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	68fa      	ldr	r2, [r7, #12]
 80177fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	685a      	ldr	r2, [r3, #4]
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	697a      	ldr	r2, [r7, #20]
 801780a:	621a      	str	r2, [r3, #32]
}
 801780c:	46c0      	nop			@ (mov r8, r8)
 801780e:	46bd      	mov	sp, r7
 8017810:	b006      	add	sp, #24
 8017812:	bd80      	pop	{r7, pc}

08017814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b086      	sub	sp, #24
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
 801781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6a1b      	ldr	r3, [r3, #32]
 8017822:	2210      	movs	r2, #16
 8017824:	4393      	bics	r3, r2
 8017826:	001a      	movs	r2, r3
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6a1b      	ldr	r3, [r3, #32]
 8017830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	685b      	ldr	r3, [r3, #4]
 8017836:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	699b      	ldr	r3, [r3, #24]
 801783c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	4a13      	ldr	r2, [pc, #76]	@ (8017890 <TIM_OC2_SetConfig+0x7c>)
 8017842:	4013      	ands	r3, r2
 8017844:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	4a12      	ldr	r2, [pc, #72]	@ (8017894 <TIM_OC2_SetConfig+0x80>)
 801784a:	4013      	ands	r3, r2
 801784c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	021b      	lsls	r3, r3, #8
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	4313      	orrs	r3, r2
 8017858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	2220      	movs	r2, #32
 801785e:	4393      	bics	r3, r2
 8017860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	689b      	ldr	r3, [r3, #8]
 8017866:	011b      	lsls	r3, r3, #4
 8017868:	697a      	ldr	r2, [r7, #20]
 801786a:	4313      	orrs	r3, r2
 801786c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	693a      	ldr	r2, [r7, #16]
 8017872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	68fa      	ldr	r2, [r7, #12]
 8017878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	685a      	ldr	r2, [r3, #4]
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	697a      	ldr	r2, [r7, #20]
 8017886:	621a      	str	r2, [r3, #32]
}
 8017888:	46c0      	nop			@ (mov r8, r8)
 801788a:	46bd      	mov	sp, r7
 801788c:	b006      	add	sp, #24
 801788e:	bd80      	pop	{r7, pc}
 8017890:	ffff8fff 	.word	0xffff8fff
 8017894:	fffffcff 	.word	0xfffffcff

08017898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b086      	sub	sp, #24
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
 80178a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	6a1b      	ldr	r3, [r3, #32]
 80178a6:	4a1a      	ldr	r2, [pc, #104]	@ (8017910 <TIM_OC3_SetConfig+0x78>)
 80178a8:	401a      	ands	r2, r3
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6a1b      	ldr	r3, [r3, #32]
 80178b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	685b      	ldr	r3, [r3, #4]
 80178b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	69db      	ldr	r3, [r3, #28]
 80178be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	2270      	movs	r2, #112	@ 0x70
 80178c4:	4393      	bics	r3, r2
 80178c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	2203      	movs	r2, #3
 80178cc:	4393      	bics	r3, r2
 80178ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80178d0:	683b      	ldr	r3, [r7, #0]
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	68fa      	ldr	r2, [r7, #12]
 80178d6:	4313      	orrs	r3, r2
 80178d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80178da:	697b      	ldr	r3, [r7, #20]
 80178dc:	4a0d      	ldr	r2, [pc, #52]	@ (8017914 <TIM_OC3_SetConfig+0x7c>)
 80178de:	4013      	ands	r3, r2
 80178e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	689b      	ldr	r3, [r3, #8]
 80178e6:	021b      	lsls	r3, r3, #8
 80178e8:	697a      	ldr	r2, [r7, #20]
 80178ea:	4313      	orrs	r3, r2
 80178ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	693a      	ldr	r2, [r7, #16]
 80178f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	68fa      	ldr	r2, [r7, #12]
 80178f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	685a      	ldr	r2, [r3, #4]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	697a      	ldr	r2, [r7, #20]
 8017906:	621a      	str	r2, [r3, #32]
}
 8017908:	46c0      	nop			@ (mov r8, r8)
 801790a:	46bd      	mov	sp, r7
 801790c:	b006      	add	sp, #24
 801790e:	bd80      	pop	{r7, pc}
 8017910:	fffffeff 	.word	0xfffffeff
 8017914:	fffffdff 	.word	0xfffffdff

08017918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b086      	sub	sp, #24
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
 8017920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	6a1b      	ldr	r3, [r3, #32]
 8017926:	4a1b      	ldr	r2, [pc, #108]	@ (8017994 <TIM_OC4_SetConfig+0x7c>)
 8017928:	401a      	ands	r2, r3
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6a1b      	ldr	r3, [r3, #32]
 8017932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	69db      	ldr	r3, [r3, #28]
 801793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	4a15      	ldr	r2, [pc, #84]	@ (8017998 <TIM_OC4_SetConfig+0x80>)
 8017944:	4013      	ands	r3, r2
 8017946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	4a14      	ldr	r2, [pc, #80]	@ (801799c <TIM_OC4_SetConfig+0x84>)
 801794c:	4013      	ands	r3, r2
 801794e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	021b      	lsls	r3, r3, #8
 8017956:	68fa      	ldr	r2, [r7, #12]
 8017958:	4313      	orrs	r3, r2
 801795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	4a10      	ldr	r2, [pc, #64]	@ (80179a0 <TIM_OC4_SetConfig+0x88>)
 8017960:	4013      	ands	r3, r2
 8017962:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	689b      	ldr	r3, [r3, #8]
 8017968:	031b      	lsls	r3, r3, #12
 801796a:	697a      	ldr	r2, [r7, #20]
 801796c:	4313      	orrs	r3, r2
 801796e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	693a      	ldr	r2, [r7, #16]
 8017974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	68fa      	ldr	r2, [r7, #12]
 801797a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	685a      	ldr	r2, [r3, #4]
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	697a      	ldr	r2, [r7, #20]
 8017988:	621a      	str	r2, [r3, #32]
}
 801798a:	46c0      	nop			@ (mov r8, r8)
 801798c:	46bd      	mov	sp, r7
 801798e:	b006      	add	sp, #24
 8017990:	bd80      	pop	{r7, pc}
 8017992:	46c0      	nop			@ (mov r8, r8)
 8017994:	ffffefff 	.word	0xffffefff
 8017998:	ffff8fff 	.word	0xffff8fff
 801799c:	fffffcff 	.word	0xfffffcff
 80179a0:	ffffdfff 	.word	0xffffdfff

080179a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b086      	sub	sp, #24
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80179b0:	68bb      	ldr	r3, [r7, #8]
 80179b2:	221f      	movs	r2, #31
 80179b4:	4013      	ands	r3, r2
 80179b6:	2201      	movs	r2, #1
 80179b8:	409a      	lsls	r2, r3
 80179ba:	0013      	movs	r3, r2
 80179bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	6a1b      	ldr	r3, [r3, #32]
 80179c2:	697a      	ldr	r2, [r7, #20]
 80179c4:	43d2      	mvns	r2, r2
 80179c6:	401a      	ands	r2, r3
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	6a1a      	ldr	r2, [r3, #32]
 80179d0:	68bb      	ldr	r3, [r7, #8]
 80179d2:	211f      	movs	r1, #31
 80179d4:	400b      	ands	r3, r1
 80179d6:	6879      	ldr	r1, [r7, #4]
 80179d8:	4099      	lsls	r1, r3
 80179da:	000b      	movs	r3, r1
 80179dc:	431a      	orrs	r2, r3
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	621a      	str	r2, [r3, #32]
}
 80179e2:	46c0      	nop			@ (mov r8, r8)
 80179e4:	46bd      	mov	sp, r7
 80179e6:	b006      	add	sp, #24
 80179e8:	bd80      	pop	{r7, pc}
	...

080179ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b084      	sub	sp, #16
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2238      	movs	r2, #56	@ 0x38
 80179fa:	5c9b      	ldrb	r3, [r3, r2]
 80179fc:	2b01      	cmp	r3, #1
 80179fe:	d101      	bne.n	8017a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017a00:	2302      	movs	r3, #2
 8017a02:	e047      	b.n	8017a94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2238      	movs	r2, #56	@ 0x38
 8017a08:	2101      	movs	r1, #1
 8017a0a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	2239      	movs	r2, #57	@ 0x39
 8017a10:	2102      	movs	r1, #2
 8017a12:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	685b      	ldr	r3, [r3, #4]
 8017a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	689b      	ldr	r3, [r3, #8]
 8017a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	2270      	movs	r2, #112	@ 0x70
 8017a28:	4393      	bics	r3, r2
 8017a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	68fa      	ldr	r2, [r7, #12]
 8017a32:	4313      	orrs	r3, r2
 8017a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	68fa      	ldr	r2, [r7, #12]
 8017a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681a      	ldr	r2, [r3, #0]
 8017a42:	2380      	movs	r3, #128	@ 0x80
 8017a44:	05db      	lsls	r3, r3, #23
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d00e      	beq.n	8017a68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	4a13      	ldr	r2, [pc, #76]	@ (8017a9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8017a50:	4293      	cmp	r3, r2
 8017a52:	d009      	beq.n	8017a68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	4a11      	ldr	r2, [pc, #68]	@ (8017aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d004      	beq.n	8017a68 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	4a10      	ldr	r2, [pc, #64]	@ (8017aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017a64:	4293      	cmp	r3, r2
 8017a66:	d10c      	bne.n	8017a82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	2280      	movs	r2, #128	@ 0x80
 8017a6c:	4393      	bics	r3, r2
 8017a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	68ba      	ldr	r2, [r7, #8]
 8017a76:	4313      	orrs	r3, r2
 8017a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	68ba      	ldr	r2, [r7, #8]
 8017a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	2239      	movs	r2, #57	@ 0x39
 8017a86:	2101      	movs	r1, #1
 8017a88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	2238      	movs	r2, #56	@ 0x38
 8017a8e:	2100      	movs	r1, #0
 8017a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017a92:	2300      	movs	r3, #0
}
 8017a94:	0018      	movs	r0, r3
 8017a96:	46bd      	mov	sp, r7
 8017a98:	b004      	add	sp, #16
 8017a9a:	bd80      	pop	{r7, pc}
 8017a9c:	40000400 	.word	0x40000400
 8017aa0:	40010800 	.word	0x40010800
 8017aa4:	40011400 	.word	0x40011400

08017aa8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
 8017ab0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2238      	movs	r2, #56	@ 0x38
 8017ab6:	5c9b      	ldrb	r3, [r3, r2]
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	d101      	bne.n	8017ac0 <HAL_TIMEx_RemapConfig+0x18>
 8017abc:	2302      	movs	r3, #2
 8017abe:	e00c      	b.n	8017ada <HAL_TIMEx_RemapConfig+0x32>
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	2238      	movs	r2, #56	@ 0x38
 8017ac4:	2101      	movs	r1, #1
 8017ac6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2238      	movs	r2, #56	@ 0x38
 8017ad4:	2100      	movs	r1, #0
 8017ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017ad8:	2300      	movs	r3, #0
}
 8017ada:	0018      	movs	r0, r3
 8017adc:	46bd      	mov	sp, r7
 8017ade:	b002      	add	sp, #8
 8017ae0:	bd80      	pop	{r7, pc}
	...

08017ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017ae4:	b580      	push	{r7, lr}
 8017ae6:	b082      	sub	sp, #8
 8017ae8:	af00      	add	r7, sp, #0
 8017aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d101      	bne.n	8017af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017af2:	2301      	movs	r3, #1
 8017af4:	e053      	b.n	8017b9e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d116      	bne.n	8017b2c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2278      	movs	r2, #120	@ 0x78
 8017b02:	2100      	movs	r1, #0
 8017b04:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	0018      	movs	r0, r3
 8017b0a:	f000 fd65 	bl	80185d8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	22b0      	movs	r2, #176	@ 0xb0
 8017b12:	589b      	ldr	r3, [r3, r2]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d103      	bne.n	8017b20 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	21b0      	movs	r1, #176	@ 0xb0
 8017b1c:	4a22      	ldr	r2, [pc, #136]	@ (8017ba8 <HAL_UART_Init+0xc4>)
 8017b1e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	22b0      	movs	r2, #176	@ 0xb0
 8017b24:	589b      	ldr	r3, [r3, r2]
 8017b26:	687a      	ldr	r2, [r7, #4]
 8017b28:	0010      	movs	r0, r2
 8017b2a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2224      	movs	r2, #36	@ 0x24
 8017b30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	681a      	ldr	r2, [r3, #0]
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	2101      	movs	r1, #1
 8017b3e:	438a      	bics	r2, r1
 8017b40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	0018      	movs	r0, r3
 8017b46:	f000 fd8b 	bl	8018660 <UART_SetConfig>
 8017b4a:	0003      	movs	r3, r0
 8017b4c:	2b01      	cmp	r3, #1
 8017b4e:	d101      	bne.n	8017b54 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017b50:	2301      	movs	r3, #1
 8017b52:	e024      	b.n	8017b9e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d003      	beq.n	8017b64 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	0018      	movs	r0, r3
 8017b60:	f001 f81c 	bl	8018b9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	685a      	ldr	r2, [r3, #4]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	490f      	ldr	r1, [pc, #60]	@ (8017bac <HAL_UART_Init+0xc8>)
 8017b70:	400a      	ands	r2, r1
 8017b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	689a      	ldr	r2, [r3, #8]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	212a      	movs	r1, #42	@ 0x2a
 8017b80:	438a      	bics	r2, r1
 8017b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	681a      	ldr	r2, [r3, #0]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	2101      	movs	r1, #1
 8017b90:	430a      	orrs	r2, r1
 8017b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	0018      	movs	r0, r3
 8017b98:	f001 f8b4 	bl	8018d04 <UART_CheckIdleState>
 8017b9c:	0003      	movs	r3, r0
}
 8017b9e:	0018      	movs	r0, r3
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	b002      	add	sp, #8
 8017ba4:	bd80      	pop	{r7, pc}
 8017ba6:	46c0      	nop			@ (mov r8, r8)
 8017ba8:	0800ebb5 	.word	0x0800ebb5
 8017bac:	ffffb7ff 	.word	0xffffb7ff

08017bb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b08a      	sub	sp, #40	@ 0x28
 8017bb4:	af02      	add	r7, sp, #8
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	603b      	str	r3, [r7, #0]
 8017bbc:	1dbb      	adds	r3, r7, #6
 8017bbe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017bc4:	2b20      	cmp	r3, #32
 8017bc6:	d000      	beq.n	8017bca <HAL_UART_Transmit+0x1a>
 8017bc8:	e08c      	b.n	8017ce4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d003      	beq.n	8017bd8 <HAL_UART_Transmit+0x28>
 8017bd0:	1dbb      	adds	r3, r7, #6
 8017bd2:	881b      	ldrh	r3, [r3, #0]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d101      	bne.n	8017bdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017bd8:	2301      	movs	r3, #1
 8017bda:	e084      	b.n	8017ce6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	689a      	ldr	r2, [r3, #8]
 8017be0:	2380      	movs	r3, #128	@ 0x80
 8017be2:	015b      	lsls	r3, r3, #5
 8017be4:	429a      	cmp	r2, r3
 8017be6:	d109      	bne.n	8017bfc <HAL_UART_Transmit+0x4c>
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	691b      	ldr	r3, [r3, #16]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d105      	bne.n	8017bfc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017bf0:	68bb      	ldr	r3, [r7, #8]
 8017bf2:	2201      	movs	r2, #1
 8017bf4:	4013      	ands	r3, r2
 8017bf6:	d001      	beq.n	8017bfc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	e074      	b.n	8017ce6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	2284      	movs	r2, #132	@ 0x84
 8017c00:	2100      	movs	r1, #0
 8017c02:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2221      	movs	r2, #33	@ 0x21
 8017c08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017c0a:	f7f7 fda5 	bl	800f758 <HAL_GetTick>
 8017c0e:	0003      	movs	r3, r0
 8017c10:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	1dba      	adds	r2, r7, #6
 8017c16:	2150      	movs	r1, #80	@ 0x50
 8017c18:	8812      	ldrh	r2, [r2, #0]
 8017c1a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	1dba      	adds	r2, r7, #6
 8017c20:	2152      	movs	r1, #82	@ 0x52
 8017c22:	8812      	ldrh	r2, [r2, #0]
 8017c24:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	689a      	ldr	r2, [r3, #8]
 8017c2a:	2380      	movs	r3, #128	@ 0x80
 8017c2c:	015b      	lsls	r3, r3, #5
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	d108      	bne.n	8017c44 <HAL_UART_Transmit+0x94>
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	691b      	ldr	r3, [r3, #16]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d104      	bne.n	8017c44 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	61bb      	str	r3, [r7, #24]
 8017c42:	e003      	b.n	8017c4c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017c44:	68bb      	ldr	r3, [r7, #8]
 8017c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017c48:	2300      	movs	r3, #0
 8017c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017c4c:	e02f      	b.n	8017cae <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017c4e:	697a      	ldr	r2, [r7, #20]
 8017c50:	68f8      	ldr	r0, [r7, #12]
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	9300      	str	r3, [sp, #0]
 8017c56:	0013      	movs	r3, r2
 8017c58:	2200      	movs	r2, #0
 8017c5a:	2180      	movs	r1, #128	@ 0x80
 8017c5c:	f001 f8fa 	bl	8018e54 <UART_WaitOnFlagUntilTimeout>
 8017c60:	1e03      	subs	r3, r0, #0
 8017c62:	d004      	beq.n	8017c6e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	2220      	movs	r2, #32
 8017c68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8017c6a:	2303      	movs	r3, #3
 8017c6c:	e03b      	b.n	8017ce6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8017c6e:	69fb      	ldr	r3, [r7, #28]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d10b      	bne.n	8017c8c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017c74:	69bb      	ldr	r3, [r7, #24]
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	001a      	movs	r2, r3
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	05d2      	lsls	r2, r2, #23
 8017c80:	0dd2      	lsrs	r2, r2, #23
 8017c82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8017c84:	69bb      	ldr	r3, [r7, #24]
 8017c86:	3302      	adds	r3, #2
 8017c88:	61bb      	str	r3, [r7, #24]
 8017c8a:	e007      	b.n	8017c9c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	781a      	ldrb	r2, [r3, #0]
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8017c96:	69fb      	ldr	r3, [r7, #28]
 8017c98:	3301      	adds	r3, #1
 8017c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	2252      	movs	r2, #82	@ 0x52
 8017ca0:	5a9b      	ldrh	r3, [r3, r2]
 8017ca2:	b29b      	uxth	r3, r3
 8017ca4:	3b01      	subs	r3, #1
 8017ca6:	b299      	uxth	r1, r3
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	2252      	movs	r2, #82	@ 0x52
 8017cac:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	2252      	movs	r2, #82	@ 0x52
 8017cb2:	5a9b      	ldrh	r3, [r3, r2]
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d1c9      	bne.n	8017c4e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017cba:	697a      	ldr	r2, [r7, #20]
 8017cbc:	68f8      	ldr	r0, [r7, #12]
 8017cbe:	683b      	ldr	r3, [r7, #0]
 8017cc0:	9300      	str	r3, [sp, #0]
 8017cc2:	0013      	movs	r3, r2
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	2140      	movs	r1, #64	@ 0x40
 8017cc8:	f001 f8c4 	bl	8018e54 <UART_WaitOnFlagUntilTimeout>
 8017ccc:	1e03      	subs	r3, r0, #0
 8017cce:	d004      	beq.n	8017cda <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	2220      	movs	r2, #32
 8017cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8017cd6:	2303      	movs	r3, #3
 8017cd8:	e005      	b.n	8017ce6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	2220      	movs	r2, #32
 8017cde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	e000      	b.n	8017ce6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017ce4:	2302      	movs	r3, #2
  }
}
 8017ce6:	0018      	movs	r0, r3
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	b008      	add	sp, #32
 8017cec:	bd80      	pop	{r7, pc}
	...

08017cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b088      	sub	sp, #32
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	60f8      	str	r0, [r7, #12]
 8017cf8:	60b9      	str	r1, [r7, #8]
 8017cfa:	1dbb      	adds	r3, r7, #6
 8017cfc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2280      	movs	r2, #128	@ 0x80
 8017d02:	589b      	ldr	r3, [r3, r2]
 8017d04:	2b20      	cmp	r3, #32
 8017d06:	d14a      	bne.n	8017d9e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	d003      	beq.n	8017d16 <HAL_UART_Receive_IT+0x26>
 8017d0e:	1dbb      	adds	r3, r7, #6
 8017d10:	881b      	ldrh	r3, [r3, #0]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d101      	bne.n	8017d1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017d16:	2301      	movs	r3, #1
 8017d18:	e042      	b.n	8017da0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	689a      	ldr	r2, [r3, #8]
 8017d1e:	2380      	movs	r3, #128	@ 0x80
 8017d20:	015b      	lsls	r3, r3, #5
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d109      	bne.n	8017d3a <HAL_UART_Receive_IT+0x4a>
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	691b      	ldr	r3, [r3, #16]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d105      	bne.n	8017d3a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017d2e:	68bb      	ldr	r3, [r7, #8]
 8017d30:	2201      	movs	r2, #1
 8017d32:	4013      	ands	r3, r2
 8017d34:	d001      	beq.n	8017d3a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017d36:	2301      	movs	r3, #1
 8017d38:	e032      	b.n	8017da0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	4a18      	ldr	r2, [pc, #96]	@ (8017da8 <HAL_UART_Receive_IT+0xb8>)
 8017d46:	4293      	cmp	r3, r2
 8017d48:	d020      	beq.n	8017d8c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	685a      	ldr	r2, [r3, #4]
 8017d50:	2380      	movs	r3, #128	@ 0x80
 8017d52:	041b      	lsls	r3, r3, #16
 8017d54:	4013      	ands	r3, r2
 8017d56:	d019      	beq.n	8017d8c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d58:	f3ef 8310 	mrs	r3, PRIMASK
 8017d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8017d5e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017d60:	61fb      	str	r3, [r7, #28]
 8017d62:	2301      	movs	r3, #1
 8017d64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	f383 8810 	msr	PRIMASK, r3
}
 8017d6c:	46c0      	nop			@ (mov r8, r8)
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	681a      	ldr	r2, [r3, #0]
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	2180      	movs	r1, #128	@ 0x80
 8017d7a:	04c9      	lsls	r1, r1, #19
 8017d7c:	430a      	orrs	r2, r1
 8017d7e:	601a      	str	r2, [r3, #0]
 8017d80:	69fb      	ldr	r3, [r7, #28]
 8017d82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d84:	69bb      	ldr	r3, [r7, #24]
 8017d86:	f383 8810 	msr	PRIMASK, r3
}
 8017d8a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017d8c:	1dbb      	adds	r3, r7, #6
 8017d8e:	881a      	ldrh	r2, [r3, #0]
 8017d90:	68b9      	ldr	r1, [r7, #8]
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	0018      	movs	r0, r3
 8017d96:	f001 f8c7 	bl	8018f28 <UART_Start_Receive_IT>
 8017d9a:	0003      	movs	r3, r0
 8017d9c:	e000      	b.n	8017da0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017d9e:	2302      	movs	r3, #2
  }
}
 8017da0:	0018      	movs	r0, r3
 8017da2:	46bd      	mov	sp, r7
 8017da4:	b008      	add	sp, #32
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	40004800 	.word	0x40004800

08017dac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b088      	sub	sp, #32
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	1dbb      	adds	r3, r7, #6
 8017db8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017dbe:	2b20      	cmp	r3, #32
 8017dc0:	d000      	beq.n	8017dc4 <HAL_UART_Transmit_DMA+0x18>
 8017dc2:	e077      	b.n	8017eb4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8017dc4:	68bb      	ldr	r3, [r7, #8]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d003      	beq.n	8017dd2 <HAL_UART_Transmit_DMA+0x26>
 8017dca:	1dbb      	adds	r3, r7, #6
 8017dcc:	881b      	ldrh	r3, [r3, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d101      	bne.n	8017dd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	e06f      	b.n	8017eb6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	689a      	ldr	r2, [r3, #8]
 8017dda:	2380      	movs	r3, #128	@ 0x80
 8017ddc:	015b      	lsls	r3, r3, #5
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d109      	bne.n	8017df6 <HAL_UART_Transmit_DMA+0x4a>
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	691b      	ldr	r3, [r3, #16]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d105      	bne.n	8017df6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2201      	movs	r2, #1
 8017dee:	4013      	ands	r3, r2
 8017df0:	d001      	beq.n	8017df6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017df2:	2301      	movs	r3, #1
 8017df4:	e05f      	b.n	8017eb6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	68ba      	ldr	r2, [r7, #8]
 8017dfa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	1dba      	adds	r2, r7, #6
 8017e00:	2150      	movs	r1, #80	@ 0x50
 8017e02:	8812      	ldrh	r2, [r2, #0]
 8017e04:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	1dba      	adds	r2, r7, #6
 8017e0a:	2152      	movs	r1, #82	@ 0x52
 8017e0c:	8812      	ldrh	r2, [r2, #0]
 8017e0e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	2284      	movs	r2, #132	@ 0x84
 8017e14:	2100      	movs	r1, #0
 8017e16:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2221      	movs	r2, #33	@ 0x21
 8017e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d027      	beq.n	8017e76 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e2a:	4a25      	ldr	r2, [pc, #148]	@ (8017ec0 <HAL_UART_Transmit_DMA+0x114>)
 8017e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e32:	4a24      	ldr	r2, [pc, #144]	@ (8017ec4 <HAL_UART_Transmit_DMA+0x118>)
 8017e34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e3a:	4a23      	ldr	r2, [pc, #140]	@ (8017ec8 <HAL_UART_Transmit_DMA+0x11c>)
 8017e3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017e42:	2200      	movs	r2, #0
 8017e44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e4e:	0019      	movs	r1, r3
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	3328      	adds	r3, #40	@ 0x28
 8017e56:	001a      	movs	r2, r3
 8017e58:	1dbb      	adds	r3, r7, #6
 8017e5a:	881b      	ldrh	r3, [r3, #0]
 8017e5c:	f7f8 f9ce 	bl	80101fc <HAL_DMA_Start_IT>
 8017e60:	1e03      	subs	r3, r0, #0
 8017e62:	d008      	beq.n	8017e76 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	2284      	movs	r2, #132	@ 0x84
 8017e68:	2110      	movs	r1, #16
 8017e6a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	2220      	movs	r2, #32
 8017e70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8017e72:	2301      	movs	r3, #1
 8017e74:	e01f      	b.n	8017eb6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	2240      	movs	r2, #64	@ 0x40
 8017e7c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8017e82:	613b      	str	r3, [r7, #16]
  return(result);
 8017e84:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017e86:	61fb      	str	r3, [r7, #28]
 8017e88:	2301      	movs	r3, #1
 8017e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	f383 8810 	msr	PRIMASK, r3
}
 8017e92:	46c0      	nop			@ (mov r8, r8)
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	689a      	ldr	r2, [r3, #8]
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2180      	movs	r1, #128	@ 0x80
 8017ea0:	430a      	orrs	r2, r1
 8017ea2:	609a      	str	r2, [r3, #8]
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ea8:	69bb      	ldr	r3, [r7, #24]
 8017eaa:	f383 8810 	msr	PRIMASK, r3
}
 8017eae:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	e000      	b.n	8017eb6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8017eb4:	2302      	movs	r3, #2
  }
}
 8017eb6:	0018      	movs	r0, r3
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	b008      	add	sp, #32
 8017ebc:	bd80      	pop	{r7, pc}
 8017ebe:	46c0      	nop			@ (mov r8, r8)
 8017ec0:	0801930d 	.word	0x0801930d
 8017ec4:	080193a9 	.word	0x080193a9
 8017ec8:	08019549 	.word	0x08019549

08017ecc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b088      	sub	sp, #32
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	60f8      	str	r0, [r7, #12]
 8017ed4:	60b9      	str	r1, [r7, #8]
 8017ed6:	1dbb      	adds	r3, r7, #6
 8017ed8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	2280      	movs	r2, #128	@ 0x80
 8017ede:	589b      	ldr	r3, [r3, r2]
 8017ee0:	2b20      	cmp	r3, #32
 8017ee2:	d14a      	bne.n	8017f7a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d003      	beq.n	8017ef2 <HAL_UART_Receive_DMA+0x26>
 8017eea:	1dbb      	adds	r3, r7, #6
 8017eec:	881b      	ldrh	r3, [r3, #0]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d101      	bne.n	8017ef6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	e042      	b.n	8017f7c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	689a      	ldr	r2, [r3, #8]
 8017efa:	2380      	movs	r3, #128	@ 0x80
 8017efc:	015b      	lsls	r3, r3, #5
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d109      	bne.n	8017f16 <HAL_UART_Receive_DMA+0x4a>
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	691b      	ldr	r3, [r3, #16]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d105      	bne.n	8017f16 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017f0a:	68bb      	ldr	r3, [r7, #8]
 8017f0c:	2201      	movs	r2, #1
 8017f0e:	4013      	ands	r3, r2
 8017f10:	d001      	beq.n	8017f16 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017f12:	2301      	movs	r3, #1
 8017f14:	e032      	b.n	8017f7c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	2200      	movs	r2, #0
 8017f1a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	4a18      	ldr	r2, [pc, #96]	@ (8017f84 <HAL_UART_Receive_DMA+0xb8>)
 8017f22:	4293      	cmp	r3, r2
 8017f24:	d020      	beq.n	8017f68 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	685a      	ldr	r2, [r3, #4]
 8017f2c:	2380      	movs	r3, #128	@ 0x80
 8017f2e:	041b      	lsls	r3, r3, #16
 8017f30:	4013      	ands	r3, r2
 8017f32:	d019      	beq.n	8017f68 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f34:	f3ef 8310 	mrs	r3, PRIMASK
 8017f38:	613b      	str	r3, [r7, #16]
  return(result);
 8017f3a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017f3c:	61fb      	str	r3, [r7, #28]
 8017f3e:	2301      	movs	r3, #1
 8017f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f42:	697b      	ldr	r3, [r7, #20]
 8017f44:	f383 8810 	msr	PRIMASK, r3
}
 8017f48:	46c0      	nop			@ (mov r8, r8)
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	681a      	ldr	r2, [r3, #0]
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	2180      	movs	r1, #128	@ 0x80
 8017f56:	04c9      	lsls	r1, r1, #19
 8017f58:	430a      	orrs	r2, r1
 8017f5a:	601a      	str	r2, [r3, #0]
 8017f5c:	69fb      	ldr	r3, [r7, #28]
 8017f5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f60:	69bb      	ldr	r3, [r7, #24]
 8017f62:	f383 8810 	msr	PRIMASK, r3
}
 8017f66:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017f68:	1dbb      	adds	r3, r7, #6
 8017f6a:	881a      	ldrh	r2, [r3, #0]
 8017f6c:	68b9      	ldr	r1, [r7, #8]
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	0018      	movs	r0, r3
 8017f72:	f001 f8a3 	bl	80190bc <UART_Start_Receive_DMA>
 8017f76:	0003      	movs	r3, r0
 8017f78:	e000      	b.n	8017f7c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017f7a:	2302      	movs	r3, #2
  }
}
 8017f7c:	0018      	movs	r0, r3
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	b008      	add	sp, #32
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	40004800 	.word	0x40004800

08017f88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017f88:	b590      	push	{r4, r7, lr}
 8017f8a:	b0ab      	sub	sp, #172	@ 0xac
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	69db      	ldr	r3, [r3, #28]
 8017f96:	22a4      	movs	r2, #164	@ 0xa4
 8017f98:	18b9      	adds	r1, r7, r2
 8017f9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	20a0      	movs	r0, #160	@ 0xa0
 8017fa4:	1839      	adds	r1, r7, r0
 8017fa6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	689b      	ldr	r3, [r3, #8]
 8017fae:	219c      	movs	r1, #156	@ 0x9c
 8017fb0:	1879      	adds	r1, r7, r1
 8017fb2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017fb4:	0011      	movs	r1, r2
 8017fb6:	18bb      	adds	r3, r7, r2
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4a9c      	ldr	r2, [pc, #624]	@ (801822c <HAL_UART_IRQHandler+0x2a4>)
 8017fbc:	4013      	ands	r3, r2
 8017fbe:	2298      	movs	r2, #152	@ 0x98
 8017fc0:	18bc      	adds	r4, r7, r2
 8017fc2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8017fc4:	18bb      	adds	r3, r7, r2
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d114      	bne.n	8017ff6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017fcc:	187b      	adds	r3, r7, r1
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	2220      	movs	r2, #32
 8017fd2:	4013      	ands	r3, r2
 8017fd4:	d00f      	beq.n	8017ff6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017fd6:	183b      	adds	r3, r7, r0
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	2220      	movs	r2, #32
 8017fdc:	4013      	ands	r3, r2
 8017fde:	d00a      	beq.n	8017ff6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d100      	bne.n	8017fea <HAL_UART_IRQHandler+0x62>
 8017fe8:	e2aa      	b.n	8018540 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017fee:	687a      	ldr	r2, [r7, #4]
 8017ff0:	0010      	movs	r0, r2
 8017ff2:	4798      	blx	r3
      }
      return;
 8017ff4:	e2a4      	b.n	8018540 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017ff6:	2398      	movs	r3, #152	@ 0x98
 8017ff8:	18fb      	adds	r3, r7, r3
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d100      	bne.n	8018002 <HAL_UART_IRQHandler+0x7a>
 8018000:	e11a      	b.n	8018238 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8018002:	239c      	movs	r3, #156	@ 0x9c
 8018004:	18fb      	adds	r3, r7, r3
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	2201      	movs	r2, #1
 801800a:	4013      	ands	r3, r2
 801800c:	d106      	bne.n	801801c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801800e:	23a0      	movs	r3, #160	@ 0xa0
 8018010:	18fb      	adds	r3, r7, r3
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4a86      	ldr	r2, [pc, #536]	@ (8018230 <HAL_UART_IRQHandler+0x2a8>)
 8018016:	4013      	ands	r3, r2
 8018018:	d100      	bne.n	801801c <HAL_UART_IRQHandler+0x94>
 801801a:	e10d      	b.n	8018238 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801801c:	23a4      	movs	r3, #164	@ 0xa4
 801801e:	18fb      	adds	r3, r7, r3
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	2201      	movs	r2, #1
 8018024:	4013      	ands	r3, r2
 8018026:	d012      	beq.n	801804e <HAL_UART_IRQHandler+0xc6>
 8018028:	23a0      	movs	r3, #160	@ 0xa0
 801802a:	18fb      	adds	r3, r7, r3
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	2380      	movs	r3, #128	@ 0x80
 8018030:	005b      	lsls	r3, r3, #1
 8018032:	4013      	ands	r3, r2
 8018034:	d00b      	beq.n	801804e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	2201      	movs	r2, #1
 801803c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2284      	movs	r2, #132	@ 0x84
 8018042:	589b      	ldr	r3, [r3, r2]
 8018044:	2201      	movs	r2, #1
 8018046:	431a      	orrs	r2, r3
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2184      	movs	r1, #132	@ 0x84
 801804c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801804e:	23a4      	movs	r3, #164	@ 0xa4
 8018050:	18fb      	adds	r3, r7, r3
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	2202      	movs	r2, #2
 8018056:	4013      	ands	r3, r2
 8018058:	d011      	beq.n	801807e <HAL_UART_IRQHandler+0xf6>
 801805a:	239c      	movs	r3, #156	@ 0x9c
 801805c:	18fb      	adds	r3, r7, r3
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	2201      	movs	r2, #1
 8018062:	4013      	ands	r3, r2
 8018064:	d00b      	beq.n	801807e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	2202      	movs	r2, #2
 801806c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2284      	movs	r2, #132	@ 0x84
 8018072:	589b      	ldr	r3, [r3, r2]
 8018074:	2204      	movs	r2, #4
 8018076:	431a      	orrs	r2, r3
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	2184      	movs	r1, #132	@ 0x84
 801807c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801807e:	23a4      	movs	r3, #164	@ 0xa4
 8018080:	18fb      	adds	r3, r7, r3
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	2204      	movs	r2, #4
 8018086:	4013      	ands	r3, r2
 8018088:	d011      	beq.n	80180ae <HAL_UART_IRQHandler+0x126>
 801808a:	239c      	movs	r3, #156	@ 0x9c
 801808c:	18fb      	adds	r3, r7, r3
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	2201      	movs	r2, #1
 8018092:	4013      	ands	r3, r2
 8018094:	d00b      	beq.n	80180ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	2204      	movs	r2, #4
 801809c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	2284      	movs	r2, #132	@ 0x84
 80180a2:	589b      	ldr	r3, [r3, r2]
 80180a4:	2202      	movs	r2, #2
 80180a6:	431a      	orrs	r2, r3
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2184      	movs	r1, #132	@ 0x84
 80180ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80180ae:	23a4      	movs	r3, #164	@ 0xa4
 80180b0:	18fb      	adds	r3, r7, r3
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	2208      	movs	r2, #8
 80180b6:	4013      	ands	r3, r2
 80180b8:	d017      	beq.n	80180ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80180ba:	23a0      	movs	r3, #160	@ 0xa0
 80180bc:	18fb      	adds	r3, r7, r3
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	2220      	movs	r2, #32
 80180c2:	4013      	ands	r3, r2
 80180c4:	d105      	bne.n	80180d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80180c6:	239c      	movs	r3, #156	@ 0x9c
 80180c8:	18fb      	adds	r3, r7, r3
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	2201      	movs	r2, #1
 80180ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80180d0:	d00b      	beq.n	80180ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	2208      	movs	r2, #8
 80180d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2284      	movs	r2, #132	@ 0x84
 80180de:	589b      	ldr	r3, [r3, r2]
 80180e0:	2208      	movs	r2, #8
 80180e2:	431a      	orrs	r2, r3
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	2184      	movs	r1, #132	@ 0x84
 80180e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80180ea:	23a4      	movs	r3, #164	@ 0xa4
 80180ec:	18fb      	adds	r3, r7, r3
 80180ee:	681a      	ldr	r2, [r3, #0]
 80180f0:	2380      	movs	r3, #128	@ 0x80
 80180f2:	011b      	lsls	r3, r3, #4
 80180f4:	4013      	ands	r3, r2
 80180f6:	d013      	beq.n	8018120 <HAL_UART_IRQHandler+0x198>
 80180f8:	23a0      	movs	r3, #160	@ 0xa0
 80180fa:	18fb      	adds	r3, r7, r3
 80180fc:	681a      	ldr	r2, [r3, #0]
 80180fe:	2380      	movs	r3, #128	@ 0x80
 8018100:	04db      	lsls	r3, r3, #19
 8018102:	4013      	ands	r3, r2
 8018104:	d00c      	beq.n	8018120 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2280      	movs	r2, #128	@ 0x80
 801810c:	0112      	lsls	r2, r2, #4
 801810e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2284      	movs	r2, #132	@ 0x84
 8018114:	589b      	ldr	r3, [r3, r2]
 8018116:	2220      	movs	r2, #32
 8018118:	431a      	orrs	r2, r3
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2184      	movs	r1, #132	@ 0x84
 801811e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2284      	movs	r2, #132	@ 0x84
 8018124:	589b      	ldr	r3, [r3, r2]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d100      	bne.n	801812c <HAL_UART_IRQHandler+0x1a4>
 801812a:	e20b      	b.n	8018544 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801812c:	23a4      	movs	r3, #164	@ 0xa4
 801812e:	18fb      	adds	r3, r7, r3
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	2220      	movs	r2, #32
 8018134:	4013      	ands	r3, r2
 8018136:	d00e      	beq.n	8018156 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8018138:	23a0      	movs	r3, #160	@ 0xa0
 801813a:	18fb      	adds	r3, r7, r3
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	2220      	movs	r2, #32
 8018140:	4013      	ands	r3, r2
 8018142:	d008      	beq.n	8018156 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018148:	2b00      	cmp	r3, #0
 801814a:	d004      	beq.n	8018156 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018150:	687a      	ldr	r2, [r7, #4]
 8018152:	0010      	movs	r0, r2
 8018154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2284      	movs	r2, #132	@ 0x84
 801815a:	589b      	ldr	r3, [r3, r2]
 801815c:	2194      	movs	r1, #148	@ 0x94
 801815e:	187a      	adds	r2, r7, r1
 8018160:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	689b      	ldr	r3, [r3, #8]
 8018168:	2240      	movs	r2, #64	@ 0x40
 801816a:	4013      	ands	r3, r2
 801816c:	2b40      	cmp	r3, #64	@ 0x40
 801816e:	d004      	beq.n	801817a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8018170:	187b      	adds	r3, r7, r1
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	2228      	movs	r2, #40	@ 0x28
 8018176:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8018178:	d04b      	beq.n	8018212 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	0018      	movs	r0, r3
 801817e:	f001 f861 	bl	8019244 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	689b      	ldr	r3, [r3, #8]
 8018188:	2240      	movs	r2, #64	@ 0x40
 801818a:	4013      	ands	r3, r2
 801818c:	2b40      	cmp	r3, #64	@ 0x40
 801818e:	d139      	bne.n	8018204 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018190:	f3ef 8310 	mrs	r3, PRIMASK
 8018194:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8018196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018198:	2090      	movs	r0, #144	@ 0x90
 801819a:	183a      	adds	r2, r7, r0
 801819c:	6013      	str	r3, [r2, #0]
 801819e:	2301      	movs	r3, #1
 80181a0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80181a4:	f383 8810 	msr	PRIMASK, r3
}
 80181a8:	46c0      	nop			@ (mov r8, r8)
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	689a      	ldr	r2, [r3, #8]
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2140      	movs	r1, #64	@ 0x40
 80181b6:	438a      	bics	r2, r1
 80181b8:	609a      	str	r2, [r3, #8]
 80181ba:	183b      	adds	r3, r7, r0
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80181c2:	f383 8810 	msr	PRIMASK, r3
}
 80181c6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d012      	beq.n	80181f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181d4:	4a17      	ldr	r2, [pc, #92]	@ (8018234 <HAL_UART_IRQHandler+0x2ac>)
 80181d6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181dc:	0018      	movs	r0, r3
 80181de:	f7f8 f8b3 	bl	8010348 <HAL_DMA_Abort_IT>
 80181e2:	1e03      	subs	r3, r0, #0
 80181e4:	d020      	beq.n	8018228 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181f0:	0018      	movs	r0, r3
 80181f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80181f4:	e018      	b.n	8018228 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2298      	movs	r2, #152	@ 0x98
 80181fa:	589b      	ldr	r3, [r3, r2]
 80181fc:	687a      	ldr	r2, [r7, #4]
 80181fe:	0010      	movs	r0, r2
 8018200:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018202:	e011      	b.n	8018228 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2298      	movs	r2, #152	@ 0x98
 8018208:	589b      	ldr	r3, [r3, r2]
 801820a:	687a      	ldr	r2, [r7, #4]
 801820c:	0010      	movs	r0, r2
 801820e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018210:	e00a      	b.n	8018228 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	2298      	movs	r2, #152	@ 0x98
 8018216:	589b      	ldr	r3, [r3, r2]
 8018218:	687a      	ldr	r2, [r7, #4]
 801821a:	0010      	movs	r0, r2
 801821c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	2284      	movs	r2, #132	@ 0x84
 8018222:	2100      	movs	r1, #0
 8018224:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8018226:	e18d      	b.n	8018544 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018228:	46c0      	nop			@ (mov r8, r8)
    return;
 801822a:	e18b      	b.n	8018544 <HAL_UART_IRQHandler+0x5bc>
 801822c:	0000080f 	.word	0x0000080f
 8018230:	04000120 	.word	0x04000120
 8018234:	080195d1 	.word	0x080195d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801823c:	2b01      	cmp	r3, #1
 801823e:	d000      	beq.n	8018242 <HAL_UART_IRQHandler+0x2ba>
 8018240:	e13d      	b.n	80184be <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8018242:	23a4      	movs	r3, #164	@ 0xa4
 8018244:	18fb      	adds	r3, r7, r3
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	2210      	movs	r2, #16
 801824a:	4013      	ands	r3, r2
 801824c:	d100      	bne.n	8018250 <HAL_UART_IRQHandler+0x2c8>
 801824e:	e136      	b.n	80184be <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8018250:	23a0      	movs	r3, #160	@ 0xa0
 8018252:	18fb      	adds	r3, r7, r3
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	2210      	movs	r2, #16
 8018258:	4013      	ands	r3, r2
 801825a:	d100      	bne.n	801825e <HAL_UART_IRQHandler+0x2d6>
 801825c:	e12f      	b.n	80184be <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	2210      	movs	r2, #16
 8018264:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	689b      	ldr	r3, [r3, #8]
 801826c:	2240      	movs	r2, #64	@ 0x40
 801826e:	4013      	ands	r3, r2
 8018270:	2b40      	cmp	r3, #64	@ 0x40
 8018272:	d000      	beq.n	8018276 <HAL_UART_IRQHandler+0x2ee>
 8018274:	e0a2      	b.n	80183bc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	685a      	ldr	r2, [r3, #4]
 801827e:	217e      	movs	r1, #126	@ 0x7e
 8018280:	187b      	adds	r3, r7, r1
 8018282:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8018284:	187b      	adds	r3, r7, r1
 8018286:	881b      	ldrh	r3, [r3, #0]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d100      	bne.n	801828e <HAL_UART_IRQHandler+0x306>
 801828c:	e15c      	b.n	8018548 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	2258      	movs	r2, #88	@ 0x58
 8018292:	5a9b      	ldrh	r3, [r3, r2]
 8018294:	187a      	adds	r2, r7, r1
 8018296:	8812      	ldrh	r2, [r2, #0]
 8018298:	429a      	cmp	r2, r3
 801829a:	d300      	bcc.n	801829e <HAL_UART_IRQHandler+0x316>
 801829c:	e154      	b.n	8018548 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	187a      	adds	r2, r7, r1
 80182a2:	215a      	movs	r1, #90	@ 0x5a
 80182a4:	8812      	ldrh	r2, [r2, #0]
 80182a6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	2220      	movs	r2, #32
 80182b2:	4013      	ands	r3, r2
 80182b4:	d16f      	bne.n	8018396 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182b6:	f3ef 8310 	mrs	r3, PRIMASK
 80182ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80182bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80182be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80182c0:	2301      	movs	r3, #1
 80182c2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182c6:	f383 8810 	msr	PRIMASK, r3
}
 80182ca:	46c0      	nop			@ (mov r8, r8)
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	49a0      	ldr	r1, [pc, #640]	@ (8018558 <HAL_UART_IRQHandler+0x5d0>)
 80182d8:	400a      	ands	r2, r1
 80182da:	601a      	str	r2, [r3, #0]
 80182dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182de:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e2:	f383 8810 	msr	PRIMASK, r3
}
 80182e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182e8:	f3ef 8310 	mrs	r3, PRIMASK
 80182ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80182ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80182f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80182f2:	2301      	movs	r3, #1
 80182f4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80182f8:	f383 8810 	msr	PRIMASK, r3
}
 80182fc:	46c0      	nop			@ (mov r8, r8)
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	689a      	ldr	r2, [r3, #8]
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2101      	movs	r1, #1
 801830a:	438a      	bics	r2, r1
 801830c:	609a      	str	r2, [r3, #8]
 801830e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018310:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018314:	f383 8810 	msr	PRIMASK, r3
}
 8018318:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801831a:	f3ef 8310 	mrs	r3, PRIMASK
 801831e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8018320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018322:	673b      	str	r3, [r7, #112]	@ 0x70
 8018324:	2301      	movs	r3, #1
 8018326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801832a:	f383 8810 	msr	PRIMASK, r3
}
 801832e:	46c0      	nop			@ (mov r8, r8)
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	689a      	ldr	r2, [r3, #8]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2140      	movs	r1, #64	@ 0x40
 801833c:	438a      	bics	r2, r1
 801833e:	609a      	str	r2, [r3, #8]
 8018340:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018342:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018346:	f383 8810 	msr	PRIMASK, r3
}
 801834a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	2280      	movs	r2, #128	@ 0x80
 8018350:	2120      	movs	r1, #32
 8018352:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	2200      	movs	r2, #0
 8018358:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801835a:	f3ef 8310 	mrs	r3, PRIMASK
 801835e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8018360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018364:	2301      	movs	r3, #1
 8018366:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801836a:	f383 8810 	msr	PRIMASK, r3
}
 801836e:	46c0      	nop			@ (mov r8, r8)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	681a      	ldr	r2, [r3, #0]
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	2110      	movs	r1, #16
 801837c:	438a      	bics	r2, r1
 801837e:	601a      	str	r2, [r3, #0]
 8018380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018382:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018386:	f383 8810 	msr	PRIMASK, r3
}
 801838a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018390:	0018      	movs	r0, r3
 8018392:	f7f7 ff99 	bl	80102c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	2202      	movs	r2, #2
 801839a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	22ac      	movs	r2, #172	@ 0xac
 80183a0:	589b      	ldr	r3, [r3, r2]
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	2158      	movs	r1, #88	@ 0x58
 80183a6:	5a51      	ldrh	r1, [r2, r1]
 80183a8:	687a      	ldr	r2, [r7, #4]
 80183aa:	205a      	movs	r0, #90	@ 0x5a
 80183ac:	5a12      	ldrh	r2, [r2, r0]
 80183ae:	b292      	uxth	r2, r2
 80183b0:	1a8a      	subs	r2, r1, r2
 80183b2:	b291      	uxth	r1, r2
 80183b4:	687a      	ldr	r2, [r7, #4]
 80183b6:	0010      	movs	r0, r2
 80183b8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80183ba:	e0c5      	b.n	8018548 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	2258      	movs	r2, #88	@ 0x58
 80183c0:	5a99      	ldrh	r1, [r3, r2]
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	225a      	movs	r2, #90	@ 0x5a
 80183c6:	5a9b      	ldrh	r3, [r3, r2]
 80183c8:	b29a      	uxth	r2, r3
 80183ca:	208e      	movs	r0, #142	@ 0x8e
 80183cc:	183b      	adds	r3, r7, r0
 80183ce:	1a8a      	subs	r2, r1, r2
 80183d0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	225a      	movs	r2, #90	@ 0x5a
 80183d6:	5a9b      	ldrh	r3, [r3, r2]
 80183d8:	b29b      	uxth	r3, r3
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d100      	bne.n	80183e0 <HAL_UART_IRQHandler+0x458>
 80183de:	e0b5      	b.n	801854c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80183e0:	183b      	adds	r3, r7, r0
 80183e2:	881b      	ldrh	r3, [r3, #0]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d100      	bne.n	80183ea <HAL_UART_IRQHandler+0x462>
 80183e8:	e0b0      	b.n	801854c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80183ea:	f3ef 8310 	mrs	r3, PRIMASK
 80183ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80183f0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80183f2:	2488      	movs	r4, #136	@ 0x88
 80183f4:	193a      	adds	r2, r7, r4
 80183f6:	6013      	str	r3, [r2, #0]
 80183f8:	2301      	movs	r3, #1
 80183fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80183fc:	693b      	ldr	r3, [r7, #16]
 80183fe:	f383 8810 	msr	PRIMASK, r3
}
 8018402:	46c0      	nop			@ (mov r8, r8)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	4953      	ldr	r1, [pc, #332]	@ (801855c <HAL_UART_IRQHandler+0x5d4>)
 8018410:	400a      	ands	r2, r1
 8018412:	601a      	str	r2, [r3, #0]
 8018414:	193b      	adds	r3, r7, r4
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801841a:	697b      	ldr	r3, [r7, #20]
 801841c:	f383 8810 	msr	PRIMASK, r3
}
 8018420:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018422:	f3ef 8310 	mrs	r3, PRIMASK
 8018426:	61bb      	str	r3, [r7, #24]
  return(result);
 8018428:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801842a:	2484      	movs	r4, #132	@ 0x84
 801842c:	193a      	adds	r2, r7, r4
 801842e:	6013      	str	r3, [r2, #0]
 8018430:	2301      	movs	r3, #1
 8018432:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018434:	69fb      	ldr	r3, [r7, #28]
 8018436:	f383 8810 	msr	PRIMASK, r3
}
 801843a:	46c0      	nop			@ (mov r8, r8)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	689a      	ldr	r2, [r3, #8]
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	2101      	movs	r1, #1
 8018448:	438a      	bics	r2, r1
 801844a:	609a      	str	r2, [r3, #8]
 801844c:	193b      	adds	r3, r7, r4
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018452:	6a3b      	ldr	r3, [r7, #32]
 8018454:	f383 8810 	msr	PRIMASK, r3
}
 8018458:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	2280      	movs	r2, #128	@ 0x80
 801845e:	2120      	movs	r1, #32
 8018460:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	2200      	movs	r2, #0
 8018466:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	2200      	movs	r2, #0
 801846c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801846e:	f3ef 8310 	mrs	r3, PRIMASK
 8018472:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018476:	2480      	movs	r4, #128	@ 0x80
 8018478:	193a      	adds	r2, r7, r4
 801847a:	6013      	str	r3, [r2, #0]
 801847c:	2301      	movs	r3, #1
 801847e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018482:	f383 8810 	msr	PRIMASK, r3
}
 8018486:	46c0      	nop			@ (mov r8, r8)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	681a      	ldr	r2, [r3, #0]
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	2110      	movs	r1, #16
 8018494:	438a      	bics	r2, r1
 8018496:	601a      	str	r2, [r3, #0]
 8018498:	193b      	adds	r3, r7, r4
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184a0:	f383 8810 	msr	PRIMASK, r3
}
 80184a4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	2202      	movs	r2, #2
 80184aa:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	22ac      	movs	r2, #172	@ 0xac
 80184b0:	589b      	ldr	r3, [r3, r2]
 80184b2:	183a      	adds	r2, r7, r0
 80184b4:	8811      	ldrh	r1, [r2, #0]
 80184b6:	687a      	ldr	r2, [r7, #4]
 80184b8:	0010      	movs	r0, r2
 80184ba:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80184bc:	e046      	b.n	801854c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80184be:	23a4      	movs	r3, #164	@ 0xa4
 80184c0:	18fb      	adds	r3, r7, r3
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	2380      	movs	r3, #128	@ 0x80
 80184c6:	035b      	lsls	r3, r3, #13
 80184c8:	4013      	ands	r3, r2
 80184ca:	d012      	beq.n	80184f2 <HAL_UART_IRQHandler+0x56a>
 80184cc:	239c      	movs	r3, #156	@ 0x9c
 80184ce:	18fb      	adds	r3, r7, r3
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	2380      	movs	r3, #128	@ 0x80
 80184d4:	03db      	lsls	r3, r3, #15
 80184d6:	4013      	ands	r3, r2
 80184d8:	d00b      	beq.n	80184f2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	2280      	movs	r2, #128	@ 0x80
 80184e0:	0352      	lsls	r2, r2, #13
 80184e2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	22a8      	movs	r2, #168	@ 0xa8
 80184e8:	589b      	ldr	r3, [r3, r2]
 80184ea:	687a      	ldr	r2, [r7, #4]
 80184ec:	0010      	movs	r0, r2
 80184ee:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80184f0:	e02f      	b.n	8018552 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80184f2:	23a4      	movs	r3, #164	@ 0xa4
 80184f4:	18fb      	adds	r3, r7, r3
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	2280      	movs	r2, #128	@ 0x80
 80184fa:	4013      	ands	r3, r2
 80184fc:	d00f      	beq.n	801851e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80184fe:	23a0      	movs	r3, #160	@ 0xa0
 8018500:	18fb      	adds	r3, r7, r3
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2280      	movs	r2, #128	@ 0x80
 8018506:	4013      	ands	r3, r2
 8018508:	d009      	beq.n	801851e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801850e:	2b00      	cmp	r3, #0
 8018510:	d01e      	beq.n	8018550 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018516:	687a      	ldr	r2, [r7, #4]
 8018518:	0010      	movs	r0, r2
 801851a:	4798      	blx	r3
    }
    return;
 801851c:	e018      	b.n	8018550 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801851e:	23a4      	movs	r3, #164	@ 0xa4
 8018520:	18fb      	adds	r3, r7, r3
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	2240      	movs	r2, #64	@ 0x40
 8018526:	4013      	ands	r3, r2
 8018528:	d013      	beq.n	8018552 <HAL_UART_IRQHandler+0x5ca>
 801852a:	23a0      	movs	r3, #160	@ 0xa0
 801852c:	18fb      	adds	r3, r7, r3
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	2240      	movs	r2, #64	@ 0x40
 8018532:	4013      	ands	r3, r2
 8018534:	d00d      	beq.n	8018552 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	0018      	movs	r0, r3
 801853a:	f001 f862 	bl	8019602 <UART_EndTransmit_IT>
    return;
 801853e:	e008      	b.n	8018552 <HAL_UART_IRQHandler+0x5ca>
      return;
 8018540:	46c0      	nop			@ (mov r8, r8)
 8018542:	e006      	b.n	8018552 <HAL_UART_IRQHandler+0x5ca>
    return;
 8018544:	46c0      	nop			@ (mov r8, r8)
 8018546:	e004      	b.n	8018552 <HAL_UART_IRQHandler+0x5ca>
      return;
 8018548:	46c0      	nop			@ (mov r8, r8)
 801854a:	e002      	b.n	8018552 <HAL_UART_IRQHandler+0x5ca>
      return;
 801854c:	46c0      	nop			@ (mov r8, r8)
 801854e:	e000      	b.n	8018552 <HAL_UART_IRQHandler+0x5ca>
    return;
 8018550:	46c0      	nop			@ (mov r8, r8)
  }

}
 8018552:	46bd      	mov	sp, r7
 8018554:	b02b      	add	sp, #172	@ 0xac
 8018556:	bd90      	pop	{r4, r7, pc}
 8018558:	fffffeff 	.word	0xfffffeff
 801855c:	fffffedf 	.word	0xfffffedf

08018560 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018568:	46c0      	nop			@ (mov r8, r8)
 801856a:	46bd      	mov	sp, r7
 801856c:	b002      	add	sp, #8
 801856e:	bd80      	pop	{r7, pc}

08018570 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8018578:	46c0      	nop			@ (mov r8, r8)
 801857a:	46bd      	mov	sp, r7
 801857c:	b002      	add	sp, #8
 801857e:	bd80      	pop	{r7, pc}

08018580 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b082      	sub	sp, #8
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8018588:	46c0      	nop			@ (mov r8, r8)
 801858a:	46bd      	mov	sp, r7
 801858c:	b002      	add	sp, #8
 801858e:	bd80      	pop	{r7, pc}

08018590 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8018598:	46c0      	nop			@ (mov r8, r8)
 801859a:	46bd      	mov	sp, r7
 801859c:	b002      	add	sp, #8
 801859e:	bd80      	pop	{r7, pc}

080185a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b082      	sub	sp, #8
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80185a8:	46c0      	nop			@ (mov r8, r8)
 80185aa:	46bd      	mov	sp, r7
 80185ac:	b002      	add	sp, #8
 80185ae:	bd80      	pop	{r7, pc}

080185b0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b082      	sub	sp, #8
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80185b8:	46c0      	nop			@ (mov r8, r8)
 80185ba:	46bd      	mov	sp, r7
 80185bc:	b002      	add	sp, #8
 80185be:	bd80      	pop	{r7, pc}

080185c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b082      	sub	sp, #8
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	000a      	movs	r2, r1
 80185ca:	1cbb      	adds	r3, r7, #2
 80185cc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80185ce:	46c0      	nop			@ (mov r8, r8)
 80185d0:	46bd      	mov	sp, r7
 80185d2:	b002      	add	sp, #8
 80185d4:	bd80      	pop	{r7, pc}
	...

080185d8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b082      	sub	sp, #8
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	2188      	movs	r1, #136	@ 0x88
 80185e4:	4a14      	ldr	r2, [pc, #80]	@ (8018638 <UART_InitCallbacksToDefault+0x60>)
 80185e6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	218c      	movs	r1, #140	@ 0x8c
 80185ec:	4a13      	ldr	r2, [pc, #76]	@ (801863c <UART_InitCallbacksToDefault+0x64>)
 80185ee:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	2190      	movs	r1, #144	@ 0x90
 80185f4:	4a12      	ldr	r2, [pc, #72]	@ (8018640 <UART_InitCallbacksToDefault+0x68>)
 80185f6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	2194      	movs	r1, #148	@ 0x94
 80185fc:	4a11      	ldr	r2, [pc, #68]	@ (8018644 <UART_InitCallbacksToDefault+0x6c>)
 80185fe:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2198      	movs	r1, #152	@ 0x98
 8018604:	4a10      	ldr	r2, [pc, #64]	@ (8018648 <UART_InitCallbacksToDefault+0x70>)
 8018606:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	219c      	movs	r1, #156	@ 0x9c
 801860c:	4a0f      	ldr	r2, [pc, #60]	@ (801864c <UART_InitCallbacksToDefault+0x74>)
 801860e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	21a0      	movs	r1, #160	@ 0xa0
 8018614:	4a0e      	ldr	r2, [pc, #56]	@ (8018650 <UART_InitCallbacksToDefault+0x78>)
 8018616:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	21a4      	movs	r1, #164	@ 0xa4
 801861c:	4a0d      	ldr	r2, [pc, #52]	@ (8018654 <UART_InitCallbacksToDefault+0x7c>)
 801861e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	21a8      	movs	r1, #168	@ 0xa8
 8018624:	4a0c      	ldr	r2, [pc, #48]	@ (8018658 <UART_InitCallbacksToDefault+0x80>)
 8018626:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	21ac      	movs	r1, #172	@ 0xac
 801862c:	4a0b      	ldr	r2, [pc, #44]	@ (801865c <UART_InitCallbacksToDefault+0x84>)
 801862e:	505a      	str	r2, [r3, r1]

}
 8018630:	46c0      	nop			@ (mov r8, r8)
 8018632:	46bd      	mov	sp, r7
 8018634:	b002      	add	sp, #8
 8018636:	bd80      	pop	{r7, pc}
 8018638:	08018571 	.word	0x08018571
 801863c:	08018561 	.word	0x08018561
 8018640:	08018581 	.word	0x08018581
 8018644:	08008bc5 	.word	0x08008bc5
 8018648:	08003bad 	.word	0x08003bad
 801864c:	08018591 	.word	0x08018591
 8018650:	080185a1 	.word	0x080185a1
 8018654:	080185b1 	.word	0x080185b1
 8018658:	080199f5 	.word	0x080199f5
 801865c:	080185c1 	.word	0x080185c1

08018660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018660:	b5b0      	push	{r4, r5, r7, lr}
 8018662:	b08e      	sub	sp, #56	@ 0x38
 8018664:	af00      	add	r7, sp, #0
 8018666:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8018668:	231a      	movs	r3, #26
 801866a:	2218      	movs	r2, #24
 801866c:	189b      	adds	r3, r3, r2
 801866e:	19db      	adds	r3, r3, r7
 8018670:	2200      	movs	r2, #0
 8018672:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018674:	69fb      	ldr	r3, [r7, #28]
 8018676:	689a      	ldr	r2, [r3, #8]
 8018678:	69fb      	ldr	r3, [r7, #28]
 801867a:	691b      	ldr	r3, [r3, #16]
 801867c:	431a      	orrs	r2, r3
 801867e:	69fb      	ldr	r3, [r7, #28]
 8018680:	695b      	ldr	r3, [r3, #20]
 8018682:	431a      	orrs	r2, r3
 8018684:	69fb      	ldr	r3, [r7, #28]
 8018686:	69db      	ldr	r3, [r3, #28]
 8018688:	4313      	orrs	r3, r2
 801868a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801868c:	69fb      	ldr	r3, [r7, #28]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	4ac3      	ldr	r2, [pc, #780]	@ (80189a0 <UART_SetConfig+0x340>)
 8018694:	4013      	ands	r3, r2
 8018696:	0019      	movs	r1, r3
 8018698:	69fb      	ldr	r3, [r7, #28]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801869e:	430a      	orrs	r2, r1
 80186a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	685b      	ldr	r3, [r3, #4]
 80186a8:	4abe      	ldr	r2, [pc, #760]	@ (80189a4 <UART_SetConfig+0x344>)
 80186aa:	4013      	ands	r3, r2
 80186ac:	0019      	movs	r1, r3
 80186ae:	69fb      	ldr	r3, [r7, #28]
 80186b0:	68da      	ldr	r2, [r3, #12]
 80186b2:	69fb      	ldr	r3, [r7, #28]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	430a      	orrs	r2, r1
 80186b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80186ba:	69fb      	ldr	r3, [r7, #28]
 80186bc:	699b      	ldr	r3, [r3, #24]
 80186be:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80186c0:	69fb      	ldr	r3, [r7, #28]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	4ab8      	ldr	r2, [pc, #736]	@ (80189a8 <UART_SetConfig+0x348>)
 80186c6:	4293      	cmp	r3, r2
 80186c8:	d004      	beq.n	80186d4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80186ca:	69fb      	ldr	r3, [r7, #28]
 80186cc:	6a1b      	ldr	r3, [r3, #32]
 80186ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80186d0:	4313      	orrs	r3, r2
 80186d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80186d4:	69fb      	ldr	r3, [r7, #28]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	689b      	ldr	r3, [r3, #8]
 80186da:	4ab4      	ldr	r2, [pc, #720]	@ (80189ac <UART_SetConfig+0x34c>)
 80186dc:	4013      	ands	r3, r2
 80186de:	0019      	movs	r1, r3
 80186e0:	69fb      	ldr	r3, [r7, #28]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80186e6:	430a      	orrs	r2, r1
 80186e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80186ea:	69fb      	ldr	r3, [r7, #28]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	4ab0      	ldr	r2, [pc, #704]	@ (80189b0 <UART_SetConfig+0x350>)
 80186f0:	4293      	cmp	r3, r2
 80186f2:	d131      	bne.n	8018758 <UART_SetConfig+0xf8>
 80186f4:	4baf      	ldr	r3, [pc, #700]	@ (80189b4 <UART_SetConfig+0x354>)
 80186f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80186f8:	2203      	movs	r2, #3
 80186fa:	4013      	ands	r3, r2
 80186fc:	2b03      	cmp	r3, #3
 80186fe:	d01d      	beq.n	801873c <UART_SetConfig+0xdc>
 8018700:	d823      	bhi.n	801874a <UART_SetConfig+0xea>
 8018702:	2b02      	cmp	r3, #2
 8018704:	d00c      	beq.n	8018720 <UART_SetConfig+0xc0>
 8018706:	d820      	bhi.n	801874a <UART_SetConfig+0xea>
 8018708:	2b00      	cmp	r3, #0
 801870a:	d002      	beq.n	8018712 <UART_SetConfig+0xb2>
 801870c:	2b01      	cmp	r3, #1
 801870e:	d00e      	beq.n	801872e <UART_SetConfig+0xce>
 8018710:	e01b      	b.n	801874a <UART_SetConfig+0xea>
 8018712:	231b      	movs	r3, #27
 8018714:	2218      	movs	r2, #24
 8018716:	189b      	adds	r3, r3, r2
 8018718:	19db      	adds	r3, r3, r7
 801871a:	2201      	movs	r2, #1
 801871c:	701a      	strb	r2, [r3, #0]
 801871e:	e0b4      	b.n	801888a <UART_SetConfig+0x22a>
 8018720:	231b      	movs	r3, #27
 8018722:	2218      	movs	r2, #24
 8018724:	189b      	adds	r3, r3, r2
 8018726:	19db      	adds	r3, r3, r7
 8018728:	2202      	movs	r2, #2
 801872a:	701a      	strb	r2, [r3, #0]
 801872c:	e0ad      	b.n	801888a <UART_SetConfig+0x22a>
 801872e:	231b      	movs	r3, #27
 8018730:	2218      	movs	r2, #24
 8018732:	189b      	adds	r3, r3, r2
 8018734:	19db      	adds	r3, r3, r7
 8018736:	2204      	movs	r2, #4
 8018738:	701a      	strb	r2, [r3, #0]
 801873a:	e0a6      	b.n	801888a <UART_SetConfig+0x22a>
 801873c:	231b      	movs	r3, #27
 801873e:	2218      	movs	r2, #24
 8018740:	189b      	adds	r3, r3, r2
 8018742:	19db      	adds	r3, r3, r7
 8018744:	2208      	movs	r2, #8
 8018746:	701a      	strb	r2, [r3, #0]
 8018748:	e09f      	b.n	801888a <UART_SetConfig+0x22a>
 801874a:	231b      	movs	r3, #27
 801874c:	2218      	movs	r2, #24
 801874e:	189b      	adds	r3, r3, r2
 8018750:	19db      	adds	r3, r3, r7
 8018752:	2210      	movs	r2, #16
 8018754:	701a      	strb	r2, [r3, #0]
 8018756:	e098      	b.n	801888a <UART_SetConfig+0x22a>
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	4a96      	ldr	r2, [pc, #600]	@ (80189b8 <UART_SetConfig+0x358>)
 801875e:	4293      	cmp	r3, r2
 8018760:	d131      	bne.n	80187c6 <UART_SetConfig+0x166>
 8018762:	4b94      	ldr	r3, [pc, #592]	@ (80189b4 <UART_SetConfig+0x354>)
 8018764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018766:	220c      	movs	r2, #12
 8018768:	4013      	ands	r3, r2
 801876a:	2b0c      	cmp	r3, #12
 801876c:	d01d      	beq.n	80187aa <UART_SetConfig+0x14a>
 801876e:	d823      	bhi.n	80187b8 <UART_SetConfig+0x158>
 8018770:	2b08      	cmp	r3, #8
 8018772:	d00c      	beq.n	801878e <UART_SetConfig+0x12e>
 8018774:	d820      	bhi.n	80187b8 <UART_SetConfig+0x158>
 8018776:	2b00      	cmp	r3, #0
 8018778:	d002      	beq.n	8018780 <UART_SetConfig+0x120>
 801877a:	2b04      	cmp	r3, #4
 801877c:	d00e      	beq.n	801879c <UART_SetConfig+0x13c>
 801877e:	e01b      	b.n	80187b8 <UART_SetConfig+0x158>
 8018780:	231b      	movs	r3, #27
 8018782:	2218      	movs	r2, #24
 8018784:	189b      	adds	r3, r3, r2
 8018786:	19db      	adds	r3, r3, r7
 8018788:	2200      	movs	r2, #0
 801878a:	701a      	strb	r2, [r3, #0]
 801878c:	e07d      	b.n	801888a <UART_SetConfig+0x22a>
 801878e:	231b      	movs	r3, #27
 8018790:	2218      	movs	r2, #24
 8018792:	189b      	adds	r3, r3, r2
 8018794:	19db      	adds	r3, r3, r7
 8018796:	2202      	movs	r2, #2
 8018798:	701a      	strb	r2, [r3, #0]
 801879a:	e076      	b.n	801888a <UART_SetConfig+0x22a>
 801879c:	231b      	movs	r3, #27
 801879e:	2218      	movs	r2, #24
 80187a0:	189b      	adds	r3, r3, r2
 80187a2:	19db      	adds	r3, r3, r7
 80187a4:	2204      	movs	r2, #4
 80187a6:	701a      	strb	r2, [r3, #0]
 80187a8:	e06f      	b.n	801888a <UART_SetConfig+0x22a>
 80187aa:	231b      	movs	r3, #27
 80187ac:	2218      	movs	r2, #24
 80187ae:	189b      	adds	r3, r3, r2
 80187b0:	19db      	adds	r3, r3, r7
 80187b2:	2208      	movs	r2, #8
 80187b4:	701a      	strb	r2, [r3, #0]
 80187b6:	e068      	b.n	801888a <UART_SetConfig+0x22a>
 80187b8:	231b      	movs	r3, #27
 80187ba:	2218      	movs	r2, #24
 80187bc:	189b      	adds	r3, r3, r2
 80187be:	19db      	adds	r3, r3, r7
 80187c0:	2210      	movs	r2, #16
 80187c2:	701a      	strb	r2, [r3, #0]
 80187c4:	e061      	b.n	801888a <UART_SetConfig+0x22a>
 80187c6:	69fb      	ldr	r3, [r7, #28]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	4a7c      	ldr	r2, [pc, #496]	@ (80189bc <UART_SetConfig+0x35c>)
 80187cc:	4293      	cmp	r3, r2
 80187ce:	d106      	bne.n	80187de <UART_SetConfig+0x17e>
 80187d0:	231b      	movs	r3, #27
 80187d2:	2218      	movs	r2, #24
 80187d4:	189b      	adds	r3, r3, r2
 80187d6:	19db      	adds	r3, r3, r7
 80187d8:	2200      	movs	r2, #0
 80187da:	701a      	strb	r2, [r3, #0]
 80187dc:	e055      	b.n	801888a <UART_SetConfig+0x22a>
 80187de:	69fb      	ldr	r3, [r7, #28]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	4a77      	ldr	r2, [pc, #476]	@ (80189c0 <UART_SetConfig+0x360>)
 80187e4:	4293      	cmp	r3, r2
 80187e6:	d106      	bne.n	80187f6 <UART_SetConfig+0x196>
 80187e8:	231b      	movs	r3, #27
 80187ea:	2218      	movs	r2, #24
 80187ec:	189b      	adds	r3, r3, r2
 80187ee:	19db      	adds	r3, r3, r7
 80187f0:	2200      	movs	r2, #0
 80187f2:	701a      	strb	r2, [r3, #0]
 80187f4:	e049      	b.n	801888a <UART_SetConfig+0x22a>
 80187f6:	69fb      	ldr	r3, [r7, #28]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	4a6b      	ldr	r2, [pc, #428]	@ (80189a8 <UART_SetConfig+0x348>)
 80187fc:	4293      	cmp	r3, r2
 80187fe:	d13e      	bne.n	801887e <UART_SetConfig+0x21e>
 8018800:	4b6c      	ldr	r3, [pc, #432]	@ (80189b4 <UART_SetConfig+0x354>)
 8018802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018804:	23c0      	movs	r3, #192	@ 0xc0
 8018806:	011b      	lsls	r3, r3, #4
 8018808:	4013      	ands	r3, r2
 801880a:	22c0      	movs	r2, #192	@ 0xc0
 801880c:	0112      	lsls	r2, r2, #4
 801880e:	4293      	cmp	r3, r2
 8018810:	d027      	beq.n	8018862 <UART_SetConfig+0x202>
 8018812:	22c0      	movs	r2, #192	@ 0xc0
 8018814:	0112      	lsls	r2, r2, #4
 8018816:	4293      	cmp	r3, r2
 8018818:	d82a      	bhi.n	8018870 <UART_SetConfig+0x210>
 801881a:	2280      	movs	r2, #128	@ 0x80
 801881c:	0112      	lsls	r2, r2, #4
 801881e:	4293      	cmp	r3, r2
 8018820:	d011      	beq.n	8018846 <UART_SetConfig+0x1e6>
 8018822:	2280      	movs	r2, #128	@ 0x80
 8018824:	0112      	lsls	r2, r2, #4
 8018826:	4293      	cmp	r3, r2
 8018828:	d822      	bhi.n	8018870 <UART_SetConfig+0x210>
 801882a:	2b00      	cmp	r3, #0
 801882c:	d004      	beq.n	8018838 <UART_SetConfig+0x1d8>
 801882e:	2280      	movs	r2, #128	@ 0x80
 8018830:	00d2      	lsls	r2, r2, #3
 8018832:	4293      	cmp	r3, r2
 8018834:	d00e      	beq.n	8018854 <UART_SetConfig+0x1f4>
 8018836:	e01b      	b.n	8018870 <UART_SetConfig+0x210>
 8018838:	231b      	movs	r3, #27
 801883a:	2218      	movs	r2, #24
 801883c:	189b      	adds	r3, r3, r2
 801883e:	19db      	adds	r3, r3, r7
 8018840:	2200      	movs	r2, #0
 8018842:	701a      	strb	r2, [r3, #0]
 8018844:	e021      	b.n	801888a <UART_SetConfig+0x22a>
 8018846:	231b      	movs	r3, #27
 8018848:	2218      	movs	r2, #24
 801884a:	189b      	adds	r3, r3, r2
 801884c:	19db      	adds	r3, r3, r7
 801884e:	2202      	movs	r2, #2
 8018850:	701a      	strb	r2, [r3, #0]
 8018852:	e01a      	b.n	801888a <UART_SetConfig+0x22a>
 8018854:	231b      	movs	r3, #27
 8018856:	2218      	movs	r2, #24
 8018858:	189b      	adds	r3, r3, r2
 801885a:	19db      	adds	r3, r3, r7
 801885c:	2204      	movs	r2, #4
 801885e:	701a      	strb	r2, [r3, #0]
 8018860:	e013      	b.n	801888a <UART_SetConfig+0x22a>
 8018862:	231b      	movs	r3, #27
 8018864:	2218      	movs	r2, #24
 8018866:	189b      	adds	r3, r3, r2
 8018868:	19db      	adds	r3, r3, r7
 801886a:	2208      	movs	r2, #8
 801886c:	701a      	strb	r2, [r3, #0]
 801886e:	e00c      	b.n	801888a <UART_SetConfig+0x22a>
 8018870:	231b      	movs	r3, #27
 8018872:	2218      	movs	r2, #24
 8018874:	189b      	adds	r3, r3, r2
 8018876:	19db      	adds	r3, r3, r7
 8018878:	2210      	movs	r2, #16
 801887a:	701a      	strb	r2, [r3, #0]
 801887c:	e005      	b.n	801888a <UART_SetConfig+0x22a>
 801887e:	231b      	movs	r3, #27
 8018880:	2218      	movs	r2, #24
 8018882:	189b      	adds	r3, r3, r2
 8018884:	19db      	adds	r3, r3, r7
 8018886:	2210      	movs	r2, #16
 8018888:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801888a:	69fb      	ldr	r3, [r7, #28]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4a46      	ldr	r2, [pc, #280]	@ (80189a8 <UART_SetConfig+0x348>)
 8018890:	4293      	cmp	r3, r2
 8018892:	d000      	beq.n	8018896 <UART_SetConfig+0x236>
 8018894:	e09a      	b.n	80189cc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018896:	231b      	movs	r3, #27
 8018898:	2218      	movs	r2, #24
 801889a:	189b      	adds	r3, r3, r2
 801889c:	19db      	adds	r3, r3, r7
 801889e:	781b      	ldrb	r3, [r3, #0]
 80188a0:	2b08      	cmp	r3, #8
 80188a2:	d01d      	beq.n	80188e0 <UART_SetConfig+0x280>
 80188a4:	dc20      	bgt.n	80188e8 <UART_SetConfig+0x288>
 80188a6:	2b04      	cmp	r3, #4
 80188a8:	d015      	beq.n	80188d6 <UART_SetConfig+0x276>
 80188aa:	dc1d      	bgt.n	80188e8 <UART_SetConfig+0x288>
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d002      	beq.n	80188b6 <UART_SetConfig+0x256>
 80188b0:	2b02      	cmp	r3, #2
 80188b2:	d005      	beq.n	80188c0 <UART_SetConfig+0x260>
 80188b4:	e018      	b.n	80188e8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80188b6:	f7fd fe4b 	bl	8016550 <HAL_RCC_GetPCLK1Freq>
 80188ba:	0003      	movs	r3, r0
 80188bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80188be:	e01c      	b.n	80188fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80188c0:	4b3c      	ldr	r3, [pc, #240]	@ (80189b4 <UART_SetConfig+0x354>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	2210      	movs	r2, #16
 80188c6:	4013      	ands	r3, r2
 80188c8:	d002      	beq.n	80188d0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80188ca:	4b3e      	ldr	r3, [pc, #248]	@ (80189c4 <UART_SetConfig+0x364>)
 80188cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80188ce:	e014      	b.n	80188fa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80188d0:	4b3d      	ldr	r3, [pc, #244]	@ (80189c8 <UART_SetConfig+0x368>)
 80188d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80188d4:	e011      	b.n	80188fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80188d6:	f7fd fd8b 	bl	80163f0 <HAL_RCC_GetSysClockFreq>
 80188da:	0003      	movs	r3, r0
 80188dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80188de:	e00c      	b.n	80188fa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80188e0:	2380      	movs	r3, #128	@ 0x80
 80188e2:	021b      	lsls	r3, r3, #8
 80188e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80188e6:	e008      	b.n	80188fa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80188e8:	2300      	movs	r3, #0
 80188ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80188ec:	231a      	movs	r3, #26
 80188ee:	2218      	movs	r2, #24
 80188f0:	189b      	adds	r3, r3, r2
 80188f2:	19db      	adds	r3, r3, r7
 80188f4:	2201      	movs	r2, #1
 80188f6:	701a      	strb	r2, [r3, #0]
        break;
 80188f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80188fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d100      	bne.n	8018902 <UART_SetConfig+0x2a2>
 8018900:	e133      	b.n	8018b6a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018902:	69fb      	ldr	r3, [r7, #28]
 8018904:	685a      	ldr	r2, [r3, #4]
 8018906:	0013      	movs	r3, r2
 8018908:	005b      	lsls	r3, r3, #1
 801890a:	189b      	adds	r3, r3, r2
 801890c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801890e:	429a      	cmp	r2, r3
 8018910:	d305      	bcc.n	801891e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8018912:	69fb      	ldr	r3, [r7, #28]
 8018914:	685b      	ldr	r3, [r3, #4]
 8018916:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801891a:	429a      	cmp	r2, r3
 801891c:	d906      	bls.n	801892c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801891e:	231a      	movs	r3, #26
 8018920:	2218      	movs	r2, #24
 8018922:	189b      	adds	r3, r3, r2
 8018924:	19db      	adds	r3, r3, r7
 8018926:	2201      	movs	r2, #1
 8018928:	701a      	strb	r2, [r3, #0]
 801892a:	e11e      	b.n	8018b6a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801892e:	613b      	str	r3, [r7, #16]
 8018930:	2300      	movs	r3, #0
 8018932:	617b      	str	r3, [r7, #20]
 8018934:	6939      	ldr	r1, [r7, #16]
 8018936:	697a      	ldr	r2, [r7, #20]
 8018938:	000b      	movs	r3, r1
 801893a:	0e1b      	lsrs	r3, r3, #24
 801893c:	0010      	movs	r0, r2
 801893e:	0205      	lsls	r5, r0, #8
 8018940:	431d      	orrs	r5, r3
 8018942:	000b      	movs	r3, r1
 8018944:	021c      	lsls	r4, r3, #8
 8018946:	69fb      	ldr	r3, [r7, #28]
 8018948:	685b      	ldr	r3, [r3, #4]
 801894a:	085b      	lsrs	r3, r3, #1
 801894c:	60bb      	str	r3, [r7, #8]
 801894e:	2300      	movs	r3, #0
 8018950:	60fb      	str	r3, [r7, #12]
 8018952:	68b8      	ldr	r0, [r7, #8]
 8018954:	68f9      	ldr	r1, [r7, #12]
 8018956:	1900      	adds	r0, r0, r4
 8018958:	4169      	adcs	r1, r5
 801895a:	69fb      	ldr	r3, [r7, #28]
 801895c:	685b      	ldr	r3, [r3, #4]
 801895e:	603b      	str	r3, [r7, #0]
 8018960:	2300      	movs	r3, #0
 8018962:	607b      	str	r3, [r7, #4]
 8018964:	683a      	ldr	r2, [r7, #0]
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	f7e7 fe0a 	bl	8000580 <__aeabi_uldivmod>
 801896c:	0002      	movs	r2, r0
 801896e:	000b      	movs	r3, r1
 8018970:	0013      	movs	r3, r2
 8018972:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018974:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018976:	23c0      	movs	r3, #192	@ 0xc0
 8018978:	009b      	lsls	r3, r3, #2
 801897a:	429a      	cmp	r2, r3
 801897c:	d309      	bcc.n	8018992 <UART_SetConfig+0x332>
 801897e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018980:	2380      	movs	r3, #128	@ 0x80
 8018982:	035b      	lsls	r3, r3, #13
 8018984:	429a      	cmp	r2, r3
 8018986:	d204      	bcs.n	8018992 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8018988:	69fb      	ldr	r3, [r7, #28]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801898e:	60da      	str	r2, [r3, #12]
 8018990:	e0eb      	b.n	8018b6a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8018992:	231a      	movs	r3, #26
 8018994:	2218      	movs	r2, #24
 8018996:	189b      	adds	r3, r3, r2
 8018998:	19db      	adds	r3, r3, r7
 801899a:	2201      	movs	r2, #1
 801899c:	701a      	strb	r2, [r3, #0]
 801899e:	e0e4      	b.n	8018b6a <UART_SetConfig+0x50a>
 80189a0:	efff69f3 	.word	0xefff69f3
 80189a4:	ffffcfff 	.word	0xffffcfff
 80189a8:	40004800 	.word	0x40004800
 80189ac:	fffff4ff 	.word	0xfffff4ff
 80189b0:	40013800 	.word	0x40013800
 80189b4:	40021000 	.word	0x40021000
 80189b8:	40004400 	.word	0x40004400
 80189bc:	40004c00 	.word	0x40004c00
 80189c0:	40005000 	.word	0x40005000
 80189c4:	003d0900 	.word	0x003d0900
 80189c8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80189cc:	69fb      	ldr	r3, [r7, #28]
 80189ce:	69da      	ldr	r2, [r3, #28]
 80189d0:	2380      	movs	r3, #128	@ 0x80
 80189d2:	021b      	lsls	r3, r3, #8
 80189d4:	429a      	cmp	r2, r3
 80189d6:	d000      	beq.n	80189da <UART_SetConfig+0x37a>
 80189d8:	e070      	b.n	8018abc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80189da:	231b      	movs	r3, #27
 80189dc:	2218      	movs	r2, #24
 80189de:	189b      	adds	r3, r3, r2
 80189e0:	19db      	adds	r3, r3, r7
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2b08      	cmp	r3, #8
 80189e6:	d822      	bhi.n	8018a2e <UART_SetConfig+0x3ce>
 80189e8:	009a      	lsls	r2, r3, #2
 80189ea:	4b67      	ldr	r3, [pc, #412]	@ (8018b88 <UART_SetConfig+0x528>)
 80189ec:	18d3      	adds	r3, r2, r3
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80189f2:	f7fd fdad 	bl	8016550 <HAL_RCC_GetPCLK1Freq>
 80189f6:	0003      	movs	r3, r0
 80189f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80189fa:	e021      	b.n	8018a40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80189fc:	f7fd fdbe 	bl	801657c <HAL_RCC_GetPCLK2Freq>
 8018a00:	0003      	movs	r3, r0
 8018a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a04:	e01c      	b.n	8018a40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018a06:	4b61      	ldr	r3, [pc, #388]	@ (8018b8c <UART_SetConfig+0x52c>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	2210      	movs	r2, #16
 8018a0c:	4013      	ands	r3, r2
 8018a0e:	d002      	beq.n	8018a16 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018a10:	4b5f      	ldr	r3, [pc, #380]	@ (8018b90 <UART_SetConfig+0x530>)
 8018a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018a14:	e014      	b.n	8018a40 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8018a16:	4b5f      	ldr	r3, [pc, #380]	@ (8018b94 <UART_SetConfig+0x534>)
 8018a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a1a:	e011      	b.n	8018a40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018a1c:	f7fd fce8 	bl	80163f0 <HAL_RCC_GetSysClockFreq>
 8018a20:	0003      	movs	r3, r0
 8018a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a24:	e00c      	b.n	8018a40 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018a26:	2380      	movs	r3, #128	@ 0x80
 8018a28:	021b      	lsls	r3, r3, #8
 8018a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018a2c:	e008      	b.n	8018a40 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018a32:	231a      	movs	r3, #26
 8018a34:	2218      	movs	r2, #24
 8018a36:	189b      	adds	r3, r3, r2
 8018a38:	19db      	adds	r3, r3, r7
 8018a3a:	2201      	movs	r2, #1
 8018a3c:	701a      	strb	r2, [r3, #0]
        break;
 8018a3e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d100      	bne.n	8018a48 <UART_SetConfig+0x3e8>
 8018a46:	e090      	b.n	8018b6a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8018a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a4a:	005a      	lsls	r2, r3, #1
 8018a4c:	69fb      	ldr	r3, [r7, #28]
 8018a4e:	685b      	ldr	r3, [r3, #4]
 8018a50:	085b      	lsrs	r3, r3, #1
 8018a52:	18d2      	adds	r2, r2, r3
 8018a54:	69fb      	ldr	r3, [r7, #28]
 8018a56:	685b      	ldr	r3, [r3, #4]
 8018a58:	0019      	movs	r1, r3
 8018a5a:	0010      	movs	r0, r2
 8018a5c:	f7e7 fba2 	bl	80001a4 <__udivsi3>
 8018a60:	0003      	movs	r3, r0
 8018a62:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a66:	2b0f      	cmp	r3, #15
 8018a68:	d921      	bls.n	8018aae <UART_SetConfig+0x44e>
 8018a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018a6c:	2380      	movs	r3, #128	@ 0x80
 8018a6e:	025b      	lsls	r3, r3, #9
 8018a70:	429a      	cmp	r2, r3
 8018a72:	d21c      	bcs.n	8018aae <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a76:	b29a      	uxth	r2, r3
 8018a78:	200e      	movs	r0, #14
 8018a7a:	2418      	movs	r4, #24
 8018a7c:	1903      	adds	r3, r0, r4
 8018a7e:	19db      	adds	r3, r3, r7
 8018a80:	210f      	movs	r1, #15
 8018a82:	438a      	bics	r2, r1
 8018a84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a88:	085b      	lsrs	r3, r3, #1
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	2207      	movs	r2, #7
 8018a8e:	4013      	ands	r3, r2
 8018a90:	b299      	uxth	r1, r3
 8018a92:	1903      	adds	r3, r0, r4
 8018a94:	19db      	adds	r3, r3, r7
 8018a96:	1902      	adds	r2, r0, r4
 8018a98:	19d2      	adds	r2, r2, r7
 8018a9a:	8812      	ldrh	r2, [r2, #0]
 8018a9c:	430a      	orrs	r2, r1
 8018a9e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	1902      	adds	r2, r0, r4
 8018aa6:	19d2      	adds	r2, r2, r7
 8018aa8:	8812      	ldrh	r2, [r2, #0]
 8018aaa:	60da      	str	r2, [r3, #12]
 8018aac:	e05d      	b.n	8018b6a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018aae:	231a      	movs	r3, #26
 8018ab0:	2218      	movs	r2, #24
 8018ab2:	189b      	adds	r3, r3, r2
 8018ab4:	19db      	adds	r3, r3, r7
 8018ab6:	2201      	movs	r2, #1
 8018ab8:	701a      	strb	r2, [r3, #0]
 8018aba:	e056      	b.n	8018b6a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018abc:	231b      	movs	r3, #27
 8018abe:	2218      	movs	r2, #24
 8018ac0:	189b      	adds	r3, r3, r2
 8018ac2:	19db      	adds	r3, r3, r7
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	2b08      	cmp	r3, #8
 8018ac8:	d822      	bhi.n	8018b10 <UART_SetConfig+0x4b0>
 8018aca:	009a      	lsls	r2, r3, #2
 8018acc:	4b32      	ldr	r3, [pc, #200]	@ (8018b98 <UART_SetConfig+0x538>)
 8018ace:	18d3      	adds	r3, r2, r3
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018ad4:	f7fd fd3c 	bl	8016550 <HAL_RCC_GetPCLK1Freq>
 8018ad8:	0003      	movs	r3, r0
 8018ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018adc:	e021      	b.n	8018b22 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018ade:	f7fd fd4d 	bl	801657c <HAL_RCC_GetPCLK2Freq>
 8018ae2:	0003      	movs	r3, r0
 8018ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018ae6:	e01c      	b.n	8018b22 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018ae8:	4b28      	ldr	r3, [pc, #160]	@ (8018b8c <UART_SetConfig+0x52c>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	2210      	movs	r2, #16
 8018aee:	4013      	ands	r3, r2
 8018af0:	d002      	beq.n	8018af8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018af2:	4b27      	ldr	r3, [pc, #156]	@ (8018b90 <UART_SetConfig+0x530>)
 8018af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018af6:	e014      	b.n	8018b22 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018af8:	4b26      	ldr	r3, [pc, #152]	@ (8018b94 <UART_SetConfig+0x534>)
 8018afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018afc:	e011      	b.n	8018b22 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018afe:	f7fd fc77 	bl	80163f0 <HAL_RCC_GetSysClockFreq>
 8018b02:	0003      	movs	r3, r0
 8018b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b06:	e00c      	b.n	8018b22 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018b08:	2380      	movs	r3, #128	@ 0x80
 8018b0a:	021b      	lsls	r3, r3, #8
 8018b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018b0e:	e008      	b.n	8018b22 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018b10:	2300      	movs	r3, #0
 8018b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018b14:	231a      	movs	r3, #26
 8018b16:	2218      	movs	r2, #24
 8018b18:	189b      	adds	r3, r3, r2
 8018b1a:	19db      	adds	r3, r3, r7
 8018b1c:	2201      	movs	r2, #1
 8018b1e:	701a      	strb	r2, [r3, #0]
        break;
 8018b20:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8018b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d020      	beq.n	8018b6a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018b28:	69fb      	ldr	r3, [r7, #28]
 8018b2a:	685b      	ldr	r3, [r3, #4]
 8018b2c:	085a      	lsrs	r2, r3, #1
 8018b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b30:	18d2      	adds	r2, r2, r3
 8018b32:	69fb      	ldr	r3, [r7, #28]
 8018b34:	685b      	ldr	r3, [r3, #4]
 8018b36:	0019      	movs	r1, r3
 8018b38:	0010      	movs	r0, r2
 8018b3a:	f7e7 fb33 	bl	80001a4 <__udivsi3>
 8018b3e:	0003      	movs	r3, r0
 8018b40:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b44:	2b0f      	cmp	r3, #15
 8018b46:	d90a      	bls.n	8018b5e <UART_SetConfig+0x4fe>
 8018b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018b4a:	2380      	movs	r3, #128	@ 0x80
 8018b4c:	025b      	lsls	r3, r3, #9
 8018b4e:	429a      	cmp	r2, r3
 8018b50:	d205      	bcs.n	8018b5e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b54:	b29a      	uxth	r2, r3
 8018b56:	69fb      	ldr	r3, [r7, #28]
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	60da      	str	r2, [r3, #12]
 8018b5c:	e005      	b.n	8018b6a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018b5e:	231a      	movs	r3, #26
 8018b60:	2218      	movs	r2, #24
 8018b62:	189b      	adds	r3, r3, r2
 8018b64:	19db      	adds	r3, r3, r7
 8018b66:	2201      	movs	r2, #1
 8018b68:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018b6a:	69fb      	ldr	r3, [r7, #28]
 8018b6c:	2200      	movs	r2, #0
 8018b6e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8018b70:	69fb      	ldr	r3, [r7, #28]
 8018b72:	2200      	movs	r2, #0
 8018b74:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8018b76:	231a      	movs	r3, #26
 8018b78:	2218      	movs	r2, #24
 8018b7a:	189b      	adds	r3, r3, r2
 8018b7c:	19db      	adds	r3, r3, r7
 8018b7e:	781b      	ldrb	r3, [r3, #0]
}
 8018b80:	0018      	movs	r0, r3
 8018b82:	46bd      	mov	sp, r7
 8018b84:	b00e      	add	sp, #56	@ 0x38
 8018b86:	bdb0      	pop	{r4, r5, r7, pc}
 8018b88:	0802673c 	.word	0x0802673c
 8018b8c:	40021000 	.word	0x40021000
 8018b90:	003d0900 	.word	0x003d0900
 8018b94:	00f42400 	.word	0x00f42400
 8018b98:	08026760 	.word	0x08026760

08018b9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ba8:	2201      	movs	r2, #1
 8018baa:	4013      	ands	r3, r2
 8018bac:	d00b      	beq.n	8018bc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	685b      	ldr	r3, [r3, #4]
 8018bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8018ce0 <UART_AdvFeatureConfig+0x144>)
 8018bb6:	4013      	ands	r3, r2
 8018bb8:	0019      	movs	r1, r3
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	430a      	orrs	r2, r1
 8018bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bca:	2202      	movs	r2, #2
 8018bcc:	4013      	ands	r3, r2
 8018bce:	d00b      	beq.n	8018be8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	685b      	ldr	r3, [r3, #4]
 8018bd6:	4a43      	ldr	r2, [pc, #268]	@ (8018ce4 <UART_AdvFeatureConfig+0x148>)
 8018bd8:	4013      	ands	r3, r2
 8018bda:	0019      	movs	r1, r3
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	430a      	orrs	r2, r1
 8018be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bec:	2204      	movs	r2, #4
 8018bee:	4013      	ands	r3, r2
 8018bf0:	d00b      	beq.n	8018c0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	4a3b      	ldr	r2, [pc, #236]	@ (8018ce8 <UART_AdvFeatureConfig+0x14c>)
 8018bfa:	4013      	ands	r3, r2
 8018bfc:	0019      	movs	r1, r3
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	430a      	orrs	r2, r1
 8018c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c0e:	2208      	movs	r2, #8
 8018c10:	4013      	ands	r3, r2
 8018c12:	d00b      	beq.n	8018c2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	685b      	ldr	r3, [r3, #4]
 8018c1a:	4a34      	ldr	r2, [pc, #208]	@ (8018cec <UART_AdvFeatureConfig+0x150>)
 8018c1c:	4013      	ands	r3, r2
 8018c1e:	0019      	movs	r1, r3
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	430a      	orrs	r2, r1
 8018c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c30:	2210      	movs	r2, #16
 8018c32:	4013      	ands	r3, r2
 8018c34:	d00b      	beq.n	8018c4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	689b      	ldr	r3, [r3, #8]
 8018c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8018cf0 <UART_AdvFeatureConfig+0x154>)
 8018c3e:	4013      	ands	r3, r2
 8018c40:	0019      	movs	r1, r3
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	430a      	orrs	r2, r1
 8018c4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c52:	2220      	movs	r2, #32
 8018c54:	4013      	ands	r3, r2
 8018c56:	d00b      	beq.n	8018c70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	689b      	ldr	r3, [r3, #8]
 8018c5e:	4a25      	ldr	r2, [pc, #148]	@ (8018cf4 <UART_AdvFeatureConfig+0x158>)
 8018c60:	4013      	ands	r3, r2
 8018c62:	0019      	movs	r1, r3
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	430a      	orrs	r2, r1
 8018c6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c74:	2240      	movs	r2, #64	@ 0x40
 8018c76:	4013      	ands	r3, r2
 8018c78:	d01d      	beq.n	8018cb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	685b      	ldr	r3, [r3, #4]
 8018c80:	4a1d      	ldr	r2, [pc, #116]	@ (8018cf8 <UART_AdvFeatureConfig+0x15c>)
 8018c82:	4013      	ands	r3, r2
 8018c84:	0019      	movs	r1, r3
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	430a      	orrs	r2, r1
 8018c90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018c96:	2380      	movs	r3, #128	@ 0x80
 8018c98:	035b      	lsls	r3, r3, #13
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	d10b      	bne.n	8018cb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	685b      	ldr	r3, [r3, #4]
 8018ca4:	4a15      	ldr	r2, [pc, #84]	@ (8018cfc <UART_AdvFeatureConfig+0x160>)
 8018ca6:	4013      	ands	r3, r2
 8018ca8:	0019      	movs	r1, r3
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	430a      	orrs	r2, r1
 8018cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cba:	2280      	movs	r2, #128	@ 0x80
 8018cbc:	4013      	ands	r3, r2
 8018cbe:	d00b      	beq.n	8018cd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	685b      	ldr	r3, [r3, #4]
 8018cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8018d00 <UART_AdvFeatureConfig+0x164>)
 8018cc8:	4013      	ands	r3, r2
 8018cca:	0019      	movs	r1, r3
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	430a      	orrs	r2, r1
 8018cd6:	605a      	str	r2, [r3, #4]
  }
}
 8018cd8:	46c0      	nop			@ (mov r8, r8)
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	b002      	add	sp, #8
 8018cde:	bd80      	pop	{r7, pc}
 8018ce0:	fffdffff 	.word	0xfffdffff
 8018ce4:	fffeffff 	.word	0xfffeffff
 8018ce8:	fffbffff 	.word	0xfffbffff
 8018cec:	ffff7fff 	.word	0xffff7fff
 8018cf0:	ffffefff 	.word	0xffffefff
 8018cf4:	ffffdfff 	.word	0xffffdfff
 8018cf8:	ffefffff 	.word	0xffefffff
 8018cfc:	ff9fffff 	.word	0xff9fffff
 8018d00:	fff7ffff 	.word	0xfff7ffff

08018d04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b092      	sub	sp, #72	@ 0x48
 8018d08:	af02      	add	r7, sp, #8
 8018d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2284      	movs	r2, #132	@ 0x84
 8018d10:	2100      	movs	r1, #0
 8018d12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018d14:	f7f6 fd20 	bl	800f758 <HAL_GetTick>
 8018d18:	0003      	movs	r3, r0
 8018d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	2208      	movs	r2, #8
 8018d24:	4013      	ands	r3, r2
 8018d26:	2b08      	cmp	r3, #8
 8018d28:	d12c      	bne.n	8018d84 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d2c:	2280      	movs	r2, #128	@ 0x80
 8018d2e:	0391      	lsls	r1, r2, #14
 8018d30:	6878      	ldr	r0, [r7, #4]
 8018d32:	4a46      	ldr	r2, [pc, #280]	@ (8018e4c <UART_CheckIdleState+0x148>)
 8018d34:	9200      	str	r2, [sp, #0]
 8018d36:	2200      	movs	r2, #0
 8018d38:	f000 f88c 	bl	8018e54 <UART_WaitOnFlagUntilTimeout>
 8018d3c:	1e03      	subs	r3, r0, #0
 8018d3e:	d021      	beq.n	8018d84 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d40:	f3ef 8310 	mrs	r3, PRIMASK
 8018d44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018d48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d50:	f383 8810 	msr	PRIMASK, r3
}
 8018d54:	46c0      	nop			@ (mov r8, r8)
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	681a      	ldr	r2, [r3, #0]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	2180      	movs	r1, #128	@ 0x80
 8018d62:	438a      	bics	r2, r1
 8018d64:	601a      	str	r2, [r3, #0]
 8018d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d6c:	f383 8810 	msr	PRIMASK, r3
}
 8018d70:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	2220      	movs	r2, #32
 8018d76:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	2278      	movs	r2, #120	@ 0x78
 8018d7c:	2100      	movs	r1, #0
 8018d7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018d80:	2303      	movs	r3, #3
 8018d82:	e05f      	b.n	8018e44 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	2204      	movs	r2, #4
 8018d8c:	4013      	ands	r3, r2
 8018d8e:	2b04      	cmp	r3, #4
 8018d90:	d146      	bne.n	8018e20 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d94:	2280      	movs	r2, #128	@ 0x80
 8018d96:	03d1      	lsls	r1, r2, #15
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8018e4c <UART_CheckIdleState+0x148>)
 8018d9c:	9200      	str	r2, [sp, #0]
 8018d9e:	2200      	movs	r2, #0
 8018da0:	f000 f858 	bl	8018e54 <UART_WaitOnFlagUntilTimeout>
 8018da4:	1e03      	subs	r3, r0, #0
 8018da6:	d03b      	beq.n	8018e20 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018da8:	f3ef 8310 	mrs	r3, PRIMASK
 8018dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8018dae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8018db2:	2301      	movs	r3, #1
 8018db4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	f383 8810 	msr	PRIMASK, r3
}
 8018dbc:	46c0      	nop			@ (mov r8, r8)
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	681a      	ldr	r2, [r3, #0]
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4921      	ldr	r1, [pc, #132]	@ (8018e50 <UART_CheckIdleState+0x14c>)
 8018dca:	400a      	ands	r2, r1
 8018dcc:	601a      	str	r2, [r3, #0]
 8018dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	f383 8810 	msr	PRIMASK, r3
}
 8018dd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dda:	f3ef 8310 	mrs	r3, PRIMASK
 8018dde:	61bb      	str	r3, [r7, #24]
  return(result);
 8018de0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8018de4:	2301      	movs	r3, #1
 8018de6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018de8:	69fb      	ldr	r3, [r7, #28]
 8018dea:	f383 8810 	msr	PRIMASK, r3
}
 8018dee:	46c0      	nop			@ (mov r8, r8)
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	689a      	ldr	r2, [r3, #8]
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	2101      	movs	r1, #1
 8018dfc:	438a      	bics	r2, r1
 8018dfe:	609a      	str	r2, [r3, #8]
 8018e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e04:	6a3b      	ldr	r3, [r7, #32]
 8018e06:	f383 8810 	msr	PRIMASK, r3
}
 8018e0a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2280      	movs	r2, #128	@ 0x80
 8018e10:	2120      	movs	r1, #32
 8018e12:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2278      	movs	r2, #120	@ 0x78
 8018e18:	2100      	movs	r1, #0
 8018e1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018e1c:	2303      	movs	r3, #3
 8018e1e:	e011      	b.n	8018e44 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2220      	movs	r2, #32
 8018e24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	2280      	movs	r2, #128	@ 0x80
 8018e2a:	2120      	movs	r1, #32
 8018e2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	2200      	movs	r2, #0
 8018e32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	2200      	movs	r2, #0
 8018e38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	2278      	movs	r2, #120	@ 0x78
 8018e3e:	2100      	movs	r1, #0
 8018e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018e42:	2300      	movs	r3, #0
}
 8018e44:	0018      	movs	r0, r3
 8018e46:	46bd      	mov	sp, r7
 8018e48:	b010      	add	sp, #64	@ 0x40
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	01ffffff 	.word	0x01ffffff
 8018e50:	fffffedf 	.word	0xfffffedf

08018e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b084      	sub	sp, #16
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	60f8      	str	r0, [r7, #12]
 8018e5c:	60b9      	str	r1, [r7, #8]
 8018e5e:	603b      	str	r3, [r7, #0]
 8018e60:	1dfb      	adds	r3, r7, #7
 8018e62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018e64:	e04b      	b.n	8018efe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018e66:	69bb      	ldr	r3, [r7, #24]
 8018e68:	3301      	adds	r3, #1
 8018e6a:	d048      	beq.n	8018efe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018e6c:	f7f6 fc74 	bl	800f758 <HAL_GetTick>
 8018e70:	0002      	movs	r2, r0
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	1ad3      	subs	r3, r2, r3
 8018e76:	69ba      	ldr	r2, [r7, #24]
 8018e78:	429a      	cmp	r2, r3
 8018e7a:	d302      	bcc.n	8018e82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8018e7c:	69bb      	ldr	r3, [r7, #24]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d101      	bne.n	8018e86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8018e82:	2303      	movs	r3, #3
 8018e84:	e04b      	b.n	8018f1e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	2204      	movs	r2, #4
 8018e8e:	4013      	ands	r3, r2
 8018e90:	d035      	beq.n	8018efe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	69db      	ldr	r3, [r3, #28]
 8018e98:	2208      	movs	r2, #8
 8018e9a:	4013      	ands	r3, r2
 8018e9c:	2b08      	cmp	r3, #8
 8018e9e:	d111      	bne.n	8018ec4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	2208      	movs	r2, #8
 8018ea6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	0018      	movs	r0, r3
 8018eac:	f000 f9ca 	bl	8019244 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	2284      	movs	r2, #132	@ 0x84
 8018eb4:	2108      	movs	r1, #8
 8018eb6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	2278      	movs	r2, #120	@ 0x78
 8018ebc:	2100      	movs	r1, #0
 8018ebe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	e02c      	b.n	8018f1e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	69da      	ldr	r2, [r3, #28]
 8018eca:	2380      	movs	r3, #128	@ 0x80
 8018ecc:	011b      	lsls	r3, r3, #4
 8018ece:	401a      	ands	r2, r3
 8018ed0:	2380      	movs	r3, #128	@ 0x80
 8018ed2:	011b      	lsls	r3, r3, #4
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d112      	bne.n	8018efe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2280      	movs	r2, #128	@ 0x80
 8018ede:	0112      	lsls	r2, r2, #4
 8018ee0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	0018      	movs	r0, r3
 8018ee6:	f000 f9ad 	bl	8019244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	2284      	movs	r2, #132	@ 0x84
 8018eee:	2120      	movs	r1, #32
 8018ef0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	2278      	movs	r2, #120	@ 0x78
 8018ef6:	2100      	movs	r1, #0
 8018ef8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018efa:	2303      	movs	r3, #3
 8018efc:	e00f      	b.n	8018f1e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	69db      	ldr	r3, [r3, #28]
 8018f04:	68ba      	ldr	r2, [r7, #8]
 8018f06:	4013      	ands	r3, r2
 8018f08:	68ba      	ldr	r2, [r7, #8]
 8018f0a:	1ad3      	subs	r3, r2, r3
 8018f0c:	425a      	negs	r2, r3
 8018f0e:	4153      	adcs	r3, r2
 8018f10:	b2db      	uxtb	r3, r3
 8018f12:	001a      	movs	r2, r3
 8018f14:	1dfb      	adds	r3, r7, #7
 8018f16:	781b      	ldrb	r3, [r3, #0]
 8018f18:	429a      	cmp	r2, r3
 8018f1a:	d0a4      	beq.n	8018e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018f1c:	2300      	movs	r3, #0
}
 8018f1e:	0018      	movs	r0, r3
 8018f20:	46bd      	mov	sp, r7
 8018f22:	b004      	add	sp, #16
 8018f24:	bd80      	pop	{r7, pc}
	...

08018f28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b090      	sub	sp, #64	@ 0x40
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	60f8      	str	r0, [r7, #12]
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	1dbb      	adds	r3, r7, #6
 8018f34:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	68ba      	ldr	r2, [r7, #8]
 8018f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	1dba      	adds	r2, r7, #6
 8018f40:	2158      	movs	r1, #88	@ 0x58
 8018f42:	8812      	ldrh	r2, [r2, #0]
 8018f44:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	1dba      	adds	r2, r7, #6
 8018f4a:	215a      	movs	r1, #90	@ 0x5a
 8018f4c:	8812      	ldrh	r2, [r2, #0]
 8018f4e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	2200      	movs	r2, #0
 8018f54:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	689a      	ldr	r2, [r3, #8]
 8018f5a:	2380      	movs	r3, #128	@ 0x80
 8018f5c:	015b      	lsls	r3, r3, #5
 8018f5e:	429a      	cmp	r2, r3
 8018f60:	d10d      	bne.n	8018f7e <UART_Start_Receive_IT+0x56>
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	691b      	ldr	r3, [r3, #16]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d104      	bne.n	8018f74 <UART_Start_Receive_IT+0x4c>
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	225c      	movs	r2, #92	@ 0x5c
 8018f6e:	4950      	ldr	r1, [pc, #320]	@ (80190b0 <UART_Start_Receive_IT+0x188>)
 8018f70:	5299      	strh	r1, [r3, r2]
 8018f72:	e02e      	b.n	8018fd2 <UART_Start_Receive_IT+0xaa>
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	225c      	movs	r2, #92	@ 0x5c
 8018f78:	21ff      	movs	r1, #255	@ 0xff
 8018f7a:	5299      	strh	r1, [r3, r2]
 8018f7c:	e029      	b.n	8018fd2 <UART_Start_Receive_IT+0xaa>
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	689b      	ldr	r3, [r3, #8]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d10d      	bne.n	8018fa2 <UART_Start_Receive_IT+0x7a>
 8018f86:	68fb      	ldr	r3, [r7, #12]
 8018f88:	691b      	ldr	r3, [r3, #16]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d104      	bne.n	8018f98 <UART_Start_Receive_IT+0x70>
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	225c      	movs	r2, #92	@ 0x5c
 8018f92:	21ff      	movs	r1, #255	@ 0xff
 8018f94:	5299      	strh	r1, [r3, r2]
 8018f96:	e01c      	b.n	8018fd2 <UART_Start_Receive_IT+0xaa>
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	225c      	movs	r2, #92	@ 0x5c
 8018f9c:	217f      	movs	r1, #127	@ 0x7f
 8018f9e:	5299      	strh	r1, [r3, r2]
 8018fa0:	e017      	b.n	8018fd2 <UART_Start_Receive_IT+0xaa>
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	689a      	ldr	r2, [r3, #8]
 8018fa6:	2380      	movs	r3, #128	@ 0x80
 8018fa8:	055b      	lsls	r3, r3, #21
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d10d      	bne.n	8018fca <UART_Start_Receive_IT+0xa2>
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	691b      	ldr	r3, [r3, #16]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d104      	bne.n	8018fc0 <UART_Start_Receive_IT+0x98>
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	225c      	movs	r2, #92	@ 0x5c
 8018fba:	217f      	movs	r1, #127	@ 0x7f
 8018fbc:	5299      	strh	r1, [r3, r2]
 8018fbe:	e008      	b.n	8018fd2 <UART_Start_Receive_IT+0xaa>
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	225c      	movs	r2, #92	@ 0x5c
 8018fc4:	213f      	movs	r1, #63	@ 0x3f
 8018fc6:	5299      	strh	r1, [r3, r2]
 8018fc8:	e003      	b.n	8018fd2 <UART_Start_Receive_IT+0xaa>
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	225c      	movs	r2, #92	@ 0x5c
 8018fce:	2100      	movs	r1, #0
 8018fd0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	2284      	movs	r2, #132	@ 0x84
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	2280      	movs	r2, #128	@ 0x80
 8018fde:	2122      	movs	r1, #34	@ 0x22
 8018fe0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8018fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018fec:	2301      	movs	r3, #1
 8018fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ff2:	f383 8810 	msr	PRIMASK, r3
}
 8018ff6:	46c0      	nop			@ (mov r8, r8)
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	689a      	ldr	r2, [r3, #8]
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	2101      	movs	r1, #1
 8019004:	430a      	orrs	r2, r1
 8019006:	609a      	str	r2, [r3, #8]
 8019008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801900a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801900e:	f383 8810 	msr	PRIMASK, r3
}
 8019012:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	689a      	ldr	r2, [r3, #8]
 8019018:	2380      	movs	r3, #128	@ 0x80
 801901a:	015b      	lsls	r3, r3, #5
 801901c:	429a      	cmp	r2, r3
 801901e:	d107      	bne.n	8019030 <UART_Start_Receive_IT+0x108>
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	691b      	ldr	r3, [r3, #16]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d103      	bne.n	8019030 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	4a22      	ldr	r2, [pc, #136]	@ (80190b4 <UART_Start_Receive_IT+0x18c>)
 801902c:	669a      	str	r2, [r3, #104]	@ 0x68
 801902e:	e002      	b.n	8019036 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	4a21      	ldr	r2, [pc, #132]	@ (80190b8 <UART_Start_Receive_IT+0x190>)
 8019034:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	691b      	ldr	r3, [r3, #16]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d019      	beq.n	8019072 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801903e:	f3ef 8310 	mrs	r3, PRIMASK
 8019042:	61fb      	str	r3, [r7, #28]
  return(result);
 8019044:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8019046:	637b      	str	r3, [r7, #52]	@ 0x34
 8019048:	2301      	movs	r3, #1
 801904a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801904c:	6a3b      	ldr	r3, [r7, #32]
 801904e:	f383 8810 	msr	PRIMASK, r3
}
 8019052:	46c0      	nop			@ (mov r8, r8)
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	681a      	ldr	r2, [r3, #0]
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	2190      	movs	r1, #144	@ 0x90
 8019060:	0049      	lsls	r1, r1, #1
 8019062:	430a      	orrs	r2, r1
 8019064:	601a      	str	r2, [r3, #0]
 8019066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019068:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801906c:	f383 8810 	msr	PRIMASK, r3
}
 8019070:	e018      	b.n	80190a4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019072:	f3ef 8310 	mrs	r3, PRIMASK
 8019076:	613b      	str	r3, [r7, #16]
  return(result);
 8019078:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801907a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801907c:	2301      	movs	r3, #1
 801907e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	f383 8810 	msr	PRIMASK, r3
}
 8019086:	46c0      	nop			@ (mov r8, r8)
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	681a      	ldr	r2, [r3, #0]
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	2120      	movs	r1, #32
 8019094:	430a      	orrs	r2, r1
 8019096:	601a      	str	r2, [r3, #0]
 8019098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801909a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801909c:	69bb      	ldr	r3, [r7, #24]
 801909e:	f383 8810 	msr	PRIMASK, r3
}
 80190a2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80190a4:	2300      	movs	r3, #0
}
 80190a6:	0018      	movs	r0, r3
 80190a8:	46bd      	mov	sp, r7
 80190aa:	b010      	add	sp, #64	@ 0x40
 80190ac:	bd80      	pop	{r7, pc}
 80190ae:	46c0      	nop			@ (mov r8, r8)
 80190b0:	000001ff 	.word	0x000001ff
 80190b4:	08019829 	.word	0x08019829
 80190b8:	0801965d 	.word	0x0801965d

080190bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b090      	sub	sp, #64	@ 0x40
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	1dbb      	adds	r3, r7, #6
 80190c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	68ba      	ldr	r2, [r7, #8]
 80190ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	1dba      	adds	r2, r7, #6
 80190d4:	2158      	movs	r1, #88	@ 0x58
 80190d6:	8812      	ldrh	r2, [r2, #0]
 80190d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	2284      	movs	r2, #132	@ 0x84
 80190de:	2100      	movs	r1, #0
 80190e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	2280      	movs	r2, #128	@ 0x80
 80190e6:	2122      	movs	r1, #34	@ 0x22
 80190e8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d028      	beq.n	8019144 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80190f6:	4a3e      	ldr	r2, [pc, #248]	@ (80191f0 <UART_Start_Receive_DMA+0x134>)
 80190f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80190fe:	4a3d      	ldr	r2, [pc, #244]	@ (80191f4 <UART_Start_Receive_DMA+0x138>)
 8019100:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8019102:	68fb      	ldr	r3, [r7, #12]
 8019104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019106:	4a3c      	ldr	r2, [pc, #240]	@ (80191f8 <UART_Start_Receive_DMA+0x13c>)
 8019108:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801910e:	2200      	movs	r2, #0
 8019110:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	3324      	adds	r3, #36	@ 0x24
 801911c:	0019      	movs	r1, r3
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019122:	001a      	movs	r2, r3
 8019124:	1dbb      	adds	r3, r7, #6
 8019126:	881b      	ldrh	r3, [r3, #0]
 8019128:	f7f7 f868 	bl	80101fc <HAL_DMA_Start_IT>
 801912c:	1e03      	subs	r3, r0, #0
 801912e:	d009      	beq.n	8019144 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	2284      	movs	r2, #132	@ 0x84
 8019134:	2110      	movs	r1, #16
 8019136:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	2280      	movs	r2, #128	@ 0x80
 801913c:	2120      	movs	r1, #32
 801913e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8019140:	2301      	movs	r3, #1
 8019142:	e050      	b.n	80191e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	691b      	ldr	r3, [r3, #16]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d019      	beq.n	8019180 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801914c:	f3ef 8310 	mrs	r3, PRIMASK
 8019150:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8019152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019156:	2301      	movs	r3, #1
 8019158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801915a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801915c:	f383 8810 	msr	PRIMASK, r3
}
 8019160:	46c0      	nop			@ (mov r8, r8)
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	681a      	ldr	r2, [r3, #0]
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	2180      	movs	r1, #128	@ 0x80
 801916e:	0049      	lsls	r1, r1, #1
 8019170:	430a      	orrs	r2, r1
 8019172:	601a      	str	r2, [r3, #0]
 8019174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019176:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801917a:	f383 8810 	msr	PRIMASK, r3
}
 801917e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019180:	f3ef 8310 	mrs	r3, PRIMASK
 8019184:	613b      	str	r3, [r7, #16]
  return(result);
 8019186:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019188:	63bb      	str	r3, [r7, #56]	@ 0x38
 801918a:	2301      	movs	r3, #1
 801918c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801918e:	697b      	ldr	r3, [r7, #20]
 8019190:	f383 8810 	msr	PRIMASK, r3
}
 8019194:	46c0      	nop			@ (mov r8, r8)
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	689a      	ldr	r2, [r3, #8]
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	2101      	movs	r1, #1
 80191a2:	430a      	orrs	r2, r1
 80191a4:	609a      	str	r2, [r3, #8]
 80191a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191aa:	69bb      	ldr	r3, [r7, #24]
 80191ac:	f383 8810 	msr	PRIMASK, r3
}
 80191b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191b2:	f3ef 8310 	mrs	r3, PRIMASK
 80191b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80191b8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80191ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80191bc:	2301      	movs	r3, #1
 80191be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191c0:	6a3b      	ldr	r3, [r7, #32]
 80191c2:	f383 8810 	msr	PRIMASK, r3
}
 80191c6:	46c0      	nop			@ (mov r8, r8)
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	689a      	ldr	r2, [r3, #8]
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	2140      	movs	r1, #64	@ 0x40
 80191d4:	430a      	orrs	r2, r1
 80191d6:	609a      	str	r2, [r3, #8]
 80191d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80191da:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191de:	f383 8810 	msr	PRIMASK, r3
}
 80191e2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80191e4:	2300      	movs	r3, #0
}
 80191e6:	0018      	movs	r0, r3
 80191e8:	46bd      	mov	sp, r7
 80191ea:	b010      	add	sp, #64	@ 0x40
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	46c0      	nop			@ (mov r8, r8)
 80191f0:	080193cd 	.word	0x080193cd
 80191f4:	08019501 	.word	0x08019501
 80191f8:	08019549 	.word	0x08019549

080191fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b086      	sub	sp, #24
 8019200:	af00      	add	r7, sp, #0
 8019202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019204:	f3ef 8310 	mrs	r3, PRIMASK
 8019208:	60bb      	str	r3, [r7, #8]
  return(result);
 801920a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801920c:	617b      	str	r3, [r7, #20]
 801920e:	2301      	movs	r3, #1
 8019210:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	f383 8810 	msr	PRIMASK, r3
}
 8019218:	46c0      	nop			@ (mov r8, r8)
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	681a      	ldr	r2, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	21c0      	movs	r1, #192	@ 0xc0
 8019226:	438a      	bics	r2, r1
 8019228:	601a      	str	r2, [r3, #0]
 801922a:	697b      	ldr	r3, [r7, #20]
 801922c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	f383 8810 	msr	PRIMASK, r3
}
 8019234:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	2220      	movs	r2, #32
 801923a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801923c:	46c0      	nop			@ (mov r8, r8)
 801923e:	46bd      	mov	sp, r7
 8019240:	b006      	add	sp, #24
 8019242:	bd80      	pop	{r7, pc}

08019244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b08e      	sub	sp, #56	@ 0x38
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801924c:	f3ef 8310 	mrs	r3, PRIMASK
 8019250:	617b      	str	r3, [r7, #20]
  return(result);
 8019252:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019254:	637b      	str	r3, [r7, #52]	@ 0x34
 8019256:	2301      	movs	r3, #1
 8019258:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801925a:	69bb      	ldr	r3, [r7, #24]
 801925c:	f383 8810 	msr	PRIMASK, r3
}
 8019260:	46c0      	nop			@ (mov r8, r8)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	681a      	ldr	r2, [r3, #0]
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	4926      	ldr	r1, [pc, #152]	@ (8019308 <UART_EndRxTransfer+0xc4>)
 801926e:	400a      	ands	r2, r1
 8019270:	601a      	str	r2, [r3, #0]
 8019272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019276:	69fb      	ldr	r3, [r7, #28]
 8019278:	f383 8810 	msr	PRIMASK, r3
}
 801927c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801927e:	f3ef 8310 	mrs	r3, PRIMASK
 8019282:	623b      	str	r3, [r7, #32]
  return(result);
 8019284:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019286:	633b      	str	r3, [r7, #48]	@ 0x30
 8019288:	2301      	movs	r3, #1
 801928a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801928e:	f383 8810 	msr	PRIMASK, r3
}
 8019292:	46c0      	nop			@ (mov r8, r8)
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	689a      	ldr	r2, [r3, #8]
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	2101      	movs	r1, #1
 80192a0:	438a      	bics	r2, r1
 80192a2:	609a      	str	r2, [r3, #8]
 80192a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192aa:	f383 8810 	msr	PRIMASK, r3
}
 80192ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d118      	bne.n	80192ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192b8:	f3ef 8310 	mrs	r3, PRIMASK
 80192bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80192be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80192c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192c2:	2301      	movs	r3, #1
 80192c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	f383 8810 	msr	PRIMASK, r3
}
 80192cc:	46c0      	nop			@ (mov r8, r8)
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	681a      	ldr	r2, [r3, #0]
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	2110      	movs	r1, #16
 80192da:	438a      	bics	r2, r1
 80192dc:	601a      	str	r2, [r3, #0]
 80192de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192e2:	693b      	ldr	r3, [r7, #16]
 80192e4:	f383 8810 	msr	PRIMASK, r3
}
 80192e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	2280      	movs	r2, #128	@ 0x80
 80192ee:	2120      	movs	r1, #32
 80192f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	2200      	movs	r2, #0
 80192f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2200      	movs	r2, #0
 80192fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80192fe:	46c0      	nop			@ (mov r8, r8)
 8019300:	46bd      	mov	sp, r7
 8019302:	b00e      	add	sp, #56	@ 0x38
 8019304:	bd80      	pop	{r7, pc}
 8019306:	46c0      	nop			@ (mov r8, r8)
 8019308:	fffffedf 	.word	0xfffffedf

0801930c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b08c      	sub	sp, #48	@ 0x30
 8019310:	af00      	add	r7, sp, #0
 8019312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019318:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	2220      	movs	r2, #32
 8019322:	4013      	ands	r3, r2
 8019324:	d135      	bne.n	8019392 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8019326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019328:	2252      	movs	r2, #82	@ 0x52
 801932a:	2100      	movs	r1, #0
 801932c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801932e:	f3ef 8310 	mrs	r3, PRIMASK
 8019332:	60fb      	str	r3, [r7, #12]
  return(result);
 8019334:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8019336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019338:	2301      	movs	r3, #1
 801933a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801933c:	693b      	ldr	r3, [r7, #16]
 801933e:	f383 8810 	msr	PRIMASK, r3
}
 8019342:	46c0      	nop			@ (mov r8, r8)
 8019344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	689a      	ldr	r2, [r3, #8]
 801934a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	2180      	movs	r1, #128	@ 0x80
 8019350:	438a      	bics	r2, r1
 8019352:	609a      	str	r2, [r3, #8]
 8019354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	f383 8810 	msr	PRIMASK, r3
}
 801935e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019360:	f3ef 8310 	mrs	r3, PRIMASK
 8019364:	61bb      	str	r3, [r7, #24]
  return(result);
 8019366:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019368:	627b      	str	r3, [r7, #36]	@ 0x24
 801936a:	2301      	movs	r3, #1
 801936c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801936e:	69fb      	ldr	r3, [r7, #28]
 8019370:	f383 8810 	msr	PRIMASK, r3
}
 8019374:	46c0      	nop			@ (mov r8, r8)
 8019376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	681a      	ldr	r2, [r3, #0]
 801937c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2140      	movs	r1, #64	@ 0x40
 8019382:	430a      	orrs	r2, r1
 8019384:	601a      	str	r2, [r3, #0]
 8019386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019388:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801938a:	6a3b      	ldr	r3, [r7, #32]
 801938c:	f383 8810 	msr	PRIMASK, r3
}
 8019390:	e006      	b.n	80193a0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8019392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019394:	228c      	movs	r2, #140	@ 0x8c
 8019396:	589b      	ldr	r3, [r3, r2]
 8019398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801939a:	0010      	movs	r0, r2
 801939c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801939e:	46c0      	nop			@ (mov r8, r8)
 80193a0:	46c0      	nop			@ (mov r8, r8)
 80193a2:	46bd      	mov	sp, r7
 80193a4:	b00c      	add	sp, #48	@ 0x30
 80193a6:	bd80      	pop	{r7, pc}

080193a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b084      	sub	sp, #16
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80193b6:	68fb      	ldr	r3, [r7, #12]
 80193b8:	2288      	movs	r2, #136	@ 0x88
 80193ba:	589b      	ldr	r3, [r3, r2]
 80193bc:	68fa      	ldr	r2, [r7, #12]
 80193be:	0010      	movs	r0, r2
 80193c0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80193c2:	46c0      	nop			@ (mov r8, r8)
 80193c4:	46bd      	mov	sp, r7
 80193c6:	b004      	add	sp, #16
 80193c8:	bd80      	pop	{r7, pc}
	...

080193cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b094      	sub	sp, #80	@ 0x50
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	2220      	movs	r2, #32
 80193e2:	4013      	ands	r3, r2
 80193e4:	d16f      	bne.n	80194c6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80193e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80193e8:	225a      	movs	r2, #90	@ 0x5a
 80193ea:	2100      	movs	r1, #0
 80193ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193ee:	f3ef 8310 	mrs	r3, PRIMASK
 80193f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80193f4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80193f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80193f8:	2301      	movs	r3, #1
 80193fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193fc:	69fb      	ldr	r3, [r7, #28]
 80193fe:	f383 8810 	msr	PRIMASK, r3
}
 8019402:	46c0      	nop			@ (mov r8, r8)
 8019404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	681a      	ldr	r2, [r3, #0]
 801940a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	493b      	ldr	r1, [pc, #236]	@ (80194fc <UART_DMAReceiveCplt+0x130>)
 8019410:	400a      	ands	r2, r1
 8019412:	601a      	str	r2, [r3, #0]
 8019414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019416:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019418:	6a3b      	ldr	r3, [r7, #32]
 801941a:	f383 8810 	msr	PRIMASK, r3
}
 801941e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019420:	f3ef 8310 	mrs	r3, PRIMASK
 8019424:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8019426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019428:	647b      	str	r3, [r7, #68]	@ 0x44
 801942a:	2301      	movs	r3, #1
 801942c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019430:	f383 8810 	msr	PRIMASK, r3
}
 8019434:	46c0      	nop			@ (mov r8, r8)
 8019436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	689a      	ldr	r2, [r3, #8]
 801943c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	2101      	movs	r1, #1
 8019442:	438a      	bics	r2, r1
 8019444:	609a      	str	r2, [r3, #8]
 8019446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801944a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801944c:	f383 8810 	msr	PRIMASK, r3
}
 8019450:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019452:	f3ef 8310 	mrs	r3, PRIMASK
 8019456:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801945a:	643b      	str	r3, [r7, #64]	@ 0x40
 801945c:	2301      	movs	r3, #1
 801945e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019462:	f383 8810 	msr	PRIMASK, r3
}
 8019466:	46c0      	nop			@ (mov r8, r8)
 8019468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	689a      	ldr	r2, [r3, #8]
 801946e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	2140      	movs	r1, #64	@ 0x40
 8019474:	438a      	bics	r2, r1
 8019476:	609a      	str	r2, [r3, #8]
 8019478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801947a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801947c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801947e:	f383 8810 	msr	PRIMASK, r3
}
 8019482:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8019484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019486:	2280      	movs	r2, #128	@ 0x80
 8019488:	2120      	movs	r1, #32
 801948a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801948c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801948e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019490:	2b01      	cmp	r3, #1
 8019492:	d118      	bne.n	80194c6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019494:	f3ef 8310 	mrs	r3, PRIMASK
 8019498:	60fb      	str	r3, [r7, #12]
  return(result);
 801949a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801949e:	2301      	movs	r3, #1
 80194a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	f383 8810 	msr	PRIMASK, r3
}
 80194a8:	46c0      	nop			@ (mov r8, r8)
 80194aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	681a      	ldr	r2, [r3, #0]
 80194b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	2110      	movs	r1, #16
 80194b6:	438a      	bics	r2, r1
 80194b8:	601a      	str	r2, [r3, #0]
 80194ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194be:	697b      	ldr	r3, [r7, #20]
 80194c0:	f383 8810 	msr	PRIMASK, r3
}
 80194c4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80194c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194c8:	2200      	movs	r2, #0
 80194ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80194cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80194d0:	2b01      	cmp	r3, #1
 80194d2:	d109      	bne.n	80194e8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80194d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194d6:	22ac      	movs	r2, #172	@ 0xac
 80194d8:	589b      	ldr	r3, [r3, r2]
 80194da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80194dc:	2158      	movs	r1, #88	@ 0x58
 80194de:	5a51      	ldrh	r1, [r2, r1]
 80194e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80194e2:	0010      	movs	r0, r2
 80194e4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80194e6:	e005      	b.n	80194f4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80194e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194ea:	2294      	movs	r2, #148	@ 0x94
 80194ec:	589b      	ldr	r3, [r3, r2]
 80194ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80194f0:	0010      	movs	r0, r2
 80194f2:	4798      	blx	r3
}
 80194f4:	46c0      	nop			@ (mov r8, r8)
 80194f6:	46bd      	mov	sp, r7
 80194f8:	b014      	add	sp, #80	@ 0x50
 80194fa:	bd80      	pop	{r7, pc}
 80194fc:	fffffeff 	.word	0xfffffeff

08019500 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b084      	sub	sp, #16
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801950c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	2201      	movs	r2, #1
 8019512:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019514:	68fb      	ldr	r3, [r7, #12]
 8019516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019518:	2b01      	cmp	r3, #1
 801951a:	d10b      	bne.n	8019534 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	22ac      	movs	r2, #172	@ 0xac
 8019520:	589b      	ldr	r3, [r3, r2]
 8019522:	68fa      	ldr	r2, [r7, #12]
 8019524:	2158      	movs	r1, #88	@ 0x58
 8019526:	5a52      	ldrh	r2, [r2, r1]
 8019528:	0852      	lsrs	r2, r2, #1
 801952a:	b291      	uxth	r1, r2
 801952c:	68fa      	ldr	r2, [r7, #12]
 801952e:	0010      	movs	r0, r2
 8019530:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8019532:	e005      	b.n	8019540 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	2290      	movs	r2, #144	@ 0x90
 8019538:	589b      	ldr	r3, [r3, r2]
 801953a:	68fa      	ldr	r2, [r7, #12]
 801953c:	0010      	movs	r0, r2
 801953e:	4798      	blx	r3
}
 8019540:	46c0      	nop			@ (mov r8, r8)
 8019542:	46bd      	mov	sp, r7
 8019544:	b004      	add	sp, #16
 8019546:	bd80      	pop	{r7, pc}

08019548 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b086      	sub	sp, #24
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019554:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801955a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	2280      	movs	r2, #128	@ 0x80
 8019560:	589b      	ldr	r3, [r3, r2]
 8019562:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8019564:	697b      	ldr	r3, [r7, #20]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	689b      	ldr	r3, [r3, #8]
 801956a:	2280      	movs	r2, #128	@ 0x80
 801956c:	4013      	ands	r3, r2
 801956e:	2b80      	cmp	r3, #128	@ 0x80
 8019570:	d10a      	bne.n	8019588 <UART_DMAError+0x40>
 8019572:	693b      	ldr	r3, [r7, #16]
 8019574:	2b21      	cmp	r3, #33	@ 0x21
 8019576:	d107      	bne.n	8019588 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	2252      	movs	r2, #82	@ 0x52
 801957c:	2100      	movs	r1, #0
 801957e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8019580:	697b      	ldr	r3, [r7, #20]
 8019582:	0018      	movs	r0, r3
 8019584:	f7ff fe3a 	bl	80191fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	689b      	ldr	r3, [r3, #8]
 801958e:	2240      	movs	r2, #64	@ 0x40
 8019590:	4013      	ands	r3, r2
 8019592:	2b40      	cmp	r3, #64	@ 0x40
 8019594:	d10a      	bne.n	80195ac <UART_DMAError+0x64>
 8019596:	68fb      	ldr	r3, [r7, #12]
 8019598:	2b22      	cmp	r3, #34	@ 0x22
 801959a:	d107      	bne.n	80195ac <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	225a      	movs	r2, #90	@ 0x5a
 80195a0:	2100      	movs	r1, #0
 80195a2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	0018      	movs	r0, r3
 80195a8:	f7ff fe4c 	bl	8019244 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	2284      	movs	r2, #132	@ 0x84
 80195b0:	589b      	ldr	r3, [r3, r2]
 80195b2:	2210      	movs	r2, #16
 80195b4:	431a      	orrs	r2, r3
 80195b6:	697b      	ldr	r3, [r7, #20]
 80195b8:	2184      	movs	r1, #132	@ 0x84
 80195ba:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80195bc:	697b      	ldr	r3, [r7, #20]
 80195be:	2298      	movs	r2, #152	@ 0x98
 80195c0:	589b      	ldr	r3, [r3, r2]
 80195c2:	697a      	ldr	r2, [r7, #20]
 80195c4:	0010      	movs	r0, r2
 80195c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80195c8:	46c0      	nop			@ (mov r8, r8)
 80195ca:	46bd      	mov	sp, r7
 80195cc:	b006      	add	sp, #24
 80195ce:	bd80      	pop	{r7, pc}

080195d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	225a      	movs	r2, #90	@ 0x5a
 80195e2:	2100      	movs	r1, #0
 80195e4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	2252      	movs	r2, #82	@ 0x52
 80195ea:	2100      	movs	r1, #0
 80195ec:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	2298      	movs	r2, #152	@ 0x98
 80195f2:	589b      	ldr	r3, [r3, r2]
 80195f4:	68fa      	ldr	r2, [r7, #12]
 80195f6:	0010      	movs	r0, r2
 80195f8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80195fa:	46c0      	nop			@ (mov r8, r8)
 80195fc:	46bd      	mov	sp, r7
 80195fe:	b004      	add	sp, #16
 8019600:	bd80      	pop	{r7, pc}

08019602 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019602:	b580      	push	{r7, lr}
 8019604:	b086      	sub	sp, #24
 8019606:	af00      	add	r7, sp, #0
 8019608:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801960a:	f3ef 8310 	mrs	r3, PRIMASK
 801960e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019610:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019612:	617b      	str	r3, [r7, #20]
 8019614:	2301      	movs	r3, #1
 8019616:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	f383 8810 	msr	PRIMASK, r3
}
 801961e:	46c0      	nop			@ (mov r8, r8)
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	681a      	ldr	r2, [r3, #0]
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	2140      	movs	r1, #64	@ 0x40
 801962c:	438a      	bics	r2, r1
 801962e:	601a      	str	r2, [r3, #0]
 8019630:	697b      	ldr	r3, [r7, #20]
 8019632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019634:	693b      	ldr	r3, [r7, #16]
 8019636:	f383 8810 	msr	PRIMASK, r3
}
 801963a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2220      	movs	r2, #32
 8019640:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	2200      	movs	r2, #0
 8019646:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	228c      	movs	r2, #140	@ 0x8c
 801964c:	589b      	ldr	r3, [r3, r2]
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	0010      	movs	r0, r2
 8019652:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019654:	46c0      	nop			@ (mov r8, r8)
 8019656:	46bd      	mov	sp, r7
 8019658:	b006      	add	sp, #24
 801965a:	bd80      	pop	{r7, pc}

0801965c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b094      	sub	sp, #80	@ 0x50
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019664:	204e      	movs	r0, #78	@ 0x4e
 8019666:	183b      	adds	r3, r7, r0
 8019668:	687a      	ldr	r2, [r7, #4]
 801966a:	215c      	movs	r1, #92	@ 0x5c
 801966c:	5a52      	ldrh	r2, [r2, r1]
 801966e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2280      	movs	r2, #128	@ 0x80
 8019674:	589b      	ldr	r3, [r3, r2]
 8019676:	2b22      	cmp	r3, #34	@ 0x22
 8019678:	d000      	beq.n	801967c <UART_RxISR_8BIT+0x20>
 801967a:	e0c2      	b.n	8019802 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019682:	214c      	movs	r1, #76	@ 0x4c
 8019684:	187b      	adds	r3, r7, r1
 8019686:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8019688:	187b      	adds	r3, r7, r1
 801968a:	881b      	ldrh	r3, [r3, #0]
 801968c:	b2da      	uxtb	r2, r3
 801968e:	183b      	adds	r3, r7, r0
 8019690:	881b      	ldrh	r3, [r3, #0]
 8019692:	b2d9      	uxtb	r1, r3
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019698:	400a      	ands	r2, r1
 801969a:	b2d2      	uxtb	r2, r2
 801969c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80196a2:	1c5a      	adds	r2, r3, #1
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	225a      	movs	r2, #90	@ 0x5a
 80196ac:	5a9b      	ldrh	r3, [r3, r2]
 80196ae:	b29b      	uxth	r3, r3
 80196b0:	3b01      	subs	r3, #1
 80196b2:	b299      	uxth	r1, r3
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	225a      	movs	r2, #90	@ 0x5a
 80196b8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	225a      	movs	r2, #90	@ 0x5a
 80196be:	5a9b      	ldrh	r3, [r3, r2]
 80196c0:	b29b      	uxth	r3, r3
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d000      	beq.n	80196c8 <UART_RxISR_8BIT+0x6c>
 80196c6:	e0a4      	b.n	8019812 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196c8:	f3ef 8310 	mrs	r3, PRIMASK
 80196cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80196ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80196d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80196d2:	2301      	movs	r3, #1
 80196d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196d8:	f383 8810 	msr	PRIMASK, r3
}
 80196dc:	46c0      	nop			@ (mov r8, r8)
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	681a      	ldr	r2, [r3, #0]
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	494c      	ldr	r1, [pc, #304]	@ (801981c <UART_RxISR_8BIT+0x1c0>)
 80196ea:	400a      	ands	r2, r1
 80196ec:	601a      	str	r2, [r3, #0]
 80196ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80196f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196f4:	f383 8810 	msr	PRIMASK, r3
}
 80196f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196fa:	f3ef 8310 	mrs	r3, PRIMASK
 80196fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019702:	647b      	str	r3, [r7, #68]	@ 0x44
 8019704:	2301      	movs	r3, #1
 8019706:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801970a:	f383 8810 	msr	PRIMASK, r3
}
 801970e:	46c0      	nop			@ (mov r8, r8)
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	689a      	ldr	r2, [r3, #8]
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	2101      	movs	r1, #1
 801971c:	438a      	bics	r2, r1
 801971e:	609a      	str	r2, [r3, #8]
 8019720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019722:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019726:	f383 8810 	msr	PRIMASK, r3
}
 801972a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	2280      	movs	r2, #128	@ 0x80
 8019730:	2120      	movs	r1, #32
 8019732:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	2200      	movs	r2, #0
 8019738:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	2200      	movs	r2, #0
 801973e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	4a36      	ldr	r2, [pc, #216]	@ (8019820 <UART_RxISR_8BIT+0x1c4>)
 8019746:	4293      	cmp	r3, r2
 8019748:	d01f      	beq.n	801978a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	685a      	ldr	r2, [r3, #4]
 8019750:	2380      	movs	r3, #128	@ 0x80
 8019752:	041b      	lsls	r3, r3, #16
 8019754:	4013      	ands	r3, r2
 8019756:	d018      	beq.n	801978a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019758:	f3ef 8310 	mrs	r3, PRIMASK
 801975c:	61bb      	str	r3, [r7, #24]
  return(result);
 801975e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019760:	643b      	str	r3, [r7, #64]	@ 0x40
 8019762:	2301      	movs	r3, #1
 8019764:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019766:	69fb      	ldr	r3, [r7, #28]
 8019768:	f383 8810 	msr	PRIMASK, r3
}
 801976c:	46c0      	nop			@ (mov r8, r8)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	681a      	ldr	r2, [r3, #0]
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	492a      	ldr	r1, [pc, #168]	@ (8019824 <UART_RxISR_8BIT+0x1c8>)
 801977a:	400a      	ands	r2, r1
 801977c:	601a      	str	r2, [r3, #0]
 801977e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019780:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019782:	6a3b      	ldr	r3, [r7, #32]
 8019784:	f383 8810 	msr	PRIMASK, r3
}
 8019788:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801978e:	2b01      	cmp	r3, #1
 8019790:	d130      	bne.n	80197f4 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	2200      	movs	r2, #0
 8019796:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019798:	f3ef 8310 	mrs	r3, PRIMASK
 801979c:	60fb      	str	r3, [r7, #12]
  return(result);
 801979e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80197a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80197a2:	2301      	movs	r3, #1
 80197a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	f383 8810 	msr	PRIMASK, r3
}
 80197ac:	46c0      	nop			@ (mov r8, r8)
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	681a      	ldr	r2, [r3, #0]
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	2110      	movs	r1, #16
 80197ba:	438a      	bics	r2, r1
 80197bc:	601a      	str	r2, [r3, #0]
 80197be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80197c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	f383 8810 	msr	PRIMASK, r3
}
 80197c8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	69db      	ldr	r3, [r3, #28]
 80197d0:	2210      	movs	r2, #16
 80197d2:	4013      	ands	r3, r2
 80197d4:	2b10      	cmp	r3, #16
 80197d6:	d103      	bne.n	80197e0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2210      	movs	r2, #16
 80197de:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	22ac      	movs	r2, #172	@ 0xac
 80197e4:	589b      	ldr	r3, [r3, r2]
 80197e6:	687a      	ldr	r2, [r7, #4]
 80197e8:	2158      	movs	r1, #88	@ 0x58
 80197ea:	5a51      	ldrh	r1, [r2, r1]
 80197ec:	687a      	ldr	r2, [r7, #4]
 80197ee:	0010      	movs	r0, r2
 80197f0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80197f2:	e00e      	b.n	8019812 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	2294      	movs	r2, #148	@ 0x94
 80197f8:	589b      	ldr	r3, [r3, r2]
 80197fa:	687a      	ldr	r2, [r7, #4]
 80197fc:	0010      	movs	r0, r2
 80197fe:	4798      	blx	r3
}
 8019800:	e007      	b.n	8019812 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	699a      	ldr	r2, [r3, #24]
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	2108      	movs	r1, #8
 801980e:	430a      	orrs	r2, r1
 8019810:	619a      	str	r2, [r3, #24]
}
 8019812:	46c0      	nop			@ (mov r8, r8)
 8019814:	46bd      	mov	sp, r7
 8019816:	b014      	add	sp, #80	@ 0x50
 8019818:	bd80      	pop	{r7, pc}
 801981a:	46c0      	nop			@ (mov r8, r8)
 801981c:	fffffedf 	.word	0xfffffedf
 8019820:	40004800 	.word	0x40004800
 8019824:	fbffffff 	.word	0xfbffffff

08019828 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b094      	sub	sp, #80	@ 0x50
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019830:	204e      	movs	r0, #78	@ 0x4e
 8019832:	183b      	adds	r3, r7, r0
 8019834:	687a      	ldr	r2, [r7, #4]
 8019836:	215c      	movs	r1, #92	@ 0x5c
 8019838:	5a52      	ldrh	r2, [r2, r1]
 801983a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	2280      	movs	r2, #128	@ 0x80
 8019840:	589b      	ldr	r3, [r3, r2]
 8019842:	2b22      	cmp	r3, #34	@ 0x22
 8019844:	d000      	beq.n	8019848 <UART_RxISR_16BIT+0x20>
 8019846:	e0c2      	b.n	80199ce <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801984e:	214c      	movs	r1, #76	@ 0x4c
 8019850:	187b      	adds	r3, r7, r1
 8019852:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019858:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801985a:	187b      	adds	r3, r7, r1
 801985c:	183a      	adds	r2, r7, r0
 801985e:	881b      	ldrh	r3, [r3, #0]
 8019860:	8812      	ldrh	r2, [r2, #0]
 8019862:	4013      	ands	r3, r2
 8019864:	b29a      	uxth	r2, r3
 8019866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019868:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801986e:	1c9a      	adds	r2, r3, #2
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	225a      	movs	r2, #90	@ 0x5a
 8019878:	5a9b      	ldrh	r3, [r3, r2]
 801987a:	b29b      	uxth	r3, r3
 801987c:	3b01      	subs	r3, #1
 801987e:	b299      	uxth	r1, r3
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	225a      	movs	r2, #90	@ 0x5a
 8019884:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	225a      	movs	r2, #90	@ 0x5a
 801988a:	5a9b      	ldrh	r3, [r3, r2]
 801988c:	b29b      	uxth	r3, r3
 801988e:	2b00      	cmp	r3, #0
 8019890:	d000      	beq.n	8019894 <UART_RxISR_16BIT+0x6c>
 8019892:	e0a4      	b.n	80199de <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019894:	f3ef 8310 	mrs	r3, PRIMASK
 8019898:	623b      	str	r3, [r7, #32]
  return(result);
 801989a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801989c:	647b      	str	r3, [r7, #68]	@ 0x44
 801989e:	2301      	movs	r3, #1
 80198a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198a4:	f383 8810 	msr	PRIMASK, r3
}
 80198a8:	46c0      	nop			@ (mov r8, r8)
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	494c      	ldr	r1, [pc, #304]	@ (80199e8 <UART_RxISR_16BIT+0x1c0>)
 80198b6:	400a      	ands	r2, r1
 80198b8:	601a      	str	r2, [r3, #0]
 80198ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80198bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198c0:	f383 8810 	msr	PRIMASK, r3
}
 80198c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80198c6:	f3ef 8310 	mrs	r3, PRIMASK
 80198ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80198cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80198ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80198d0:	2301      	movs	r3, #1
 80198d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198d6:	f383 8810 	msr	PRIMASK, r3
}
 80198da:	46c0      	nop			@ (mov r8, r8)
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	689a      	ldr	r2, [r3, #8]
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	2101      	movs	r1, #1
 80198e8:	438a      	bics	r2, r1
 80198ea:	609a      	str	r2, [r3, #8]
 80198ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80198ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80198f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80198f2:	f383 8810 	msr	PRIMASK, r3
}
 80198f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	2280      	movs	r2, #128	@ 0x80
 80198fc:	2120      	movs	r1, #32
 80198fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2200      	movs	r2, #0
 8019904:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	2200      	movs	r2, #0
 801990a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	4a36      	ldr	r2, [pc, #216]	@ (80199ec <UART_RxISR_16BIT+0x1c4>)
 8019912:	4293      	cmp	r3, r2
 8019914:	d01f      	beq.n	8019956 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	685a      	ldr	r2, [r3, #4]
 801991c:	2380      	movs	r3, #128	@ 0x80
 801991e:	041b      	lsls	r3, r3, #16
 8019920:	4013      	ands	r3, r2
 8019922:	d018      	beq.n	8019956 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019924:	f3ef 8310 	mrs	r3, PRIMASK
 8019928:	617b      	str	r3, [r7, #20]
  return(result);
 801992a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801992e:	2301      	movs	r3, #1
 8019930:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019932:	69bb      	ldr	r3, [r7, #24]
 8019934:	f383 8810 	msr	PRIMASK, r3
}
 8019938:	46c0      	nop			@ (mov r8, r8)
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	681a      	ldr	r2, [r3, #0]
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	492a      	ldr	r1, [pc, #168]	@ (80199f0 <UART_RxISR_16BIT+0x1c8>)
 8019946:	400a      	ands	r2, r1
 8019948:	601a      	str	r2, [r3, #0]
 801994a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801994c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801994e:	69fb      	ldr	r3, [r7, #28]
 8019950:	f383 8810 	msr	PRIMASK, r3
}
 8019954:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801995a:	2b01      	cmp	r3, #1
 801995c:	d130      	bne.n	80199c0 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	2200      	movs	r2, #0
 8019962:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019964:	f3ef 8310 	mrs	r3, PRIMASK
 8019968:	60bb      	str	r3, [r7, #8]
  return(result);
 801996a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801996c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801996e:	2301      	movs	r3, #1
 8019970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	f383 8810 	msr	PRIMASK, r3
}
 8019978:	46c0      	nop			@ (mov r8, r8)
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	681a      	ldr	r2, [r3, #0]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2110      	movs	r1, #16
 8019986:	438a      	bics	r2, r1
 8019988:	601a      	str	r2, [r3, #0]
 801998a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801998c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801998e:	693b      	ldr	r3, [r7, #16]
 8019990:	f383 8810 	msr	PRIMASK, r3
}
 8019994:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	69db      	ldr	r3, [r3, #28]
 801999c:	2210      	movs	r2, #16
 801999e:	4013      	ands	r3, r2
 80199a0:	2b10      	cmp	r3, #16
 80199a2:	d103      	bne.n	80199ac <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	2210      	movs	r2, #16
 80199aa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	22ac      	movs	r2, #172	@ 0xac
 80199b0:	589b      	ldr	r3, [r3, r2]
 80199b2:	687a      	ldr	r2, [r7, #4]
 80199b4:	2158      	movs	r1, #88	@ 0x58
 80199b6:	5a51      	ldrh	r1, [r2, r1]
 80199b8:	687a      	ldr	r2, [r7, #4]
 80199ba:	0010      	movs	r0, r2
 80199bc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80199be:	e00e      	b.n	80199de <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	2294      	movs	r2, #148	@ 0x94
 80199c4:	589b      	ldr	r3, [r3, r2]
 80199c6:	687a      	ldr	r2, [r7, #4]
 80199c8:	0010      	movs	r0, r2
 80199ca:	4798      	blx	r3
}
 80199cc:	e007      	b.n	80199de <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	699a      	ldr	r2, [r3, #24]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	2108      	movs	r1, #8
 80199da:	430a      	orrs	r2, r1
 80199dc:	619a      	str	r2, [r3, #24]
}
 80199de:	46c0      	nop			@ (mov r8, r8)
 80199e0:	46bd      	mov	sp, r7
 80199e2:	b014      	add	sp, #80	@ 0x50
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	46c0      	nop			@ (mov r8, r8)
 80199e8:	fffffedf 	.word	0xfffffedf
 80199ec:	40004800 	.word	0x40004800
 80199f0:	fbffffff 	.word	0xfbffffff

080199f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b082      	sub	sp, #8
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80199fc:	46c0      	nop			@ (mov r8, r8)
 80199fe:	46bd      	mov	sp, r7
 8019a00:	b002      	add	sp, #8
 8019a02:	bd80      	pop	{r7, pc}

08019a04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b084      	sub	sp, #16
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	2244      	movs	r2, #68	@ 0x44
 8019a10:	2100      	movs	r1, #0
 8019a12:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019a14:	4b05      	ldr	r3, [pc, #20]	@ (8019a2c <USB_EnableGlobalInt+0x28>)
 8019a16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	b299      	uxth	r1, r3
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2240      	movs	r2, #64	@ 0x40
 8019a20:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019a22:	2300      	movs	r3, #0
}
 8019a24:	0018      	movs	r0, r3
 8019a26:	46bd      	mov	sp, r7
 8019a28:	b004      	add	sp, #16
 8019a2a:	bd80      	pop	{r7, pc}
 8019a2c:	0000bf80 	.word	0x0000bf80

08019a30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b084      	sub	sp, #16
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019a38:	4b09      	ldr	r3, [pc, #36]	@ (8019a60 <USB_DisableGlobalInt+0x30>)
 8019a3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	2240      	movs	r2, #64	@ 0x40
 8019a40:	5a9b      	ldrh	r3, [r3, r2]
 8019a42:	b29b      	uxth	r3, r3
 8019a44:	68fa      	ldr	r2, [r7, #12]
 8019a46:	b292      	uxth	r2, r2
 8019a48:	43d2      	mvns	r2, r2
 8019a4a:	b292      	uxth	r2, r2
 8019a4c:	4013      	ands	r3, r2
 8019a4e:	b299      	uxth	r1, r3
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2240      	movs	r2, #64	@ 0x40
 8019a54:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019a56:	2300      	movs	r3, #0
}
 8019a58:	0018      	movs	r0, r3
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	b004      	add	sp, #16
 8019a5e:	bd80      	pop	{r7, pc}
 8019a60:	0000bf80 	.word	0x0000bf80

08019a64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019a64:	b084      	sub	sp, #16
 8019a66:	b590      	push	{r4, r7, lr}
 8019a68:	b083      	sub	sp, #12
 8019a6a:	af00      	add	r7, sp, #0
 8019a6c:	6078      	str	r0, [r7, #4]
 8019a6e:	2004      	movs	r0, #4
 8019a70:	2410      	movs	r4, #16
 8019a72:	1900      	adds	r0, r0, r4
 8019a74:	2408      	movs	r4, #8
 8019a76:	46a4      	mov	ip, r4
 8019a78:	44bc      	add	ip, r7
 8019a7a:	4460      	add	r0, ip
 8019a7c:	6001      	str	r1, [r0, #0]
 8019a7e:	6042      	str	r2, [r0, #4]
 8019a80:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	2240      	movs	r2, #64	@ 0x40
 8019a86:	2101      	movs	r1, #1
 8019a88:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	2240      	movs	r2, #64	@ 0x40
 8019a8e:	2100      	movs	r1, #0
 8019a90:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	2244      	movs	r2, #68	@ 0x44
 8019a96:	2100      	movs	r1, #0
 8019a98:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2250      	movs	r2, #80	@ 0x50
 8019a9e:	2100      	movs	r1, #0
 8019aa0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019aa2:	2300      	movs	r3, #0
}
 8019aa4:	0018      	movs	r0, r3
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	b003      	add	sp, #12
 8019aaa:	bc90      	pop	{r4, r7}
 8019aac:	bc08      	pop	{r3}
 8019aae:	b004      	add	sp, #16
 8019ab0:	4718      	bx	r3
	...

08019ab4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b09c      	sub	sp, #112	@ 0x70
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	6078      	str	r0, [r7, #4]
 8019abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8019abe:	236f      	movs	r3, #111	@ 0x6f
 8019ac0:	18fb      	adds	r3, r7, r3
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8019ac6:	687a      	ldr	r2, [r7, #4]
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	781b      	ldrb	r3, [r3, #0]
 8019acc:	009b      	lsls	r3, r3, #2
 8019ace:	18d3      	adds	r3, r2, r3
 8019ad0:	881b      	ldrh	r3, [r3, #0]
 8019ad2:	b29a      	uxth	r2, r3
 8019ad4:	236c      	movs	r3, #108	@ 0x6c
 8019ad6:	18fb      	adds	r3, r7, r3
 8019ad8:	49a3      	ldr	r1, [pc, #652]	@ (8019d68 <USB_ActivateEndpoint+0x2b4>)
 8019ada:	400a      	ands	r2, r1
 8019adc:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	78db      	ldrb	r3, [r3, #3]
 8019ae2:	2b03      	cmp	r3, #3
 8019ae4:	d017      	beq.n	8019b16 <USB_ActivateEndpoint+0x62>
 8019ae6:	dc28      	bgt.n	8019b3a <USB_ActivateEndpoint+0x86>
 8019ae8:	2b02      	cmp	r3, #2
 8019aea:	d00e      	beq.n	8019b0a <USB_ActivateEndpoint+0x56>
 8019aec:	dc25      	bgt.n	8019b3a <USB_ActivateEndpoint+0x86>
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d002      	beq.n	8019af8 <USB_ActivateEndpoint+0x44>
 8019af2:	2b01      	cmp	r3, #1
 8019af4:	d018      	beq.n	8019b28 <USB_ActivateEndpoint+0x74>
 8019af6:	e020      	b.n	8019b3a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019af8:	226c      	movs	r2, #108	@ 0x6c
 8019afa:	18bb      	adds	r3, r7, r2
 8019afc:	18ba      	adds	r2, r7, r2
 8019afe:	8812      	ldrh	r2, [r2, #0]
 8019b00:	2180      	movs	r1, #128	@ 0x80
 8019b02:	0089      	lsls	r1, r1, #2
 8019b04:	430a      	orrs	r2, r1
 8019b06:	801a      	strh	r2, [r3, #0]
      break;
 8019b08:	e01c      	b.n	8019b44 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019b0a:	226c      	movs	r2, #108	@ 0x6c
 8019b0c:	18bb      	adds	r3, r7, r2
 8019b0e:	18ba      	adds	r2, r7, r2
 8019b10:	8812      	ldrh	r2, [r2, #0]
 8019b12:	801a      	strh	r2, [r3, #0]
      break;
 8019b14:	e016      	b.n	8019b44 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019b16:	226c      	movs	r2, #108	@ 0x6c
 8019b18:	18bb      	adds	r3, r7, r2
 8019b1a:	18ba      	adds	r2, r7, r2
 8019b1c:	8812      	ldrh	r2, [r2, #0]
 8019b1e:	21c0      	movs	r1, #192	@ 0xc0
 8019b20:	00c9      	lsls	r1, r1, #3
 8019b22:	430a      	orrs	r2, r1
 8019b24:	801a      	strh	r2, [r3, #0]
      break;
 8019b26:	e00d      	b.n	8019b44 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019b28:	226c      	movs	r2, #108	@ 0x6c
 8019b2a:	18bb      	adds	r3, r7, r2
 8019b2c:	18ba      	adds	r2, r7, r2
 8019b2e:	8812      	ldrh	r2, [r2, #0]
 8019b30:	2180      	movs	r1, #128	@ 0x80
 8019b32:	00c9      	lsls	r1, r1, #3
 8019b34:	430a      	orrs	r2, r1
 8019b36:	801a      	strh	r2, [r3, #0]
      break;
 8019b38:	e004      	b.n	8019b44 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019b3a:	236f      	movs	r3, #111	@ 0x6f
 8019b3c:	18fb      	adds	r3, r7, r3
 8019b3e:	2201      	movs	r2, #1
 8019b40:	701a      	strb	r2, [r3, #0]
      break;
 8019b42:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019b44:	687a      	ldr	r2, [r7, #4]
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	781b      	ldrb	r3, [r3, #0]
 8019b4a:	009b      	lsls	r3, r3, #2
 8019b4c:	18d3      	adds	r3, r2, r3
 8019b4e:	226c      	movs	r2, #108	@ 0x6c
 8019b50:	18ba      	adds	r2, r7, r2
 8019b52:	8812      	ldrh	r2, [r2, #0]
 8019b54:	4985      	ldr	r1, [pc, #532]	@ (8019d6c <USB_ActivateEndpoint+0x2b8>)
 8019b56:	430a      	orrs	r2, r1
 8019b58:	b292      	uxth	r2, r2
 8019b5a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019b5c:	687a      	ldr	r2, [r7, #4]
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	781b      	ldrb	r3, [r3, #0]
 8019b62:	009b      	lsls	r3, r3, #2
 8019b64:	18d3      	adds	r3, r2, r3
 8019b66:	881b      	ldrh	r3, [r3, #0]
 8019b68:	b29b      	uxth	r3, r3
 8019b6a:	b21b      	sxth	r3, r3
 8019b6c:	4a80      	ldr	r2, [pc, #512]	@ (8019d70 <USB_ActivateEndpoint+0x2bc>)
 8019b6e:	4013      	ands	r3, r2
 8019b70:	b21a      	sxth	r2, r3
 8019b72:	683b      	ldr	r3, [r7, #0]
 8019b74:	781b      	ldrb	r3, [r3, #0]
 8019b76:	b21b      	sxth	r3, r3
 8019b78:	4313      	orrs	r3, r2
 8019b7a:	b21a      	sxth	r2, r3
 8019b7c:	2166      	movs	r1, #102	@ 0x66
 8019b7e:	187b      	adds	r3, r7, r1
 8019b80:	801a      	strh	r2, [r3, #0]
 8019b82:	687a      	ldr	r2, [r7, #4]
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	781b      	ldrb	r3, [r3, #0]
 8019b88:	009b      	lsls	r3, r3, #2
 8019b8a:	18d3      	adds	r3, r2, r3
 8019b8c:	187a      	adds	r2, r7, r1
 8019b8e:	8812      	ldrh	r2, [r2, #0]
 8019b90:	4976      	ldr	r1, [pc, #472]	@ (8019d6c <USB_ActivateEndpoint+0x2b8>)
 8019b92:	430a      	orrs	r2, r1
 8019b94:	b292      	uxth	r2, r2
 8019b96:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019b98:	683b      	ldr	r3, [r7, #0]
 8019b9a:	7b1b      	ldrb	r3, [r3, #12]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d000      	beq.n	8019ba2 <USB_ActivateEndpoint+0xee>
 8019ba0:	e178      	b.n	8019e94 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8019ba2:	683b      	ldr	r3, [r7, #0]
 8019ba4:	785b      	ldrb	r3, [r3, #1]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d100      	bne.n	8019bac <USB_ActivateEndpoint+0xf8>
 8019baa:	e07a      	b.n	8019ca2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	61bb      	str	r3, [r7, #24]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	2250      	movs	r2, #80	@ 0x50
 8019bb4:	5a9b      	ldrh	r3, [r3, r2]
 8019bb6:	b29b      	uxth	r3, r3
 8019bb8:	001a      	movs	r2, r3
 8019bba:	69bb      	ldr	r3, [r7, #24]
 8019bbc:	189b      	adds	r3, r3, r2
 8019bbe:	61bb      	str	r3, [r7, #24]
 8019bc0:	683b      	ldr	r3, [r7, #0]
 8019bc2:	781b      	ldrb	r3, [r3, #0]
 8019bc4:	00da      	lsls	r2, r3, #3
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	18d3      	adds	r3, r2, r3
 8019bca:	2280      	movs	r2, #128	@ 0x80
 8019bcc:	00d2      	lsls	r2, r2, #3
 8019bce:	4694      	mov	ip, r2
 8019bd0:	4463      	add	r3, ip
 8019bd2:	617b      	str	r3, [r7, #20]
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	88db      	ldrh	r3, [r3, #6]
 8019bd8:	085b      	lsrs	r3, r3, #1
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	18db      	adds	r3, r3, r3
 8019bde:	b29a      	uxth	r2, r3
 8019be0:	697b      	ldr	r3, [r7, #20]
 8019be2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019be4:	687a      	ldr	r2, [r7, #4]
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	781b      	ldrb	r3, [r3, #0]
 8019bea:	009b      	lsls	r3, r3, #2
 8019bec:	18d2      	adds	r2, r2, r3
 8019bee:	2112      	movs	r1, #18
 8019bf0:	187b      	adds	r3, r7, r1
 8019bf2:	8812      	ldrh	r2, [r2, #0]
 8019bf4:	801a      	strh	r2, [r3, #0]
 8019bf6:	187b      	adds	r3, r7, r1
 8019bf8:	881b      	ldrh	r3, [r3, #0]
 8019bfa:	2240      	movs	r2, #64	@ 0x40
 8019bfc:	4013      	ands	r3, r2
 8019bfe:	d016      	beq.n	8019c2e <USB_ActivateEndpoint+0x17a>
 8019c00:	687a      	ldr	r2, [r7, #4]
 8019c02:	683b      	ldr	r3, [r7, #0]
 8019c04:	781b      	ldrb	r3, [r3, #0]
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	18d3      	adds	r3, r2, r3
 8019c0a:	881b      	ldrh	r3, [r3, #0]
 8019c0c:	b29a      	uxth	r2, r3
 8019c0e:	2010      	movs	r0, #16
 8019c10:	183b      	adds	r3, r7, r0
 8019c12:	4957      	ldr	r1, [pc, #348]	@ (8019d70 <USB_ActivateEndpoint+0x2bc>)
 8019c14:	400a      	ands	r2, r1
 8019c16:	801a      	strh	r2, [r3, #0]
 8019c18:	687a      	ldr	r2, [r7, #4]
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	009b      	lsls	r3, r3, #2
 8019c20:	18d3      	adds	r3, r2, r3
 8019c22:	183a      	adds	r2, r7, r0
 8019c24:	8812      	ldrh	r2, [r2, #0]
 8019c26:	4953      	ldr	r1, [pc, #332]	@ (8019d74 <USB_ActivateEndpoint+0x2c0>)
 8019c28:	430a      	orrs	r2, r1
 8019c2a:	b292      	uxth	r2, r2
 8019c2c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	78db      	ldrb	r3, [r3, #3]
 8019c32:	2b01      	cmp	r3, #1
 8019c34:	d01d      	beq.n	8019c72 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019c36:	687a      	ldr	r2, [r7, #4]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	781b      	ldrb	r3, [r3, #0]
 8019c3c:	009b      	lsls	r3, r3, #2
 8019c3e:	18d3      	adds	r3, r2, r3
 8019c40:	881b      	ldrh	r3, [r3, #0]
 8019c42:	b29a      	uxth	r2, r3
 8019c44:	200c      	movs	r0, #12
 8019c46:	183b      	adds	r3, r7, r0
 8019c48:	494b      	ldr	r1, [pc, #300]	@ (8019d78 <USB_ActivateEndpoint+0x2c4>)
 8019c4a:	400a      	ands	r2, r1
 8019c4c:	801a      	strh	r2, [r3, #0]
 8019c4e:	183b      	adds	r3, r7, r0
 8019c50:	183a      	adds	r2, r7, r0
 8019c52:	8812      	ldrh	r2, [r2, #0]
 8019c54:	2120      	movs	r1, #32
 8019c56:	404a      	eors	r2, r1
 8019c58:	801a      	strh	r2, [r3, #0]
 8019c5a:	687a      	ldr	r2, [r7, #4]
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	781b      	ldrb	r3, [r3, #0]
 8019c60:	009b      	lsls	r3, r3, #2
 8019c62:	18d3      	adds	r3, r2, r3
 8019c64:	183a      	adds	r2, r7, r0
 8019c66:	8812      	ldrh	r2, [r2, #0]
 8019c68:	4940      	ldr	r1, [pc, #256]	@ (8019d6c <USB_ActivateEndpoint+0x2b8>)
 8019c6a:	430a      	orrs	r2, r1
 8019c6c:	b292      	uxth	r2, r2
 8019c6e:	801a      	strh	r2, [r3, #0]
 8019c70:	e2b4      	b.n	801a1dc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c72:	687a      	ldr	r2, [r7, #4]
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	781b      	ldrb	r3, [r3, #0]
 8019c78:	009b      	lsls	r3, r3, #2
 8019c7a:	18d3      	adds	r3, r2, r3
 8019c7c:	881b      	ldrh	r3, [r3, #0]
 8019c7e:	b29a      	uxth	r2, r3
 8019c80:	200e      	movs	r0, #14
 8019c82:	183b      	adds	r3, r7, r0
 8019c84:	493c      	ldr	r1, [pc, #240]	@ (8019d78 <USB_ActivateEndpoint+0x2c4>)
 8019c86:	400a      	ands	r2, r1
 8019c88:	801a      	strh	r2, [r3, #0]
 8019c8a:	687a      	ldr	r2, [r7, #4]
 8019c8c:	683b      	ldr	r3, [r7, #0]
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	009b      	lsls	r3, r3, #2
 8019c92:	18d3      	adds	r3, r2, r3
 8019c94:	183a      	adds	r2, r7, r0
 8019c96:	8812      	ldrh	r2, [r2, #0]
 8019c98:	4934      	ldr	r1, [pc, #208]	@ (8019d6c <USB_ActivateEndpoint+0x2b8>)
 8019c9a:	430a      	orrs	r2, r1
 8019c9c:	b292      	uxth	r2, r2
 8019c9e:	801a      	strh	r2, [r3, #0]
 8019ca0:	e29c      	b.n	801a1dc <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	2250      	movs	r2, #80	@ 0x50
 8019caa:	5a9b      	ldrh	r3, [r3, r2]
 8019cac:	b29b      	uxth	r3, r3
 8019cae:	001a      	movs	r2, r3
 8019cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cb2:	189b      	adds	r3, r3, r2
 8019cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	781b      	ldrb	r3, [r3, #0]
 8019cba:	00da      	lsls	r2, r3, #3
 8019cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cbe:	18d3      	adds	r3, r2, r3
 8019cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8019d7c <USB_ActivateEndpoint+0x2c8>)
 8019cc2:	4694      	mov	ip, r2
 8019cc4:	4463      	add	r3, ip
 8019cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019cc8:	683b      	ldr	r3, [r7, #0]
 8019cca:	88db      	ldrh	r3, [r3, #6]
 8019ccc:	085b      	lsrs	r3, r3, #1
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	18db      	adds	r3, r3, r3
 8019cd2:	b29a      	uxth	r2, r3
 8019cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cd6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	2250      	movs	r2, #80	@ 0x50
 8019ce0:	5a9b      	ldrh	r3, [r3, r2]
 8019ce2:	b29b      	uxth	r3, r3
 8019ce4:	001a      	movs	r2, r3
 8019ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ce8:	189b      	adds	r3, r3, r2
 8019cea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019cec:	683b      	ldr	r3, [r7, #0]
 8019cee:	781b      	ldrb	r3, [r3, #0]
 8019cf0:	00da      	lsls	r2, r3, #3
 8019cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cf4:	18d3      	adds	r3, r2, r3
 8019cf6:	4a22      	ldr	r2, [pc, #136]	@ (8019d80 <USB_ActivateEndpoint+0x2cc>)
 8019cf8:	4694      	mov	ip, r2
 8019cfa:	4463      	add	r3, ip
 8019cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8019cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d00:	881b      	ldrh	r3, [r3, #0]
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	059b      	lsls	r3, r3, #22
 8019d06:	0d9b      	lsrs	r3, r3, #22
 8019d08:	b29a      	uxth	r2, r3
 8019d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d0c:	801a      	strh	r2, [r3, #0]
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	691b      	ldr	r3, [r3, #16]
 8019d12:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d14:	d91a      	bls.n	8019d4c <USB_ActivateEndpoint+0x298>
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	691b      	ldr	r3, [r3, #16]
 8019d1a:	095b      	lsrs	r3, r3, #5
 8019d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	691b      	ldr	r3, [r3, #16]
 8019d22:	221f      	movs	r2, #31
 8019d24:	4013      	ands	r3, r2
 8019d26:	d102      	bne.n	8019d2e <USB_ActivateEndpoint+0x27a>
 8019d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019d2a:	3b01      	subs	r3, #1
 8019d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d30:	881b      	ldrh	r3, [r3, #0]
 8019d32:	b29a      	uxth	r2, r3
 8019d34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019d36:	b29b      	uxth	r3, r3
 8019d38:	029b      	lsls	r3, r3, #10
 8019d3a:	b29b      	uxth	r3, r3
 8019d3c:	4313      	orrs	r3, r2
 8019d3e:	b29b      	uxth	r3, r3
 8019d40:	4a10      	ldr	r2, [pc, #64]	@ (8019d84 <USB_ActivateEndpoint+0x2d0>)
 8019d42:	4313      	orrs	r3, r2
 8019d44:	b29a      	uxth	r2, r3
 8019d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d48:	801a      	strh	r2, [r3, #0]
 8019d4a:	e034      	b.n	8019db6 <USB_ActivateEndpoint+0x302>
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	691b      	ldr	r3, [r3, #16]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d119      	bne.n	8019d88 <USB_ActivateEndpoint+0x2d4>
 8019d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d56:	881b      	ldrh	r3, [r3, #0]
 8019d58:	b29b      	uxth	r3, r3
 8019d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8019d84 <USB_ActivateEndpoint+0x2d0>)
 8019d5c:	4313      	orrs	r3, r2
 8019d5e:	b29a      	uxth	r2, r3
 8019d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d62:	801a      	strh	r2, [r3, #0]
 8019d64:	e027      	b.n	8019db6 <USB_ActivateEndpoint+0x302>
 8019d66:	46c0      	nop			@ (mov r8, r8)
 8019d68:	ffff898f 	.word	0xffff898f
 8019d6c:	ffff8080 	.word	0xffff8080
 8019d70:	ffff8f8f 	.word	0xffff8f8f
 8019d74:	ffff80c0 	.word	0xffff80c0
 8019d78:	ffff8fbf 	.word	0xffff8fbf
 8019d7c:	00000404 	.word	0x00000404
 8019d80:	00000406 	.word	0x00000406
 8019d84:	ffff8000 	.word	0xffff8000
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	691b      	ldr	r3, [r3, #16]
 8019d8c:	085b      	lsrs	r3, r3, #1
 8019d8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	691b      	ldr	r3, [r3, #16]
 8019d94:	2201      	movs	r2, #1
 8019d96:	4013      	ands	r3, r2
 8019d98:	d002      	beq.n	8019da0 <USB_ActivateEndpoint+0x2ec>
 8019d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019da2:	881b      	ldrh	r3, [r3, #0]
 8019da4:	b29a      	uxth	r2, r3
 8019da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	029b      	lsls	r3, r3, #10
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	4313      	orrs	r3, r2
 8019db0:	b29a      	uxth	r2, r3
 8019db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019db6:	687a      	ldr	r2, [r7, #4]
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	781b      	ldrb	r3, [r3, #0]
 8019dbc:	009b      	lsls	r3, r3, #2
 8019dbe:	18d2      	adds	r2, r2, r3
 8019dc0:	2122      	movs	r1, #34	@ 0x22
 8019dc2:	187b      	adds	r3, r7, r1
 8019dc4:	8812      	ldrh	r2, [r2, #0]
 8019dc6:	801a      	strh	r2, [r3, #0]
 8019dc8:	187b      	adds	r3, r7, r1
 8019dca:	881a      	ldrh	r2, [r3, #0]
 8019dcc:	2380      	movs	r3, #128	@ 0x80
 8019dce:	01db      	lsls	r3, r3, #7
 8019dd0:	4013      	ands	r3, r2
 8019dd2:	d016      	beq.n	8019e02 <USB_ActivateEndpoint+0x34e>
 8019dd4:	687a      	ldr	r2, [r7, #4]
 8019dd6:	683b      	ldr	r3, [r7, #0]
 8019dd8:	781b      	ldrb	r3, [r3, #0]
 8019dda:	009b      	lsls	r3, r3, #2
 8019ddc:	18d3      	adds	r3, r2, r3
 8019dde:	881b      	ldrh	r3, [r3, #0]
 8019de0:	b29a      	uxth	r2, r3
 8019de2:	2020      	movs	r0, #32
 8019de4:	183b      	adds	r3, r7, r0
 8019de6:	49dd      	ldr	r1, [pc, #884]	@ (801a15c <USB_ActivateEndpoint+0x6a8>)
 8019de8:	400a      	ands	r2, r1
 8019dea:	801a      	strh	r2, [r3, #0]
 8019dec:	687a      	ldr	r2, [r7, #4]
 8019dee:	683b      	ldr	r3, [r7, #0]
 8019df0:	781b      	ldrb	r3, [r3, #0]
 8019df2:	009b      	lsls	r3, r3, #2
 8019df4:	18d3      	adds	r3, r2, r3
 8019df6:	183a      	adds	r2, r7, r0
 8019df8:	8812      	ldrh	r2, [r2, #0]
 8019dfa:	49d9      	ldr	r1, [pc, #868]	@ (801a160 <USB_ActivateEndpoint+0x6ac>)
 8019dfc:	430a      	orrs	r2, r1
 8019dfe:	b292      	uxth	r2, r2
 8019e00:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	781b      	ldrb	r3, [r3, #0]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d125      	bne.n	8019e56 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019e0a:	687a      	ldr	r2, [r7, #4]
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	781b      	ldrb	r3, [r3, #0]
 8019e10:	009b      	lsls	r3, r3, #2
 8019e12:	18d3      	adds	r3, r2, r3
 8019e14:	881b      	ldrh	r3, [r3, #0]
 8019e16:	b29a      	uxth	r2, r3
 8019e18:	201c      	movs	r0, #28
 8019e1a:	183b      	adds	r3, r7, r0
 8019e1c:	49d1      	ldr	r1, [pc, #836]	@ (801a164 <USB_ActivateEndpoint+0x6b0>)
 8019e1e:	400a      	ands	r2, r1
 8019e20:	801a      	strh	r2, [r3, #0]
 8019e22:	183b      	adds	r3, r7, r0
 8019e24:	183a      	adds	r2, r7, r0
 8019e26:	8812      	ldrh	r2, [r2, #0]
 8019e28:	2180      	movs	r1, #128	@ 0x80
 8019e2a:	0149      	lsls	r1, r1, #5
 8019e2c:	404a      	eors	r2, r1
 8019e2e:	801a      	strh	r2, [r3, #0]
 8019e30:	183b      	adds	r3, r7, r0
 8019e32:	183a      	adds	r2, r7, r0
 8019e34:	8812      	ldrh	r2, [r2, #0]
 8019e36:	2180      	movs	r1, #128	@ 0x80
 8019e38:	0189      	lsls	r1, r1, #6
 8019e3a:	404a      	eors	r2, r1
 8019e3c:	801a      	strh	r2, [r3, #0]
 8019e3e:	687a      	ldr	r2, [r7, #4]
 8019e40:	683b      	ldr	r3, [r7, #0]
 8019e42:	781b      	ldrb	r3, [r3, #0]
 8019e44:	009b      	lsls	r3, r3, #2
 8019e46:	18d3      	adds	r3, r2, r3
 8019e48:	183a      	adds	r2, r7, r0
 8019e4a:	8812      	ldrh	r2, [r2, #0]
 8019e4c:	49c6      	ldr	r1, [pc, #792]	@ (801a168 <USB_ActivateEndpoint+0x6b4>)
 8019e4e:	430a      	orrs	r2, r1
 8019e50:	b292      	uxth	r2, r2
 8019e52:	801a      	strh	r2, [r3, #0]
 8019e54:	e1c2      	b.n	801a1dc <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8019e56:	687a      	ldr	r2, [r7, #4]
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	781b      	ldrb	r3, [r3, #0]
 8019e5c:	009b      	lsls	r3, r3, #2
 8019e5e:	18d3      	adds	r3, r2, r3
 8019e60:	881b      	ldrh	r3, [r3, #0]
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	201e      	movs	r0, #30
 8019e66:	183b      	adds	r3, r7, r0
 8019e68:	49be      	ldr	r1, [pc, #760]	@ (801a164 <USB_ActivateEndpoint+0x6b0>)
 8019e6a:	400a      	ands	r2, r1
 8019e6c:	801a      	strh	r2, [r3, #0]
 8019e6e:	183b      	adds	r3, r7, r0
 8019e70:	183a      	adds	r2, r7, r0
 8019e72:	8812      	ldrh	r2, [r2, #0]
 8019e74:	2180      	movs	r1, #128	@ 0x80
 8019e76:	0189      	lsls	r1, r1, #6
 8019e78:	404a      	eors	r2, r1
 8019e7a:	801a      	strh	r2, [r3, #0]
 8019e7c:	687a      	ldr	r2, [r7, #4]
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	781b      	ldrb	r3, [r3, #0]
 8019e82:	009b      	lsls	r3, r3, #2
 8019e84:	18d3      	adds	r3, r2, r3
 8019e86:	183a      	adds	r2, r7, r0
 8019e88:	8812      	ldrh	r2, [r2, #0]
 8019e8a:	49b7      	ldr	r1, [pc, #732]	@ (801a168 <USB_ActivateEndpoint+0x6b4>)
 8019e8c:	430a      	orrs	r2, r1
 8019e8e:	b292      	uxth	r2, r2
 8019e90:	801a      	strh	r2, [r3, #0]
 8019e92:	e1a3      	b.n	801a1dc <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	78db      	ldrb	r3, [r3, #3]
 8019e98:	2b02      	cmp	r3, #2
 8019e9a:	d117      	bne.n	8019ecc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019e9c:	687a      	ldr	r2, [r7, #4]
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	781b      	ldrb	r3, [r3, #0]
 8019ea2:	009b      	lsls	r3, r3, #2
 8019ea4:	18d3      	adds	r3, r2, r3
 8019ea6:	881b      	ldrh	r3, [r3, #0]
 8019ea8:	b29a      	uxth	r2, r3
 8019eaa:	2062      	movs	r0, #98	@ 0x62
 8019eac:	183b      	adds	r3, r7, r0
 8019eae:	49ab      	ldr	r1, [pc, #684]	@ (801a15c <USB_ActivateEndpoint+0x6a8>)
 8019eb0:	400a      	ands	r2, r1
 8019eb2:	801a      	strh	r2, [r3, #0]
 8019eb4:	687a      	ldr	r2, [r7, #4]
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	781b      	ldrb	r3, [r3, #0]
 8019eba:	009b      	lsls	r3, r3, #2
 8019ebc:	18d3      	adds	r3, r2, r3
 8019ebe:	183a      	adds	r2, r7, r0
 8019ec0:	8812      	ldrh	r2, [r2, #0]
 8019ec2:	49aa      	ldr	r1, [pc, #680]	@ (801a16c <USB_ActivateEndpoint+0x6b8>)
 8019ec4:	430a      	orrs	r2, r1
 8019ec6:	b292      	uxth	r2, r2
 8019ec8:	801a      	strh	r2, [r3, #0]
 8019eca:	e016      	b.n	8019efa <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019ecc:	687a      	ldr	r2, [r7, #4]
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	781b      	ldrb	r3, [r3, #0]
 8019ed2:	009b      	lsls	r3, r3, #2
 8019ed4:	18d3      	adds	r3, r2, r3
 8019ed6:	881b      	ldrh	r3, [r3, #0]
 8019ed8:	b29a      	uxth	r2, r3
 8019eda:	2064      	movs	r0, #100	@ 0x64
 8019edc:	183b      	adds	r3, r7, r0
 8019ede:	49a4      	ldr	r1, [pc, #656]	@ (801a170 <USB_ActivateEndpoint+0x6bc>)
 8019ee0:	400a      	ands	r2, r1
 8019ee2:	801a      	strh	r2, [r3, #0]
 8019ee4:	687a      	ldr	r2, [r7, #4]
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	009b      	lsls	r3, r3, #2
 8019eec:	18d3      	adds	r3, r2, r3
 8019eee:	183a      	adds	r2, r7, r0
 8019ef0:	8812      	ldrh	r2, [r2, #0]
 8019ef2:	499d      	ldr	r1, [pc, #628]	@ (801a168 <USB_ActivateEndpoint+0x6b4>)
 8019ef4:	430a      	orrs	r2, r1
 8019ef6:	b292      	uxth	r2, r2
 8019ef8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2250      	movs	r2, #80	@ 0x50
 8019f02:	5a9b      	ldrh	r3, [r3, r2]
 8019f04:	b29b      	uxth	r3, r3
 8019f06:	001a      	movs	r2, r3
 8019f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f0a:	189b      	adds	r3, r3, r2
 8019f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	781b      	ldrb	r3, [r3, #0]
 8019f12:	00da      	lsls	r2, r3, #3
 8019f14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019f16:	18d3      	adds	r3, r2, r3
 8019f18:	2280      	movs	r2, #128	@ 0x80
 8019f1a:	00d2      	lsls	r2, r2, #3
 8019f1c:	4694      	mov	ip, r2
 8019f1e:	4463      	add	r3, ip
 8019f20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019f22:	683b      	ldr	r3, [r7, #0]
 8019f24:	891b      	ldrh	r3, [r3, #8]
 8019f26:	085b      	lsrs	r3, r3, #1
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	18db      	adds	r3, r3, r3
 8019f2c:	b29a      	uxth	r2, r3
 8019f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019f30:	801a      	strh	r2, [r3, #0]
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	657b      	str	r3, [r7, #84]	@ 0x54
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	2250      	movs	r2, #80	@ 0x50
 8019f3a:	5a9b      	ldrh	r3, [r3, r2]
 8019f3c:	b29b      	uxth	r3, r3
 8019f3e:	001a      	movs	r2, r3
 8019f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f42:	189b      	adds	r3, r3, r2
 8019f44:	657b      	str	r3, [r7, #84]	@ 0x54
 8019f46:	683b      	ldr	r3, [r7, #0]
 8019f48:	781b      	ldrb	r3, [r3, #0]
 8019f4a:	00da      	lsls	r2, r3, #3
 8019f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f4e:	18d3      	adds	r3, r2, r3
 8019f50:	4a88      	ldr	r2, [pc, #544]	@ (801a174 <USB_ActivateEndpoint+0x6c0>)
 8019f52:	4694      	mov	ip, r2
 8019f54:	4463      	add	r3, ip
 8019f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	895b      	ldrh	r3, [r3, #10]
 8019f5c:	085b      	lsrs	r3, r3, #1
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	18db      	adds	r3, r3, r3
 8019f62:	b29a      	uxth	r2, r3
 8019f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f66:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	785b      	ldrb	r3, [r3, #1]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d000      	beq.n	8019f72 <USB_ActivateEndpoint+0x4be>
 8019f70:	e087      	b.n	801a082 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	781b      	ldrb	r3, [r3, #0]
 8019f78:	009b      	lsls	r3, r3, #2
 8019f7a:	18d2      	adds	r2, r2, r3
 8019f7c:	2140      	movs	r1, #64	@ 0x40
 8019f7e:	187b      	adds	r3, r7, r1
 8019f80:	8812      	ldrh	r2, [r2, #0]
 8019f82:	801a      	strh	r2, [r3, #0]
 8019f84:	187b      	adds	r3, r7, r1
 8019f86:	881a      	ldrh	r2, [r3, #0]
 8019f88:	2380      	movs	r3, #128	@ 0x80
 8019f8a:	01db      	lsls	r3, r3, #7
 8019f8c:	4013      	ands	r3, r2
 8019f8e:	d016      	beq.n	8019fbe <USB_ActivateEndpoint+0x50a>
 8019f90:	687a      	ldr	r2, [r7, #4]
 8019f92:	683b      	ldr	r3, [r7, #0]
 8019f94:	781b      	ldrb	r3, [r3, #0]
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	18d3      	adds	r3, r2, r3
 8019f9a:	881b      	ldrh	r3, [r3, #0]
 8019f9c:	b29a      	uxth	r2, r3
 8019f9e:	203e      	movs	r0, #62	@ 0x3e
 8019fa0:	183b      	adds	r3, r7, r0
 8019fa2:	496e      	ldr	r1, [pc, #440]	@ (801a15c <USB_ActivateEndpoint+0x6a8>)
 8019fa4:	400a      	ands	r2, r1
 8019fa6:	801a      	strh	r2, [r3, #0]
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	683b      	ldr	r3, [r7, #0]
 8019fac:	781b      	ldrb	r3, [r3, #0]
 8019fae:	009b      	lsls	r3, r3, #2
 8019fb0:	18d3      	adds	r3, r2, r3
 8019fb2:	183a      	adds	r2, r7, r0
 8019fb4:	8812      	ldrh	r2, [r2, #0]
 8019fb6:	496a      	ldr	r1, [pc, #424]	@ (801a160 <USB_ActivateEndpoint+0x6ac>)
 8019fb8:	430a      	orrs	r2, r1
 8019fba:	b292      	uxth	r2, r2
 8019fbc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	683b      	ldr	r3, [r7, #0]
 8019fc2:	781b      	ldrb	r3, [r3, #0]
 8019fc4:	009b      	lsls	r3, r3, #2
 8019fc6:	18d2      	adds	r2, r2, r3
 8019fc8:	213c      	movs	r1, #60	@ 0x3c
 8019fca:	187b      	adds	r3, r7, r1
 8019fcc:	8812      	ldrh	r2, [r2, #0]
 8019fce:	801a      	strh	r2, [r3, #0]
 8019fd0:	187b      	adds	r3, r7, r1
 8019fd2:	881b      	ldrh	r3, [r3, #0]
 8019fd4:	2240      	movs	r2, #64	@ 0x40
 8019fd6:	4013      	ands	r3, r2
 8019fd8:	d016      	beq.n	801a008 <USB_ActivateEndpoint+0x554>
 8019fda:	687a      	ldr	r2, [r7, #4]
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	781b      	ldrb	r3, [r3, #0]
 8019fe0:	009b      	lsls	r3, r3, #2
 8019fe2:	18d3      	adds	r3, r2, r3
 8019fe4:	881b      	ldrh	r3, [r3, #0]
 8019fe6:	b29a      	uxth	r2, r3
 8019fe8:	203a      	movs	r0, #58	@ 0x3a
 8019fea:	183b      	adds	r3, r7, r0
 8019fec:	495b      	ldr	r1, [pc, #364]	@ (801a15c <USB_ActivateEndpoint+0x6a8>)
 8019fee:	400a      	ands	r2, r1
 8019ff0:	801a      	strh	r2, [r3, #0]
 8019ff2:	687a      	ldr	r2, [r7, #4]
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	781b      	ldrb	r3, [r3, #0]
 8019ff8:	009b      	lsls	r3, r3, #2
 8019ffa:	18d3      	adds	r3, r2, r3
 8019ffc:	183a      	adds	r2, r7, r0
 8019ffe:	8812      	ldrh	r2, [r2, #0]
 801a000:	495d      	ldr	r1, [pc, #372]	@ (801a178 <USB_ActivateEndpoint+0x6c4>)
 801a002:	430a      	orrs	r2, r1
 801a004:	b292      	uxth	r2, r2
 801a006:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a008:	687a      	ldr	r2, [r7, #4]
 801a00a:	683b      	ldr	r3, [r7, #0]
 801a00c:	781b      	ldrb	r3, [r3, #0]
 801a00e:	009b      	lsls	r3, r3, #2
 801a010:	18d3      	adds	r3, r2, r3
 801a012:	881b      	ldrh	r3, [r3, #0]
 801a014:	b29a      	uxth	r2, r3
 801a016:	2038      	movs	r0, #56	@ 0x38
 801a018:	183b      	adds	r3, r7, r0
 801a01a:	4952      	ldr	r1, [pc, #328]	@ (801a164 <USB_ActivateEndpoint+0x6b0>)
 801a01c:	400a      	ands	r2, r1
 801a01e:	801a      	strh	r2, [r3, #0]
 801a020:	183b      	adds	r3, r7, r0
 801a022:	183a      	adds	r2, r7, r0
 801a024:	8812      	ldrh	r2, [r2, #0]
 801a026:	2180      	movs	r1, #128	@ 0x80
 801a028:	0149      	lsls	r1, r1, #5
 801a02a:	404a      	eors	r2, r1
 801a02c:	801a      	strh	r2, [r3, #0]
 801a02e:	183b      	adds	r3, r7, r0
 801a030:	183a      	adds	r2, r7, r0
 801a032:	8812      	ldrh	r2, [r2, #0]
 801a034:	2180      	movs	r1, #128	@ 0x80
 801a036:	0189      	lsls	r1, r1, #6
 801a038:	404a      	eors	r2, r1
 801a03a:	801a      	strh	r2, [r3, #0]
 801a03c:	687a      	ldr	r2, [r7, #4]
 801a03e:	683b      	ldr	r3, [r7, #0]
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	009b      	lsls	r3, r3, #2
 801a044:	18d3      	adds	r3, r2, r3
 801a046:	183a      	adds	r2, r7, r0
 801a048:	8812      	ldrh	r2, [r2, #0]
 801a04a:	4947      	ldr	r1, [pc, #284]	@ (801a168 <USB_ActivateEndpoint+0x6b4>)
 801a04c:	430a      	orrs	r2, r1
 801a04e:	b292      	uxth	r2, r2
 801a050:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a052:	687a      	ldr	r2, [r7, #4]
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	781b      	ldrb	r3, [r3, #0]
 801a058:	009b      	lsls	r3, r3, #2
 801a05a:	18d3      	adds	r3, r2, r3
 801a05c:	881b      	ldrh	r3, [r3, #0]
 801a05e:	b29a      	uxth	r2, r3
 801a060:	2036      	movs	r0, #54	@ 0x36
 801a062:	183b      	adds	r3, r7, r0
 801a064:	4945      	ldr	r1, [pc, #276]	@ (801a17c <USB_ActivateEndpoint+0x6c8>)
 801a066:	400a      	ands	r2, r1
 801a068:	801a      	strh	r2, [r3, #0]
 801a06a:	687a      	ldr	r2, [r7, #4]
 801a06c:	683b      	ldr	r3, [r7, #0]
 801a06e:	781b      	ldrb	r3, [r3, #0]
 801a070:	009b      	lsls	r3, r3, #2
 801a072:	18d3      	adds	r3, r2, r3
 801a074:	183a      	adds	r2, r7, r0
 801a076:	8812      	ldrh	r2, [r2, #0]
 801a078:	493b      	ldr	r1, [pc, #236]	@ (801a168 <USB_ActivateEndpoint+0x6b4>)
 801a07a:	430a      	orrs	r2, r1
 801a07c:	b292      	uxth	r2, r2
 801a07e:	801a      	strh	r2, [r3, #0]
 801a080:	e0ac      	b.n	801a1dc <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a082:	687a      	ldr	r2, [r7, #4]
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	781b      	ldrb	r3, [r3, #0]
 801a088:	009b      	lsls	r3, r3, #2
 801a08a:	18d2      	adds	r2, r2, r3
 801a08c:	214e      	movs	r1, #78	@ 0x4e
 801a08e:	187b      	adds	r3, r7, r1
 801a090:	8812      	ldrh	r2, [r2, #0]
 801a092:	801a      	strh	r2, [r3, #0]
 801a094:	187b      	adds	r3, r7, r1
 801a096:	881a      	ldrh	r2, [r3, #0]
 801a098:	2380      	movs	r3, #128	@ 0x80
 801a09a:	01db      	lsls	r3, r3, #7
 801a09c:	4013      	ands	r3, r2
 801a09e:	d016      	beq.n	801a0ce <USB_ActivateEndpoint+0x61a>
 801a0a0:	687a      	ldr	r2, [r7, #4]
 801a0a2:	683b      	ldr	r3, [r7, #0]
 801a0a4:	781b      	ldrb	r3, [r3, #0]
 801a0a6:	009b      	lsls	r3, r3, #2
 801a0a8:	18d3      	adds	r3, r2, r3
 801a0aa:	881b      	ldrh	r3, [r3, #0]
 801a0ac:	b29a      	uxth	r2, r3
 801a0ae:	204c      	movs	r0, #76	@ 0x4c
 801a0b0:	183b      	adds	r3, r7, r0
 801a0b2:	492a      	ldr	r1, [pc, #168]	@ (801a15c <USB_ActivateEndpoint+0x6a8>)
 801a0b4:	400a      	ands	r2, r1
 801a0b6:	801a      	strh	r2, [r3, #0]
 801a0b8:	687a      	ldr	r2, [r7, #4]
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	781b      	ldrb	r3, [r3, #0]
 801a0be:	009b      	lsls	r3, r3, #2
 801a0c0:	18d3      	adds	r3, r2, r3
 801a0c2:	183a      	adds	r2, r7, r0
 801a0c4:	8812      	ldrh	r2, [r2, #0]
 801a0c6:	4926      	ldr	r1, [pc, #152]	@ (801a160 <USB_ActivateEndpoint+0x6ac>)
 801a0c8:	430a      	orrs	r2, r1
 801a0ca:	b292      	uxth	r2, r2
 801a0cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a0ce:	687a      	ldr	r2, [r7, #4]
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	781b      	ldrb	r3, [r3, #0]
 801a0d4:	009b      	lsls	r3, r3, #2
 801a0d6:	18d2      	adds	r2, r2, r3
 801a0d8:	214a      	movs	r1, #74	@ 0x4a
 801a0da:	187b      	adds	r3, r7, r1
 801a0dc:	8812      	ldrh	r2, [r2, #0]
 801a0de:	801a      	strh	r2, [r3, #0]
 801a0e0:	187b      	adds	r3, r7, r1
 801a0e2:	881b      	ldrh	r3, [r3, #0]
 801a0e4:	2240      	movs	r2, #64	@ 0x40
 801a0e6:	4013      	ands	r3, r2
 801a0e8:	d016      	beq.n	801a118 <USB_ActivateEndpoint+0x664>
 801a0ea:	687a      	ldr	r2, [r7, #4]
 801a0ec:	683b      	ldr	r3, [r7, #0]
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	009b      	lsls	r3, r3, #2
 801a0f2:	18d3      	adds	r3, r2, r3
 801a0f4:	881b      	ldrh	r3, [r3, #0]
 801a0f6:	b29a      	uxth	r2, r3
 801a0f8:	2048      	movs	r0, #72	@ 0x48
 801a0fa:	183b      	adds	r3, r7, r0
 801a0fc:	4917      	ldr	r1, [pc, #92]	@ (801a15c <USB_ActivateEndpoint+0x6a8>)
 801a0fe:	400a      	ands	r2, r1
 801a100:	801a      	strh	r2, [r3, #0]
 801a102:	687a      	ldr	r2, [r7, #4]
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	781b      	ldrb	r3, [r3, #0]
 801a108:	009b      	lsls	r3, r3, #2
 801a10a:	18d3      	adds	r3, r2, r3
 801a10c:	183a      	adds	r2, r7, r0
 801a10e:	8812      	ldrh	r2, [r2, #0]
 801a110:	4919      	ldr	r1, [pc, #100]	@ (801a178 <USB_ActivateEndpoint+0x6c4>)
 801a112:	430a      	orrs	r2, r1
 801a114:	b292      	uxth	r2, r2
 801a116:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a118:	683b      	ldr	r3, [r7, #0]
 801a11a:	78db      	ldrb	r3, [r3, #3]
 801a11c:	2b01      	cmp	r3, #1
 801a11e:	d02f      	beq.n	801a180 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a120:	687a      	ldr	r2, [r7, #4]
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	009b      	lsls	r3, r3, #2
 801a128:	18d3      	adds	r3, r2, r3
 801a12a:	881b      	ldrh	r3, [r3, #0]
 801a12c:	b29a      	uxth	r2, r3
 801a12e:	2044      	movs	r0, #68	@ 0x44
 801a130:	183b      	adds	r3, r7, r0
 801a132:	4912      	ldr	r1, [pc, #72]	@ (801a17c <USB_ActivateEndpoint+0x6c8>)
 801a134:	400a      	ands	r2, r1
 801a136:	801a      	strh	r2, [r3, #0]
 801a138:	183b      	adds	r3, r7, r0
 801a13a:	183a      	adds	r2, r7, r0
 801a13c:	8812      	ldrh	r2, [r2, #0]
 801a13e:	2120      	movs	r1, #32
 801a140:	404a      	eors	r2, r1
 801a142:	801a      	strh	r2, [r3, #0]
 801a144:	687a      	ldr	r2, [r7, #4]
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	781b      	ldrb	r3, [r3, #0]
 801a14a:	009b      	lsls	r3, r3, #2
 801a14c:	18d3      	adds	r3, r2, r3
 801a14e:	183a      	adds	r2, r7, r0
 801a150:	8812      	ldrh	r2, [r2, #0]
 801a152:	4905      	ldr	r1, [pc, #20]	@ (801a168 <USB_ActivateEndpoint+0x6b4>)
 801a154:	430a      	orrs	r2, r1
 801a156:	b292      	uxth	r2, r2
 801a158:	801a      	strh	r2, [r3, #0]
 801a15a:	e028      	b.n	801a1ae <USB_ActivateEndpoint+0x6fa>
 801a15c:	ffff8f8f 	.word	0xffff8f8f
 801a160:	ffffc080 	.word	0xffffc080
 801a164:	ffffbf8f 	.word	0xffffbf8f
 801a168:	ffff8080 	.word	0xffff8080
 801a16c:	ffff8180 	.word	0xffff8180
 801a170:	ffff8e8f 	.word	0xffff8e8f
 801a174:	00000404 	.word	0x00000404
 801a178:	ffff80c0 	.word	0xffff80c0
 801a17c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a180:	687a      	ldr	r2, [r7, #4]
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	781b      	ldrb	r3, [r3, #0]
 801a186:	009b      	lsls	r3, r3, #2
 801a188:	18d3      	adds	r3, r2, r3
 801a18a:	881b      	ldrh	r3, [r3, #0]
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	2046      	movs	r0, #70	@ 0x46
 801a190:	183b      	adds	r3, r7, r0
 801a192:	4916      	ldr	r1, [pc, #88]	@ (801a1ec <USB_ActivateEndpoint+0x738>)
 801a194:	400a      	ands	r2, r1
 801a196:	801a      	strh	r2, [r3, #0]
 801a198:	687a      	ldr	r2, [r7, #4]
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	781b      	ldrb	r3, [r3, #0]
 801a19e:	009b      	lsls	r3, r3, #2
 801a1a0:	18d3      	adds	r3, r2, r3
 801a1a2:	183a      	adds	r2, r7, r0
 801a1a4:	8812      	ldrh	r2, [r2, #0]
 801a1a6:	4912      	ldr	r1, [pc, #72]	@ (801a1f0 <USB_ActivateEndpoint+0x73c>)
 801a1a8:	430a      	orrs	r2, r1
 801a1aa:	b292      	uxth	r2, r2
 801a1ac:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a1ae:	687a      	ldr	r2, [r7, #4]
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	781b      	ldrb	r3, [r3, #0]
 801a1b4:	009b      	lsls	r3, r3, #2
 801a1b6:	18d3      	adds	r3, r2, r3
 801a1b8:	881b      	ldrh	r3, [r3, #0]
 801a1ba:	b29a      	uxth	r2, r3
 801a1bc:	2042      	movs	r0, #66	@ 0x42
 801a1be:	183b      	adds	r3, r7, r0
 801a1c0:	490c      	ldr	r1, [pc, #48]	@ (801a1f4 <USB_ActivateEndpoint+0x740>)
 801a1c2:	400a      	ands	r2, r1
 801a1c4:	801a      	strh	r2, [r3, #0]
 801a1c6:	687a      	ldr	r2, [r7, #4]
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	781b      	ldrb	r3, [r3, #0]
 801a1cc:	009b      	lsls	r3, r3, #2
 801a1ce:	18d3      	adds	r3, r2, r3
 801a1d0:	183a      	adds	r2, r7, r0
 801a1d2:	8812      	ldrh	r2, [r2, #0]
 801a1d4:	4906      	ldr	r1, [pc, #24]	@ (801a1f0 <USB_ActivateEndpoint+0x73c>)
 801a1d6:	430a      	orrs	r2, r1
 801a1d8:	b292      	uxth	r2, r2
 801a1da:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801a1dc:	236f      	movs	r3, #111	@ 0x6f
 801a1de:	18fb      	adds	r3, r7, r3
 801a1e0:	781b      	ldrb	r3, [r3, #0]
}
 801a1e2:	0018      	movs	r0, r3
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	b01c      	add	sp, #112	@ 0x70
 801a1e8:	bd80      	pop	{r7, pc}
 801a1ea:	46c0      	nop			@ (mov r8, r8)
 801a1ec:	ffff8fbf 	.word	0xffff8fbf
 801a1f0:	ffff8080 	.word	0xffff8080
 801a1f4:	ffffbf8f 	.word	0xffffbf8f

0801a1f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b08c      	sub	sp, #48	@ 0x30
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
 801a200:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	7b1b      	ldrb	r3, [r3, #12]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d000      	beq.n	801a20c <USB_DeactivateEndpoint+0x14>
 801a20a:	e07e      	b.n	801a30a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801a20c:	683b      	ldr	r3, [r7, #0]
 801a20e:	785b      	ldrb	r3, [r3, #1]
 801a210:	2b00      	cmp	r3, #0
 801a212:	d03c      	beq.n	801a28e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a214:	687a      	ldr	r2, [r7, #4]
 801a216:	683b      	ldr	r3, [r7, #0]
 801a218:	781b      	ldrb	r3, [r3, #0]
 801a21a:	009b      	lsls	r3, r3, #2
 801a21c:	18d2      	adds	r2, r2, r3
 801a21e:	210c      	movs	r1, #12
 801a220:	187b      	adds	r3, r7, r1
 801a222:	8812      	ldrh	r2, [r2, #0]
 801a224:	801a      	strh	r2, [r3, #0]
 801a226:	187b      	adds	r3, r7, r1
 801a228:	881b      	ldrh	r3, [r3, #0]
 801a22a:	2240      	movs	r2, #64	@ 0x40
 801a22c:	4013      	ands	r3, r2
 801a22e:	d016      	beq.n	801a25e <USB_DeactivateEndpoint+0x66>
 801a230:	687a      	ldr	r2, [r7, #4]
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	009b      	lsls	r3, r3, #2
 801a238:	18d3      	adds	r3, r2, r3
 801a23a:	881b      	ldrh	r3, [r3, #0]
 801a23c:	b29a      	uxth	r2, r3
 801a23e:	200a      	movs	r0, #10
 801a240:	183b      	adds	r3, r7, r0
 801a242:	49c7      	ldr	r1, [pc, #796]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a244:	400a      	ands	r2, r1
 801a246:	801a      	strh	r2, [r3, #0]
 801a248:	687a      	ldr	r2, [r7, #4]
 801a24a:	683b      	ldr	r3, [r7, #0]
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	009b      	lsls	r3, r3, #2
 801a250:	18d3      	adds	r3, r2, r3
 801a252:	183a      	adds	r2, r7, r0
 801a254:	8812      	ldrh	r2, [r2, #0]
 801a256:	49c3      	ldr	r1, [pc, #780]	@ (801a564 <USB_DeactivateEndpoint+0x36c>)
 801a258:	430a      	orrs	r2, r1
 801a25a:	b292      	uxth	r2, r2
 801a25c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a25e:	687a      	ldr	r2, [r7, #4]
 801a260:	683b      	ldr	r3, [r7, #0]
 801a262:	781b      	ldrb	r3, [r3, #0]
 801a264:	009b      	lsls	r3, r3, #2
 801a266:	18d3      	adds	r3, r2, r3
 801a268:	881b      	ldrh	r3, [r3, #0]
 801a26a:	b29a      	uxth	r2, r3
 801a26c:	2008      	movs	r0, #8
 801a26e:	183b      	adds	r3, r7, r0
 801a270:	49bd      	ldr	r1, [pc, #756]	@ (801a568 <USB_DeactivateEndpoint+0x370>)
 801a272:	400a      	ands	r2, r1
 801a274:	801a      	strh	r2, [r3, #0]
 801a276:	687a      	ldr	r2, [r7, #4]
 801a278:	683b      	ldr	r3, [r7, #0]
 801a27a:	781b      	ldrb	r3, [r3, #0]
 801a27c:	009b      	lsls	r3, r3, #2
 801a27e:	18d3      	adds	r3, r2, r3
 801a280:	183a      	adds	r2, r7, r0
 801a282:	8812      	ldrh	r2, [r2, #0]
 801a284:	49b9      	ldr	r1, [pc, #740]	@ (801a56c <USB_DeactivateEndpoint+0x374>)
 801a286:	430a      	orrs	r2, r1
 801a288:	b292      	uxth	r2, r2
 801a28a:	801a      	strh	r2, [r3, #0]
 801a28c:	e163      	b.n	801a556 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a28e:	687a      	ldr	r2, [r7, #4]
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	781b      	ldrb	r3, [r3, #0]
 801a294:	009b      	lsls	r3, r3, #2
 801a296:	18d2      	adds	r2, r2, r3
 801a298:	2112      	movs	r1, #18
 801a29a:	187b      	adds	r3, r7, r1
 801a29c:	8812      	ldrh	r2, [r2, #0]
 801a29e:	801a      	strh	r2, [r3, #0]
 801a2a0:	187b      	adds	r3, r7, r1
 801a2a2:	881a      	ldrh	r2, [r3, #0]
 801a2a4:	2380      	movs	r3, #128	@ 0x80
 801a2a6:	01db      	lsls	r3, r3, #7
 801a2a8:	4013      	ands	r3, r2
 801a2aa:	d016      	beq.n	801a2da <USB_DeactivateEndpoint+0xe2>
 801a2ac:	687a      	ldr	r2, [r7, #4]
 801a2ae:	683b      	ldr	r3, [r7, #0]
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	009b      	lsls	r3, r3, #2
 801a2b4:	18d3      	adds	r3, r2, r3
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	b29a      	uxth	r2, r3
 801a2ba:	2010      	movs	r0, #16
 801a2bc:	183b      	adds	r3, r7, r0
 801a2be:	49a8      	ldr	r1, [pc, #672]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a2c0:	400a      	ands	r2, r1
 801a2c2:	801a      	strh	r2, [r3, #0]
 801a2c4:	687a      	ldr	r2, [r7, #4]
 801a2c6:	683b      	ldr	r3, [r7, #0]
 801a2c8:	781b      	ldrb	r3, [r3, #0]
 801a2ca:	009b      	lsls	r3, r3, #2
 801a2cc:	18d3      	adds	r3, r2, r3
 801a2ce:	183a      	adds	r2, r7, r0
 801a2d0:	8812      	ldrh	r2, [r2, #0]
 801a2d2:	49a7      	ldr	r1, [pc, #668]	@ (801a570 <USB_DeactivateEndpoint+0x378>)
 801a2d4:	430a      	orrs	r2, r1
 801a2d6:	b292      	uxth	r2, r2
 801a2d8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a2da:	687a      	ldr	r2, [r7, #4]
 801a2dc:	683b      	ldr	r3, [r7, #0]
 801a2de:	781b      	ldrb	r3, [r3, #0]
 801a2e0:	009b      	lsls	r3, r3, #2
 801a2e2:	18d3      	adds	r3, r2, r3
 801a2e4:	881b      	ldrh	r3, [r3, #0]
 801a2e6:	b29a      	uxth	r2, r3
 801a2e8:	200e      	movs	r0, #14
 801a2ea:	183b      	adds	r3, r7, r0
 801a2ec:	49a1      	ldr	r1, [pc, #644]	@ (801a574 <USB_DeactivateEndpoint+0x37c>)
 801a2ee:	400a      	ands	r2, r1
 801a2f0:	801a      	strh	r2, [r3, #0]
 801a2f2:	687a      	ldr	r2, [r7, #4]
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	009b      	lsls	r3, r3, #2
 801a2fa:	18d3      	adds	r3, r2, r3
 801a2fc:	183a      	adds	r2, r7, r0
 801a2fe:	8812      	ldrh	r2, [r2, #0]
 801a300:	499a      	ldr	r1, [pc, #616]	@ (801a56c <USB_DeactivateEndpoint+0x374>)
 801a302:	430a      	orrs	r2, r1
 801a304:	b292      	uxth	r2, r2
 801a306:	801a      	strh	r2, [r3, #0]
 801a308:	e125      	b.n	801a556 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801a30a:	683b      	ldr	r3, [r7, #0]
 801a30c:	785b      	ldrb	r3, [r3, #1]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d000      	beq.n	801a314 <USB_DeactivateEndpoint+0x11c>
 801a312:	e090      	b.n	801a436 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a314:	687a      	ldr	r2, [r7, #4]
 801a316:	683b      	ldr	r3, [r7, #0]
 801a318:	781b      	ldrb	r3, [r3, #0]
 801a31a:	009b      	lsls	r3, r3, #2
 801a31c:	18d2      	adds	r2, r2, r3
 801a31e:	2120      	movs	r1, #32
 801a320:	187b      	adds	r3, r7, r1
 801a322:	8812      	ldrh	r2, [r2, #0]
 801a324:	801a      	strh	r2, [r3, #0]
 801a326:	187b      	adds	r3, r7, r1
 801a328:	881a      	ldrh	r2, [r3, #0]
 801a32a:	2380      	movs	r3, #128	@ 0x80
 801a32c:	01db      	lsls	r3, r3, #7
 801a32e:	4013      	ands	r3, r2
 801a330:	d016      	beq.n	801a360 <USB_DeactivateEndpoint+0x168>
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	683b      	ldr	r3, [r7, #0]
 801a336:	781b      	ldrb	r3, [r3, #0]
 801a338:	009b      	lsls	r3, r3, #2
 801a33a:	18d3      	adds	r3, r2, r3
 801a33c:	881b      	ldrh	r3, [r3, #0]
 801a33e:	b29a      	uxth	r2, r3
 801a340:	201e      	movs	r0, #30
 801a342:	183b      	adds	r3, r7, r0
 801a344:	4986      	ldr	r1, [pc, #536]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a346:	400a      	ands	r2, r1
 801a348:	801a      	strh	r2, [r3, #0]
 801a34a:	687a      	ldr	r2, [r7, #4]
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	781b      	ldrb	r3, [r3, #0]
 801a350:	009b      	lsls	r3, r3, #2
 801a352:	18d3      	adds	r3, r2, r3
 801a354:	183a      	adds	r2, r7, r0
 801a356:	8812      	ldrh	r2, [r2, #0]
 801a358:	4985      	ldr	r1, [pc, #532]	@ (801a570 <USB_DeactivateEndpoint+0x378>)
 801a35a:	430a      	orrs	r2, r1
 801a35c:	b292      	uxth	r2, r2
 801a35e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a360:	687a      	ldr	r2, [r7, #4]
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	781b      	ldrb	r3, [r3, #0]
 801a366:	009b      	lsls	r3, r3, #2
 801a368:	18d2      	adds	r2, r2, r3
 801a36a:	211c      	movs	r1, #28
 801a36c:	187b      	adds	r3, r7, r1
 801a36e:	8812      	ldrh	r2, [r2, #0]
 801a370:	801a      	strh	r2, [r3, #0]
 801a372:	187b      	adds	r3, r7, r1
 801a374:	881b      	ldrh	r3, [r3, #0]
 801a376:	2240      	movs	r2, #64	@ 0x40
 801a378:	4013      	ands	r3, r2
 801a37a:	d016      	beq.n	801a3aa <USB_DeactivateEndpoint+0x1b2>
 801a37c:	687a      	ldr	r2, [r7, #4]
 801a37e:	683b      	ldr	r3, [r7, #0]
 801a380:	781b      	ldrb	r3, [r3, #0]
 801a382:	009b      	lsls	r3, r3, #2
 801a384:	18d3      	adds	r3, r2, r3
 801a386:	881b      	ldrh	r3, [r3, #0]
 801a388:	b29a      	uxth	r2, r3
 801a38a:	201a      	movs	r0, #26
 801a38c:	183b      	adds	r3, r7, r0
 801a38e:	4974      	ldr	r1, [pc, #464]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a390:	400a      	ands	r2, r1
 801a392:	801a      	strh	r2, [r3, #0]
 801a394:	687a      	ldr	r2, [r7, #4]
 801a396:	683b      	ldr	r3, [r7, #0]
 801a398:	781b      	ldrb	r3, [r3, #0]
 801a39a:	009b      	lsls	r3, r3, #2
 801a39c:	18d3      	adds	r3, r2, r3
 801a39e:	183a      	adds	r2, r7, r0
 801a3a0:	8812      	ldrh	r2, [r2, #0]
 801a3a2:	4970      	ldr	r1, [pc, #448]	@ (801a564 <USB_DeactivateEndpoint+0x36c>)
 801a3a4:	430a      	orrs	r2, r1
 801a3a6:	b292      	uxth	r2, r2
 801a3a8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801a3aa:	687a      	ldr	r2, [r7, #4]
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	781b      	ldrb	r3, [r3, #0]
 801a3b0:	009b      	lsls	r3, r3, #2
 801a3b2:	18d3      	adds	r3, r2, r3
 801a3b4:	881b      	ldrh	r3, [r3, #0]
 801a3b6:	b29a      	uxth	r2, r3
 801a3b8:	2018      	movs	r0, #24
 801a3ba:	183b      	adds	r3, r7, r0
 801a3bc:	4968      	ldr	r1, [pc, #416]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a3be:	400a      	ands	r2, r1
 801a3c0:	801a      	strh	r2, [r3, #0]
 801a3c2:	687a      	ldr	r2, [r7, #4]
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	781b      	ldrb	r3, [r3, #0]
 801a3c8:	009b      	lsls	r3, r3, #2
 801a3ca:	18d3      	adds	r3, r2, r3
 801a3cc:	183a      	adds	r2, r7, r0
 801a3ce:	8812      	ldrh	r2, [r2, #0]
 801a3d0:	4964      	ldr	r1, [pc, #400]	@ (801a564 <USB_DeactivateEndpoint+0x36c>)
 801a3d2:	430a      	orrs	r2, r1
 801a3d4:	b292      	uxth	r2, r2
 801a3d6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a3d8:	687a      	ldr	r2, [r7, #4]
 801a3da:	683b      	ldr	r3, [r7, #0]
 801a3dc:	781b      	ldrb	r3, [r3, #0]
 801a3de:	009b      	lsls	r3, r3, #2
 801a3e0:	18d3      	adds	r3, r2, r3
 801a3e2:	881b      	ldrh	r3, [r3, #0]
 801a3e4:	b29a      	uxth	r2, r3
 801a3e6:	2016      	movs	r0, #22
 801a3e8:	183b      	adds	r3, r7, r0
 801a3ea:	4962      	ldr	r1, [pc, #392]	@ (801a574 <USB_DeactivateEndpoint+0x37c>)
 801a3ec:	400a      	ands	r2, r1
 801a3ee:	801a      	strh	r2, [r3, #0]
 801a3f0:	687a      	ldr	r2, [r7, #4]
 801a3f2:	683b      	ldr	r3, [r7, #0]
 801a3f4:	781b      	ldrb	r3, [r3, #0]
 801a3f6:	009b      	lsls	r3, r3, #2
 801a3f8:	18d3      	adds	r3, r2, r3
 801a3fa:	183a      	adds	r2, r7, r0
 801a3fc:	8812      	ldrh	r2, [r2, #0]
 801a3fe:	495b      	ldr	r1, [pc, #364]	@ (801a56c <USB_DeactivateEndpoint+0x374>)
 801a400:	430a      	orrs	r2, r1
 801a402:	b292      	uxth	r2, r2
 801a404:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a406:	687a      	ldr	r2, [r7, #4]
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	781b      	ldrb	r3, [r3, #0]
 801a40c:	009b      	lsls	r3, r3, #2
 801a40e:	18d3      	adds	r3, r2, r3
 801a410:	881b      	ldrh	r3, [r3, #0]
 801a412:	b29a      	uxth	r2, r3
 801a414:	2014      	movs	r0, #20
 801a416:	183b      	adds	r3, r7, r0
 801a418:	4953      	ldr	r1, [pc, #332]	@ (801a568 <USB_DeactivateEndpoint+0x370>)
 801a41a:	400a      	ands	r2, r1
 801a41c:	801a      	strh	r2, [r3, #0]
 801a41e:	687a      	ldr	r2, [r7, #4]
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	781b      	ldrb	r3, [r3, #0]
 801a424:	009b      	lsls	r3, r3, #2
 801a426:	18d3      	adds	r3, r2, r3
 801a428:	183a      	adds	r2, r7, r0
 801a42a:	8812      	ldrh	r2, [r2, #0]
 801a42c:	494f      	ldr	r1, [pc, #316]	@ (801a56c <USB_DeactivateEndpoint+0x374>)
 801a42e:	430a      	orrs	r2, r1
 801a430:	b292      	uxth	r2, r2
 801a432:	801a      	strh	r2, [r3, #0]
 801a434:	e08f      	b.n	801a556 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a436:	687a      	ldr	r2, [r7, #4]
 801a438:	683b      	ldr	r3, [r7, #0]
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	18d2      	adds	r2, r2, r3
 801a440:	212e      	movs	r1, #46	@ 0x2e
 801a442:	187b      	adds	r3, r7, r1
 801a444:	8812      	ldrh	r2, [r2, #0]
 801a446:	801a      	strh	r2, [r3, #0]
 801a448:	187b      	adds	r3, r7, r1
 801a44a:	881a      	ldrh	r2, [r3, #0]
 801a44c:	2380      	movs	r3, #128	@ 0x80
 801a44e:	01db      	lsls	r3, r3, #7
 801a450:	4013      	ands	r3, r2
 801a452:	d016      	beq.n	801a482 <USB_DeactivateEndpoint+0x28a>
 801a454:	687a      	ldr	r2, [r7, #4]
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	781b      	ldrb	r3, [r3, #0]
 801a45a:	009b      	lsls	r3, r3, #2
 801a45c:	18d3      	adds	r3, r2, r3
 801a45e:	881b      	ldrh	r3, [r3, #0]
 801a460:	b29a      	uxth	r2, r3
 801a462:	202c      	movs	r0, #44	@ 0x2c
 801a464:	183b      	adds	r3, r7, r0
 801a466:	493e      	ldr	r1, [pc, #248]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a468:	400a      	ands	r2, r1
 801a46a:	801a      	strh	r2, [r3, #0]
 801a46c:	687a      	ldr	r2, [r7, #4]
 801a46e:	683b      	ldr	r3, [r7, #0]
 801a470:	781b      	ldrb	r3, [r3, #0]
 801a472:	009b      	lsls	r3, r3, #2
 801a474:	18d3      	adds	r3, r2, r3
 801a476:	183a      	adds	r2, r7, r0
 801a478:	8812      	ldrh	r2, [r2, #0]
 801a47a:	493d      	ldr	r1, [pc, #244]	@ (801a570 <USB_DeactivateEndpoint+0x378>)
 801a47c:	430a      	orrs	r2, r1
 801a47e:	b292      	uxth	r2, r2
 801a480:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a482:	687a      	ldr	r2, [r7, #4]
 801a484:	683b      	ldr	r3, [r7, #0]
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	009b      	lsls	r3, r3, #2
 801a48a:	18d2      	adds	r2, r2, r3
 801a48c:	212a      	movs	r1, #42	@ 0x2a
 801a48e:	187b      	adds	r3, r7, r1
 801a490:	8812      	ldrh	r2, [r2, #0]
 801a492:	801a      	strh	r2, [r3, #0]
 801a494:	187b      	adds	r3, r7, r1
 801a496:	881b      	ldrh	r3, [r3, #0]
 801a498:	2240      	movs	r2, #64	@ 0x40
 801a49a:	4013      	ands	r3, r2
 801a49c:	d016      	beq.n	801a4cc <USB_DeactivateEndpoint+0x2d4>
 801a49e:	687a      	ldr	r2, [r7, #4]
 801a4a0:	683b      	ldr	r3, [r7, #0]
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	18d3      	adds	r3, r2, r3
 801a4a8:	881b      	ldrh	r3, [r3, #0]
 801a4aa:	b29a      	uxth	r2, r3
 801a4ac:	2028      	movs	r0, #40	@ 0x28
 801a4ae:	183b      	adds	r3, r7, r0
 801a4b0:	492b      	ldr	r1, [pc, #172]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a4b2:	400a      	ands	r2, r1
 801a4b4:	801a      	strh	r2, [r3, #0]
 801a4b6:	687a      	ldr	r2, [r7, #4]
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	781b      	ldrb	r3, [r3, #0]
 801a4bc:	009b      	lsls	r3, r3, #2
 801a4be:	18d3      	adds	r3, r2, r3
 801a4c0:	183a      	adds	r2, r7, r0
 801a4c2:	8812      	ldrh	r2, [r2, #0]
 801a4c4:	4927      	ldr	r1, [pc, #156]	@ (801a564 <USB_DeactivateEndpoint+0x36c>)
 801a4c6:	430a      	orrs	r2, r1
 801a4c8:	b292      	uxth	r2, r2
 801a4ca:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	009b      	lsls	r3, r3, #2
 801a4d4:	18d3      	adds	r3, r2, r3
 801a4d6:	881b      	ldrh	r3, [r3, #0]
 801a4d8:	b29a      	uxth	r2, r3
 801a4da:	2026      	movs	r0, #38	@ 0x26
 801a4dc:	183b      	adds	r3, r7, r0
 801a4de:	4920      	ldr	r1, [pc, #128]	@ (801a560 <USB_DeactivateEndpoint+0x368>)
 801a4e0:	400a      	ands	r2, r1
 801a4e2:	801a      	strh	r2, [r3, #0]
 801a4e4:	687a      	ldr	r2, [r7, #4]
 801a4e6:	683b      	ldr	r3, [r7, #0]
 801a4e8:	781b      	ldrb	r3, [r3, #0]
 801a4ea:	009b      	lsls	r3, r3, #2
 801a4ec:	18d3      	adds	r3, r2, r3
 801a4ee:	183a      	adds	r2, r7, r0
 801a4f0:	8812      	ldrh	r2, [r2, #0]
 801a4f2:	491f      	ldr	r1, [pc, #124]	@ (801a570 <USB_DeactivateEndpoint+0x378>)
 801a4f4:	430a      	orrs	r2, r1
 801a4f6:	b292      	uxth	r2, r2
 801a4f8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	683b      	ldr	r3, [r7, #0]
 801a4fe:	781b      	ldrb	r3, [r3, #0]
 801a500:	009b      	lsls	r3, r3, #2
 801a502:	18d3      	adds	r3, r2, r3
 801a504:	881b      	ldrh	r3, [r3, #0]
 801a506:	b29a      	uxth	r2, r3
 801a508:	2024      	movs	r0, #36	@ 0x24
 801a50a:	183b      	adds	r3, r7, r0
 801a50c:	4916      	ldr	r1, [pc, #88]	@ (801a568 <USB_DeactivateEndpoint+0x370>)
 801a50e:	400a      	ands	r2, r1
 801a510:	801a      	strh	r2, [r3, #0]
 801a512:	687a      	ldr	r2, [r7, #4]
 801a514:	683b      	ldr	r3, [r7, #0]
 801a516:	781b      	ldrb	r3, [r3, #0]
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	18d3      	adds	r3, r2, r3
 801a51c:	183a      	adds	r2, r7, r0
 801a51e:	8812      	ldrh	r2, [r2, #0]
 801a520:	4912      	ldr	r1, [pc, #72]	@ (801a56c <USB_DeactivateEndpoint+0x374>)
 801a522:	430a      	orrs	r2, r1
 801a524:	b292      	uxth	r2, r2
 801a526:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801a528:	687a      	ldr	r2, [r7, #4]
 801a52a:	683b      	ldr	r3, [r7, #0]
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	18d3      	adds	r3, r2, r3
 801a532:	881b      	ldrh	r3, [r3, #0]
 801a534:	b29a      	uxth	r2, r3
 801a536:	2022      	movs	r0, #34	@ 0x22
 801a538:	183b      	adds	r3, r7, r0
 801a53a:	490e      	ldr	r1, [pc, #56]	@ (801a574 <USB_DeactivateEndpoint+0x37c>)
 801a53c:	400a      	ands	r2, r1
 801a53e:	801a      	strh	r2, [r3, #0]
 801a540:	687a      	ldr	r2, [r7, #4]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	009b      	lsls	r3, r3, #2
 801a548:	18d3      	adds	r3, r2, r3
 801a54a:	183a      	adds	r2, r7, r0
 801a54c:	8812      	ldrh	r2, [r2, #0]
 801a54e:	4907      	ldr	r1, [pc, #28]	@ (801a56c <USB_DeactivateEndpoint+0x374>)
 801a550:	430a      	orrs	r2, r1
 801a552:	b292      	uxth	r2, r2
 801a554:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a556:	2300      	movs	r3, #0
}
 801a558:	0018      	movs	r0, r3
 801a55a:	46bd      	mov	sp, r7
 801a55c:	b00c      	add	sp, #48	@ 0x30
 801a55e:	bd80      	pop	{r7, pc}
 801a560:	ffff8f8f 	.word	0xffff8f8f
 801a564:	ffff80c0 	.word	0xffff80c0
 801a568:	ffff8fbf 	.word	0xffff8fbf
 801a56c:	ffff8080 	.word	0xffff8080
 801a570:	ffffc080 	.word	0xffffc080
 801a574:	ffffbf8f 	.word	0xffffbf8f

0801a578 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a578:	b590      	push	{r4, r7, lr}
 801a57a:	b0c3      	sub	sp, #268	@ 0x10c
 801a57c:	af00      	add	r7, sp, #0
 801a57e:	6078      	str	r0, [r7, #4]
 801a580:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801a582:	683b      	ldr	r3, [r7, #0]
 801a584:	785b      	ldrb	r3, [r3, #1]
 801a586:	2b01      	cmp	r3, #1
 801a588:	d001      	beq.n	801a58e <USB_EPStartXfer+0x16>
 801a58a:	f000 fd2d 	bl	801afe8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801a58e:	683b      	ldr	r3, [r7, #0]
 801a590:	699a      	ldr	r2, [r3, #24]
 801a592:	683b      	ldr	r3, [r7, #0]
 801a594:	691b      	ldr	r3, [r3, #16]
 801a596:	429a      	cmp	r2, r3
 801a598:	d905      	bls.n	801a5a6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801a59a:	683b      	ldr	r3, [r7, #0]
 801a59c:	691b      	ldr	r3, [r3, #16]
 801a59e:	1d7a      	adds	r2, r7, #5
 801a5a0:	32ff      	adds	r2, #255	@ 0xff
 801a5a2:	6013      	str	r3, [r2, #0]
 801a5a4:	e004      	b.n	801a5b0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801a5a6:	683b      	ldr	r3, [r7, #0]
 801a5a8:	699b      	ldr	r3, [r3, #24]
 801a5aa:	1d7a      	adds	r2, r7, #5
 801a5ac:	32ff      	adds	r2, #255	@ 0xff
 801a5ae:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	7b1b      	ldrb	r3, [r3, #12]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d125      	bne.n	801a604 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	6959      	ldr	r1, [r3, #20]
 801a5bc:	683b      	ldr	r3, [r7, #0]
 801a5be:	88da      	ldrh	r2, [r3, #6]
 801a5c0:	1d7b      	adds	r3, r7, #5
 801a5c2:	33ff      	adds	r3, #255	@ 0xff
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	6878      	ldr	r0, [r7, #4]
 801a5ca:	f001 fa47 	bl	801ba5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	613b      	str	r3, [r7, #16]
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2250      	movs	r2, #80	@ 0x50
 801a5d6:	5a9b      	ldrh	r3, [r3, r2]
 801a5d8:	b29b      	uxth	r3, r3
 801a5da:	001a      	movs	r2, r3
 801a5dc:	693b      	ldr	r3, [r7, #16]
 801a5de:	189b      	adds	r3, r3, r2
 801a5e0:	613b      	str	r3, [r7, #16]
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	781b      	ldrb	r3, [r3, #0]
 801a5e6:	00da      	lsls	r2, r3, #3
 801a5e8:	693b      	ldr	r3, [r7, #16]
 801a5ea:	18d3      	adds	r3, r2, r3
 801a5ec:	4ad7      	ldr	r2, [pc, #860]	@ (801a94c <USB_EPStartXfer+0x3d4>)
 801a5ee:	4694      	mov	ip, r2
 801a5f0:	4463      	add	r3, ip
 801a5f2:	60fb      	str	r3, [r7, #12]
 801a5f4:	1d7b      	adds	r3, r7, #5
 801a5f6:	33ff      	adds	r3, #255	@ 0xff
 801a5f8:	681b      	ldr	r3, [r3, #0]
 801a5fa:	b29a      	uxth	r2, r3
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	801a      	strh	r2, [r3, #0]
 801a600:	f000 fccd 	bl	801af9e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801a604:	683b      	ldr	r3, [r7, #0]
 801a606:	78db      	ldrb	r3, [r3, #3]
 801a608:	2b02      	cmp	r3, #2
 801a60a:	d000      	beq.n	801a60e <USB_EPStartXfer+0x96>
 801a60c:	e362      	b.n	801acd4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	6a1a      	ldr	r2, [r3, #32]
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	691b      	ldr	r3, [r3, #16]
 801a616:	429a      	cmp	r2, r3
 801a618:	d800      	bhi.n	801a61c <USB_EPStartXfer+0xa4>
 801a61a:	e309      	b.n	801ac30 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801a61c:	687a      	ldr	r2, [r7, #4]
 801a61e:	683b      	ldr	r3, [r7, #0]
 801a620:	781b      	ldrb	r3, [r3, #0]
 801a622:	009b      	lsls	r3, r3, #2
 801a624:	18d3      	adds	r3, r2, r3
 801a626:	881b      	ldrh	r3, [r3, #0]
 801a628:	b29a      	uxth	r2, r3
 801a62a:	2056      	movs	r0, #86	@ 0x56
 801a62c:	183b      	adds	r3, r7, r0
 801a62e:	49c8      	ldr	r1, [pc, #800]	@ (801a950 <USB_EPStartXfer+0x3d8>)
 801a630:	400a      	ands	r2, r1
 801a632:	801a      	strh	r2, [r3, #0]
 801a634:	687a      	ldr	r2, [r7, #4]
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	781b      	ldrb	r3, [r3, #0]
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	18d3      	adds	r3, r2, r3
 801a63e:	183a      	adds	r2, r7, r0
 801a640:	8812      	ldrh	r2, [r2, #0]
 801a642:	49c4      	ldr	r1, [pc, #784]	@ (801a954 <USB_EPStartXfer+0x3dc>)
 801a644:	430a      	orrs	r2, r1
 801a646:	b292      	uxth	r2, r2
 801a648:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801a64a:	683b      	ldr	r3, [r7, #0]
 801a64c:	6a1a      	ldr	r2, [r3, #32]
 801a64e:	1d7b      	adds	r3, r7, #5
 801a650:	33ff      	adds	r3, #255	@ 0xff
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	1ad2      	subs	r2, r2, r3
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a65a:	687a      	ldr	r2, [r7, #4]
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	781b      	ldrb	r3, [r3, #0]
 801a660:	009b      	lsls	r3, r3, #2
 801a662:	18d3      	adds	r3, r2, r3
 801a664:	881b      	ldrh	r3, [r3, #0]
 801a666:	b29b      	uxth	r3, r3
 801a668:	001a      	movs	r2, r3
 801a66a:	2340      	movs	r3, #64	@ 0x40
 801a66c:	4013      	ands	r3, r2
 801a66e:	d100      	bne.n	801a672 <USB_EPStartXfer+0xfa>
 801a670:	e176      	b.n	801a960 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	633b      	str	r3, [r7, #48]	@ 0x30
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	785b      	ldrb	r3, [r3, #1]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d000      	beq.n	801a680 <USB_EPStartXfer+0x108>
 801a67e:	e074      	b.n	801a76a <USB_EPStartXfer+0x1f2>
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	2250      	movs	r2, #80	@ 0x50
 801a688:	5a9b      	ldrh	r3, [r3, r2]
 801a68a:	b29b      	uxth	r3, r3
 801a68c:	001a      	movs	r2, r3
 801a68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a690:	189b      	adds	r3, r3, r2
 801a692:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a694:	683b      	ldr	r3, [r7, #0]
 801a696:	781b      	ldrb	r3, [r3, #0]
 801a698:	00da      	lsls	r2, r3, #3
 801a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a69c:	18d3      	adds	r3, r2, r3
 801a69e:	4aae      	ldr	r2, [pc, #696]	@ (801a958 <USB_EPStartXfer+0x3e0>)
 801a6a0:	4694      	mov	ip, r2
 801a6a2:	4463      	add	r3, ip
 801a6a4:	627b      	str	r3, [r7, #36]	@ 0x24
 801a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a8:	881b      	ldrh	r3, [r3, #0]
 801a6aa:	b29b      	uxth	r3, r3
 801a6ac:	059b      	lsls	r3, r3, #22
 801a6ae:	0d9b      	lsrs	r3, r3, #22
 801a6b0:	b29a      	uxth	r2, r3
 801a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6b4:	801a      	strh	r2, [r3, #0]
 801a6b6:	1d7b      	adds	r3, r7, #5
 801a6b8:	33ff      	adds	r3, #255	@ 0xff
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	2b3e      	cmp	r3, #62	@ 0x3e
 801a6be:	d924      	bls.n	801a70a <USB_EPStartXfer+0x192>
 801a6c0:	1d7b      	adds	r3, r7, #5
 801a6c2:	33ff      	adds	r3, #255	@ 0xff
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	095b      	lsrs	r3, r3, #5
 801a6c8:	1c7a      	adds	r2, r7, #1
 801a6ca:	32ff      	adds	r2, #255	@ 0xff
 801a6cc:	6013      	str	r3, [r2, #0]
 801a6ce:	1d7b      	adds	r3, r7, #5
 801a6d0:	33ff      	adds	r3, #255	@ 0xff
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	221f      	movs	r2, #31
 801a6d6:	4013      	ands	r3, r2
 801a6d8:	d106      	bne.n	801a6e8 <USB_EPStartXfer+0x170>
 801a6da:	1c7b      	adds	r3, r7, #1
 801a6dc:	33ff      	adds	r3, #255	@ 0xff
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	3b01      	subs	r3, #1
 801a6e2:	1c7a      	adds	r2, r7, #1
 801a6e4:	32ff      	adds	r2, #255	@ 0xff
 801a6e6:	6013      	str	r3, [r2, #0]
 801a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6ea:	881b      	ldrh	r3, [r3, #0]
 801a6ec:	b29a      	uxth	r2, r3
 801a6ee:	1c7b      	adds	r3, r7, #1
 801a6f0:	33ff      	adds	r3, #255	@ 0xff
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	b29b      	uxth	r3, r3
 801a6f6:	029b      	lsls	r3, r3, #10
 801a6f8:	b29b      	uxth	r3, r3
 801a6fa:	4313      	orrs	r3, r2
 801a6fc:	b29b      	uxth	r3, r3
 801a6fe:	4a97      	ldr	r2, [pc, #604]	@ (801a95c <USB_EPStartXfer+0x3e4>)
 801a700:	4313      	orrs	r3, r2
 801a702:	b29a      	uxth	r2, r3
 801a704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a706:	801a      	strh	r2, [r3, #0]
 801a708:	e04a      	b.n	801a7a0 <USB_EPStartXfer+0x228>
 801a70a:	1d7b      	adds	r3, r7, #5
 801a70c:	33ff      	adds	r3, #255	@ 0xff
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d108      	bne.n	801a726 <USB_EPStartXfer+0x1ae>
 801a714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a716:	881b      	ldrh	r3, [r3, #0]
 801a718:	b29b      	uxth	r3, r3
 801a71a:	4a90      	ldr	r2, [pc, #576]	@ (801a95c <USB_EPStartXfer+0x3e4>)
 801a71c:	4313      	orrs	r3, r2
 801a71e:	b29a      	uxth	r2, r3
 801a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a722:	801a      	strh	r2, [r3, #0]
 801a724:	e03c      	b.n	801a7a0 <USB_EPStartXfer+0x228>
 801a726:	1d7b      	adds	r3, r7, #5
 801a728:	33ff      	adds	r3, #255	@ 0xff
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	085b      	lsrs	r3, r3, #1
 801a72e:	1c7a      	adds	r2, r7, #1
 801a730:	32ff      	adds	r2, #255	@ 0xff
 801a732:	6013      	str	r3, [r2, #0]
 801a734:	1d7b      	adds	r3, r7, #5
 801a736:	33ff      	adds	r3, #255	@ 0xff
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	2201      	movs	r2, #1
 801a73c:	4013      	ands	r3, r2
 801a73e:	d006      	beq.n	801a74e <USB_EPStartXfer+0x1d6>
 801a740:	1c7b      	adds	r3, r7, #1
 801a742:	33ff      	adds	r3, #255	@ 0xff
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	3301      	adds	r3, #1
 801a748:	1c7a      	adds	r2, r7, #1
 801a74a:	32ff      	adds	r2, #255	@ 0xff
 801a74c:	6013      	str	r3, [r2, #0]
 801a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	b29a      	uxth	r2, r3
 801a754:	1c7b      	adds	r3, r7, #1
 801a756:	33ff      	adds	r3, #255	@ 0xff
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	029b      	lsls	r3, r3, #10
 801a75e:	b29b      	uxth	r3, r3
 801a760:	4313      	orrs	r3, r2
 801a762:	b29a      	uxth	r2, r3
 801a764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a766:	801a      	strh	r2, [r3, #0]
 801a768:	e01a      	b.n	801a7a0 <USB_EPStartXfer+0x228>
 801a76a:	683b      	ldr	r3, [r7, #0]
 801a76c:	785b      	ldrb	r3, [r3, #1]
 801a76e:	2b01      	cmp	r3, #1
 801a770:	d116      	bne.n	801a7a0 <USB_EPStartXfer+0x228>
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	2250      	movs	r2, #80	@ 0x50
 801a776:	5a9b      	ldrh	r3, [r3, r2]
 801a778:	b29b      	uxth	r3, r3
 801a77a:	001a      	movs	r2, r3
 801a77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a77e:	189b      	adds	r3, r3, r2
 801a780:	633b      	str	r3, [r7, #48]	@ 0x30
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	00da      	lsls	r2, r3, #3
 801a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a78a:	18d3      	adds	r3, r2, r3
 801a78c:	4a72      	ldr	r2, [pc, #456]	@ (801a958 <USB_EPStartXfer+0x3e0>)
 801a78e:	4694      	mov	ip, r2
 801a790:	4463      	add	r3, ip
 801a792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a794:	1d7b      	adds	r3, r7, #5
 801a796:	33ff      	adds	r3, #255	@ 0xff
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	b29a      	uxth	r2, r3
 801a79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a79e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a7a0:	2076      	movs	r0, #118	@ 0x76
 801a7a2:	183b      	adds	r3, r7, r0
 801a7a4:	683a      	ldr	r2, [r7, #0]
 801a7a6:	8952      	ldrh	r2, [r2, #10]
 801a7a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	6959      	ldr	r1, [r3, #20]
 801a7ae:	1d7b      	adds	r3, r7, #5
 801a7b0:	33ff      	adds	r3, #255	@ 0xff
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	b29c      	uxth	r4, r3
 801a7b6:	183b      	adds	r3, r7, r0
 801a7b8:	881a      	ldrh	r2, [r3, #0]
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	0023      	movs	r3, r4
 801a7be:	f001 f94d 	bl	801ba5c <USB_WritePMA>
            ep->xfer_buff += len;
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	695a      	ldr	r2, [r3, #20]
 801a7c6:	1d7b      	adds	r3, r7, #5
 801a7c8:	33ff      	adds	r3, #255	@ 0xff
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	18d2      	adds	r2, r2, r3
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a7d2:	683b      	ldr	r3, [r7, #0]
 801a7d4:	6a1a      	ldr	r2, [r3, #32]
 801a7d6:	683b      	ldr	r3, [r7, #0]
 801a7d8:	691b      	ldr	r3, [r3, #16]
 801a7da:	429a      	cmp	r2, r3
 801a7dc:	d908      	bls.n	801a7f0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801a7de:	683b      	ldr	r3, [r7, #0]
 801a7e0:	6a1a      	ldr	r2, [r3, #32]
 801a7e2:	1d7b      	adds	r3, r7, #5
 801a7e4:	33ff      	adds	r3, #255	@ 0xff
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	1ad2      	subs	r2, r2, r3
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	621a      	str	r2, [r3, #32]
 801a7ee:	e007      	b.n	801a800 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	6a1b      	ldr	r3, [r3, #32]
 801a7f4:	1d7a      	adds	r2, r7, #5
 801a7f6:	32ff      	adds	r2, #255	@ 0xff
 801a7f8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a7fa:	683b      	ldr	r3, [r7, #0]
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a800:	683b      	ldr	r3, [r7, #0]
 801a802:	785b      	ldrb	r3, [r3, #1]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d000      	beq.n	801a80a <USB_EPStartXfer+0x292>
 801a808:	e070      	b.n	801a8ec <USB_EPStartXfer+0x374>
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	61bb      	str	r3, [r7, #24]
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	2250      	movs	r2, #80	@ 0x50
 801a812:	5a9b      	ldrh	r3, [r3, r2]
 801a814:	b29b      	uxth	r3, r3
 801a816:	001a      	movs	r2, r3
 801a818:	69bb      	ldr	r3, [r7, #24]
 801a81a:	189b      	adds	r3, r3, r2
 801a81c:	61bb      	str	r3, [r7, #24]
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	781b      	ldrb	r3, [r3, #0]
 801a822:	00da      	lsls	r2, r3, #3
 801a824:	69bb      	ldr	r3, [r7, #24]
 801a826:	18d3      	adds	r3, r2, r3
 801a828:	4a48      	ldr	r2, [pc, #288]	@ (801a94c <USB_EPStartXfer+0x3d4>)
 801a82a:	4694      	mov	ip, r2
 801a82c:	4463      	add	r3, ip
 801a82e:	617b      	str	r3, [r7, #20]
 801a830:	697b      	ldr	r3, [r7, #20]
 801a832:	881b      	ldrh	r3, [r3, #0]
 801a834:	b29b      	uxth	r3, r3
 801a836:	059b      	lsls	r3, r3, #22
 801a838:	0d9b      	lsrs	r3, r3, #22
 801a83a:	b29a      	uxth	r2, r3
 801a83c:	697b      	ldr	r3, [r7, #20]
 801a83e:	801a      	strh	r2, [r3, #0]
 801a840:	1d7b      	adds	r3, r7, #5
 801a842:	33ff      	adds	r3, #255	@ 0xff
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	2b3e      	cmp	r3, #62	@ 0x3e
 801a848:	d922      	bls.n	801a890 <USB_EPStartXfer+0x318>
 801a84a:	1d7b      	adds	r3, r7, #5
 801a84c:	33ff      	adds	r3, #255	@ 0xff
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	095b      	lsrs	r3, r3, #5
 801a852:	21fc      	movs	r1, #252	@ 0xfc
 801a854:	187a      	adds	r2, r7, r1
 801a856:	6013      	str	r3, [r2, #0]
 801a858:	1d7b      	adds	r3, r7, #5
 801a85a:	33ff      	adds	r3, #255	@ 0xff
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	221f      	movs	r2, #31
 801a860:	4013      	ands	r3, r2
 801a862:	d104      	bne.n	801a86e <USB_EPStartXfer+0x2f6>
 801a864:	187b      	adds	r3, r7, r1
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	3b01      	subs	r3, #1
 801a86a:	187a      	adds	r2, r7, r1
 801a86c:	6013      	str	r3, [r2, #0]
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	881b      	ldrh	r3, [r3, #0]
 801a872:	b29a      	uxth	r2, r3
 801a874:	23fc      	movs	r3, #252	@ 0xfc
 801a876:	18fb      	adds	r3, r7, r3
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	b29b      	uxth	r3, r3
 801a87c:	029b      	lsls	r3, r3, #10
 801a87e:	b29b      	uxth	r3, r3
 801a880:	4313      	orrs	r3, r2
 801a882:	b29b      	uxth	r3, r3
 801a884:	4a35      	ldr	r2, [pc, #212]	@ (801a95c <USB_EPStartXfer+0x3e4>)
 801a886:	4313      	orrs	r3, r2
 801a888:	b29a      	uxth	r2, r3
 801a88a:	697b      	ldr	r3, [r7, #20]
 801a88c:	801a      	strh	r2, [r3, #0]
 801a88e:	e04a      	b.n	801a926 <USB_EPStartXfer+0x3ae>
 801a890:	1d7b      	adds	r3, r7, #5
 801a892:	33ff      	adds	r3, #255	@ 0xff
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d108      	bne.n	801a8ac <USB_EPStartXfer+0x334>
 801a89a:	697b      	ldr	r3, [r7, #20]
 801a89c:	881b      	ldrh	r3, [r3, #0]
 801a89e:	b29b      	uxth	r3, r3
 801a8a0:	4a2e      	ldr	r2, [pc, #184]	@ (801a95c <USB_EPStartXfer+0x3e4>)
 801a8a2:	4313      	orrs	r3, r2
 801a8a4:	b29a      	uxth	r2, r3
 801a8a6:	697b      	ldr	r3, [r7, #20]
 801a8a8:	801a      	strh	r2, [r3, #0]
 801a8aa:	e03c      	b.n	801a926 <USB_EPStartXfer+0x3ae>
 801a8ac:	1d7b      	adds	r3, r7, #5
 801a8ae:	33ff      	adds	r3, #255	@ 0xff
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	085b      	lsrs	r3, r3, #1
 801a8b4:	21fc      	movs	r1, #252	@ 0xfc
 801a8b6:	187a      	adds	r2, r7, r1
 801a8b8:	6013      	str	r3, [r2, #0]
 801a8ba:	1d7b      	adds	r3, r7, #5
 801a8bc:	33ff      	adds	r3, #255	@ 0xff
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	2201      	movs	r2, #1
 801a8c2:	4013      	ands	r3, r2
 801a8c4:	d004      	beq.n	801a8d0 <USB_EPStartXfer+0x358>
 801a8c6:	187b      	adds	r3, r7, r1
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	3301      	adds	r3, #1
 801a8cc:	187a      	adds	r2, r7, r1
 801a8ce:	6013      	str	r3, [r2, #0]
 801a8d0:	697b      	ldr	r3, [r7, #20]
 801a8d2:	881b      	ldrh	r3, [r3, #0]
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	23fc      	movs	r3, #252	@ 0xfc
 801a8d8:	18fb      	adds	r3, r7, r3
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	b29b      	uxth	r3, r3
 801a8de:	029b      	lsls	r3, r3, #10
 801a8e0:	b29b      	uxth	r3, r3
 801a8e2:	4313      	orrs	r3, r2
 801a8e4:	b29a      	uxth	r2, r3
 801a8e6:	697b      	ldr	r3, [r7, #20]
 801a8e8:	801a      	strh	r2, [r3, #0]
 801a8ea:	e01c      	b.n	801a926 <USB_EPStartXfer+0x3ae>
 801a8ec:	683b      	ldr	r3, [r7, #0]
 801a8ee:	785b      	ldrb	r3, [r3, #1]
 801a8f0:	2b01      	cmp	r3, #1
 801a8f2:	d118      	bne.n	801a926 <USB_EPStartXfer+0x3ae>
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	623b      	str	r3, [r7, #32]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	2250      	movs	r2, #80	@ 0x50
 801a8fc:	5a9b      	ldrh	r3, [r3, r2]
 801a8fe:	b29b      	uxth	r3, r3
 801a900:	001a      	movs	r2, r3
 801a902:	6a3b      	ldr	r3, [r7, #32]
 801a904:	189b      	adds	r3, r3, r2
 801a906:	623b      	str	r3, [r7, #32]
 801a908:	683b      	ldr	r3, [r7, #0]
 801a90a:	781b      	ldrb	r3, [r3, #0]
 801a90c:	00da      	lsls	r2, r3, #3
 801a90e:	6a3b      	ldr	r3, [r7, #32]
 801a910:	18d3      	adds	r3, r2, r3
 801a912:	4a0e      	ldr	r2, [pc, #56]	@ (801a94c <USB_EPStartXfer+0x3d4>)
 801a914:	4694      	mov	ip, r2
 801a916:	4463      	add	r3, ip
 801a918:	61fb      	str	r3, [r7, #28]
 801a91a:	1d7b      	adds	r3, r7, #5
 801a91c:	33ff      	adds	r3, #255	@ 0xff
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	b29a      	uxth	r2, r3
 801a922:	69fb      	ldr	r3, [r7, #28]
 801a924:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a926:	2076      	movs	r0, #118	@ 0x76
 801a928:	183b      	adds	r3, r7, r0
 801a92a:	683a      	ldr	r2, [r7, #0]
 801a92c:	8912      	ldrh	r2, [r2, #8]
 801a92e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	6959      	ldr	r1, [r3, #20]
 801a934:	1d7b      	adds	r3, r7, #5
 801a936:	33ff      	adds	r3, #255	@ 0xff
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	b29c      	uxth	r4, r3
 801a93c:	183b      	adds	r3, r7, r0
 801a93e:	881a      	ldrh	r2, [r3, #0]
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	0023      	movs	r3, r4
 801a944:	f001 f88a 	bl	801ba5c <USB_WritePMA>
 801a948:	e329      	b.n	801af9e <USB_EPStartXfer+0xa26>
 801a94a:	46c0      	nop			@ (mov r8, r8)
 801a94c:	00000402 	.word	0x00000402
 801a950:	ffff8f8f 	.word	0xffff8f8f
 801a954:	ffff8180 	.word	0xffff8180
 801a958:	00000406 	.word	0x00000406
 801a95c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a960:	683b      	ldr	r3, [r7, #0]
 801a962:	785b      	ldrb	r3, [r3, #1]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d000      	beq.n	801a96a <USB_EPStartXfer+0x3f2>
 801a968:	e070      	b.n	801aa4c <USB_EPStartXfer+0x4d4>
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	2250      	movs	r2, #80	@ 0x50
 801a972:	5a9b      	ldrh	r3, [r3, r2]
 801a974:	b29b      	uxth	r3, r3
 801a976:	001a      	movs	r2, r3
 801a978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a97a:	189b      	adds	r3, r3, r2
 801a97c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a97e:	683b      	ldr	r3, [r7, #0]
 801a980:	781b      	ldrb	r3, [r3, #0]
 801a982:	00da      	lsls	r2, r3, #3
 801a984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a986:	18d3      	adds	r3, r2, r3
 801a988:	4acd      	ldr	r2, [pc, #820]	@ (801acc0 <USB_EPStartXfer+0x748>)
 801a98a:	4694      	mov	ip, r2
 801a98c:	4463      	add	r3, ip
 801a98e:	647b      	str	r3, [r7, #68]	@ 0x44
 801a990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a992:	881b      	ldrh	r3, [r3, #0]
 801a994:	b29b      	uxth	r3, r3
 801a996:	059b      	lsls	r3, r3, #22
 801a998:	0d9b      	lsrs	r3, r3, #22
 801a99a:	b29a      	uxth	r2, r3
 801a99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a99e:	801a      	strh	r2, [r3, #0]
 801a9a0:	1d7b      	adds	r3, r7, #5
 801a9a2:	33ff      	adds	r3, #255	@ 0xff
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a9a8:	d922      	bls.n	801a9f0 <USB_EPStartXfer+0x478>
 801a9aa:	1d7b      	adds	r3, r7, #5
 801a9ac:	33ff      	adds	r3, #255	@ 0xff
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	095b      	lsrs	r3, r3, #5
 801a9b2:	21f8      	movs	r1, #248	@ 0xf8
 801a9b4:	187a      	adds	r2, r7, r1
 801a9b6:	6013      	str	r3, [r2, #0]
 801a9b8:	1d7b      	adds	r3, r7, #5
 801a9ba:	33ff      	adds	r3, #255	@ 0xff
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	221f      	movs	r2, #31
 801a9c0:	4013      	ands	r3, r2
 801a9c2:	d104      	bne.n	801a9ce <USB_EPStartXfer+0x456>
 801a9c4:	187b      	adds	r3, r7, r1
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	3b01      	subs	r3, #1
 801a9ca:	187a      	adds	r2, r7, r1
 801a9cc:	6013      	str	r3, [r2, #0]
 801a9ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a9d0:	881b      	ldrh	r3, [r3, #0]
 801a9d2:	b29a      	uxth	r2, r3
 801a9d4:	23f8      	movs	r3, #248	@ 0xf8
 801a9d6:	18fb      	adds	r3, r7, r3
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	b29b      	uxth	r3, r3
 801a9dc:	029b      	lsls	r3, r3, #10
 801a9de:	b29b      	uxth	r3, r3
 801a9e0:	4313      	orrs	r3, r2
 801a9e2:	b29b      	uxth	r3, r3
 801a9e4:	4ab7      	ldr	r2, [pc, #732]	@ (801acc4 <USB_EPStartXfer+0x74c>)
 801a9e6:	4313      	orrs	r3, r2
 801a9e8:	b29a      	uxth	r2, r3
 801a9ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a9ec:	801a      	strh	r2, [r3, #0]
 801a9ee:	e04a      	b.n	801aa86 <USB_EPStartXfer+0x50e>
 801a9f0:	1d7b      	adds	r3, r7, #5
 801a9f2:	33ff      	adds	r3, #255	@ 0xff
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d108      	bne.n	801aa0c <USB_EPStartXfer+0x494>
 801a9fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a9fc:	881b      	ldrh	r3, [r3, #0]
 801a9fe:	b29b      	uxth	r3, r3
 801aa00:	4ab0      	ldr	r2, [pc, #704]	@ (801acc4 <USB_EPStartXfer+0x74c>)
 801aa02:	4313      	orrs	r3, r2
 801aa04:	b29a      	uxth	r2, r3
 801aa06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa08:	801a      	strh	r2, [r3, #0]
 801aa0a:	e03c      	b.n	801aa86 <USB_EPStartXfer+0x50e>
 801aa0c:	1d7b      	adds	r3, r7, #5
 801aa0e:	33ff      	adds	r3, #255	@ 0xff
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	085b      	lsrs	r3, r3, #1
 801aa14:	21f8      	movs	r1, #248	@ 0xf8
 801aa16:	187a      	adds	r2, r7, r1
 801aa18:	6013      	str	r3, [r2, #0]
 801aa1a:	1d7b      	adds	r3, r7, #5
 801aa1c:	33ff      	adds	r3, #255	@ 0xff
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	2201      	movs	r2, #1
 801aa22:	4013      	ands	r3, r2
 801aa24:	d004      	beq.n	801aa30 <USB_EPStartXfer+0x4b8>
 801aa26:	187b      	adds	r3, r7, r1
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	187a      	adds	r2, r7, r1
 801aa2e:	6013      	str	r3, [r2, #0]
 801aa30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa32:	881b      	ldrh	r3, [r3, #0]
 801aa34:	b29a      	uxth	r2, r3
 801aa36:	23f8      	movs	r3, #248	@ 0xf8
 801aa38:	18fb      	adds	r3, r7, r3
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	b29b      	uxth	r3, r3
 801aa3e:	029b      	lsls	r3, r3, #10
 801aa40:	b29b      	uxth	r3, r3
 801aa42:	4313      	orrs	r3, r2
 801aa44:	b29a      	uxth	r2, r3
 801aa46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa48:	801a      	strh	r2, [r3, #0]
 801aa4a:	e01c      	b.n	801aa86 <USB_EPStartXfer+0x50e>
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	785b      	ldrb	r3, [r3, #1]
 801aa50:	2b01      	cmp	r3, #1
 801aa52:	d118      	bne.n	801aa86 <USB_EPStartXfer+0x50e>
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	653b      	str	r3, [r7, #80]	@ 0x50
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	2250      	movs	r2, #80	@ 0x50
 801aa5c:	5a9b      	ldrh	r3, [r3, r2]
 801aa5e:	b29b      	uxth	r3, r3
 801aa60:	001a      	movs	r2, r3
 801aa62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa64:	189b      	adds	r3, r3, r2
 801aa66:	653b      	str	r3, [r7, #80]	@ 0x50
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	781b      	ldrb	r3, [r3, #0]
 801aa6c:	00da      	lsls	r2, r3, #3
 801aa6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aa70:	18d3      	adds	r3, r2, r3
 801aa72:	4a93      	ldr	r2, [pc, #588]	@ (801acc0 <USB_EPStartXfer+0x748>)
 801aa74:	4694      	mov	ip, r2
 801aa76:	4463      	add	r3, ip
 801aa78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aa7a:	1d7b      	adds	r3, r7, #5
 801aa7c:	33ff      	adds	r3, #255	@ 0xff
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	b29a      	uxth	r2, r3
 801aa82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801aa86:	2076      	movs	r0, #118	@ 0x76
 801aa88:	183b      	adds	r3, r7, r0
 801aa8a:	683a      	ldr	r2, [r7, #0]
 801aa8c:	8912      	ldrh	r2, [r2, #8]
 801aa8e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	6959      	ldr	r1, [r3, #20]
 801aa94:	1d7b      	adds	r3, r7, #5
 801aa96:	33ff      	adds	r3, #255	@ 0xff
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	b29c      	uxth	r4, r3
 801aa9c:	183b      	adds	r3, r7, r0
 801aa9e:	881a      	ldrh	r2, [r3, #0]
 801aaa0:	6878      	ldr	r0, [r7, #4]
 801aaa2:	0023      	movs	r3, r4
 801aaa4:	f000 ffda 	bl	801ba5c <USB_WritePMA>
            ep->xfer_buff += len;
 801aaa8:	683b      	ldr	r3, [r7, #0]
 801aaaa:	695a      	ldr	r2, [r3, #20]
 801aaac:	1d7b      	adds	r3, r7, #5
 801aaae:	33ff      	adds	r3, #255	@ 0xff
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	18d2      	adds	r2, r2, r3
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801aab8:	683b      	ldr	r3, [r7, #0]
 801aaba:	6a1a      	ldr	r2, [r3, #32]
 801aabc:	683b      	ldr	r3, [r7, #0]
 801aabe:	691b      	ldr	r3, [r3, #16]
 801aac0:	429a      	cmp	r2, r3
 801aac2:	d908      	bls.n	801aad6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	6a1a      	ldr	r2, [r3, #32]
 801aac8:	1d7b      	adds	r3, r7, #5
 801aaca:	33ff      	adds	r3, #255	@ 0xff
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	1ad2      	subs	r2, r2, r3
 801aad0:	683b      	ldr	r3, [r7, #0]
 801aad2:	621a      	str	r2, [r3, #32]
 801aad4:	e007      	b.n	801aae6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801aad6:	683b      	ldr	r3, [r7, #0]
 801aad8:	6a1b      	ldr	r3, [r3, #32]
 801aada:	1d7a      	adds	r2, r7, #5
 801aadc:	32ff      	adds	r2, #255	@ 0xff
 801aade:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801aae0:	683b      	ldr	r3, [r7, #0]
 801aae2:	2200      	movs	r2, #0
 801aae4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	643b      	str	r3, [r7, #64]	@ 0x40
 801aaea:	683b      	ldr	r3, [r7, #0]
 801aaec:	785b      	ldrb	r3, [r3, #1]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d000      	beq.n	801aaf4 <USB_EPStartXfer+0x57c>
 801aaf2:	e070      	b.n	801abd6 <USB_EPStartXfer+0x65e>
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	2250      	movs	r2, #80	@ 0x50
 801aafc:	5a9b      	ldrh	r3, [r3, r2]
 801aafe:	b29b      	uxth	r3, r3
 801ab00:	001a      	movs	r2, r3
 801ab02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab04:	189b      	adds	r3, r3, r2
 801ab06:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab08:	683b      	ldr	r3, [r7, #0]
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	00da      	lsls	r2, r3, #3
 801ab0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab10:	18d3      	adds	r3, r2, r3
 801ab12:	4a6d      	ldr	r2, [pc, #436]	@ (801acc8 <USB_EPStartXfer+0x750>)
 801ab14:	4694      	mov	ip, r2
 801ab16:	4463      	add	r3, ip
 801ab18:	637b      	str	r3, [r7, #52]	@ 0x34
 801ab1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab1c:	881b      	ldrh	r3, [r3, #0]
 801ab1e:	b29b      	uxth	r3, r3
 801ab20:	059b      	lsls	r3, r3, #22
 801ab22:	0d9b      	lsrs	r3, r3, #22
 801ab24:	b29a      	uxth	r2, r3
 801ab26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab28:	801a      	strh	r2, [r3, #0]
 801ab2a:	1d7b      	adds	r3, r7, #5
 801ab2c:	33ff      	adds	r3, #255	@ 0xff
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2b3e      	cmp	r3, #62	@ 0x3e
 801ab32:	d922      	bls.n	801ab7a <USB_EPStartXfer+0x602>
 801ab34:	1d7b      	adds	r3, r7, #5
 801ab36:	33ff      	adds	r3, #255	@ 0xff
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	095b      	lsrs	r3, r3, #5
 801ab3c:	21f4      	movs	r1, #244	@ 0xf4
 801ab3e:	187a      	adds	r2, r7, r1
 801ab40:	6013      	str	r3, [r2, #0]
 801ab42:	1d7b      	adds	r3, r7, #5
 801ab44:	33ff      	adds	r3, #255	@ 0xff
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	221f      	movs	r2, #31
 801ab4a:	4013      	ands	r3, r2
 801ab4c:	d104      	bne.n	801ab58 <USB_EPStartXfer+0x5e0>
 801ab4e:	187b      	adds	r3, r7, r1
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	3b01      	subs	r3, #1
 801ab54:	187a      	adds	r2, r7, r1
 801ab56:	6013      	str	r3, [r2, #0]
 801ab58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab5a:	881b      	ldrh	r3, [r3, #0]
 801ab5c:	b29a      	uxth	r2, r3
 801ab5e:	23f4      	movs	r3, #244	@ 0xf4
 801ab60:	18fb      	adds	r3, r7, r3
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	b29b      	uxth	r3, r3
 801ab66:	029b      	lsls	r3, r3, #10
 801ab68:	b29b      	uxth	r3, r3
 801ab6a:	4313      	orrs	r3, r2
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	4a55      	ldr	r2, [pc, #340]	@ (801acc4 <USB_EPStartXfer+0x74c>)
 801ab70:	4313      	orrs	r3, r2
 801ab72:	b29a      	uxth	r2, r3
 801ab74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab76:	801a      	strh	r2, [r3, #0]
 801ab78:	e048      	b.n	801ac0c <USB_EPStartXfer+0x694>
 801ab7a:	1d7b      	adds	r3, r7, #5
 801ab7c:	33ff      	adds	r3, #255	@ 0xff
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d108      	bne.n	801ab96 <USB_EPStartXfer+0x61e>
 801ab84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab86:	881b      	ldrh	r3, [r3, #0]
 801ab88:	b29b      	uxth	r3, r3
 801ab8a:	4a4e      	ldr	r2, [pc, #312]	@ (801acc4 <USB_EPStartXfer+0x74c>)
 801ab8c:	4313      	orrs	r3, r2
 801ab8e:	b29a      	uxth	r2, r3
 801ab90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab92:	801a      	strh	r2, [r3, #0]
 801ab94:	e03a      	b.n	801ac0c <USB_EPStartXfer+0x694>
 801ab96:	1d7b      	adds	r3, r7, #5
 801ab98:	33ff      	adds	r3, #255	@ 0xff
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	085b      	lsrs	r3, r3, #1
 801ab9e:	21f4      	movs	r1, #244	@ 0xf4
 801aba0:	187a      	adds	r2, r7, r1
 801aba2:	6013      	str	r3, [r2, #0]
 801aba4:	1d7b      	adds	r3, r7, #5
 801aba6:	33ff      	adds	r3, #255	@ 0xff
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	2201      	movs	r2, #1
 801abac:	4013      	ands	r3, r2
 801abae:	d004      	beq.n	801abba <USB_EPStartXfer+0x642>
 801abb0:	187b      	adds	r3, r7, r1
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	3301      	adds	r3, #1
 801abb6:	187a      	adds	r2, r7, r1
 801abb8:	6013      	str	r3, [r2, #0]
 801abba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abbc:	881b      	ldrh	r3, [r3, #0]
 801abbe:	b29a      	uxth	r2, r3
 801abc0:	23f4      	movs	r3, #244	@ 0xf4
 801abc2:	18fb      	adds	r3, r7, r3
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	029b      	lsls	r3, r3, #10
 801abca:	b29b      	uxth	r3, r3
 801abcc:	4313      	orrs	r3, r2
 801abce:	b29a      	uxth	r2, r3
 801abd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801abd2:	801a      	strh	r2, [r3, #0]
 801abd4:	e01a      	b.n	801ac0c <USB_EPStartXfer+0x694>
 801abd6:	683b      	ldr	r3, [r7, #0]
 801abd8:	785b      	ldrb	r3, [r3, #1]
 801abda:	2b01      	cmp	r3, #1
 801abdc:	d116      	bne.n	801ac0c <USB_EPStartXfer+0x694>
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	2250      	movs	r2, #80	@ 0x50
 801abe2:	5a9b      	ldrh	r3, [r3, r2]
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	001a      	movs	r2, r3
 801abe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abea:	189b      	adds	r3, r3, r2
 801abec:	643b      	str	r3, [r7, #64]	@ 0x40
 801abee:	683b      	ldr	r3, [r7, #0]
 801abf0:	781b      	ldrb	r3, [r3, #0]
 801abf2:	00da      	lsls	r2, r3, #3
 801abf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801abf6:	18d3      	adds	r3, r2, r3
 801abf8:	4a33      	ldr	r2, [pc, #204]	@ (801acc8 <USB_EPStartXfer+0x750>)
 801abfa:	4694      	mov	ip, r2
 801abfc:	4463      	add	r3, ip
 801abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ac00:	1d7b      	adds	r3, r7, #5
 801ac02:	33ff      	adds	r3, #255	@ 0xff
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	b29a      	uxth	r2, r3
 801ac08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ac0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801ac0c:	2076      	movs	r0, #118	@ 0x76
 801ac0e:	183b      	adds	r3, r7, r0
 801ac10:	683a      	ldr	r2, [r7, #0]
 801ac12:	8952      	ldrh	r2, [r2, #10]
 801ac14:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	6959      	ldr	r1, [r3, #20]
 801ac1a:	1d7b      	adds	r3, r7, #5
 801ac1c:	33ff      	adds	r3, #255	@ 0xff
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	b29c      	uxth	r4, r3
 801ac22:	183b      	adds	r3, r7, r0
 801ac24:	881a      	ldrh	r2, [r3, #0]
 801ac26:	6878      	ldr	r0, [r7, #4]
 801ac28:	0023      	movs	r3, r4
 801ac2a:	f000 ff17 	bl	801ba5c <USB_WritePMA>
 801ac2e:	e1b6      	b.n	801af9e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	6a1b      	ldr	r3, [r3, #32]
 801ac34:	1d7a      	adds	r2, r7, #5
 801ac36:	32ff      	adds	r2, #255	@ 0xff
 801ac38:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801ac3a:	687a      	ldr	r2, [r7, #4]
 801ac3c:	683b      	ldr	r3, [r7, #0]
 801ac3e:	781b      	ldrb	r3, [r3, #0]
 801ac40:	009b      	lsls	r3, r3, #2
 801ac42:	18d3      	adds	r3, r2, r3
 801ac44:	881b      	ldrh	r3, [r3, #0]
 801ac46:	b29a      	uxth	r2, r3
 801ac48:	2062      	movs	r0, #98	@ 0x62
 801ac4a:	183b      	adds	r3, r7, r0
 801ac4c:	491f      	ldr	r1, [pc, #124]	@ (801accc <USB_EPStartXfer+0x754>)
 801ac4e:	400a      	ands	r2, r1
 801ac50:	801a      	strh	r2, [r3, #0]
 801ac52:	687a      	ldr	r2, [r7, #4]
 801ac54:	683b      	ldr	r3, [r7, #0]
 801ac56:	781b      	ldrb	r3, [r3, #0]
 801ac58:	009b      	lsls	r3, r3, #2
 801ac5a:	18d3      	adds	r3, r2, r3
 801ac5c:	183a      	adds	r2, r7, r0
 801ac5e:	8812      	ldrh	r2, [r2, #0]
 801ac60:	491b      	ldr	r1, [pc, #108]	@ (801acd0 <USB_EPStartXfer+0x758>)
 801ac62:	430a      	orrs	r2, r1
 801ac64:	b292      	uxth	r2, r2
 801ac66:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	2250      	movs	r2, #80	@ 0x50
 801ac70:	5a9b      	ldrh	r3, [r3, r2]
 801ac72:	b29b      	uxth	r3, r3
 801ac74:	001a      	movs	r2, r3
 801ac76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ac78:	189b      	adds	r3, r3, r2
 801ac7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ac7c:	683b      	ldr	r3, [r7, #0]
 801ac7e:	781b      	ldrb	r3, [r3, #0]
 801ac80:	00da      	lsls	r2, r3, #3
 801ac82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ac84:	18d3      	adds	r3, r2, r3
 801ac86:	4a0e      	ldr	r2, [pc, #56]	@ (801acc0 <USB_EPStartXfer+0x748>)
 801ac88:	4694      	mov	ip, r2
 801ac8a:	4463      	add	r3, ip
 801ac8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ac8e:	1d7b      	adds	r3, r7, #5
 801ac90:	33ff      	adds	r3, #255	@ 0xff
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	b29a      	uxth	r2, r3
 801ac96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ac98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801ac9a:	2076      	movs	r0, #118	@ 0x76
 801ac9c:	183b      	adds	r3, r7, r0
 801ac9e:	683a      	ldr	r2, [r7, #0]
 801aca0:	8912      	ldrh	r2, [r2, #8]
 801aca2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801aca4:	683b      	ldr	r3, [r7, #0]
 801aca6:	6959      	ldr	r1, [r3, #20]
 801aca8:	1d7b      	adds	r3, r7, #5
 801acaa:	33ff      	adds	r3, #255	@ 0xff
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	b29c      	uxth	r4, r3
 801acb0:	183b      	adds	r3, r7, r0
 801acb2:	881a      	ldrh	r2, [r3, #0]
 801acb4:	6878      	ldr	r0, [r7, #4]
 801acb6:	0023      	movs	r3, r4
 801acb8:	f000 fed0 	bl	801ba5c <USB_WritePMA>
 801acbc:	e16f      	b.n	801af9e <USB_EPStartXfer+0xa26>
 801acbe:	46c0      	nop			@ (mov r8, r8)
 801acc0:	00000402 	.word	0x00000402
 801acc4:	ffff8000 	.word	0xffff8000
 801acc8:	00000406 	.word	0x00000406
 801accc:	ffff8e8f 	.word	0xffff8e8f
 801acd0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	6a1a      	ldr	r2, [r3, #32]
 801acd8:	1d7b      	adds	r3, r7, #5
 801acda:	33ff      	adds	r3, #255	@ 0xff
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	1ad2      	subs	r2, r2, r3
 801ace0:	683b      	ldr	r3, [r7, #0]
 801ace2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801ace4:	687a      	ldr	r2, [r7, #4]
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	781b      	ldrb	r3, [r3, #0]
 801acea:	009b      	lsls	r3, r3, #2
 801acec:	18d3      	adds	r3, r2, r3
 801acee:	881b      	ldrh	r3, [r3, #0]
 801acf0:	b29b      	uxth	r3, r3
 801acf2:	001a      	movs	r2, r3
 801acf4:	2340      	movs	r3, #64	@ 0x40
 801acf6:	4013      	ands	r3, r2
 801acf8:	d100      	bne.n	801acfc <USB_EPStartXfer+0x784>
 801acfa:	e0a4      	b.n	801ae46 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	673b      	str	r3, [r7, #112]	@ 0x70
 801ad00:	683b      	ldr	r3, [r7, #0]
 801ad02:	785b      	ldrb	r3, [r3, #1]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d000      	beq.n	801ad0a <USB_EPStartXfer+0x792>
 801ad08:	e070      	b.n	801adec <USB_EPStartXfer+0x874>
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	2250      	movs	r2, #80	@ 0x50
 801ad12:	5a9b      	ldrh	r3, [r3, r2]
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	001a      	movs	r2, r3
 801ad18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ad1a:	189b      	adds	r3, r3, r2
 801ad1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801ad1e:	683b      	ldr	r3, [r7, #0]
 801ad20:	781b      	ldrb	r3, [r3, #0]
 801ad22:	00da      	lsls	r2, r3, #3
 801ad24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ad26:	18d3      	adds	r3, r2, r3
 801ad28:	4abc      	ldr	r2, [pc, #752]	@ (801b01c <USB_EPStartXfer+0xaa4>)
 801ad2a:	4694      	mov	ip, r2
 801ad2c:	4463      	add	r3, ip
 801ad2e:	667b      	str	r3, [r7, #100]	@ 0x64
 801ad30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad32:	881b      	ldrh	r3, [r3, #0]
 801ad34:	b29b      	uxth	r3, r3
 801ad36:	059b      	lsls	r3, r3, #22
 801ad38:	0d9b      	lsrs	r3, r3, #22
 801ad3a:	b29a      	uxth	r2, r3
 801ad3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad3e:	801a      	strh	r2, [r3, #0]
 801ad40:	1d7b      	adds	r3, r7, #5
 801ad42:	33ff      	adds	r3, #255	@ 0xff
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	2b3e      	cmp	r3, #62	@ 0x3e
 801ad48:	d922      	bls.n	801ad90 <USB_EPStartXfer+0x818>
 801ad4a:	1d7b      	adds	r3, r7, #5
 801ad4c:	33ff      	adds	r3, #255	@ 0xff
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	095b      	lsrs	r3, r3, #5
 801ad52:	21f0      	movs	r1, #240	@ 0xf0
 801ad54:	187a      	adds	r2, r7, r1
 801ad56:	6013      	str	r3, [r2, #0]
 801ad58:	1d7b      	adds	r3, r7, #5
 801ad5a:	33ff      	adds	r3, #255	@ 0xff
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	221f      	movs	r2, #31
 801ad60:	4013      	ands	r3, r2
 801ad62:	d104      	bne.n	801ad6e <USB_EPStartXfer+0x7f6>
 801ad64:	187b      	adds	r3, r7, r1
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	3b01      	subs	r3, #1
 801ad6a:	187a      	adds	r2, r7, r1
 801ad6c:	6013      	str	r3, [r2, #0]
 801ad6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad70:	881b      	ldrh	r3, [r3, #0]
 801ad72:	b29a      	uxth	r2, r3
 801ad74:	23f0      	movs	r3, #240	@ 0xf0
 801ad76:	18fb      	adds	r3, r7, r3
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	029b      	lsls	r3, r3, #10
 801ad7e:	b29b      	uxth	r3, r3
 801ad80:	4313      	orrs	r3, r2
 801ad82:	b29b      	uxth	r3, r3
 801ad84:	4aa6      	ldr	r2, [pc, #664]	@ (801b020 <USB_EPStartXfer+0xaa8>)
 801ad86:	4313      	orrs	r3, r2
 801ad88:	b29a      	uxth	r2, r3
 801ad8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad8c:	801a      	strh	r2, [r3, #0]
 801ad8e:	e048      	b.n	801ae22 <USB_EPStartXfer+0x8aa>
 801ad90:	1d7b      	adds	r3, r7, #5
 801ad92:	33ff      	adds	r3, #255	@ 0xff
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d108      	bne.n	801adac <USB_EPStartXfer+0x834>
 801ad9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad9c:	881b      	ldrh	r3, [r3, #0]
 801ad9e:	b29b      	uxth	r3, r3
 801ada0:	4a9f      	ldr	r2, [pc, #636]	@ (801b020 <USB_EPStartXfer+0xaa8>)
 801ada2:	4313      	orrs	r3, r2
 801ada4:	b29a      	uxth	r2, r3
 801ada6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ada8:	801a      	strh	r2, [r3, #0]
 801adaa:	e03a      	b.n	801ae22 <USB_EPStartXfer+0x8aa>
 801adac:	1d7b      	adds	r3, r7, #5
 801adae:	33ff      	adds	r3, #255	@ 0xff
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	085b      	lsrs	r3, r3, #1
 801adb4:	21f0      	movs	r1, #240	@ 0xf0
 801adb6:	187a      	adds	r2, r7, r1
 801adb8:	6013      	str	r3, [r2, #0]
 801adba:	1d7b      	adds	r3, r7, #5
 801adbc:	33ff      	adds	r3, #255	@ 0xff
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	2201      	movs	r2, #1
 801adc2:	4013      	ands	r3, r2
 801adc4:	d004      	beq.n	801add0 <USB_EPStartXfer+0x858>
 801adc6:	187b      	adds	r3, r7, r1
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	3301      	adds	r3, #1
 801adcc:	187a      	adds	r2, r7, r1
 801adce:	6013      	str	r3, [r2, #0]
 801add0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801add2:	881b      	ldrh	r3, [r3, #0]
 801add4:	b29a      	uxth	r2, r3
 801add6:	23f0      	movs	r3, #240	@ 0xf0
 801add8:	18fb      	adds	r3, r7, r3
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	b29b      	uxth	r3, r3
 801adde:	029b      	lsls	r3, r3, #10
 801ade0:	b29b      	uxth	r3, r3
 801ade2:	4313      	orrs	r3, r2
 801ade4:	b29a      	uxth	r2, r3
 801ade6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ade8:	801a      	strh	r2, [r3, #0]
 801adea:	e01a      	b.n	801ae22 <USB_EPStartXfer+0x8aa>
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	785b      	ldrb	r3, [r3, #1]
 801adf0:	2b01      	cmp	r3, #1
 801adf2:	d116      	bne.n	801ae22 <USB_EPStartXfer+0x8aa>
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	2250      	movs	r2, #80	@ 0x50
 801adf8:	5a9b      	ldrh	r3, [r3, r2]
 801adfa:	b29b      	uxth	r3, r3
 801adfc:	001a      	movs	r2, r3
 801adfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ae00:	189b      	adds	r3, r3, r2
 801ae02:	673b      	str	r3, [r7, #112]	@ 0x70
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	781b      	ldrb	r3, [r3, #0]
 801ae08:	00da      	lsls	r2, r3, #3
 801ae0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ae0c:	18d3      	adds	r3, r2, r3
 801ae0e:	4a83      	ldr	r2, [pc, #524]	@ (801b01c <USB_EPStartXfer+0xaa4>)
 801ae10:	4694      	mov	ip, r2
 801ae12:	4463      	add	r3, ip
 801ae14:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ae16:	1d7b      	adds	r3, r7, #5
 801ae18:	33ff      	adds	r3, #255	@ 0xff
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	b29a      	uxth	r2, r3
 801ae1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ae20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801ae22:	2076      	movs	r0, #118	@ 0x76
 801ae24:	183b      	adds	r3, r7, r0
 801ae26:	683a      	ldr	r2, [r7, #0]
 801ae28:	8952      	ldrh	r2, [r2, #10]
 801ae2a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801ae2c:	683b      	ldr	r3, [r7, #0]
 801ae2e:	6959      	ldr	r1, [r3, #20]
 801ae30:	1d7b      	adds	r3, r7, #5
 801ae32:	33ff      	adds	r3, #255	@ 0xff
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	b29c      	uxth	r4, r3
 801ae38:	183b      	adds	r3, r7, r0
 801ae3a:	881a      	ldrh	r2, [r3, #0]
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	0023      	movs	r3, r4
 801ae40:	f000 fe0c 	bl	801ba5c <USB_WritePMA>
 801ae44:	e0ab      	b.n	801af9e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801ae46:	683b      	ldr	r3, [r7, #0]
 801ae48:	785b      	ldrb	r3, [r3, #1]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d000      	beq.n	801ae50 <USB_EPStartXfer+0x8d8>
 801ae4e:	e070      	b.n	801af32 <USB_EPStartXfer+0x9ba>
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	2250      	movs	r2, #80	@ 0x50
 801ae58:	5a9b      	ldrh	r3, [r3, r2]
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	001a      	movs	r2, r3
 801ae5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ae60:	189b      	adds	r3, r3, r2
 801ae62:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801ae64:	683b      	ldr	r3, [r7, #0]
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	00da      	lsls	r2, r3, #3
 801ae6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ae6c:	18d3      	adds	r3, r2, r3
 801ae6e:	4a6d      	ldr	r2, [pc, #436]	@ (801b024 <USB_EPStartXfer+0xaac>)
 801ae70:	4694      	mov	ip, r2
 801ae72:	4463      	add	r3, ip
 801ae74:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ae76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ae78:	881b      	ldrh	r3, [r3, #0]
 801ae7a:	b29b      	uxth	r3, r3
 801ae7c:	059b      	lsls	r3, r3, #22
 801ae7e:	0d9b      	lsrs	r3, r3, #22
 801ae80:	b29a      	uxth	r2, r3
 801ae82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ae84:	801a      	strh	r2, [r3, #0]
 801ae86:	1d7b      	adds	r3, r7, #5
 801ae88:	33ff      	adds	r3, #255	@ 0xff
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	2b3e      	cmp	r3, #62	@ 0x3e
 801ae8e:	d922      	bls.n	801aed6 <USB_EPStartXfer+0x95e>
 801ae90:	1d7b      	adds	r3, r7, #5
 801ae92:	33ff      	adds	r3, #255	@ 0xff
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	095b      	lsrs	r3, r3, #5
 801ae98:	21ec      	movs	r1, #236	@ 0xec
 801ae9a:	187a      	adds	r2, r7, r1
 801ae9c:	6013      	str	r3, [r2, #0]
 801ae9e:	1d7b      	adds	r3, r7, #5
 801aea0:	33ff      	adds	r3, #255	@ 0xff
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	221f      	movs	r2, #31
 801aea6:	4013      	ands	r3, r2
 801aea8:	d104      	bne.n	801aeb4 <USB_EPStartXfer+0x93c>
 801aeaa:	187b      	adds	r3, r7, r1
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	3b01      	subs	r3, #1
 801aeb0:	187a      	adds	r2, r7, r1
 801aeb2:	6013      	str	r3, [r2, #0]
 801aeb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aeb6:	881b      	ldrh	r3, [r3, #0]
 801aeb8:	b29a      	uxth	r2, r3
 801aeba:	23ec      	movs	r3, #236	@ 0xec
 801aebc:	18fb      	adds	r3, r7, r3
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	b29b      	uxth	r3, r3
 801aec2:	029b      	lsls	r3, r3, #10
 801aec4:	b29b      	uxth	r3, r3
 801aec6:	4313      	orrs	r3, r2
 801aec8:	b29b      	uxth	r3, r3
 801aeca:	4a55      	ldr	r2, [pc, #340]	@ (801b020 <USB_EPStartXfer+0xaa8>)
 801aecc:	4313      	orrs	r3, r2
 801aece:	b29a      	uxth	r2, r3
 801aed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aed2:	801a      	strh	r2, [r3, #0]
 801aed4:	e052      	b.n	801af7c <USB_EPStartXfer+0xa04>
 801aed6:	1d7b      	adds	r3, r7, #5
 801aed8:	33ff      	adds	r3, #255	@ 0xff
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d108      	bne.n	801aef2 <USB_EPStartXfer+0x97a>
 801aee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aee2:	881b      	ldrh	r3, [r3, #0]
 801aee4:	b29b      	uxth	r3, r3
 801aee6:	4a4e      	ldr	r2, [pc, #312]	@ (801b020 <USB_EPStartXfer+0xaa8>)
 801aee8:	4313      	orrs	r3, r2
 801aeea:	b29a      	uxth	r2, r3
 801aeec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801aeee:	801a      	strh	r2, [r3, #0]
 801aef0:	e044      	b.n	801af7c <USB_EPStartXfer+0xa04>
 801aef2:	1d7b      	adds	r3, r7, #5
 801aef4:	33ff      	adds	r3, #255	@ 0xff
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	085b      	lsrs	r3, r3, #1
 801aefa:	21ec      	movs	r1, #236	@ 0xec
 801aefc:	187a      	adds	r2, r7, r1
 801aefe:	6013      	str	r3, [r2, #0]
 801af00:	1d7b      	adds	r3, r7, #5
 801af02:	33ff      	adds	r3, #255	@ 0xff
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	2201      	movs	r2, #1
 801af08:	4013      	ands	r3, r2
 801af0a:	d004      	beq.n	801af16 <USB_EPStartXfer+0x99e>
 801af0c:	187b      	adds	r3, r7, r1
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	3301      	adds	r3, #1
 801af12:	187a      	adds	r2, r7, r1
 801af14:	6013      	str	r3, [r2, #0]
 801af16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801af18:	881b      	ldrh	r3, [r3, #0]
 801af1a:	b29a      	uxth	r2, r3
 801af1c:	23ec      	movs	r3, #236	@ 0xec
 801af1e:	18fb      	adds	r3, r7, r3
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	b29b      	uxth	r3, r3
 801af24:	029b      	lsls	r3, r3, #10
 801af26:	b29b      	uxth	r3, r3
 801af28:	4313      	orrs	r3, r2
 801af2a:	b29a      	uxth	r2, r3
 801af2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801af2e:	801a      	strh	r2, [r3, #0]
 801af30:	e024      	b.n	801af7c <USB_EPStartXfer+0xa04>
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	785b      	ldrb	r3, [r3, #1]
 801af36:	2b01      	cmp	r3, #1
 801af38:	d120      	bne.n	801af7c <USB_EPStartXfer+0xa04>
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	2184      	movs	r1, #132	@ 0x84
 801af3e:	187a      	adds	r2, r7, r1
 801af40:	6013      	str	r3, [r2, #0]
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	2250      	movs	r2, #80	@ 0x50
 801af46:	5a9b      	ldrh	r3, [r3, r2]
 801af48:	b29b      	uxth	r3, r3
 801af4a:	001a      	movs	r2, r3
 801af4c:	187b      	adds	r3, r7, r1
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	189b      	adds	r3, r3, r2
 801af52:	187a      	adds	r2, r7, r1
 801af54:	6013      	str	r3, [r2, #0]
 801af56:	683b      	ldr	r3, [r7, #0]
 801af58:	781b      	ldrb	r3, [r3, #0]
 801af5a:	00da      	lsls	r2, r3, #3
 801af5c:	187b      	adds	r3, r7, r1
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	18d3      	adds	r3, r2, r3
 801af62:	4a30      	ldr	r2, [pc, #192]	@ (801b024 <USB_EPStartXfer+0xaac>)
 801af64:	4694      	mov	ip, r2
 801af66:	4463      	add	r3, ip
 801af68:	2180      	movs	r1, #128	@ 0x80
 801af6a:	187a      	adds	r2, r7, r1
 801af6c:	6013      	str	r3, [r2, #0]
 801af6e:	1d7b      	adds	r3, r7, #5
 801af70:	33ff      	adds	r3, #255	@ 0xff
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	b29a      	uxth	r2, r3
 801af76:	187b      	adds	r3, r7, r1
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801af7c:	2076      	movs	r0, #118	@ 0x76
 801af7e:	183b      	adds	r3, r7, r0
 801af80:	683a      	ldr	r2, [r7, #0]
 801af82:	8912      	ldrh	r2, [r2, #8]
 801af84:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	6959      	ldr	r1, [r3, #20]
 801af8a:	1d7b      	adds	r3, r7, #5
 801af8c:	33ff      	adds	r3, #255	@ 0xff
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	b29c      	uxth	r4, r3
 801af92:	183b      	adds	r3, r7, r0
 801af94:	881a      	ldrh	r2, [r3, #0]
 801af96:	6878      	ldr	r0, [r7, #4]
 801af98:	0023      	movs	r3, r4
 801af9a:	f000 fd5f 	bl	801ba5c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801af9e:	687a      	ldr	r2, [r7, #4]
 801afa0:	683b      	ldr	r3, [r7, #0]
 801afa2:	781b      	ldrb	r3, [r3, #0]
 801afa4:	009b      	lsls	r3, r3, #2
 801afa6:	18d3      	adds	r3, r2, r3
 801afa8:	881b      	ldrh	r3, [r3, #0]
 801afaa:	b29a      	uxth	r2, r3
 801afac:	200a      	movs	r0, #10
 801afae:	183b      	adds	r3, r7, r0
 801afb0:	491d      	ldr	r1, [pc, #116]	@ (801b028 <USB_EPStartXfer+0xab0>)
 801afb2:	400a      	ands	r2, r1
 801afb4:	801a      	strh	r2, [r3, #0]
 801afb6:	183b      	adds	r3, r7, r0
 801afb8:	183a      	adds	r2, r7, r0
 801afba:	8812      	ldrh	r2, [r2, #0]
 801afbc:	2110      	movs	r1, #16
 801afbe:	404a      	eors	r2, r1
 801afc0:	801a      	strh	r2, [r3, #0]
 801afc2:	183b      	adds	r3, r7, r0
 801afc4:	183a      	adds	r2, r7, r0
 801afc6:	8812      	ldrh	r2, [r2, #0]
 801afc8:	2120      	movs	r1, #32
 801afca:	404a      	eors	r2, r1
 801afcc:	801a      	strh	r2, [r3, #0]
 801afce:	687a      	ldr	r2, [r7, #4]
 801afd0:	683b      	ldr	r3, [r7, #0]
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	009b      	lsls	r3, r3, #2
 801afd6:	18d3      	adds	r3, r2, r3
 801afd8:	183a      	adds	r2, r7, r0
 801afda:	8812      	ldrh	r2, [r2, #0]
 801afdc:	4913      	ldr	r1, [pc, #76]	@ (801b02c <USB_EPStartXfer+0xab4>)
 801afde:	430a      	orrs	r2, r1
 801afe0:	b292      	uxth	r2, r2
 801afe2:	801a      	strh	r2, [r3, #0]
 801afe4:	f000 fbf4 	bl	801b7d0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	7b1b      	ldrb	r3, [r3, #12]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d000      	beq.n	801aff2 <USB_EPStartXfer+0xa7a>
 801aff0:	e0a9      	b.n	801b146 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801aff2:	683b      	ldr	r3, [r7, #0]
 801aff4:	699a      	ldr	r2, [r3, #24]
 801aff6:	683b      	ldr	r3, [r7, #0]
 801aff8:	691b      	ldr	r3, [r3, #16]
 801affa:	429a      	cmp	r2, r3
 801affc:	d918      	bls.n	801b030 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	691b      	ldr	r3, [r3, #16]
 801b002:	1d7a      	adds	r2, r7, #5
 801b004:	32ff      	adds	r2, #255	@ 0xff
 801b006:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	699a      	ldr	r2, [r3, #24]
 801b00c:	1d7b      	adds	r3, r7, #5
 801b00e:	33ff      	adds	r3, #255	@ 0xff
 801b010:	681b      	ldr	r3, [r3, #0]
 801b012:	1ad2      	subs	r2, r2, r3
 801b014:	683b      	ldr	r3, [r7, #0]
 801b016:	619a      	str	r2, [r3, #24]
 801b018:	e012      	b.n	801b040 <USB_EPStartXfer+0xac8>
 801b01a:	46c0      	nop			@ (mov r8, r8)
 801b01c:	00000406 	.word	0x00000406
 801b020:	ffff8000 	.word	0xffff8000
 801b024:	00000402 	.word	0x00000402
 801b028:	ffff8fbf 	.word	0xffff8fbf
 801b02c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	699b      	ldr	r3, [r3, #24]
 801b034:	1d7a      	adds	r2, r7, #5
 801b036:	32ff      	adds	r2, #255	@ 0xff
 801b038:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801b03a:	683b      	ldr	r3, [r7, #0]
 801b03c:	2200      	movs	r2, #0
 801b03e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	2190      	movs	r1, #144	@ 0x90
 801b044:	187a      	adds	r2, r7, r1
 801b046:	6013      	str	r3, [r2, #0]
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	2250      	movs	r2, #80	@ 0x50
 801b04c:	5a9b      	ldrh	r3, [r3, r2]
 801b04e:	b29b      	uxth	r3, r3
 801b050:	001a      	movs	r2, r3
 801b052:	187b      	adds	r3, r7, r1
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	189b      	adds	r3, r3, r2
 801b058:	187a      	adds	r2, r7, r1
 801b05a:	6013      	str	r3, [r2, #0]
 801b05c:	683b      	ldr	r3, [r7, #0]
 801b05e:	781b      	ldrb	r3, [r3, #0]
 801b060:	00da      	lsls	r2, r3, #3
 801b062:	187b      	adds	r3, r7, r1
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	18d3      	adds	r3, r2, r3
 801b068:	4acf      	ldr	r2, [pc, #828]	@ (801b3a8 <USB_EPStartXfer+0xe30>)
 801b06a:	4694      	mov	ip, r2
 801b06c:	4463      	add	r3, ip
 801b06e:	218c      	movs	r1, #140	@ 0x8c
 801b070:	187a      	adds	r2, r7, r1
 801b072:	6013      	str	r3, [r2, #0]
 801b074:	187b      	adds	r3, r7, r1
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	881b      	ldrh	r3, [r3, #0]
 801b07a:	b29b      	uxth	r3, r3
 801b07c:	059b      	lsls	r3, r3, #22
 801b07e:	0d9b      	lsrs	r3, r3, #22
 801b080:	b29a      	uxth	r2, r3
 801b082:	187b      	adds	r3, r7, r1
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	801a      	strh	r2, [r3, #0]
 801b088:	1d7b      	adds	r3, r7, #5
 801b08a:	33ff      	adds	r3, #255	@ 0xff
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	2b3e      	cmp	r3, #62	@ 0x3e
 801b090:	d925      	bls.n	801b0de <USB_EPStartXfer+0xb66>
 801b092:	1d7b      	adds	r3, r7, #5
 801b094:	33ff      	adds	r3, #255	@ 0xff
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	095b      	lsrs	r3, r3, #5
 801b09a:	21e8      	movs	r1, #232	@ 0xe8
 801b09c:	187a      	adds	r2, r7, r1
 801b09e:	6013      	str	r3, [r2, #0]
 801b0a0:	1d7b      	adds	r3, r7, #5
 801b0a2:	33ff      	adds	r3, #255	@ 0xff
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	221f      	movs	r2, #31
 801b0a8:	4013      	ands	r3, r2
 801b0aa:	d104      	bne.n	801b0b6 <USB_EPStartXfer+0xb3e>
 801b0ac:	187b      	adds	r3, r7, r1
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	3b01      	subs	r3, #1
 801b0b2:	187a      	adds	r2, r7, r1
 801b0b4:	6013      	str	r3, [r2, #0]
 801b0b6:	218c      	movs	r1, #140	@ 0x8c
 801b0b8:	187b      	adds	r3, r7, r1
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	881b      	ldrh	r3, [r3, #0]
 801b0be:	b29a      	uxth	r2, r3
 801b0c0:	23e8      	movs	r3, #232	@ 0xe8
 801b0c2:	18fb      	adds	r3, r7, r3
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	b29b      	uxth	r3, r3
 801b0c8:	029b      	lsls	r3, r3, #10
 801b0ca:	b29b      	uxth	r3, r3
 801b0cc:	4313      	orrs	r3, r2
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	4ab6      	ldr	r2, [pc, #728]	@ (801b3ac <USB_EPStartXfer+0xe34>)
 801b0d2:	4313      	orrs	r3, r2
 801b0d4:	b29a      	uxth	r2, r3
 801b0d6:	187b      	adds	r3, r7, r1
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	801a      	strh	r2, [r3, #0]
 801b0dc:	e353      	b.n	801b786 <USB_EPStartXfer+0x120e>
 801b0de:	1d7b      	adds	r3, r7, #5
 801b0e0:	33ff      	adds	r3, #255	@ 0xff
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d10b      	bne.n	801b100 <USB_EPStartXfer+0xb88>
 801b0e8:	218c      	movs	r1, #140	@ 0x8c
 801b0ea:	187b      	adds	r3, r7, r1
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	881b      	ldrh	r3, [r3, #0]
 801b0f0:	b29b      	uxth	r3, r3
 801b0f2:	4aae      	ldr	r2, [pc, #696]	@ (801b3ac <USB_EPStartXfer+0xe34>)
 801b0f4:	4313      	orrs	r3, r2
 801b0f6:	b29a      	uxth	r2, r3
 801b0f8:	187b      	adds	r3, r7, r1
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	801a      	strh	r2, [r3, #0]
 801b0fe:	e342      	b.n	801b786 <USB_EPStartXfer+0x120e>
 801b100:	1d7b      	adds	r3, r7, #5
 801b102:	33ff      	adds	r3, #255	@ 0xff
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	085b      	lsrs	r3, r3, #1
 801b108:	21e8      	movs	r1, #232	@ 0xe8
 801b10a:	187a      	adds	r2, r7, r1
 801b10c:	6013      	str	r3, [r2, #0]
 801b10e:	1d7b      	adds	r3, r7, #5
 801b110:	33ff      	adds	r3, #255	@ 0xff
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	2201      	movs	r2, #1
 801b116:	4013      	ands	r3, r2
 801b118:	d004      	beq.n	801b124 <USB_EPStartXfer+0xbac>
 801b11a:	187b      	adds	r3, r7, r1
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	3301      	adds	r3, #1
 801b120:	187a      	adds	r2, r7, r1
 801b122:	6013      	str	r3, [r2, #0]
 801b124:	218c      	movs	r1, #140	@ 0x8c
 801b126:	187b      	adds	r3, r7, r1
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	881b      	ldrh	r3, [r3, #0]
 801b12c:	b29a      	uxth	r2, r3
 801b12e:	23e8      	movs	r3, #232	@ 0xe8
 801b130:	18fb      	adds	r3, r7, r3
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	b29b      	uxth	r3, r3
 801b136:	029b      	lsls	r3, r3, #10
 801b138:	b29b      	uxth	r3, r3
 801b13a:	4313      	orrs	r3, r2
 801b13c:	b29a      	uxth	r2, r3
 801b13e:	187b      	adds	r3, r7, r1
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	801a      	strh	r2, [r3, #0]
 801b144:	e31f      	b.n	801b786 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	78db      	ldrb	r3, [r3, #3]
 801b14a:	2b02      	cmp	r3, #2
 801b14c:	d000      	beq.n	801b150 <USB_EPStartXfer+0xbd8>
 801b14e:	e191      	b.n	801b474 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801b150:	683b      	ldr	r3, [r7, #0]
 801b152:	785b      	ldrb	r3, [r3, #1]
 801b154:	2b00      	cmp	r3, #0
 801b156:	d000      	beq.n	801b15a <USB_EPStartXfer+0xbe2>
 801b158:	e07c      	b.n	801b254 <USB_EPStartXfer+0xcdc>
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	21ac      	movs	r1, #172	@ 0xac
 801b15e:	187a      	adds	r2, r7, r1
 801b160:	6013      	str	r3, [r2, #0]
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	2250      	movs	r2, #80	@ 0x50
 801b166:	5a9b      	ldrh	r3, [r3, r2]
 801b168:	b29b      	uxth	r3, r3
 801b16a:	001a      	movs	r2, r3
 801b16c:	187b      	adds	r3, r7, r1
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	189b      	adds	r3, r3, r2
 801b172:	187a      	adds	r2, r7, r1
 801b174:	6013      	str	r3, [r2, #0]
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	781b      	ldrb	r3, [r3, #0]
 801b17a:	00da      	lsls	r2, r3, #3
 801b17c:	187b      	adds	r3, r7, r1
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	18d3      	adds	r3, r2, r3
 801b182:	4a8b      	ldr	r2, [pc, #556]	@ (801b3b0 <USB_EPStartXfer+0xe38>)
 801b184:	4694      	mov	ip, r2
 801b186:	4463      	add	r3, ip
 801b188:	21a8      	movs	r1, #168	@ 0xa8
 801b18a:	187a      	adds	r2, r7, r1
 801b18c:	6013      	str	r3, [r2, #0]
 801b18e:	187b      	adds	r3, r7, r1
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	881b      	ldrh	r3, [r3, #0]
 801b194:	b29b      	uxth	r3, r3
 801b196:	059b      	lsls	r3, r3, #22
 801b198:	0d9b      	lsrs	r3, r3, #22
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	187b      	adds	r3, r7, r1
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	801a      	strh	r2, [r3, #0]
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	691b      	ldr	r3, [r3, #16]
 801b1a6:	2b3e      	cmp	r3, #62	@ 0x3e
 801b1a8:	d923      	bls.n	801b1f2 <USB_EPStartXfer+0xc7a>
 801b1aa:	683b      	ldr	r3, [r7, #0]
 801b1ac:	691b      	ldr	r3, [r3, #16]
 801b1ae:	095b      	lsrs	r3, r3, #5
 801b1b0:	21e4      	movs	r1, #228	@ 0xe4
 801b1b2:	187a      	adds	r2, r7, r1
 801b1b4:	6013      	str	r3, [r2, #0]
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	691b      	ldr	r3, [r3, #16]
 801b1ba:	221f      	movs	r2, #31
 801b1bc:	4013      	ands	r3, r2
 801b1be:	d104      	bne.n	801b1ca <USB_EPStartXfer+0xc52>
 801b1c0:	187b      	adds	r3, r7, r1
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	3b01      	subs	r3, #1
 801b1c6:	187a      	adds	r2, r7, r1
 801b1c8:	6013      	str	r3, [r2, #0]
 801b1ca:	21a8      	movs	r1, #168	@ 0xa8
 801b1cc:	187b      	adds	r3, r7, r1
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	881b      	ldrh	r3, [r3, #0]
 801b1d2:	b29a      	uxth	r2, r3
 801b1d4:	23e4      	movs	r3, #228	@ 0xe4
 801b1d6:	18fb      	adds	r3, r7, r3
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	b29b      	uxth	r3, r3
 801b1dc:	029b      	lsls	r3, r3, #10
 801b1de:	b29b      	uxth	r3, r3
 801b1e0:	4313      	orrs	r3, r2
 801b1e2:	b29b      	uxth	r3, r3
 801b1e4:	4a71      	ldr	r2, [pc, #452]	@ (801b3ac <USB_EPStartXfer+0xe34>)
 801b1e6:	4313      	orrs	r3, r2
 801b1e8:	b29a      	uxth	r2, r3
 801b1ea:	187b      	adds	r3, r7, r1
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	801a      	strh	r2, [r3, #0]
 801b1f0:	e054      	b.n	801b29c <USB_EPStartXfer+0xd24>
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	691b      	ldr	r3, [r3, #16]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d10b      	bne.n	801b212 <USB_EPStartXfer+0xc9a>
 801b1fa:	21a8      	movs	r1, #168	@ 0xa8
 801b1fc:	187b      	adds	r3, r7, r1
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	881b      	ldrh	r3, [r3, #0]
 801b202:	b29b      	uxth	r3, r3
 801b204:	4a69      	ldr	r2, [pc, #420]	@ (801b3ac <USB_EPStartXfer+0xe34>)
 801b206:	4313      	orrs	r3, r2
 801b208:	b29a      	uxth	r2, r3
 801b20a:	187b      	adds	r3, r7, r1
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	801a      	strh	r2, [r3, #0]
 801b210:	e044      	b.n	801b29c <USB_EPStartXfer+0xd24>
 801b212:	683b      	ldr	r3, [r7, #0]
 801b214:	691b      	ldr	r3, [r3, #16]
 801b216:	085b      	lsrs	r3, r3, #1
 801b218:	21e4      	movs	r1, #228	@ 0xe4
 801b21a:	187a      	adds	r2, r7, r1
 801b21c:	6013      	str	r3, [r2, #0]
 801b21e:	683b      	ldr	r3, [r7, #0]
 801b220:	691b      	ldr	r3, [r3, #16]
 801b222:	2201      	movs	r2, #1
 801b224:	4013      	ands	r3, r2
 801b226:	d004      	beq.n	801b232 <USB_EPStartXfer+0xcba>
 801b228:	187b      	adds	r3, r7, r1
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	3301      	adds	r3, #1
 801b22e:	187a      	adds	r2, r7, r1
 801b230:	6013      	str	r3, [r2, #0]
 801b232:	21a8      	movs	r1, #168	@ 0xa8
 801b234:	187b      	adds	r3, r7, r1
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	881b      	ldrh	r3, [r3, #0]
 801b23a:	b29a      	uxth	r2, r3
 801b23c:	23e4      	movs	r3, #228	@ 0xe4
 801b23e:	18fb      	adds	r3, r7, r3
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	b29b      	uxth	r3, r3
 801b244:	029b      	lsls	r3, r3, #10
 801b246:	b29b      	uxth	r3, r3
 801b248:	4313      	orrs	r3, r2
 801b24a:	b29a      	uxth	r2, r3
 801b24c:	187b      	adds	r3, r7, r1
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	801a      	strh	r2, [r3, #0]
 801b252:	e023      	b.n	801b29c <USB_EPStartXfer+0xd24>
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	785b      	ldrb	r3, [r3, #1]
 801b258:	2b01      	cmp	r3, #1
 801b25a:	d11f      	bne.n	801b29c <USB_EPStartXfer+0xd24>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	21b4      	movs	r1, #180	@ 0xb4
 801b260:	187a      	adds	r2, r7, r1
 801b262:	6013      	str	r3, [r2, #0]
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	2250      	movs	r2, #80	@ 0x50
 801b268:	5a9b      	ldrh	r3, [r3, r2]
 801b26a:	b29b      	uxth	r3, r3
 801b26c:	001a      	movs	r2, r3
 801b26e:	187b      	adds	r3, r7, r1
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	189b      	adds	r3, r3, r2
 801b274:	187a      	adds	r2, r7, r1
 801b276:	6013      	str	r3, [r2, #0]
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	781b      	ldrb	r3, [r3, #0]
 801b27c:	00da      	lsls	r2, r3, #3
 801b27e:	187b      	adds	r3, r7, r1
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	18d3      	adds	r3, r2, r3
 801b284:	4a4a      	ldr	r2, [pc, #296]	@ (801b3b0 <USB_EPStartXfer+0xe38>)
 801b286:	4694      	mov	ip, r2
 801b288:	4463      	add	r3, ip
 801b28a:	21b0      	movs	r1, #176	@ 0xb0
 801b28c:	187a      	adds	r2, r7, r1
 801b28e:	6013      	str	r3, [r2, #0]
 801b290:	683b      	ldr	r3, [r7, #0]
 801b292:	691b      	ldr	r3, [r3, #16]
 801b294:	b29a      	uxth	r2, r3
 801b296:	187b      	adds	r3, r7, r1
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	801a      	strh	r2, [r3, #0]
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	22a4      	movs	r2, #164	@ 0xa4
 801b2a0:	18ba      	adds	r2, r7, r2
 801b2a2:	6013      	str	r3, [r2, #0]
 801b2a4:	683b      	ldr	r3, [r7, #0]
 801b2a6:	785b      	ldrb	r3, [r3, #1]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d000      	beq.n	801b2ae <USB_EPStartXfer+0xd36>
 801b2ac:	e082      	b.n	801b3b4 <USB_EPStartXfer+0xe3c>
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	219c      	movs	r1, #156	@ 0x9c
 801b2b2:	187a      	adds	r2, r7, r1
 801b2b4:	6013      	str	r3, [r2, #0]
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	2250      	movs	r2, #80	@ 0x50
 801b2ba:	5a9b      	ldrh	r3, [r3, r2]
 801b2bc:	b29b      	uxth	r3, r3
 801b2be:	001a      	movs	r2, r3
 801b2c0:	187b      	adds	r3, r7, r1
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	189b      	adds	r3, r3, r2
 801b2c6:	187a      	adds	r2, r7, r1
 801b2c8:	6013      	str	r3, [r2, #0]
 801b2ca:	683b      	ldr	r3, [r7, #0]
 801b2cc:	781b      	ldrb	r3, [r3, #0]
 801b2ce:	00da      	lsls	r2, r3, #3
 801b2d0:	187b      	adds	r3, r7, r1
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	18d3      	adds	r3, r2, r3
 801b2d6:	4a34      	ldr	r2, [pc, #208]	@ (801b3a8 <USB_EPStartXfer+0xe30>)
 801b2d8:	4694      	mov	ip, r2
 801b2da:	4463      	add	r3, ip
 801b2dc:	2198      	movs	r1, #152	@ 0x98
 801b2de:	187a      	adds	r2, r7, r1
 801b2e0:	6013      	str	r3, [r2, #0]
 801b2e2:	187b      	adds	r3, r7, r1
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	881b      	ldrh	r3, [r3, #0]
 801b2e8:	b29b      	uxth	r3, r3
 801b2ea:	059b      	lsls	r3, r3, #22
 801b2ec:	0d9b      	lsrs	r3, r3, #22
 801b2ee:	b29a      	uxth	r2, r3
 801b2f0:	187b      	adds	r3, r7, r1
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	801a      	strh	r2, [r3, #0]
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	691b      	ldr	r3, [r3, #16]
 801b2fa:	2b3e      	cmp	r3, #62	@ 0x3e
 801b2fc:	d923      	bls.n	801b346 <USB_EPStartXfer+0xdce>
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	691b      	ldr	r3, [r3, #16]
 801b302:	095b      	lsrs	r3, r3, #5
 801b304:	21e0      	movs	r1, #224	@ 0xe0
 801b306:	187a      	adds	r2, r7, r1
 801b308:	6013      	str	r3, [r2, #0]
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	691b      	ldr	r3, [r3, #16]
 801b30e:	221f      	movs	r2, #31
 801b310:	4013      	ands	r3, r2
 801b312:	d104      	bne.n	801b31e <USB_EPStartXfer+0xda6>
 801b314:	187b      	adds	r3, r7, r1
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	3b01      	subs	r3, #1
 801b31a:	187a      	adds	r2, r7, r1
 801b31c:	6013      	str	r3, [r2, #0]
 801b31e:	2198      	movs	r1, #152	@ 0x98
 801b320:	187b      	adds	r3, r7, r1
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	881b      	ldrh	r3, [r3, #0]
 801b326:	b29a      	uxth	r2, r3
 801b328:	23e0      	movs	r3, #224	@ 0xe0
 801b32a:	18fb      	adds	r3, r7, r3
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	b29b      	uxth	r3, r3
 801b330:	029b      	lsls	r3, r3, #10
 801b332:	b29b      	uxth	r3, r3
 801b334:	4313      	orrs	r3, r2
 801b336:	b29b      	uxth	r3, r3
 801b338:	4a1c      	ldr	r2, [pc, #112]	@ (801b3ac <USB_EPStartXfer+0xe34>)
 801b33a:	4313      	orrs	r3, r2
 801b33c:	b29a      	uxth	r2, r3
 801b33e:	187b      	adds	r3, r7, r1
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	801a      	strh	r2, [r3, #0]
 801b344:	e057      	b.n	801b3f6 <USB_EPStartXfer+0xe7e>
 801b346:	683b      	ldr	r3, [r7, #0]
 801b348:	691b      	ldr	r3, [r3, #16]
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d10b      	bne.n	801b366 <USB_EPStartXfer+0xdee>
 801b34e:	2198      	movs	r1, #152	@ 0x98
 801b350:	187b      	adds	r3, r7, r1
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	881b      	ldrh	r3, [r3, #0]
 801b356:	b29b      	uxth	r3, r3
 801b358:	4a14      	ldr	r2, [pc, #80]	@ (801b3ac <USB_EPStartXfer+0xe34>)
 801b35a:	4313      	orrs	r3, r2
 801b35c:	b29a      	uxth	r2, r3
 801b35e:	187b      	adds	r3, r7, r1
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	801a      	strh	r2, [r3, #0]
 801b364:	e047      	b.n	801b3f6 <USB_EPStartXfer+0xe7e>
 801b366:	683b      	ldr	r3, [r7, #0]
 801b368:	691b      	ldr	r3, [r3, #16]
 801b36a:	085b      	lsrs	r3, r3, #1
 801b36c:	21e0      	movs	r1, #224	@ 0xe0
 801b36e:	187a      	adds	r2, r7, r1
 801b370:	6013      	str	r3, [r2, #0]
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	691b      	ldr	r3, [r3, #16]
 801b376:	2201      	movs	r2, #1
 801b378:	4013      	ands	r3, r2
 801b37a:	d004      	beq.n	801b386 <USB_EPStartXfer+0xe0e>
 801b37c:	187b      	adds	r3, r7, r1
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	3301      	adds	r3, #1
 801b382:	187a      	adds	r2, r7, r1
 801b384:	6013      	str	r3, [r2, #0]
 801b386:	2198      	movs	r1, #152	@ 0x98
 801b388:	187b      	adds	r3, r7, r1
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	881b      	ldrh	r3, [r3, #0]
 801b38e:	b29a      	uxth	r2, r3
 801b390:	23e0      	movs	r3, #224	@ 0xe0
 801b392:	18fb      	adds	r3, r7, r3
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	b29b      	uxth	r3, r3
 801b398:	029b      	lsls	r3, r3, #10
 801b39a:	b29b      	uxth	r3, r3
 801b39c:	4313      	orrs	r3, r2
 801b39e:	b29a      	uxth	r2, r3
 801b3a0:	187b      	adds	r3, r7, r1
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	801a      	strh	r2, [r3, #0]
 801b3a6:	e026      	b.n	801b3f6 <USB_EPStartXfer+0xe7e>
 801b3a8:	00000406 	.word	0x00000406
 801b3ac:	ffff8000 	.word	0xffff8000
 801b3b0:	00000402 	.word	0x00000402
 801b3b4:	683b      	ldr	r3, [r7, #0]
 801b3b6:	785b      	ldrb	r3, [r3, #1]
 801b3b8:	2b01      	cmp	r3, #1
 801b3ba:	d11c      	bne.n	801b3f6 <USB_EPStartXfer+0xe7e>
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	2250      	movs	r2, #80	@ 0x50
 801b3c0:	5a9b      	ldrh	r3, [r3, r2]
 801b3c2:	b29b      	uxth	r3, r3
 801b3c4:	001a      	movs	r2, r3
 801b3c6:	21a4      	movs	r1, #164	@ 0xa4
 801b3c8:	187b      	adds	r3, r7, r1
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	189b      	adds	r3, r3, r2
 801b3ce:	187a      	adds	r2, r7, r1
 801b3d0:	6013      	str	r3, [r2, #0]
 801b3d2:	683b      	ldr	r3, [r7, #0]
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	00da      	lsls	r2, r3, #3
 801b3d8:	187b      	adds	r3, r7, r1
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	18d3      	adds	r3, r2, r3
 801b3de:	4ad2      	ldr	r2, [pc, #840]	@ (801b728 <USB_EPStartXfer+0x11b0>)
 801b3e0:	4694      	mov	ip, r2
 801b3e2:	4463      	add	r3, ip
 801b3e4:	21a0      	movs	r1, #160	@ 0xa0
 801b3e6:	187a      	adds	r2, r7, r1
 801b3e8:	6013      	str	r3, [r2, #0]
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	691b      	ldr	r3, [r3, #16]
 801b3ee:	b29a      	uxth	r2, r3
 801b3f0:	187b      	adds	r3, r7, r1
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	69db      	ldr	r3, [r3, #28]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d100      	bne.n	801b400 <USB_EPStartXfer+0xe88>
 801b3fe:	e1c2      	b.n	801b786 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	683b      	ldr	r3, [r7, #0]
 801b404:	781b      	ldrb	r3, [r3, #0]
 801b406:	009b      	lsls	r3, r3, #2
 801b408:	18d2      	adds	r2, r2, r3
 801b40a:	2196      	movs	r1, #150	@ 0x96
 801b40c:	187b      	adds	r3, r7, r1
 801b40e:	8812      	ldrh	r2, [r2, #0]
 801b410:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801b412:	187b      	adds	r3, r7, r1
 801b414:	881a      	ldrh	r2, [r3, #0]
 801b416:	2380      	movs	r3, #128	@ 0x80
 801b418:	01db      	lsls	r3, r3, #7
 801b41a:	4013      	ands	r3, r2
 801b41c:	d004      	beq.n	801b428 <USB_EPStartXfer+0xeb0>
 801b41e:	187b      	adds	r3, r7, r1
 801b420:	881b      	ldrh	r3, [r3, #0]
 801b422:	2240      	movs	r2, #64	@ 0x40
 801b424:	4013      	ands	r3, r2
 801b426:	d10d      	bne.n	801b444 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801b428:	2196      	movs	r1, #150	@ 0x96
 801b42a:	187b      	adds	r3, r7, r1
 801b42c:	881a      	ldrh	r2, [r3, #0]
 801b42e:	2380      	movs	r3, #128	@ 0x80
 801b430:	01db      	lsls	r3, r3, #7
 801b432:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801b434:	d000      	beq.n	801b438 <USB_EPStartXfer+0xec0>
 801b436:	e1a6      	b.n	801b786 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801b438:	187b      	adds	r3, r7, r1
 801b43a:	881b      	ldrh	r3, [r3, #0]
 801b43c:	2240      	movs	r2, #64	@ 0x40
 801b43e:	4013      	ands	r3, r2
 801b440:	d000      	beq.n	801b444 <USB_EPStartXfer+0xecc>
 801b442:	e1a0      	b.n	801b786 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801b444:	687a      	ldr	r2, [r7, #4]
 801b446:	683b      	ldr	r3, [r7, #0]
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	18d3      	adds	r3, r2, r3
 801b44e:	881b      	ldrh	r3, [r3, #0]
 801b450:	b29a      	uxth	r2, r3
 801b452:	2094      	movs	r0, #148	@ 0x94
 801b454:	183b      	adds	r3, r7, r0
 801b456:	49b5      	ldr	r1, [pc, #724]	@ (801b72c <USB_EPStartXfer+0x11b4>)
 801b458:	400a      	ands	r2, r1
 801b45a:	801a      	strh	r2, [r3, #0]
 801b45c:	687a      	ldr	r2, [r7, #4]
 801b45e:	683b      	ldr	r3, [r7, #0]
 801b460:	781b      	ldrb	r3, [r3, #0]
 801b462:	009b      	lsls	r3, r3, #2
 801b464:	18d3      	adds	r3, r2, r3
 801b466:	183a      	adds	r2, r7, r0
 801b468:	8812      	ldrh	r2, [r2, #0]
 801b46a:	49b1      	ldr	r1, [pc, #708]	@ (801b730 <USB_EPStartXfer+0x11b8>)
 801b46c:	430a      	orrs	r2, r1
 801b46e:	b292      	uxth	r2, r2
 801b470:	801a      	strh	r2, [r3, #0]
 801b472:	e188      	b.n	801b786 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801b474:	683b      	ldr	r3, [r7, #0]
 801b476:	78db      	ldrb	r3, [r3, #3]
 801b478:	2b01      	cmp	r3, #1
 801b47a:	d000      	beq.n	801b47e <USB_EPStartXfer+0xf06>
 801b47c:	e181      	b.n	801b782 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801b47e:	683b      	ldr	r3, [r7, #0]
 801b480:	699a      	ldr	r2, [r3, #24]
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	691b      	ldr	r3, [r3, #16]
 801b486:	429a      	cmp	r2, r3
 801b488:	d90d      	bls.n	801b4a6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801b48a:	683b      	ldr	r3, [r7, #0]
 801b48c:	691b      	ldr	r3, [r3, #16]
 801b48e:	1d7a      	adds	r2, r7, #5
 801b490:	32ff      	adds	r2, #255	@ 0xff
 801b492:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801b494:	683b      	ldr	r3, [r7, #0]
 801b496:	699a      	ldr	r2, [r3, #24]
 801b498:	1d7b      	adds	r3, r7, #5
 801b49a:	33ff      	adds	r3, #255	@ 0xff
 801b49c:	681b      	ldr	r3, [r3, #0]
 801b49e:	1ad2      	subs	r2, r2, r3
 801b4a0:	683b      	ldr	r3, [r7, #0]
 801b4a2:	619a      	str	r2, [r3, #24]
 801b4a4:	e007      	b.n	801b4b6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	699b      	ldr	r3, [r3, #24]
 801b4aa:	1d7a      	adds	r2, r7, #5
 801b4ac:	32ff      	adds	r2, #255	@ 0xff
 801b4ae:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801b4b0:	683b      	ldr	r3, [r7, #0]
 801b4b2:	2200      	movs	r2, #0
 801b4b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801b4b6:	683b      	ldr	r3, [r7, #0]
 801b4b8:	785b      	ldrb	r3, [r3, #1]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d000      	beq.n	801b4c0 <USB_EPStartXfer+0xf48>
 801b4be:	e082      	b.n	801b5c6 <USB_EPStartXfer+0x104e>
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	21cc      	movs	r1, #204	@ 0xcc
 801b4c4:	187a      	adds	r2, r7, r1
 801b4c6:	6013      	str	r3, [r2, #0]
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2250      	movs	r2, #80	@ 0x50
 801b4cc:	5a9b      	ldrh	r3, [r3, r2]
 801b4ce:	b29b      	uxth	r3, r3
 801b4d0:	001a      	movs	r2, r3
 801b4d2:	187b      	adds	r3, r7, r1
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	189b      	adds	r3, r3, r2
 801b4d8:	187a      	adds	r2, r7, r1
 801b4da:	6013      	str	r3, [r2, #0]
 801b4dc:	683b      	ldr	r3, [r7, #0]
 801b4de:	781b      	ldrb	r3, [r3, #0]
 801b4e0:	00da      	lsls	r2, r3, #3
 801b4e2:	187b      	adds	r3, r7, r1
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	18d3      	adds	r3, r2, r3
 801b4e8:	4a92      	ldr	r2, [pc, #584]	@ (801b734 <USB_EPStartXfer+0x11bc>)
 801b4ea:	4694      	mov	ip, r2
 801b4ec:	4463      	add	r3, ip
 801b4ee:	21c8      	movs	r1, #200	@ 0xc8
 801b4f0:	187a      	adds	r2, r7, r1
 801b4f2:	6013      	str	r3, [r2, #0]
 801b4f4:	187b      	adds	r3, r7, r1
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	881b      	ldrh	r3, [r3, #0]
 801b4fa:	b29b      	uxth	r3, r3
 801b4fc:	059b      	lsls	r3, r3, #22
 801b4fe:	0d9b      	lsrs	r3, r3, #22
 801b500:	b29a      	uxth	r2, r3
 801b502:	187b      	adds	r3, r7, r1
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	801a      	strh	r2, [r3, #0]
 801b508:	1d7b      	adds	r3, r7, #5
 801b50a:	33ff      	adds	r3, #255	@ 0xff
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	2b3e      	cmp	r3, #62	@ 0x3e
 801b510:	d925      	bls.n	801b55e <USB_EPStartXfer+0xfe6>
 801b512:	1d7b      	adds	r3, r7, #5
 801b514:	33ff      	adds	r3, #255	@ 0xff
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	095b      	lsrs	r3, r3, #5
 801b51a:	21dc      	movs	r1, #220	@ 0xdc
 801b51c:	187a      	adds	r2, r7, r1
 801b51e:	6013      	str	r3, [r2, #0]
 801b520:	1d7b      	adds	r3, r7, #5
 801b522:	33ff      	adds	r3, #255	@ 0xff
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	221f      	movs	r2, #31
 801b528:	4013      	ands	r3, r2
 801b52a:	d104      	bne.n	801b536 <USB_EPStartXfer+0xfbe>
 801b52c:	187b      	adds	r3, r7, r1
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	3b01      	subs	r3, #1
 801b532:	187a      	adds	r2, r7, r1
 801b534:	6013      	str	r3, [r2, #0]
 801b536:	21c8      	movs	r1, #200	@ 0xc8
 801b538:	187b      	adds	r3, r7, r1
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	881b      	ldrh	r3, [r3, #0]
 801b53e:	b29a      	uxth	r2, r3
 801b540:	23dc      	movs	r3, #220	@ 0xdc
 801b542:	18fb      	adds	r3, r7, r3
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	b29b      	uxth	r3, r3
 801b548:	029b      	lsls	r3, r3, #10
 801b54a:	b29b      	uxth	r3, r3
 801b54c:	4313      	orrs	r3, r2
 801b54e:	b29b      	uxth	r3, r3
 801b550:	4a79      	ldr	r2, [pc, #484]	@ (801b738 <USB_EPStartXfer+0x11c0>)
 801b552:	4313      	orrs	r3, r2
 801b554:	b29a      	uxth	r2, r3
 801b556:	187b      	adds	r3, r7, r1
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	801a      	strh	r2, [r3, #0]
 801b55c:	e058      	b.n	801b610 <USB_EPStartXfer+0x1098>
 801b55e:	1d7b      	adds	r3, r7, #5
 801b560:	33ff      	adds	r3, #255	@ 0xff
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d10b      	bne.n	801b580 <USB_EPStartXfer+0x1008>
 801b568:	21c8      	movs	r1, #200	@ 0xc8
 801b56a:	187b      	adds	r3, r7, r1
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	881b      	ldrh	r3, [r3, #0]
 801b570:	b29b      	uxth	r3, r3
 801b572:	4a71      	ldr	r2, [pc, #452]	@ (801b738 <USB_EPStartXfer+0x11c0>)
 801b574:	4313      	orrs	r3, r2
 801b576:	b29a      	uxth	r2, r3
 801b578:	187b      	adds	r3, r7, r1
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	801a      	strh	r2, [r3, #0]
 801b57e:	e047      	b.n	801b610 <USB_EPStartXfer+0x1098>
 801b580:	1d7b      	adds	r3, r7, #5
 801b582:	33ff      	adds	r3, #255	@ 0xff
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	085b      	lsrs	r3, r3, #1
 801b588:	21dc      	movs	r1, #220	@ 0xdc
 801b58a:	187a      	adds	r2, r7, r1
 801b58c:	6013      	str	r3, [r2, #0]
 801b58e:	1d7b      	adds	r3, r7, #5
 801b590:	33ff      	adds	r3, #255	@ 0xff
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	2201      	movs	r2, #1
 801b596:	4013      	ands	r3, r2
 801b598:	d004      	beq.n	801b5a4 <USB_EPStartXfer+0x102c>
 801b59a:	187b      	adds	r3, r7, r1
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	3301      	adds	r3, #1
 801b5a0:	187a      	adds	r2, r7, r1
 801b5a2:	6013      	str	r3, [r2, #0]
 801b5a4:	21c8      	movs	r1, #200	@ 0xc8
 801b5a6:	187b      	adds	r3, r7, r1
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	881b      	ldrh	r3, [r3, #0]
 801b5ac:	b29a      	uxth	r2, r3
 801b5ae:	23dc      	movs	r3, #220	@ 0xdc
 801b5b0:	18fb      	adds	r3, r7, r3
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	029b      	lsls	r3, r3, #10
 801b5b8:	b29b      	uxth	r3, r3
 801b5ba:	4313      	orrs	r3, r2
 801b5bc:	b29a      	uxth	r2, r3
 801b5be:	187b      	adds	r3, r7, r1
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	801a      	strh	r2, [r3, #0]
 801b5c4:	e024      	b.n	801b610 <USB_EPStartXfer+0x1098>
 801b5c6:	683b      	ldr	r3, [r7, #0]
 801b5c8:	785b      	ldrb	r3, [r3, #1]
 801b5ca:	2b01      	cmp	r3, #1
 801b5cc:	d120      	bne.n	801b610 <USB_EPStartXfer+0x1098>
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	21d4      	movs	r1, #212	@ 0xd4
 801b5d2:	187a      	adds	r2, r7, r1
 801b5d4:	6013      	str	r3, [r2, #0]
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	2250      	movs	r2, #80	@ 0x50
 801b5da:	5a9b      	ldrh	r3, [r3, r2]
 801b5dc:	b29b      	uxth	r3, r3
 801b5de:	001a      	movs	r2, r3
 801b5e0:	187b      	adds	r3, r7, r1
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	189b      	adds	r3, r3, r2
 801b5e6:	187a      	adds	r2, r7, r1
 801b5e8:	6013      	str	r3, [r2, #0]
 801b5ea:	683b      	ldr	r3, [r7, #0]
 801b5ec:	781b      	ldrb	r3, [r3, #0]
 801b5ee:	00da      	lsls	r2, r3, #3
 801b5f0:	187b      	adds	r3, r7, r1
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	18d3      	adds	r3, r2, r3
 801b5f6:	4a4f      	ldr	r2, [pc, #316]	@ (801b734 <USB_EPStartXfer+0x11bc>)
 801b5f8:	4694      	mov	ip, r2
 801b5fa:	4463      	add	r3, ip
 801b5fc:	21d0      	movs	r1, #208	@ 0xd0
 801b5fe:	187a      	adds	r2, r7, r1
 801b600:	6013      	str	r3, [r2, #0]
 801b602:	1d7b      	adds	r3, r7, #5
 801b604:	33ff      	adds	r3, #255	@ 0xff
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	b29a      	uxth	r2, r3
 801b60a:	187b      	adds	r3, r7, r1
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	801a      	strh	r2, [r3, #0]
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	22c4      	movs	r2, #196	@ 0xc4
 801b614:	18ba      	adds	r2, r7, r2
 801b616:	6013      	str	r3, [r2, #0]
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	785b      	ldrb	r3, [r3, #1]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d000      	beq.n	801b622 <USB_EPStartXfer+0x10aa>
 801b620:	e08c      	b.n	801b73c <USB_EPStartXfer+0x11c4>
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	21bc      	movs	r1, #188	@ 0xbc
 801b626:	187a      	adds	r2, r7, r1
 801b628:	6013      	str	r3, [r2, #0]
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	2250      	movs	r2, #80	@ 0x50
 801b62e:	5a9b      	ldrh	r3, [r3, r2]
 801b630:	b29b      	uxth	r3, r3
 801b632:	001a      	movs	r2, r3
 801b634:	187b      	adds	r3, r7, r1
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	189b      	adds	r3, r3, r2
 801b63a:	187a      	adds	r2, r7, r1
 801b63c:	6013      	str	r3, [r2, #0]
 801b63e:	683b      	ldr	r3, [r7, #0]
 801b640:	781b      	ldrb	r3, [r3, #0]
 801b642:	00da      	lsls	r2, r3, #3
 801b644:	187b      	adds	r3, r7, r1
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	18d3      	adds	r3, r2, r3
 801b64a:	4a37      	ldr	r2, [pc, #220]	@ (801b728 <USB_EPStartXfer+0x11b0>)
 801b64c:	4694      	mov	ip, r2
 801b64e:	4463      	add	r3, ip
 801b650:	21b8      	movs	r1, #184	@ 0xb8
 801b652:	187a      	adds	r2, r7, r1
 801b654:	6013      	str	r3, [r2, #0]
 801b656:	187b      	adds	r3, r7, r1
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	881b      	ldrh	r3, [r3, #0]
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	059b      	lsls	r3, r3, #22
 801b660:	0d9b      	lsrs	r3, r3, #22
 801b662:	b29a      	uxth	r2, r3
 801b664:	187b      	adds	r3, r7, r1
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	801a      	strh	r2, [r3, #0]
 801b66a:	1d7b      	adds	r3, r7, #5
 801b66c:	33ff      	adds	r3, #255	@ 0xff
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	2b3e      	cmp	r3, #62	@ 0x3e
 801b672:	d925      	bls.n	801b6c0 <USB_EPStartXfer+0x1148>
 801b674:	1d7b      	adds	r3, r7, #5
 801b676:	33ff      	adds	r3, #255	@ 0xff
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	095b      	lsrs	r3, r3, #5
 801b67c:	21d8      	movs	r1, #216	@ 0xd8
 801b67e:	187a      	adds	r2, r7, r1
 801b680:	6013      	str	r3, [r2, #0]
 801b682:	1d7b      	adds	r3, r7, #5
 801b684:	33ff      	adds	r3, #255	@ 0xff
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	221f      	movs	r2, #31
 801b68a:	4013      	ands	r3, r2
 801b68c:	d104      	bne.n	801b698 <USB_EPStartXfer+0x1120>
 801b68e:	187b      	adds	r3, r7, r1
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	3b01      	subs	r3, #1
 801b694:	187a      	adds	r2, r7, r1
 801b696:	6013      	str	r3, [r2, #0]
 801b698:	21b8      	movs	r1, #184	@ 0xb8
 801b69a:	187b      	adds	r3, r7, r1
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	881b      	ldrh	r3, [r3, #0]
 801b6a0:	b29a      	uxth	r2, r3
 801b6a2:	23d8      	movs	r3, #216	@ 0xd8
 801b6a4:	18fb      	adds	r3, r7, r3
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	029b      	lsls	r3, r3, #10
 801b6ac:	b29b      	uxth	r3, r3
 801b6ae:	4313      	orrs	r3, r2
 801b6b0:	b29b      	uxth	r3, r3
 801b6b2:	4a21      	ldr	r2, [pc, #132]	@ (801b738 <USB_EPStartXfer+0x11c0>)
 801b6b4:	4313      	orrs	r3, r2
 801b6b6:	b29a      	uxth	r2, r3
 801b6b8:	187b      	adds	r3, r7, r1
 801b6ba:	681b      	ldr	r3, [r3, #0]
 801b6bc:	801a      	strh	r2, [r3, #0]
 801b6be:	e062      	b.n	801b786 <USB_EPStartXfer+0x120e>
 801b6c0:	1d7b      	adds	r3, r7, #5
 801b6c2:	33ff      	adds	r3, #255	@ 0xff
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d10b      	bne.n	801b6e2 <USB_EPStartXfer+0x116a>
 801b6ca:	21b8      	movs	r1, #184	@ 0xb8
 801b6cc:	187b      	adds	r3, r7, r1
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	881b      	ldrh	r3, [r3, #0]
 801b6d2:	b29b      	uxth	r3, r3
 801b6d4:	4a18      	ldr	r2, [pc, #96]	@ (801b738 <USB_EPStartXfer+0x11c0>)
 801b6d6:	4313      	orrs	r3, r2
 801b6d8:	b29a      	uxth	r2, r3
 801b6da:	187b      	adds	r3, r7, r1
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	801a      	strh	r2, [r3, #0]
 801b6e0:	e051      	b.n	801b786 <USB_EPStartXfer+0x120e>
 801b6e2:	1d7b      	adds	r3, r7, #5
 801b6e4:	33ff      	adds	r3, #255	@ 0xff
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	085b      	lsrs	r3, r3, #1
 801b6ea:	21d8      	movs	r1, #216	@ 0xd8
 801b6ec:	187a      	adds	r2, r7, r1
 801b6ee:	6013      	str	r3, [r2, #0]
 801b6f0:	1d7b      	adds	r3, r7, #5
 801b6f2:	33ff      	adds	r3, #255	@ 0xff
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	2201      	movs	r2, #1
 801b6f8:	4013      	ands	r3, r2
 801b6fa:	d004      	beq.n	801b706 <USB_EPStartXfer+0x118e>
 801b6fc:	187b      	adds	r3, r7, r1
 801b6fe:	681b      	ldr	r3, [r3, #0]
 801b700:	3301      	adds	r3, #1
 801b702:	187a      	adds	r2, r7, r1
 801b704:	6013      	str	r3, [r2, #0]
 801b706:	21b8      	movs	r1, #184	@ 0xb8
 801b708:	187b      	adds	r3, r7, r1
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	881b      	ldrh	r3, [r3, #0]
 801b70e:	b29a      	uxth	r2, r3
 801b710:	23d8      	movs	r3, #216	@ 0xd8
 801b712:	18fb      	adds	r3, r7, r3
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	b29b      	uxth	r3, r3
 801b718:	029b      	lsls	r3, r3, #10
 801b71a:	b29b      	uxth	r3, r3
 801b71c:	4313      	orrs	r3, r2
 801b71e:	b29a      	uxth	r2, r3
 801b720:	187b      	adds	r3, r7, r1
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	801a      	strh	r2, [r3, #0]
 801b726:	e02e      	b.n	801b786 <USB_EPStartXfer+0x120e>
 801b728:	00000406 	.word	0x00000406
 801b72c:	ffff8f8f 	.word	0xffff8f8f
 801b730:	ffff80c0 	.word	0xffff80c0
 801b734:	00000402 	.word	0x00000402
 801b738:	ffff8000 	.word	0xffff8000
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	785b      	ldrb	r3, [r3, #1]
 801b740:	2b01      	cmp	r3, #1
 801b742:	d120      	bne.n	801b786 <USB_EPStartXfer+0x120e>
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	2250      	movs	r2, #80	@ 0x50
 801b748:	5a9b      	ldrh	r3, [r3, r2]
 801b74a:	b29b      	uxth	r3, r3
 801b74c:	001a      	movs	r2, r3
 801b74e:	21c4      	movs	r1, #196	@ 0xc4
 801b750:	187b      	adds	r3, r7, r1
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	189b      	adds	r3, r3, r2
 801b756:	187a      	adds	r2, r7, r1
 801b758:	6013      	str	r3, [r2, #0]
 801b75a:	683b      	ldr	r3, [r7, #0]
 801b75c:	781b      	ldrb	r3, [r3, #0]
 801b75e:	00da      	lsls	r2, r3, #3
 801b760:	187b      	adds	r3, r7, r1
 801b762:	681b      	ldr	r3, [r3, #0]
 801b764:	18d3      	adds	r3, r2, r3
 801b766:	4a1d      	ldr	r2, [pc, #116]	@ (801b7dc <USB_EPStartXfer+0x1264>)
 801b768:	4694      	mov	ip, r2
 801b76a:	4463      	add	r3, ip
 801b76c:	21c0      	movs	r1, #192	@ 0xc0
 801b76e:	187a      	adds	r2, r7, r1
 801b770:	6013      	str	r3, [r2, #0]
 801b772:	1d7b      	adds	r3, r7, #5
 801b774:	33ff      	adds	r3, #255	@ 0xff
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	b29a      	uxth	r2, r3
 801b77a:	187b      	adds	r3, r7, r1
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	801a      	strh	r2, [r3, #0]
 801b780:	e001      	b.n	801b786 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801b782:	2301      	movs	r3, #1
 801b784:	e025      	b.n	801b7d2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b786:	687a      	ldr	r2, [r7, #4]
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	781b      	ldrb	r3, [r3, #0]
 801b78c:	009b      	lsls	r3, r3, #2
 801b78e:	18d3      	adds	r3, r2, r3
 801b790:	881b      	ldrh	r3, [r3, #0]
 801b792:	b29a      	uxth	r2, r3
 801b794:	208a      	movs	r0, #138	@ 0x8a
 801b796:	183b      	adds	r3, r7, r0
 801b798:	4911      	ldr	r1, [pc, #68]	@ (801b7e0 <USB_EPStartXfer+0x1268>)
 801b79a:	400a      	ands	r2, r1
 801b79c:	801a      	strh	r2, [r3, #0]
 801b79e:	183b      	adds	r3, r7, r0
 801b7a0:	183a      	adds	r2, r7, r0
 801b7a2:	8812      	ldrh	r2, [r2, #0]
 801b7a4:	2180      	movs	r1, #128	@ 0x80
 801b7a6:	0149      	lsls	r1, r1, #5
 801b7a8:	404a      	eors	r2, r1
 801b7aa:	801a      	strh	r2, [r3, #0]
 801b7ac:	183b      	adds	r3, r7, r0
 801b7ae:	183a      	adds	r2, r7, r0
 801b7b0:	8812      	ldrh	r2, [r2, #0]
 801b7b2:	2180      	movs	r1, #128	@ 0x80
 801b7b4:	0189      	lsls	r1, r1, #6
 801b7b6:	404a      	eors	r2, r1
 801b7b8:	801a      	strh	r2, [r3, #0]
 801b7ba:	687a      	ldr	r2, [r7, #4]
 801b7bc:	683b      	ldr	r3, [r7, #0]
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	009b      	lsls	r3, r3, #2
 801b7c2:	18d3      	adds	r3, r2, r3
 801b7c4:	183a      	adds	r2, r7, r0
 801b7c6:	8812      	ldrh	r2, [r2, #0]
 801b7c8:	4906      	ldr	r1, [pc, #24]	@ (801b7e4 <USB_EPStartXfer+0x126c>)
 801b7ca:	430a      	orrs	r2, r1
 801b7cc:	b292      	uxth	r2, r2
 801b7ce:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b7d0:	2300      	movs	r3, #0
}
 801b7d2:	0018      	movs	r0, r3
 801b7d4:	46bd      	mov	sp, r7
 801b7d6:	b043      	add	sp, #268	@ 0x10c
 801b7d8:	bd90      	pop	{r4, r7, pc}
 801b7da:	46c0      	nop			@ (mov r8, r8)
 801b7dc:	00000406 	.word	0x00000406
 801b7e0:	ffffbf8f 	.word	0xffffbf8f
 801b7e4:	ffff8080 	.word	0xffff8080

0801b7e8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b084      	sub	sp, #16
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
 801b7f0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801b7f2:	683b      	ldr	r3, [r7, #0]
 801b7f4:	785b      	ldrb	r3, [r3, #1]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d01d      	beq.n	801b836 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801b7fa:	687a      	ldr	r2, [r7, #4]
 801b7fc:	683b      	ldr	r3, [r7, #0]
 801b7fe:	781b      	ldrb	r3, [r3, #0]
 801b800:	009b      	lsls	r3, r3, #2
 801b802:	18d3      	adds	r3, r2, r3
 801b804:	881b      	ldrh	r3, [r3, #0]
 801b806:	b29a      	uxth	r2, r3
 801b808:	200c      	movs	r0, #12
 801b80a:	183b      	adds	r3, r7, r0
 801b80c:	491b      	ldr	r1, [pc, #108]	@ (801b87c <USB_EPSetStall+0x94>)
 801b80e:	400a      	ands	r2, r1
 801b810:	801a      	strh	r2, [r3, #0]
 801b812:	183b      	adds	r3, r7, r0
 801b814:	183a      	adds	r2, r7, r0
 801b816:	8812      	ldrh	r2, [r2, #0]
 801b818:	2110      	movs	r1, #16
 801b81a:	404a      	eors	r2, r1
 801b81c:	801a      	strh	r2, [r3, #0]
 801b81e:	687a      	ldr	r2, [r7, #4]
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	781b      	ldrb	r3, [r3, #0]
 801b824:	009b      	lsls	r3, r3, #2
 801b826:	18d3      	adds	r3, r2, r3
 801b828:	183a      	adds	r2, r7, r0
 801b82a:	8812      	ldrh	r2, [r2, #0]
 801b82c:	4914      	ldr	r1, [pc, #80]	@ (801b880 <USB_EPSetStall+0x98>)
 801b82e:	430a      	orrs	r2, r1
 801b830:	b292      	uxth	r2, r2
 801b832:	801a      	strh	r2, [r3, #0]
 801b834:	e01d      	b.n	801b872 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801b836:	687a      	ldr	r2, [r7, #4]
 801b838:	683b      	ldr	r3, [r7, #0]
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	009b      	lsls	r3, r3, #2
 801b83e:	18d3      	adds	r3, r2, r3
 801b840:	881b      	ldrh	r3, [r3, #0]
 801b842:	b29a      	uxth	r2, r3
 801b844:	200e      	movs	r0, #14
 801b846:	183b      	adds	r3, r7, r0
 801b848:	490e      	ldr	r1, [pc, #56]	@ (801b884 <USB_EPSetStall+0x9c>)
 801b84a:	400a      	ands	r2, r1
 801b84c:	801a      	strh	r2, [r3, #0]
 801b84e:	183b      	adds	r3, r7, r0
 801b850:	183a      	adds	r2, r7, r0
 801b852:	8812      	ldrh	r2, [r2, #0]
 801b854:	2180      	movs	r1, #128	@ 0x80
 801b856:	0149      	lsls	r1, r1, #5
 801b858:	404a      	eors	r2, r1
 801b85a:	801a      	strh	r2, [r3, #0]
 801b85c:	687a      	ldr	r2, [r7, #4]
 801b85e:	683b      	ldr	r3, [r7, #0]
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	009b      	lsls	r3, r3, #2
 801b864:	18d3      	adds	r3, r2, r3
 801b866:	183a      	adds	r2, r7, r0
 801b868:	8812      	ldrh	r2, [r2, #0]
 801b86a:	4905      	ldr	r1, [pc, #20]	@ (801b880 <USB_EPSetStall+0x98>)
 801b86c:	430a      	orrs	r2, r1
 801b86e:	b292      	uxth	r2, r2
 801b870:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b872:	2300      	movs	r3, #0
}
 801b874:	0018      	movs	r0, r3
 801b876:	46bd      	mov	sp, r7
 801b878:	b004      	add	sp, #16
 801b87a:	bd80      	pop	{r7, pc}
 801b87c:	ffff8fbf 	.word	0xffff8fbf
 801b880:	ffff8080 	.word	0xffff8080
 801b884:	ffffbf8f 	.word	0xffffbf8f

0801b888 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b888:	b580      	push	{r7, lr}
 801b88a:	b086      	sub	sp, #24
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
 801b890:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801b892:	683b      	ldr	r3, [r7, #0]
 801b894:	7b1b      	ldrb	r3, [r3, #12]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d000      	beq.n	801b89c <USB_EPClearStall+0x14>
 801b89a:	e095      	b.n	801b9c8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801b89c:	683b      	ldr	r3, [r7, #0]
 801b89e:	785b      	ldrb	r3, [r3, #1]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d046      	beq.n	801b932 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b8a4:	687a      	ldr	r2, [r7, #4]
 801b8a6:	683b      	ldr	r3, [r7, #0]
 801b8a8:	781b      	ldrb	r3, [r3, #0]
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	18d2      	adds	r2, r2, r3
 801b8ae:	2110      	movs	r1, #16
 801b8b0:	187b      	adds	r3, r7, r1
 801b8b2:	8812      	ldrh	r2, [r2, #0]
 801b8b4:	801a      	strh	r2, [r3, #0]
 801b8b6:	187b      	adds	r3, r7, r1
 801b8b8:	881b      	ldrh	r3, [r3, #0]
 801b8ba:	2240      	movs	r2, #64	@ 0x40
 801b8bc:	4013      	ands	r3, r2
 801b8be:	d016      	beq.n	801b8ee <USB_EPClearStall+0x66>
 801b8c0:	687a      	ldr	r2, [r7, #4]
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	781b      	ldrb	r3, [r3, #0]
 801b8c6:	009b      	lsls	r3, r3, #2
 801b8c8:	18d3      	adds	r3, r2, r3
 801b8ca:	881b      	ldrh	r3, [r3, #0]
 801b8cc:	b29a      	uxth	r2, r3
 801b8ce:	200e      	movs	r0, #14
 801b8d0:	183b      	adds	r3, r7, r0
 801b8d2:	4940      	ldr	r1, [pc, #256]	@ (801b9d4 <USB_EPClearStall+0x14c>)
 801b8d4:	400a      	ands	r2, r1
 801b8d6:	801a      	strh	r2, [r3, #0]
 801b8d8:	687a      	ldr	r2, [r7, #4]
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	009b      	lsls	r3, r3, #2
 801b8e0:	18d3      	adds	r3, r2, r3
 801b8e2:	183a      	adds	r2, r7, r0
 801b8e4:	8812      	ldrh	r2, [r2, #0]
 801b8e6:	493c      	ldr	r1, [pc, #240]	@ (801b9d8 <USB_EPClearStall+0x150>)
 801b8e8:	430a      	orrs	r2, r1
 801b8ea:	b292      	uxth	r2, r2
 801b8ec:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b8ee:	683b      	ldr	r3, [r7, #0]
 801b8f0:	78db      	ldrb	r3, [r3, #3]
 801b8f2:	2b01      	cmp	r3, #1
 801b8f4:	d068      	beq.n	801b9c8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b8f6:	687a      	ldr	r2, [r7, #4]
 801b8f8:	683b      	ldr	r3, [r7, #0]
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	009b      	lsls	r3, r3, #2
 801b8fe:	18d3      	adds	r3, r2, r3
 801b900:	881b      	ldrh	r3, [r3, #0]
 801b902:	b29a      	uxth	r2, r3
 801b904:	200c      	movs	r0, #12
 801b906:	183b      	adds	r3, r7, r0
 801b908:	4934      	ldr	r1, [pc, #208]	@ (801b9dc <USB_EPClearStall+0x154>)
 801b90a:	400a      	ands	r2, r1
 801b90c:	801a      	strh	r2, [r3, #0]
 801b90e:	183b      	adds	r3, r7, r0
 801b910:	183a      	adds	r2, r7, r0
 801b912:	8812      	ldrh	r2, [r2, #0]
 801b914:	2120      	movs	r1, #32
 801b916:	404a      	eors	r2, r1
 801b918:	801a      	strh	r2, [r3, #0]
 801b91a:	687a      	ldr	r2, [r7, #4]
 801b91c:	683b      	ldr	r3, [r7, #0]
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	009b      	lsls	r3, r3, #2
 801b922:	18d3      	adds	r3, r2, r3
 801b924:	183a      	adds	r2, r7, r0
 801b926:	8812      	ldrh	r2, [r2, #0]
 801b928:	492d      	ldr	r1, [pc, #180]	@ (801b9e0 <USB_EPClearStall+0x158>)
 801b92a:	430a      	orrs	r2, r1
 801b92c:	b292      	uxth	r2, r2
 801b92e:	801a      	strh	r2, [r3, #0]
 801b930:	e04a      	b.n	801b9c8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b932:	687a      	ldr	r2, [r7, #4]
 801b934:	683b      	ldr	r3, [r7, #0]
 801b936:	781b      	ldrb	r3, [r3, #0]
 801b938:	009b      	lsls	r3, r3, #2
 801b93a:	18d2      	adds	r2, r2, r3
 801b93c:	2116      	movs	r1, #22
 801b93e:	187b      	adds	r3, r7, r1
 801b940:	8812      	ldrh	r2, [r2, #0]
 801b942:	801a      	strh	r2, [r3, #0]
 801b944:	187b      	adds	r3, r7, r1
 801b946:	881a      	ldrh	r2, [r3, #0]
 801b948:	2380      	movs	r3, #128	@ 0x80
 801b94a:	01db      	lsls	r3, r3, #7
 801b94c:	4013      	ands	r3, r2
 801b94e:	d016      	beq.n	801b97e <USB_EPClearStall+0xf6>
 801b950:	687a      	ldr	r2, [r7, #4]
 801b952:	683b      	ldr	r3, [r7, #0]
 801b954:	781b      	ldrb	r3, [r3, #0]
 801b956:	009b      	lsls	r3, r3, #2
 801b958:	18d3      	adds	r3, r2, r3
 801b95a:	881b      	ldrh	r3, [r3, #0]
 801b95c:	b29a      	uxth	r2, r3
 801b95e:	2014      	movs	r0, #20
 801b960:	183b      	adds	r3, r7, r0
 801b962:	491c      	ldr	r1, [pc, #112]	@ (801b9d4 <USB_EPClearStall+0x14c>)
 801b964:	400a      	ands	r2, r1
 801b966:	801a      	strh	r2, [r3, #0]
 801b968:	687a      	ldr	r2, [r7, #4]
 801b96a:	683b      	ldr	r3, [r7, #0]
 801b96c:	781b      	ldrb	r3, [r3, #0]
 801b96e:	009b      	lsls	r3, r3, #2
 801b970:	18d3      	adds	r3, r2, r3
 801b972:	183a      	adds	r2, r7, r0
 801b974:	8812      	ldrh	r2, [r2, #0]
 801b976:	491b      	ldr	r1, [pc, #108]	@ (801b9e4 <USB_EPClearStall+0x15c>)
 801b978:	430a      	orrs	r2, r1
 801b97a:	b292      	uxth	r2, r2
 801b97c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b97e:	687a      	ldr	r2, [r7, #4]
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	781b      	ldrb	r3, [r3, #0]
 801b984:	009b      	lsls	r3, r3, #2
 801b986:	18d3      	adds	r3, r2, r3
 801b988:	881b      	ldrh	r3, [r3, #0]
 801b98a:	b29a      	uxth	r2, r3
 801b98c:	2012      	movs	r0, #18
 801b98e:	183b      	adds	r3, r7, r0
 801b990:	4915      	ldr	r1, [pc, #84]	@ (801b9e8 <USB_EPClearStall+0x160>)
 801b992:	400a      	ands	r2, r1
 801b994:	801a      	strh	r2, [r3, #0]
 801b996:	183b      	adds	r3, r7, r0
 801b998:	183a      	adds	r2, r7, r0
 801b99a:	8812      	ldrh	r2, [r2, #0]
 801b99c:	2180      	movs	r1, #128	@ 0x80
 801b99e:	0149      	lsls	r1, r1, #5
 801b9a0:	404a      	eors	r2, r1
 801b9a2:	801a      	strh	r2, [r3, #0]
 801b9a4:	183b      	adds	r3, r7, r0
 801b9a6:	183a      	adds	r2, r7, r0
 801b9a8:	8812      	ldrh	r2, [r2, #0]
 801b9aa:	2180      	movs	r1, #128	@ 0x80
 801b9ac:	0189      	lsls	r1, r1, #6
 801b9ae:	404a      	eors	r2, r1
 801b9b0:	801a      	strh	r2, [r3, #0]
 801b9b2:	687a      	ldr	r2, [r7, #4]
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	009b      	lsls	r3, r3, #2
 801b9ba:	18d3      	adds	r3, r2, r3
 801b9bc:	183a      	adds	r2, r7, r0
 801b9be:	8812      	ldrh	r2, [r2, #0]
 801b9c0:	4907      	ldr	r1, [pc, #28]	@ (801b9e0 <USB_EPClearStall+0x158>)
 801b9c2:	430a      	orrs	r2, r1
 801b9c4:	b292      	uxth	r2, r2
 801b9c6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b9c8:	2300      	movs	r3, #0
}
 801b9ca:	0018      	movs	r0, r3
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	b006      	add	sp, #24
 801b9d0:	bd80      	pop	{r7, pc}
 801b9d2:	46c0      	nop			@ (mov r8, r8)
 801b9d4:	ffff8f8f 	.word	0xffff8f8f
 801b9d8:	ffff80c0 	.word	0xffff80c0
 801b9dc:	ffff8fbf 	.word	0xffff8fbf
 801b9e0:	ffff8080 	.word	0xffff8080
 801b9e4:	ffffc080 	.word	0xffffc080
 801b9e8:	ffffbf8f 	.word	0xffffbf8f

0801b9ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	b082      	sub	sp, #8
 801b9f0:	af00      	add	r7, sp, #0
 801b9f2:	6078      	str	r0, [r7, #4]
 801b9f4:	000a      	movs	r2, r1
 801b9f6:	1cfb      	adds	r3, r7, #3
 801b9f8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b9fa:	1cfb      	adds	r3, r7, #3
 801b9fc:	781b      	ldrb	r3, [r3, #0]
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d103      	bne.n	801ba0a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	224c      	movs	r2, #76	@ 0x4c
 801ba06:	2180      	movs	r1, #128	@ 0x80
 801ba08:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801ba0a:	2300      	movs	r3, #0
}
 801ba0c:	0018      	movs	r0, r3
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	b002      	add	sp, #8
 801ba12:	bd80      	pop	{r7, pc}

0801ba14 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b082      	sub	sp, #8
 801ba18:	af00      	add	r7, sp, #0
 801ba1a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	2258      	movs	r2, #88	@ 0x58
 801ba20:	5a9b      	ldrh	r3, [r3, r2]
 801ba22:	b29b      	uxth	r3, r3
 801ba24:	4a05      	ldr	r2, [pc, #20]	@ (801ba3c <USB_DevConnect+0x28>)
 801ba26:	4313      	orrs	r3, r2
 801ba28:	b299      	uxth	r1, r3
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	2258      	movs	r2, #88	@ 0x58
 801ba2e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801ba30:	2300      	movs	r3, #0
}
 801ba32:	0018      	movs	r0, r3
 801ba34:	46bd      	mov	sp, r7
 801ba36:	b002      	add	sp, #8
 801ba38:	bd80      	pop	{r7, pc}
 801ba3a:	46c0      	nop			@ (mov r8, r8)
 801ba3c:	ffff8000 	.word	0xffff8000

0801ba40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b084      	sub	sp, #16
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	2244      	movs	r2, #68	@ 0x44
 801ba4c:	5a9b      	ldrh	r3, [r3, r2]
 801ba4e:	b29b      	uxth	r3, r3
 801ba50:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801ba52:	68fb      	ldr	r3, [r7, #12]
}
 801ba54:	0018      	movs	r0, r3
 801ba56:	46bd      	mov	sp, r7
 801ba58:	b004      	add	sp, #16
 801ba5a:	bd80      	pop	{r7, pc}

0801ba5c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801ba5c:	b580      	push	{r7, lr}
 801ba5e:	b08a      	sub	sp, #40	@ 0x28
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	60f8      	str	r0, [r7, #12]
 801ba64:	60b9      	str	r1, [r7, #8]
 801ba66:	0019      	movs	r1, r3
 801ba68:	1dbb      	adds	r3, r7, #6
 801ba6a:	801a      	strh	r2, [r3, #0]
 801ba6c:	1d3b      	adds	r3, r7, #4
 801ba6e:	1c0a      	adds	r2, r1, #0
 801ba70:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801ba72:	1d3b      	adds	r3, r7, #4
 801ba74:	881b      	ldrh	r3, [r3, #0]
 801ba76:	3301      	adds	r3, #1
 801ba78:	085b      	lsrs	r3, r3, #1
 801ba7a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801ba84:	1dbb      	adds	r3, r7, #6
 801ba86:	881a      	ldrh	r2, [r3, #0]
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	18d3      	adds	r3, r2, r3
 801ba8c:	2280      	movs	r2, #128	@ 0x80
 801ba8e:	00d2      	lsls	r2, r2, #3
 801ba90:	4694      	mov	ip, r2
 801ba92:	4463      	add	r3, ip
 801ba94:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801ba96:	69bb      	ldr	r3, [r7, #24]
 801ba98:	627b      	str	r3, [r7, #36]	@ 0x24
 801ba9a:	e020      	b.n	801bade <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	781a      	ldrb	r2, [r3, #0]
 801baa0:	2112      	movs	r1, #18
 801baa2:	187b      	adds	r3, r7, r1
 801baa4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801baa6:	69fb      	ldr	r3, [r7, #28]
 801baa8:	3301      	adds	r3, #1
 801baaa:	781b      	ldrb	r3, [r3, #0]
 801baac:	021b      	lsls	r3, r3, #8
 801baae:	b21a      	sxth	r2, r3
 801bab0:	187b      	adds	r3, r7, r1
 801bab2:	2000      	movs	r0, #0
 801bab4:	5e1b      	ldrsh	r3, [r3, r0]
 801bab6:	4313      	orrs	r3, r2
 801bab8:	b21a      	sxth	r2, r3
 801baba:	187b      	adds	r3, r7, r1
 801babc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801babe:	6a3b      	ldr	r3, [r7, #32]
 801bac0:	187a      	adds	r2, r7, r1
 801bac2:	8812      	ldrh	r2, [r2, #0]
 801bac4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801bac6:	6a3b      	ldr	r3, [r7, #32]
 801bac8:	3302      	adds	r3, #2
 801baca:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801bacc:	69fb      	ldr	r3, [r7, #28]
 801bace:	3301      	adds	r3, #1
 801bad0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801bad2:	69fb      	ldr	r3, [r7, #28]
 801bad4:	3301      	adds	r3, #1
 801bad6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801bad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bada:	3b01      	subs	r3, #1
 801badc:	627b      	str	r3, [r7, #36]	@ 0x24
 801bade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d1db      	bne.n	801ba9c <USB_WritePMA+0x40>
  }
}
 801bae4:	46c0      	nop			@ (mov r8, r8)
 801bae6:	46c0      	nop			@ (mov r8, r8)
 801bae8:	46bd      	mov	sp, r7
 801baea:	b00a      	add	sp, #40	@ 0x28
 801baec:	bd80      	pop	{r7, pc}

0801baee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801baee:	b580      	push	{r7, lr}
 801baf0:	b08a      	sub	sp, #40	@ 0x28
 801baf2:	af00      	add	r7, sp, #0
 801baf4:	60f8      	str	r0, [r7, #12]
 801baf6:	60b9      	str	r1, [r7, #8]
 801baf8:	0019      	movs	r1, r3
 801bafa:	1dbb      	adds	r3, r7, #6
 801bafc:	801a      	strh	r2, [r3, #0]
 801bafe:	1d3b      	adds	r3, r7, #4
 801bb00:	1c0a      	adds	r2, r1, #0
 801bb02:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801bb04:	1d3b      	adds	r3, r7, #4
 801bb06:	881b      	ldrh	r3, [r3, #0]
 801bb08:	085b      	lsrs	r3, r3, #1
 801bb0a:	b29b      	uxth	r3, r3
 801bb0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801bb12:	68bb      	ldr	r3, [r7, #8]
 801bb14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801bb16:	1dbb      	adds	r3, r7, #6
 801bb18:	881a      	ldrh	r2, [r3, #0]
 801bb1a:	697b      	ldr	r3, [r7, #20]
 801bb1c:	18d3      	adds	r3, r2, r3
 801bb1e:	2280      	movs	r2, #128	@ 0x80
 801bb20:	00d2      	lsls	r2, r2, #3
 801bb22:	4694      	mov	ip, r2
 801bb24:	4463      	add	r3, ip
 801bb26:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801bb28:	69bb      	ldr	r3, [r7, #24]
 801bb2a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb2c:	e018      	b.n	801bb60 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801bb2e:	6a3b      	ldr	r3, [r7, #32]
 801bb30:	881b      	ldrh	r3, [r3, #0]
 801bb32:	b29b      	uxth	r3, r3
 801bb34:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801bb36:	6a3b      	ldr	r3, [r7, #32]
 801bb38:	3302      	adds	r3, #2
 801bb3a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801bb3c:	693b      	ldr	r3, [r7, #16]
 801bb3e:	b2da      	uxtb	r2, r3
 801bb40:	69fb      	ldr	r3, [r7, #28]
 801bb42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801bb44:	69fb      	ldr	r3, [r7, #28]
 801bb46:	3301      	adds	r3, #1
 801bb48:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801bb4a:	693b      	ldr	r3, [r7, #16]
 801bb4c:	0a1b      	lsrs	r3, r3, #8
 801bb4e:	b2da      	uxtb	r2, r3
 801bb50:	69fb      	ldr	r3, [r7, #28]
 801bb52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801bb54:	69fb      	ldr	r3, [r7, #28]
 801bb56:	3301      	adds	r3, #1
 801bb58:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801bb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb5c:	3b01      	subs	r3, #1
 801bb5e:	627b      	str	r3, [r7, #36]	@ 0x24
 801bb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d1e3      	bne.n	801bb2e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801bb66:	1d3b      	adds	r3, r7, #4
 801bb68:	881b      	ldrh	r3, [r3, #0]
 801bb6a:	2201      	movs	r2, #1
 801bb6c:	4013      	ands	r3, r2
 801bb6e:	b29b      	uxth	r3, r3
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d007      	beq.n	801bb84 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801bb74:	6a3b      	ldr	r3, [r7, #32]
 801bb76:	881b      	ldrh	r3, [r3, #0]
 801bb78:	b29b      	uxth	r3, r3
 801bb7a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	b2da      	uxtb	r2, r3
 801bb80:	69fb      	ldr	r3, [r7, #28]
 801bb82:	701a      	strb	r2, [r3, #0]
  }
}
 801bb84:	46c0      	nop			@ (mov r8, r8)
 801bb86:	46bd      	mov	sp, r7
 801bb88:	b00a      	add	sp, #40	@ 0x28
 801bb8a:	bd80      	pop	{r7, pc}

0801bb8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bb8c:	b580      	push	{r7, lr}
 801bb8e:	b084      	sub	sp, #16
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
 801bb94:	000a      	movs	r2, r1
 801bb96:	1cfb      	adds	r3, r7, #3
 801bb98:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801bb9a:	230f      	movs	r3, #15
 801bb9c:	18fb      	adds	r3, r7, r3
 801bb9e:	2200      	movs	r2, #0
 801bba0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	7c1b      	ldrb	r3, [r3, #16]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d116      	bne.n	801bbd8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801bbaa:	2380      	movs	r3, #128	@ 0x80
 801bbac:	009b      	lsls	r3, r3, #2
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	2202      	movs	r2, #2
 801bbb2:	2181      	movs	r1, #129	@ 0x81
 801bbb4:	f002 f8eb 	bl	801dd8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2201      	movs	r2, #1
 801bbbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801bbbe:	2380      	movs	r3, #128	@ 0x80
 801bbc0:	009b      	lsls	r3, r3, #2
 801bbc2:	6878      	ldr	r0, [r7, #4]
 801bbc4:	2202      	movs	r2, #2
 801bbc6:	2101      	movs	r1, #1
 801bbc8:	f002 f8e1 	bl	801dd8e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801bbcc:	687a      	ldr	r2, [r7, #4]
 801bbce:	23b6      	movs	r3, #182	@ 0xb6
 801bbd0:	005b      	lsls	r3, r3, #1
 801bbd2:	2101      	movs	r1, #1
 801bbd4:	50d1      	str	r1, [r2, r3]
 801bbd6:	e013      	b.n	801bc00 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801bbd8:	6878      	ldr	r0, [r7, #4]
 801bbda:	2340      	movs	r3, #64	@ 0x40
 801bbdc:	2202      	movs	r2, #2
 801bbde:	2181      	movs	r1, #129	@ 0x81
 801bbe0:	f002 f8d5 	bl	801dd8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	2201      	movs	r2, #1
 801bbe8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801bbea:	6878      	ldr	r0, [r7, #4]
 801bbec:	2340      	movs	r3, #64	@ 0x40
 801bbee:	2202      	movs	r2, #2
 801bbf0:	2101      	movs	r1, #1
 801bbf2:	f002 f8cc 	bl	801dd8e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801bbf6:	687a      	ldr	r2, [r7, #4]
 801bbf8:	23b6      	movs	r3, #182	@ 0xb6
 801bbfa:	005b      	lsls	r3, r3, #1
 801bbfc:	2101      	movs	r1, #1
 801bbfe:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801bc00:	6878      	ldr	r0, [r7, #4]
 801bc02:	2308      	movs	r3, #8
 801bc04:	2203      	movs	r2, #3
 801bc06:	2182      	movs	r1, #130	@ 0x82
 801bc08:	f002 f8c1 	bl	801dd8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	2201      	movs	r2, #1
 801bc10:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801bc12:	2387      	movs	r3, #135	@ 0x87
 801bc14:	009b      	lsls	r3, r3, #2
 801bc16:	0018      	movs	r0, r3
 801bc18:	f002 fa52 	bl	801e0c0 <USBD_static_malloc>
 801bc1c:	0001      	movs	r1, r0
 801bc1e:	687a      	ldr	r2, [r7, #4]
 801bc20:	23ae      	movs	r3, #174	@ 0xae
 801bc22:	009b      	lsls	r3, r3, #2
 801bc24:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801bc26:	687a      	ldr	r2, [r7, #4]
 801bc28:	23ae      	movs	r3, #174	@ 0xae
 801bc2a:	009b      	lsls	r3, r3, #2
 801bc2c:	58d3      	ldr	r3, [r2, r3]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d104      	bne.n	801bc3c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801bc32:	230f      	movs	r3, #15
 801bc34:	18fb      	adds	r3, r7, r3
 801bc36:	2201      	movs	r2, #1
 801bc38:	701a      	strb	r2, [r3, #0]
 801bc3a:	e02c      	b.n	801bc96 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bc3c:	687a      	ldr	r2, [r7, #4]
 801bc3e:	23ae      	movs	r3, #174	@ 0xae
 801bc40:	009b      	lsls	r3, r3, #2
 801bc42:	58d3      	ldr	r3, [r2, r3]
 801bc44:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801bc46:	687a      	ldr	r2, [r7, #4]
 801bc48:	23af      	movs	r3, #175	@ 0xaf
 801bc4a:	009b      	lsls	r3, r3, #2
 801bc4c:	58d3      	ldr	r3, [r2, r3]
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801bc52:	68ba      	ldr	r2, [r7, #8]
 801bc54:	2385      	movs	r3, #133	@ 0x85
 801bc56:	009b      	lsls	r3, r3, #2
 801bc58:	2100      	movs	r1, #0
 801bc5a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801bc5c:	68ba      	ldr	r2, [r7, #8]
 801bc5e:	2386      	movs	r3, #134	@ 0x86
 801bc60:	009b      	lsls	r3, r3, #2
 801bc62:	2100      	movs	r1, #0
 801bc64:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	7c1b      	ldrb	r3, [r3, #16]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d10a      	bne.n	801bc84 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bc6e:	68ba      	ldr	r2, [r7, #8]
 801bc70:	2381      	movs	r3, #129	@ 0x81
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	58d2      	ldr	r2, [r2, r3]
 801bc76:	2380      	movs	r3, #128	@ 0x80
 801bc78:	009b      	lsls	r3, r3, #2
 801bc7a:	6878      	ldr	r0, [r7, #4]
 801bc7c:	2101      	movs	r1, #1
 801bc7e:	f002 f9d1 	bl	801e024 <USBD_LL_PrepareReceive>
 801bc82:	e008      	b.n	801bc96 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bc84:	68ba      	ldr	r2, [r7, #8]
 801bc86:	2381      	movs	r3, #129	@ 0x81
 801bc88:	009b      	lsls	r3, r3, #2
 801bc8a:	58d2      	ldr	r2, [r2, r3]
 801bc8c:	6878      	ldr	r0, [r7, #4]
 801bc8e:	2340      	movs	r3, #64	@ 0x40
 801bc90:	2101      	movs	r1, #1
 801bc92:	f002 f9c7 	bl	801e024 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801bc96:	230f      	movs	r3, #15
 801bc98:	18fb      	adds	r3, r7, r3
 801bc9a:	781b      	ldrb	r3, [r3, #0]
}
 801bc9c:	0018      	movs	r0, r3
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	b004      	add	sp, #16
 801bca2:	bd80      	pop	{r7, pc}

0801bca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b084      	sub	sp, #16
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	000a      	movs	r2, r1
 801bcae:	1cfb      	adds	r3, r7, #3
 801bcb0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801bcb2:	230f      	movs	r3, #15
 801bcb4:	18fb      	adds	r3, r7, r3
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	2181      	movs	r1, #129	@ 0x81
 801bcbe:	0018      	movs	r0, r3
 801bcc0:	f002 f89c 	bl	801ddfc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	2101      	movs	r1, #1
 801bcce:	0018      	movs	r0, r3
 801bcd0:	f002 f894 	bl	801ddfc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801bcd4:	687a      	ldr	r2, [r7, #4]
 801bcd6:	23b6      	movs	r3, #182	@ 0xb6
 801bcd8:	005b      	lsls	r3, r3, #1
 801bcda:	2100      	movs	r1, #0
 801bcdc:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	2182      	movs	r1, #130	@ 0x82
 801bce2:	0018      	movs	r0, r3
 801bce4:	f002 f88a 	bl	801ddfc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	2200      	movs	r2, #0
 801bcec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801bcee:	687a      	ldr	r2, [r7, #4]
 801bcf0:	23ae      	movs	r3, #174	@ 0xae
 801bcf2:	009b      	lsls	r3, r3, #2
 801bcf4:	58d3      	ldr	r3, [r2, r3]
 801bcf6:	2b00      	cmp	r3, #0
 801bcf8:	d011      	beq.n	801bd1e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801bcfa:	687a      	ldr	r2, [r7, #4]
 801bcfc:	23af      	movs	r3, #175	@ 0xaf
 801bcfe:	009b      	lsls	r3, r3, #2
 801bd00:	58d3      	ldr	r3, [r2, r3]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801bd06:	687a      	ldr	r2, [r7, #4]
 801bd08:	23ae      	movs	r3, #174	@ 0xae
 801bd0a:	009b      	lsls	r3, r3, #2
 801bd0c:	58d3      	ldr	r3, [r2, r3]
 801bd0e:	0018      	movs	r0, r3
 801bd10:	f002 f9e2 	bl	801e0d8 <USBD_static_free>
    pdev->pClassData = NULL;
 801bd14:	687a      	ldr	r2, [r7, #4]
 801bd16:	23ae      	movs	r3, #174	@ 0xae
 801bd18:	009b      	lsls	r3, r3, #2
 801bd1a:	2100      	movs	r1, #0
 801bd1c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801bd1e:	230f      	movs	r3, #15
 801bd20:	18fb      	adds	r3, r7, r3
 801bd22:	781b      	ldrb	r3, [r3, #0]
}
 801bd24:	0018      	movs	r0, r3
 801bd26:	46bd      	mov	sp, r7
 801bd28:	b004      	add	sp, #16
 801bd2a:	bd80      	pop	{r7, pc}

0801bd2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801bd2c:	b580      	push	{r7, lr}
 801bd2e:	b086      	sub	sp, #24
 801bd30:	af00      	add	r7, sp, #0
 801bd32:	6078      	str	r0, [r7, #4]
 801bd34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bd36:	687a      	ldr	r2, [r7, #4]
 801bd38:	23ae      	movs	r3, #174	@ 0xae
 801bd3a:	009b      	lsls	r3, r3, #2
 801bd3c:	58d3      	ldr	r3, [r2, r3]
 801bd3e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801bd40:	230f      	movs	r3, #15
 801bd42:	18fb      	adds	r3, r7, r3
 801bd44:	2200      	movs	r2, #0
 801bd46:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801bd48:	230c      	movs	r3, #12
 801bd4a:	18fb      	adds	r3, r7, r3
 801bd4c:	2200      	movs	r2, #0
 801bd4e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801bd50:	2317      	movs	r3, #23
 801bd52:	18fb      	adds	r3, r7, r3
 801bd54:	2200      	movs	r2, #0
 801bd56:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	781b      	ldrb	r3, [r3, #0]
 801bd5c:	001a      	movs	r2, r3
 801bd5e:	2360      	movs	r3, #96	@ 0x60
 801bd60:	4013      	ands	r3, r2
 801bd62:	d03d      	beq.n	801bde0 <USBD_CDC_Setup+0xb4>
 801bd64:	2b20      	cmp	r3, #32
 801bd66:	d000      	beq.n	801bd6a <USBD_CDC_Setup+0x3e>
 801bd68:	e094      	b.n	801be94 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801bd6a:	683b      	ldr	r3, [r7, #0]
 801bd6c:	88db      	ldrh	r3, [r3, #6]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d02b      	beq.n	801bdca <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801bd72:	683b      	ldr	r3, [r7, #0]
 801bd74:	781b      	ldrb	r3, [r3, #0]
 801bd76:	b25b      	sxtb	r3, r3
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	da12      	bge.n	801bda2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bd7c:	687a      	ldr	r2, [r7, #4]
 801bd7e:	23af      	movs	r3, #175	@ 0xaf
 801bd80:	009b      	lsls	r3, r3, #2
 801bd82:	58d3      	ldr	r3, [r2, r3]
 801bd84:	689b      	ldr	r3, [r3, #8]
 801bd86:	683a      	ldr	r2, [r7, #0]
 801bd88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801bd8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bd8c:	683a      	ldr	r2, [r7, #0]
 801bd8e:	88d2      	ldrh	r2, [r2, #6]
 801bd90:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801bd92:	6939      	ldr	r1, [r7, #16]
 801bd94:	683b      	ldr	r3, [r7, #0]
 801bd96:	88da      	ldrh	r2, [r3, #6]
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	0018      	movs	r0, r3
 801bd9c:	f001 fbaf 	bl	801d4fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801bda0:	e083      	b.n	801beaa <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801bda2:	683b      	ldr	r3, [r7, #0]
 801bda4:	7859      	ldrb	r1, [r3, #1]
 801bda6:	693a      	ldr	r2, [r7, #16]
 801bda8:	2380      	movs	r3, #128	@ 0x80
 801bdaa:	009b      	lsls	r3, r3, #2
 801bdac:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801bdae:	683b      	ldr	r3, [r7, #0]
 801bdb0:	88db      	ldrh	r3, [r3, #6]
 801bdb2:	b2d9      	uxtb	r1, r3
 801bdb4:	693b      	ldr	r3, [r7, #16]
 801bdb6:	4a40      	ldr	r2, [pc, #256]	@ (801beb8 <USBD_CDC_Setup+0x18c>)
 801bdb8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801bdba:	6939      	ldr	r1, [r7, #16]
 801bdbc:	683b      	ldr	r3, [r7, #0]
 801bdbe:	88da      	ldrh	r2, [r3, #6]
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	0018      	movs	r0, r3
 801bdc4:	f001 fbce 	bl	801d564 <USBD_CtlPrepareRx>
      break;
 801bdc8:	e06f      	b.n	801beaa <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bdca:	687a      	ldr	r2, [r7, #4]
 801bdcc:	23af      	movs	r3, #175	@ 0xaf
 801bdce:	009b      	lsls	r3, r3, #2
 801bdd0:	58d3      	ldr	r3, [r2, r3]
 801bdd2:	689b      	ldr	r3, [r3, #8]
 801bdd4:	683a      	ldr	r2, [r7, #0]
 801bdd6:	7850      	ldrb	r0, [r2, #1]
 801bdd8:	6839      	ldr	r1, [r7, #0]
 801bdda:	2200      	movs	r2, #0
 801bddc:	4798      	blx	r3
      break;
 801bdde:	e064      	b.n	801beaa <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bde0:	683b      	ldr	r3, [r7, #0]
 801bde2:	785b      	ldrb	r3, [r3, #1]
 801bde4:	2b0b      	cmp	r3, #11
 801bde6:	d037      	beq.n	801be58 <USBD_CDC_Setup+0x12c>
 801bde8:	dc47      	bgt.n	801be7a <USBD_CDC_Setup+0x14e>
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d002      	beq.n	801bdf4 <USBD_CDC_Setup+0xc8>
 801bdee:	2b0a      	cmp	r3, #10
 801bdf0:	d019      	beq.n	801be26 <USBD_CDC_Setup+0xfa>
 801bdf2:	e042      	b.n	801be7a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bdf4:	687a      	ldr	r2, [r7, #4]
 801bdf6:	23a7      	movs	r3, #167	@ 0xa7
 801bdf8:	009b      	lsls	r3, r3, #2
 801bdfa:	5cd3      	ldrb	r3, [r2, r3]
 801bdfc:	2b03      	cmp	r3, #3
 801bdfe:	d107      	bne.n	801be10 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801be00:	230c      	movs	r3, #12
 801be02:	18f9      	adds	r1, r7, r3
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	2202      	movs	r2, #2
 801be08:	0018      	movs	r0, r3
 801be0a:	f001 fb78 	bl	801d4fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801be0e:	e040      	b.n	801be92 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801be10:	683a      	ldr	r2, [r7, #0]
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	0011      	movs	r1, r2
 801be16:	0018      	movs	r0, r3
 801be18:	f001 faf3 	bl	801d402 <USBD_CtlError>
            ret = USBD_FAIL;
 801be1c:	2317      	movs	r3, #23
 801be1e:	18fb      	adds	r3, r7, r3
 801be20:	2202      	movs	r2, #2
 801be22:	701a      	strb	r2, [r3, #0]
          break;
 801be24:	e035      	b.n	801be92 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801be26:	687a      	ldr	r2, [r7, #4]
 801be28:	23a7      	movs	r3, #167	@ 0xa7
 801be2a:	009b      	lsls	r3, r3, #2
 801be2c:	5cd3      	ldrb	r3, [r2, r3]
 801be2e:	2b03      	cmp	r3, #3
 801be30:	d107      	bne.n	801be42 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801be32:	230f      	movs	r3, #15
 801be34:	18f9      	adds	r1, r7, r3
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	2201      	movs	r2, #1
 801be3a:	0018      	movs	r0, r3
 801be3c:	f001 fb5f 	bl	801d4fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801be40:	e027      	b.n	801be92 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801be42:	683a      	ldr	r2, [r7, #0]
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	0011      	movs	r1, r2
 801be48:	0018      	movs	r0, r3
 801be4a:	f001 fada 	bl	801d402 <USBD_CtlError>
            ret = USBD_FAIL;
 801be4e:	2317      	movs	r3, #23
 801be50:	18fb      	adds	r3, r7, r3
 801be52:	2202      	movs	r2, #2
 801be54:	701a      	strb	r2, [r3, #0]
          break;
 801be56:	e01c      	b.n	801be92 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801be58:	687a      	ldr	r2, [r7, #4]
 801be5a:	23a7      	movs	r3, #167	@ 0xa7
 801be5c:	009b      	lsls	r3, r3, #2
 801be5e:	5cd3      	ldrb	r3, [r2, r3]
 801be60:	2b03      	cmp	r3, #3
 801be62:	d015      	beq.n	801be90 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801be64:	683a      	ldr	r2, [r7, #0]
 801be66:	687b      	ldr	r3, [r7, #4]
 801be68:	0011      	movs	r1, r2
 801be6a:	0018      	movs	r0, r3
 801be6c:	f001 fac9 	bl	801d402 <USBD_CtlError>
            ret = USBD_FAIL;
 801be70:	2317      	movs	r3, #23
 801be72:	18fb      	adds	r3, r7, r3
 801be74:	2202      	movs	r2, #2
 801be76:	701a      	strb	r2, [r3, #0]
          }
          break;
 801be78:	e00a      	b.n	801be90 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801be7a:	683a      	ldr	r2, [r7, #0]
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	0011      	movs	r1, r2
 801be80:	0018      	movs	r0, r3
 801be82:	f001 fabe 	bl	801d402 <USBD_CtlError>
          ret = USBD_FAIL;
 801be86:	2317      	movs	r3, #23
 801be88:	18fb      	adds	r3, r7, r3
 801be8a:	2202      	movs	r2, #2
 801be8c:	701a      	strb	r2, [r3, #0]
          break;
 801be8e:	e000      	b.n	801be92 <USBD_CDC_Setup+0x166>
          break;
 801be90:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801be92:	e00a      	b.n	801beaa <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801be94:	683a      	ldr	r2, [r7, #0]
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	0011      	movs	r1, r2
 801be9a:	0018      	movs	r0, r3
 801be9c:	f001 fab1 	bl	801d402 <USBD_CtlError>
      ret = USBD_FAIL;
 801bea0:	2317      	movs	r3, #23
 801bea2:	18fb      	adds	r3, r7, r3
 801bea4:	2202      	movs	r2, #2
 801bea6:	701a      	strb	r2, [r3, #0]
      break;
 801bea8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801beaa:	2317      	movs	r3, #23
 801beac:	18fb      	adds	r3, r7, r3
 801beae:	781b      	ldrb	r3, [r3, #0]
}
 801beb0:	0018      	movs	r0, r3
 801beb2:	46bd      	mov	sp, r7
 801beb4:	b006      	add	sp, #24
 801beb6:	bd80      	pop	{r7, pc}
 801beb8:	00000201 	.word	0x00000201

0801bebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b084      	sub	sp, #16
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	000a      	movs	r2, r1
 801bec6:	1cfb      	adds	r3, r7, #3
 801bec8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801beca:	687a      	ldr	r2, [r7, #4]
 801becc:	23ae      	movs	r3, #174	@ 0xae
 801bece:	009b      	lsls	r3, r3, #2
 801bed0:	58d3      	ldr	r3, [r2, r3]
 801bed2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	23b0      	movs	r3, #176	@ 0xb0
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	58d3      	ldr	r3, [r2, r3]
 801bedc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801bede:	687a      	ldr	r2, [r7, #4]
 801bee0:	23ae      	movs	r3, #174	@ 0xae
 801bee2:	009b      	lsls	r3, r3, #2
 801bee4:	58d3      	ldr	r3, [r2, r3]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d03e      	beq.n	801bf68 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801beea:	1cfb      	adds	r3, r7, #3
 801beec:	781a      	ldrb	r2, [r3, #0]
 801beee:	6879      	ldr	r1, [r7, #4]
 801bef0:	0013      	movs	r3, r2
 801bef2:	009b      	lsls	r3, r3, #2
 801bef4:	189b      	adds	r3, r3, r2
 801bef6:	009b      	lsls	r3, r3, #2
 801bef8:	18cb      	adds	r3, r1, r3
 801befa:	331c      	adds	r3, #28
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d02b      	beq.n	801bf5a <USBD_CDC_DataIn+0x9e>
 801bf02:	1cfb      	adds	r3, r7, #3
 801bf04:	781a      	ldrb	r2, [r3, #0]
 801bf06:	6879      	ldr	r1, [r7, #4]
 801bf08:	0013      	movs	r3, r2
 801bf0a:	009b      	lsls	r3, r3, #2
 801bf0c:	189b      	adds	r3, r3, r2
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	18cb      	adds	r3, r1, r3
 801bf12:	331c      	adds	r3, #28
 801bf14:	6818      	ldr	r0, [r3, #0]
 801bf16:	1cfb      	adds	r3, r7, #3
 801bf18:	781a      	ldrb	r2, [r3, #0]
 801bf1a:	68b9      	ldr	r1, [r7, #8]
 801bf1c:	0013      	movs	r3, r2
 801bf1e:	009b      	lsls	r3, r3, #2
 801bf20:	189b      	adds	r3, r3, r2
 801bf22:	00db      	lsls	r3, r3, #3
 801bf24:	18cb      	adds	r3, r1, r3
 801bf26:	3338      	adds	r3, #56	@ 0x38
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	0019      	movs	r1, r3
 801bf2c:	f7e4 f9c0 	bl	80002b0 <__aeabi_uidivmod>
 801bf30:	1e0b      	subs	r3, r1, #0
 801bf32:	d112      	bne.n	801bf5a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801bf34:	1cfb      	adds	r3, r7, #3
 801bf36:	781a      	ldrb	r2, [r3, #0]
 801bf38:	6879      	ldr	r1, [r7, #4]
 801bf3a:	0013      	movs	r3, r2
 801bf3c:	009b      	lsls	r3, r3, #2
 801bf3e:	189b      	adds	r3, r3, r2
 801bf40:	009b      	lsls	r3, r3, #2
 801bf42:	18cb      	adds	r3, r1, r3
 801bf44:	331c      	adds	r3, #28
 801bf46:	2200      	movs	r2, #0
 801bf48:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801bf4a:	1cfb      	adds	r3, r7, #3
 801bf4c:	7819      	ldrb	r1, [r3, #0]
 801bf4e:	6878      	ldr	r0, [r7, #4]
 801bf50:	2300      	movs	r3, #0
 801bf52:	2200      	movs	r2, #0
 801bf54:	f002 f82f 	bl	801dfb6 <USBD_LL_Transmit>
 801bf58:	e004      	b.n	801bf64 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801bf5a:	68fa      	ldr	r2, [r7, #12]
 801bf5c:	2385      	movs	r3, #133	@ 0x85
 801bf5e:	009b      	lsls	r3, r3, #2
 801bf60:	2100      	movs	r1, #0
 801bf62:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801bf64:	2300      	movs	r3, #0
 801bf66:	e000      	b.n	801bf6a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801bf68:	2302      	movs	r3, #2
  }
}
 801bf6a:	0018      	movs	r0, r3
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	b004      	add	sp, #16
 801bf70:	bd80      	pop	{r7, pc}

0801bf72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801bf72:	b580      	push	{r7, lr}
 801bf74:	b084      	sub	sp, #16
 801bf76:	af00      	add	r7, sp, #0
 801bf78:	6078      	str	r0, [r7, #4]
 801bf7a:	000a      	movs	r2, r1
 801bf7c:	1cfb      	adds	r3, r7, #3
 801bf7e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bf80:	687a      	ldr	r2, [r7, #4]
 801bf82:	23ae      	movs	r3, #174	@ 0xae
 801bf84:	009b      	lsls	r3, r3, #2
 801bf86:	58d3      	ldr	r3, [r2, r3]
 801bf88:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801bf8a:	1cfb      	adds	r3, r7, #3
 801bf8c:	781a      	ldrb	r2, [r3, #0]
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	0011      	movs	r1, r2
 801bf92:	0018      	movs	r0, r3
 801bf94:	f002 f87d 	bl	801e092 <USBD_LL_GetRxDataSize>
 801bf98:	0001      	movs	r1, r0
 801bf9a:	68fa      	ldr	r2, [r7, #12]
 801bf9c:	2383      	movs	r3, #131	@ 0x83
 801bf9e:	009b      	lsls	r3, r3, #2
 801bfa0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801bfa2:	687a      	ldr	r2, [r7, #4]
 801bfa4:	23ae      	movs	r3, #174	@ 0xae
 801bfa6:	009b      	lsls	r3, r3, #2
 801bfa8:	58d3      	ldr	r3, [r2, r3]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d011      	beq.n	801bfd2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801bfae:	687a      	ldr	r2, [r7, #4]
 801bfb0:	23af      	movs	r3, #175	@ 0xaf
 801bfb2:	009b      	lsls	r3, r3, #2
 801bfb4:	58d3      	ldr	r3, [r2, r3]
 801bfb6:	68da      	ldr	r2, [r3, #12]
 801bfb8:	68f9      	ldr	r1, [r7, #12]
 801bfba:	2381      	movs	r3, #129	@ 0x81
 801bfbc:	009b      	lsls	r3, r3, #2
 801bfbe:	58c8      	ldr	r0, [r1, r3]
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	2183      	movs	r1, #131	@ 0x83
 801bfc4:	0089      	lsls	r1, r1, #2
 801bfc6:	468c      	mov	ip, r1
 801bfc8:	4463      	add	r3, ip
 801bfca:	0019      	movs	r1, r3
 801bfcc:	4790      	blx	r2

    return USBD_OK;
 801bfce:	2300      	movs	r3, #0
 801bfd0:	e000      	b.n	801bfd4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801bfd2:	2302      	movs	r3, #2
  }
}
 801bfd4:	0018      	movs	r0, r3
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	b004      	add	sp, #16
 801bfda:	bd80      	pop	{r7, pc}

0801bfdc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801bfdc:	b590      	push	{r4, r7, lr}
 801bfde:	b085      	sub	sp, #20
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bfe4:	687a      	ldr	r2, [r7, #4]
 801bfe6:	23ae      	movs	r3, #174	@ 0xae
 801bfe8:	009b      	lsls	r3, r3, #2
 801bfea:	58d3      	ldr	r3, [r2, r3]
 801bfec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801bfee:	687a      	ldr	r2, [r7, #4]
 801bff0:	23af      	movs	r3, #175	@ 0xaf
 801bff2:	009b      	lsls	r3, r3, #2
 801bff4:	58d3      	ldr	r3, [r2, r3]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d018      	beq.n	801c02c <USBD_CDC_EP0_RxReady+0x50>
 801bffa:	68fa      	ldr	r2, [r7, #12]
 801bffc:	2380      	movs	r3, #128	@ 0x80
 801bffe:	009b      	lsls	r3, r3, #2
 801c000:	5cd3      	ldrb	r3, [r2, r3]
 801c002:	2bff      	cmp	r3, #255	@ 0xff
 801c004:	d012      	beq.n	801c02c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c006:	687a      	ldr	r2, [r7, #4]
 801c008:	23af      	movs	r3, #175	@ 0xaf
 801c00a:	009b      	lsls	r3, r3, #2
 801c00c:	58d3      	ldr	r3, [r2, r3]
 801c00e:	689b      	ldr	r3, [r3, #8]
 801c010:	68f9      	ldr	r1, [r7, #12]
 801c012:	2280      	movs	r2, #128	@ 0x80
 801c014:	0092      	lsls	r2, r2, #2
 801c016:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801c018:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c01a:	68fa      	ldr	r2, [r7, #12]
 801c01c:	4c06      	ldr	r4, [pc, #24]	@ (801c038 <USBD_CDC_EP0_RxReady+0x5c>)
 801c01e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c020:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c022:	68fa      	ldr	r2, [r7, #12]
 801c024:	2380      	movs	r3, #128	@ 0x80
 801c026:	009b      	lsls	r3, r3, #2
 801c028:	21ff      	movs	r1, #255	@ 0xff
 801c02a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801c02c:	2300      	movs	r3, #0
}
 801c02e:	0018      	movs	r0, r3
 801c030:	46bd      	mov	sp, r7
 801c032:	b005      	add	sp, #20
 801c034:	bd90      	pop	{r4, r7, pc}
 801c036:	46c0      	nop			@ (mov r8, r8)
 801c038:	00000201 	.word	0x00000201

0801c03c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b082      	sub	sp, #8
 801c040:	af00      	add	r7, sp, #0
 801c042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	2243      	movs	r2, #67	@ 0x43
 801c048:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c04a:	4b02      	ldr	r3, [pc, #8]	@ (801c054 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801c04c:	0018      	movs	r0, r3
 801c04e:	46bd      	mov	sp, r7
 801c050:	b002      	add	sp, #8
 801c052:	bd80      	pop	{r7, pc}
 801c054:	20000170 	.word	0x20000170

0801c058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c058:	b580      	push	{r7, lr}
 801c05a:	b082      	sub	sp, #8
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	2243      	movs	r2, #67	@ 0x43
 801c064:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c066:	4b02      	ldr	r3, [pc, #8]	@ (801c070 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801c068:	0018      	movs	r0, r3
 801c06a:	46bd      	mov	sp, r7
 801c06c:	b002      	add	sp, #8
 801c06e:	bd80      	pop	{r7, pc}
 801c070:	2000012c 	.word	0x2000012c

0801c074 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b082      	sub	sp, #8
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	2243      	movs	r2, #67	@ 0x43
 801c080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c082:	4b02      	ldr	r3, [pc, #8]	@ (801c08c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801c084:	0018      	movs	r0, r3
 801c086:	46bd      	mov	sp, r7
 801c088:	b002      	add	sp, #8
 801c08a:	bd80      	pop	{r7, pc}
 801c08c:	200001b4 	.word	0x200001b4

0801c090 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c090:	b580      	push	{r7, lr}
 801c092:	b082      	sub	sp, #8
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	220a      	movs	r2, #10
 801c09c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c09e:	4b02      	ldr	r3, [pc, #8]	@ (801c0a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801c0a0:	0018      	movs	r0, r3
 801c0a2:	46bd      	mov	sp, r7
 801c0a4:	b002      	add	sp, #8
 801c0a6:	bd80      	pop	{r7, pc}
 801c0a8:	200000e8 	.word	0x200000e8

0801c0ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b084      	sub	sp, #16
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
 801c0b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c0b6:	200f      	movs	r0, #15
 801c0b8:	183b      	adds	r3, r7, r0
 801c0ba:	2202      	movs	r2, #2
 801c0bc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	d007      	beq.n	801c0d4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801c0c4:	687a      	ldr	r2, [r7, #4]
 801c0c6:	23af      	movs	r3, #175	@ 0xaf
 801c0c8:	009b      	lsls	r3, r3, #2
 801c0ca:	6839      	ldr	r1, [r7, #0]
 801c0cc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801c0ce:	183b      	adds	r3, r7, r0
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801c0d4:	230f      	movs	r3, #15
 801c0d6:	18fb      	adds	r3, r7, r3
 801c0d8:	781b      	ldrb	r3, [r3, #0]
}
 801c0da:	0018      	movs	r0, r3
 801c0dc:	46bd      	mov	sp, r7
 801c0de:	b004      	add	sp, #16
 801c0e0:	bd80      	pop	{r7, pc}

0801c0e2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c0e2:	b580      	push	{r7, lr}
 801c0e4:	b086      	sub	sp, #24
 801c0e6:	af00      	add	r7, sp, #0
 801c0e8:	60f8      	str	r0, [r7, #12]
 801c0ea:	60b9      	str	r1, [r7, #8]
 801c0ec:	1dbb      	adds	r3, r7, #6
 801c0ee:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c0f0:	68fa      	ldr	r2, [r7, #12]
 801c0f2:	23ae      	movs	r3, #174	@ 0xae
 801c0f4:	009b      	lsls	r3, r3, #2
 801c0f6:	58d3      	ldr	r3, [r2, r3]
 801c0f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c0fa:	697a      	ldr	r2, [r7, #20]
 801c0fc:	2382      	movs	r3, #130	@ 0x82
 801c0fe:	009b      	lsls	r3, r3, #2
 801c100:	68b9      	ldr	r1, [r7, #8]
 801c102:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801c104:	1dbb      	adds	r3, r7, #6
 801c106:	8819      	ldrh	r1, [r3, #0]
 801c108:	697a      	ldr	r2, [r7, #20]
 801c10a:	2384      	movs	r3, #132	@ 0x84
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801c110:	2300      	movs	r3, #0
}
 801c112:	0018      	movs	r0, r3
 801c114:	46bd      	mov	sp, r7
 801c116:	b006      	add	sp, #24
 801c118:	bd80      	pop	{r7, pc}

0801c11a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c11a:	b580      	push	{r7, lr}
 801c11c:	b084      	sub	sp, #16
 801c11e:	af00      	add	r7, sp, #0
 801c120:	6078      	str	r0, [r7, #4]
 801c122:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c124:	687a      	ldr	r2, [r7, #4]
 801c126:	23ae      	movs	r3, #174	@ 0xae
 801c128:	009b      	lsls	r3, r3, #2
 801c12a:	58d3      	ldr	r3, [r2, r3]
 801c12c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c12e:	68fa      	ldr	r2, [r7, #12]
 801c130:	2381      	movs	r3, #129	@ 0x81
 801c132:	009b      	lsls	r3, r3, #2
 801c134:	6839      	ldr	r1, [r7, #0]
 801c136:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801c138:	2300      	movs	r3, #0
}
 801c13a:	0018      	movs	r0, r3
 801c13c:	46bd      	mov	sp, r7
 801c13e:	b004      	add	sp, #16
 801c140:	bd80      	pop	{r7, pc}

0801c142 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c142:	b580      	push	{r7, lr}
 801c144:	b084      	sub	sp, #16
 801c146:	af00      	add	r7, sp, #0
 801c148:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c14a:	687a      	ldr	r2, [r7, #4]
 801c14c:	23ae      	movs	r3, #174	@ 0xae
 801c14e:	009b      	lsls	r3, r3, #2
 801c150:	58d3      	ldr	r3, [r2, r3]
 801c152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c154:	687a      	ldr	r2, [r7, #4]
 801c156:	23ae      	movs	r3, #174	@ 0xae
 801c158:	009b      	lsls	r3, r3, #2
 801c15a:	58d3      	ldr	r3, [r2, r3]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d022      	beq.n	801c1a6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801c160:	68fa      	ldr	r2, [r7, #12]
 801c162:	2385      	movs	r3, #133	@ 0x85
 801c164:	009b      	lsls	r3, r3, #2
 801c166:	58d3      	ldr	r3, [r2, r3]
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d11a      	bne.n	801c1a2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c16c:	68fa      	ldr	r2, [r7, #12]
 801c16e:	2385      	movs	r3, #133	@ 0x85
 801c170:	009b      	lsls	r3, r3, #2
 801c172:	2101      	movs	r1, #1
 801c174:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c176:	68fa      	ldr	r2, [r7, #12]
 801c178:	2384      	movs	r3, #132	@ 0x84
 801c17a:	009b      	lsls	r3, r3, #2
 801c17c:	58d2      	ldr	r2, [r2, r3]
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c182:	68fa      	ldr	r2, [r7, #12]
 801c184:	2382      	movs	r3, #130	@ 0x82
 801c186:	009b      	lsls	r3, r3, #2
 801c188:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801c18a:	68fa      	ldr	r2, [r7, #12]
 801c18c:	2384      	movs	r3, #132	@ 0x84
 801c18e:	009b      	lsls	r3, r3, #2
 801c190:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c192:	b29b      	uxth	r3, r3
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	000a      	movs	r2, r1
 801c198:	2181      	movs	r1, #129	@ 0x81
 801c19a:	f001 ff0c 	bl	801dfb6 <USBD_LL_Transmit>

      return USBD_OK;
 801c19e:	2300      	movs	r3, #0
 801c1a0:	e002      	b.n	801c1a8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801c1a2:	2301      	movs	r3, #1
 801c1a4:	e000      	b.n	801c1a8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801c1a6:	2302      	movs	r3, #2
  }
}
 801c1a8:	0018      	movs	r0, r3
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	b004      	add	sp, #16
 801c1ae:	bd80      	pop	{r7, pc}

0801c1b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b084      	sub	sp, #16
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c1b8:	687a      	ldr	r2, [r7, #4]
 801c1ba:	23ae      	movs	r3, #174	@ 0xae
 801c1bc:	009b      	lsls	r3, r3, #2
 801c1be:	58d3      	ldr	r3, [r2, r3]
 801c1c0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801c1c2:	687a      	ldr	r2, [r7, #4]
 801c1c4:	23ae      	movs	r3, #174	@ 0xae
 801c1c6:	009b      	lsls	r3, r3, #2
 801c1c8:	58d3      	ldr	r3, [r2, r3]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d019      	beq.n	801c202 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	7c1b      	ldrb	r3, [r3, #16]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d10a      	bne.n	801c1ec <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c1d6:	68fa      	ldr	r2, [r7, #12]
 801c1d8:	2381      	movs	r3, #129	@ 0x81
 801c1da:	009b      	lsls	r3, r3, #2
 801c1dc:	58d2      	ldr	r2, [r2, r3]
 801c1de:	2380      	movs	r3, #128	@ 0x80
 801c1e0:	009b      	lsls	r3, r3, #2
 801c1e2:	6878      	ldr	r0, [r7, #4]
 801c1e4:	2101      	movs	r1, #1
 801c1e6:	f001 ff1d 	bl	801e024 <USBD_LL_PrepareReceive>
 801c1ea:	e008      	b.n	801c1fe <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c1ec:	68fa      	ldr	r2, [r7, #12]
 801c1ee:	2381      	movs	r3, #129	@ 0x81
 801c1f0:	009b      	lsls	r3, r3, #2
 801c1f2:	58d2      	ldr	r2, [r2, r3]
 801c1f4:	6878      	ldr	r0, [r7, #4]
 801c1f6:	2340      	movs	r3, #64	@ 0x40
 801c1f8:	2101      	movs	r1, #1
 801c1fa:	f001 ff13 	bl	801e024 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801c1fe:	2300      	movs	r3, #0
 801c200:	e000      	b.n	801c204 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801c202:	2302      	movs	r3, #2
  }
}
 801c204:	0018      	movs	r0, r3
 801c206:	46bd      	mov	sp, r7
 801c208:	b004      	add	sp, #16
 801c20a:	bd80      	pop	{r7, pc}

0801c20c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b084      	sub	sp, #16
 801c210:	af00      	add	r7, sp, #0
 801c212:	60f8      	str	r0, [r7, #12]
 801c214:	60b9      	str	r1, [r7, #8]
 801c216:	1dfb      	adds	r3, r7, #7
 801c218:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d101      	bne.n	801c224 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801c220:	2302      	movs	r3, #2
 801c222:	e020      	b.n	801c266 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801c224:	68fa      	ldr	r2, [r7, #12]
 801c226:	23ad      	movs	r3, #173	@ 0xad
 801c228:	009b      	lsls	r3, r3, #2
 801c22a:	58d3      	ldr	r3, [r2, r3]
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d004      	beq.n	801c23a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801c230:	68fa      	ldr	r2, [r7, #12]
 801c232:	23ad      	movs	r3, #173	@ 0xad
 801c234:	009b      	lsls	r3, r3, #2
 801c236:	2100      	movs	r1, #0
 801c238:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c23a:	68bb      	ldr	r3, [r7, #8]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d004      	beq.n	801c24a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801c240:	68fa      	ldr	r2, [r7, #12]
 801c242:	23ac      	movs	r3, #172	@ 0xac
 801c244:	009b      	lsls	r3, r3, #2
 801c246:	68b9      	ldr	r1, [r7, #8]
 801c248:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c24a:	68fa      	ldr	r2, [r7, #12]
 801c24c:	23a7      	movs	r3, #167	@ 0xa7
 801c24e:	009b      	lsls	r3, r3, #2
 801c250:	2101      	movs	r1, #1
 801c252:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	1dfa      	adds	r2, r7, #7
 801c258:	7812      	ldrb	r2, [r2, #0]
 801c25a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	0018      	movs	r0, r3
 801c260:	f001 fd0c 	bl	801dc7c <USBD_LL_Init>

  return USBD_OK;
 801c264:	2300      	movs	r3, #0
}
 801c266:	0018      	movs	r0, r3
 801c268:	46bd      	mov	sp, r7
 801c26a:	b004      	add	sp, #16
 801c26c:	bd80      	pop	{r7, pc}

0801c26e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c26e:	b580      	push	{r7, lr}
 801c270:	b084      	sub	sp, #16
 801c272:	af00      	add	r7, sp, #0
 801c274:	6078      	str	r0, [r7, #4]
 801c276:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801c278:	200f      	movs	r0, #15
 801c27a:	183b      	adds	r3, r7, r0
 801c27c:	2200      	movs	r2, #0
 801c27e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801c280:	683b      	ldr	r3, [r7, #0]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d008      	beq.n	801c298 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c286:	687a      	ldr	r2, [r7, #4]
 801c288:	23ad      	movs	r3, #173	@ 0xad
 801c28a:	009b      	lsls	r3, r3, #2
 801c28c:	6839      	ldr	r1, [r7, #0]
 801c28e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801c290:	183b      	adds	r3, r7, r0
 801c292:	2200      	movs	r2, #0
 801c294:	701a      	strb	r2, [r3, #0]
 801c296:	e003      	b.n	801c2a0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801c298:	230f      	movs	r3, #15
 801c29a:	18fb      	adds	r3, r7, r3
 801c29c:	2202      	movs	r2, #2
 801c29e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801c2a0:	230f      	movs	r3, #15
 801c2a2:	18fb      	adds	r3, r7, r3
 801c2a4:	781b      	ldrb	r3, [r3, #0]
}
 801c2a6:	0018      	movs	r0, r3
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	b004      	add	sp, #16
 801c2ac:	bd80      	pop	{r7, pc}

0801c2ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c2ae:	b580      	push	{r7, lr}
 801c2b0:	b082      	sub	sp, #8
 801c2b2:	af00      	add	r7, sp, #0
 801c2b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	0018      	movs	r0, r3
 801c2ba:	f001 fd43 	bl	801dd44 <USBD_LL_Start>

  return USBD_OK;
 801c2be:	2300      	movs	r3, #0
}
 801c2c0:	0018      	movs	r0, r3
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	b002      	add	sp, #8
 801c2c6:	bd80      	pop	{r7, pc}

0801c2c8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b082      	sub	sp, #8
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c2d0:	2300      	movs	r3, #0
}
 801c2d2:	0018      	movs	r0, r3
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	b002      	add	sp, #8
 801c2d8:	bd80      	pop	{r7, pc}

0801c2da <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c2da:	b590      	push	{r4, r7, lr}
 801c2dc:	b085      	sub	sp, #20
 801c2de:	af00      	add	r7, sp, #0
 801c2e0:	6078      	str	r0, [r7, #4]
 801c2e2:	000a      	movs	r2, r1
 801c2e4:	1cfb      	adds	r3, r7, #3
 801c2e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801c2e8:	240f      	movs	r4, #15
 801c2ea:	193b      	adds	r3, r7, r4
 801c2ec:	2202      	movs	r2, #2
 801c2ee:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801c2f0:	687a      	ldr	r2, [r7, #4]
 801c2f2:	23ad      	movs	r3, #173	@ 0xad
 801c2f4:	009b      	lsls	r3, r3, #2
 801c2f6:	58d3      	ldr	r3, [r2, r3]
 801c2f8:	2b00      	cmp	r3, #0
 801c2fa:	d00e      	beq.n	801c31a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801c2fc:	687a      	ldr	r2, [r7, #4]
 801c2fe:	23ad      	movs	r3, #173	@ 0xad
 801c300:	009b      	lsls	r3, r3, #2
 801c302:	58d3      	ldr	r3, [r2, r3]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	1cfa      	adds	r2, r7, #3
 801c308:	7811      	ldrb	r1, [r2, #0]
 801c30a:	687a      	ldr	r2, [r7, #4]
 801c30c:	0010      	movs	r0, r2
 801c30e:	4798      	blx	r3
 801c310:	1e03      	subs	r3, r0, #0
 801c312:	d102      	bne.n	801c31a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801c314:	193b      	adds	r3, r7, r4
 801c316:	2200      	movs	r2, #0
 801c318:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801c31a:	230f      	movs	r3, #15
 801c31c:	18fb      	adds	r3, r7, r3
 801c31e:	781b      	ldrb	r3, [r3, #0]
}
 801c320:	0018      	movs	r0, r3
 801c322:	46bd      	mov	sp, r7
 801c324:	b005      	add	sp, #20
 801c326:	bd90      	pop	{r4, r7, pc}

0801c328 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c328:	b580      	push	{r7, lr}
 801c32a:	b082      	sub	sp, #8
 801c32c:	af00      	add	r7, sp, #0
 801c32e:	6078      	str	r0, [r7, #4]
 801c330:	000a      	movs	r2, r1
 801c332:	1cfb      	adds	r3, r7, #3
 801c334:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801c336:	687a      	ldr	r2, [r7, #4]
 801c338:	23ad      	movs	r3, #173	@ 0xad
 801c33a:	009b      	lsls	r3, r3, #2
 801c33c:	58d3      	ldr	r3, [r2, r3]
 801c33e:	685b      	ldr	r3, [r3, #4]
 801c340:	1cfa      	adds	r2, r7, #3
 801c342:	7811      	ldrb	r1, [r2, #0]
 801c344:	687a      	ldr	r2, [r7, #4]
 801c346:	0010      	movs	r0, r2
 801c348:	4798      	blx	r3

  return USBD_OK;
 801c34a:	2300      	movs	r3, #0
}
 801c34c:	0018      	movs	r0, r3
 801c34e:	46bd      	mov	sp, r7
 801c350:	b002      	add	sp, #8
 801c352:	bd80      	pop	{r7, pc}

0801c354 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c354:	b580      	push	{r7, lr}
 801c356:	b082      	sub	sp, #8
 801c358:	af00      	add	r7, sp, #0
 801c35a:	6078      	str	r0, [r7, #4]
 801c35c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	22aa      	movs	r2, #170	@ 0xaa
 801c362:	0092      	lsls	r2, r2, #2
 801c364:	4694      	mov	ip, r2
 801c366:	4463      	add	r3, ip
 801c368:	683a      	ldr	r2, [r7, #0]
 801c36a:	0011      	movs	r1, r2
 801c36c:	0018      	movs	r0, r3
 801c36e:	f001 f810 	bl	801d392 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c372:	687a      	ldr	r2, [r7, #4]
 801c374:	23a5      	movs	r3, #165	@ 0xa5
 801c376:	009b      	lsls	r3, r3, #2
 801c378:	2101      	movs	r1, #1
 801c37a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	4a23      	ldr	r2, [pc, #140]	@ (801c40c <USBD_LL_SetupStage+0xb8>)
 801c380:	5a9b      	ldrh	r3, [r3, r2]
 801c382:	0019      	movs	r1, r3
 801c384:	687a      	ldr	r2, [r7, #4]
 801c386:	23a6      	movs	r3, #166	@ 0xa6
 801c388:	009b      	lsls	r3, r3, #2
 801c38a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801c38c:	687a      	ldr	r2, [r7, #4]
 801c38e:	23aa      	movs	r3, #170	@ 0xaa
 801c390:	009b      	lsls	r3, r3, #2
 801c392:	5cd3      	ldrb	r3, [r2, r3]
 801c394:	001a      	movs	r2, r3
 801c396:	231f      	movs	r3, #31
 801c398:	4013      	ands	r3, r2
 801c39a:	2b02      	cmp	r3, #2
 801c39c:	d019      	beq.n	801c3d2 <USBD_LL_SetupStage+0x7e>
 801c39e:	d822      	bhi.n	801c3e6 <USBD_LL_SetupStage+0x92>
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d002      	beq.n	801c3aa <USBD_LL_SetupStage+0x56>
 801c3a4:	2b01      	cmp	r3, #1
 801c3a6:	d00a      	beq.n	801c3be <USBD_LL_SetupStage+0x6a>
 801c3a8:	e01d      	b.n	801c3e6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	22aa      	movs	r2, #170	@ 0xaa
 801c3ae:	0092      	lsls	r2, r2, #2
 801c3b0:	189a      	adds	r2, r3, r2
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	0011      	movs	r1, r2
 801c3b6:	0018      	movs	r0, r3
 801c3b8:	f000 fa10 	bl	801c7dc <USBD_StdDevReq>
      break;
 801c3bc:	e020      	b.n	801c400 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	22aa      	movs	r2, #170	@ 0xaa
 801c3c2:	0092      	lsls	r2, r2, #2
 801c3c4:	189a      	adds	r2, r3, r2
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	0011      	movs	r1, r2
 801c3ca:	0018      	movs	r0, r3
 801c3cc:	f000 fa78 	bl	801c8c0 <USBD_StdItfReq>
      break;
 801c3d0:	e016      	b.n	801c400 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	22aa      	movs	r2, #170	@ 0xaa
 801c3d6:	0092      	lsls	r2, r2, #2
 801c3d8:	189a      	adds	r2, r3, r2
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	0011      	movs	r1, r2
 801c3de:	0018      	movs	r0, r3
 801c3e0:	f000 fac5 	bl	801c96e <USBD_StdEPReq>
      break;
 801c3e4:	e00c      	b.n	801c400 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c3e6:	687a      	ldr	r2, [r7, #4]
 801c3e8:	23aa      	movs	r3, #170	@ 0xaa
 801c3ea:	009b      	lsls	r3, r3, #2
 801c3ec:	5cd3      	ldrb	r3, [r2, r3]
 801c3ee:	227f      	movs	r2, #127	@ 0x7f
 801c3f0:	4393      	bics	r3, r2
 801c3f2:	b2da      	uxtb	r2, r3
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	0011      	movs	r1, r2
 801c3f8:	0018      	movs	r0, r3
 801c3fa:	f001 fd2a 	bl	801de52 <USBD_LL_StallEP>
      break;
 801c3fe:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c400:	2300      	movs	r3, #0
}
 801c402:	0018      	movs	r0, r3
 801c404:	46bd      	mov	sp, r7
 801c406:	b002      	add	sp, #8
 801c408:	bd80      	pop	{r7, pc}
 801c40a:	46c0      	nop			@ (mov r8, r8)
 801c40c:	000002ae 	.word	0x000002ae

0801c410 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b086      	sub	sp, #24
 801c414:	af00      	add	r7, sp, #0
 801c416:	60f8      	str	r0, [r7, #12]
 801c418:	607a      	str	r2, [r7, #4]
 801c41a:	200b      	movs	r0, #11
 801c41c:	183b      	adds	r3, r7, r0
 801c41e:	1c0a      	adds	r2, r1, #0
 801c420:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c422:	183b      	adds	r3, r7, r0
 801c424:	781b      	ldrb	r3, [r3, #0]
 801c426:	2b00      	cmp	r3, #0
 801c428:	d154      	bne.n	801c4d4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	3355      	adds	r3, #85	@ 0x55
 801c42e:	33ff      	adds	r3, #255	@ 0xff
 801c430:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c432:	68fa      	ldr	r2, [r7, #12]
 801c434:	23a5      	movs	r3, #165	@ 0xa5
 801c436:	009b      	lsls	r3, r3, #2
 801c438:	58d3      	ldr	r3, [r2, r3]
 801c43a:	2b03      	cmp	r3, #3
 801c43c:	d139      	bne.n	801c4b2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801c43e:	697b      	ldr	r3, [r7, #20]
 801c440:	68da      	ldr	r2, [r3, #12]
 801c442:	697b      	ldr	r3, [r7, #20]
 801c444:	691b      	ldr	r3, [r3, #16]
 801c446:	429a      	cmp	r2, r3
 801c448:	d919      	bls.n	801c47e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801c44a:	697b      	ldr	r3, [r7, #20]
 801c44c:	68da      	ldr	r2, [r3, #12]
 801c44e:	697b      	ldr	r3, [r7, #20]
 801c450:	691b      	ldr	r3, [r3, #16]
 801c452:	1ad2      	subs	r2, r2, r3
 801c454:	697b      	ldr	r3, [r7, #20]
 801c456:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c458:	697b      	ldr	r3, [r7, #20]
 801c45a:	68da      	ldr	r2, [r3, #12]
 801c45c:	697b      	ldr	r3, [r7, #20]
 801c45e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c460:	429a      	cmp	r2, r3
 801c462:	d203      	bcs.n	801c46c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c464:	697b      	ldr	r3, [r7, #20]
 801c466:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801c468:	b29b      	uxth	r3, r3
 801c46a:	e002      	b.n	801c472 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c46c:	697b      	ldr	r3, [r7, #20]
 801c46e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c470:	b29b      	uxth	r3, r3
 801c472:	6879      	ldr	r1, [r7, #4]
 801c474:	68f8      	ldr	r0, [r7, #12]
 801c476:	001a      	movs	r2, r3
 801c478:	f001 f898 	bl	801d5ac <USBD_CtlContinueRx>
 801c47c:	e045      	b.n	801c50a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c47e:	68fa      	ldr	r2, [r7, #12]
 801c480:	23ad      	movs	r3, #173	@ 0xad
 801c482:	009b      	lsls	r3, r3, #2
 801c484:	58d3      	ldr	r3, [r2, r3]
 801c486:	691b      	ldr	r3, [r3, #16]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d00d      	beq.n	801c4a8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c48c:	68fa      	ldr	r2, [r7, #12]
 801c48e:	23a7      	movs	r3, #167	@ 0xa7
 801c490:	009b      	lsls	r3, r3, #2
 801c492:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c494:	2b03      	cmp	r3, #3
 801c496:	d107      	bne.n	801c4a8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801c498:	68fa      	ldr	r2, [r7, #12]
 801c49a:	23ad      	movs	r3, #173	@ 0xad
 801c49c:	009b      	lsls	r3, r3, #2
 801c49e:	58d3      	ldr	r3, [r2, r3]
 801c4a0:	691b      	ldr	r3, [r3, #16]
 801c4a2:	68fa      	ldr	r2, [r7, #12]
 801c4a4:	0010      	movs	r0, r2
 801c4a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	0018      	movs	r0, r3
 801c4ac:	f001 f891 	bl	801d5d2 <USBD_CtlSendStatus>
 801c4b0:	e02b      	b.n	801c50a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801c4b2:	68fa      	ldr	r2, [r7, #12]
 801c4b4:	23a5      	movs	r3, #165	@ 0xa5
 801c4b6:	009b      	lsls	r3, r3, #2
 801c4b8:	58d3      	ldr	r3, [r2, r3]
 801c4ba:	2b05      	cmp	r3, #5
 801c4bc:	d125      	bne.n	801c50a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801c4be:	68fa      	ldr	r2, [r7, #12]
 801c4c0:	23a5      	movs	r3, #165	@ 0xa5
 801c4c2:	009b      	lsls	r3, r3, #2
 801c4c4:	2100      	movs	r1, #0
 801c4c6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	2100      	movs	r1, #0
 801c4cc:	0018      	movs	r0, r3
 801c4ce:	f001 fcc0 	bl	801de52 <USBD_LL_StallEP>
 801c4d2:	e01a      	b.n	801c50a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801c4d4:	68fa      	ldr	r2, [r7, #12]
 801c4d6:	23ad      	movs	r3, #173	@ 0xad
 801c4d8:	009b      	lsls	r3, r3, #2
 801c4da:	58d3      	ldr	r3, [r2, r3]
 801c4dc:	699b      	ldr	r3, [r3, #24]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d011      	beq.n	801c506 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c4e2:	68fa      	ldr	r2, [r7, #12]
 801c4e4:	23a7      	movs	r3, #167	@ 0xa7
 801c4e6:	009b      	lsls	r3, r3, #2
 801c4e8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801c4ea:	2b03      	cmp	r3, #3
 801c4ec:	d10b      	bne.n	801c506 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801c4ee:	68fa      	ldr	r2, [r7, #12]
 801c4f0:	23ad      	movs	r3, #173	@ 0xad
 801c4f2:	009b      	lsls	r3, r3, #2
 801c4f4:	58d3      	ldr	r3, [r2, r3]
 801c4f6:	699b      	ldr	r3, [r3, #24]
 801c4f8:	220b      	movs	r2, #11
 801c4fa:	18ba      	adds	r2, r7, r2
 801c4fc:	7811      	ldrb	r1, [r2, #0]
 801c4fe:	68fa      	ldr	r2, [r7, #12]
 801c500:	0010      	movs	r0, r2
 801c502:	4798      	blx	r3
 801c504:	e001      	b.n	801c50a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c506:	2302      	movs	r3, #2
 801c508:	e000      	b.n	801c50c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801c50a:	2300      	movs	r3, #0
}
 801c50c:	0018      	movs	r0, r3
 801c50e:	46bd      	mov	sp, r7
 801c510:	b006      	add	sp, #24
 801c512:	bd80      	pop	{r7, pc}

0801c514 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c514:	b580      	push	{r7, lr}
 801c516:	b086      	sub	sp, #24
 801c518:	af00      	add	r7, sp, #0
 801c51a:	60f8      	str	r0, [r7, #12]
 801c51c:	607a      	str	r2, [r7, #4]
 801c51e:	200b      	movs	r0, #11
 801c520:	183b      	adds	r3, r7, r0
 801c522:	1c0a      	adds	r2, r1, #0
 801c524:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c526:	183b      	adds	r3, r7, r0
 801c528:	781b      	ldrb	r3, [r3, #0]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d000      	beq.n	801c530 <USBD_LL_DataInStage+0x1c>
 801c52e:	e08e      	b.n	801c64e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	3314      	adds	r3, #20
 801c534:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c536:	68fa      	ldr	r2, [r7, #12]
 801c538:	23a5      	movs	r3, #165	@ 0xa5
 801c53a:	009b      	lsls	r3, r3, #2
 801c53c:	58d3      	ldr	r3, [r2, r3]
 801c53e:	2b02      	cmp	r3, #2
 801c540:	d164      	bne.n	801c60c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801c542:	697b      	ldr	r3, [r7, #20]
 801c544:	68da      	ldr	r2, [r3, #12]
 801c546:	697b      	ldr	r3, [r7, #20]
 801c548:	691b      	ldr	r3, [r3, #16]
 801c54a:	429a      	cmp	r2, r3
 801c54c:	d915      	bls.n	801c57a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c54e:	697b      	ldr	r3, [r7, #20]
 801c550:	68da      	ldr	r2, [r3, #12]
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	691b      	ldr	r3, [r3, #16]
 801c556:	1ad2      	subs	r2, r2, r3
 801c558:	697b      	ldr	r3, [r7, #20]
 801c55a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c55c:	697b      	ldr	r3, [r7, #20]
 801c55e:	68db      	ldr	r3, [r3, #12]
 801c560:	b29a      	uxth	r2, r3
 801c562:	6879      	ldr	r1, [r7, #4]
 801c564:	68fb      	ldr	r3, [r7, #12]
 801c566:	0018      	movs	r0, r3
 801c568:	f000 ffe9 	bl	801d53e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c56c:	68f8      	ldr	r0, [r7, #12]
 801c56e:	2300      	movs	r3, #0
 801c570:	2200      	movs	r2, #0
 801c572:	2100      	movs	r1, #0
 801c574:	f001 fd56 	bl	801e024 <USBD_LL_PrepareReceive>
 801c578:	e059      	b.n	801c62e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c57a:	697b      	ldr	r3, [r7, #20]
 801c57c:	689a      	ldr	r2, [r3, #8]
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	691b      	ldr	r3, [r3, #16]
 801c582:	0019      	movs	r1, r3
 801c584:	0010      	movs	r0, r2
 801c586:	f7e3 fe93 	bl	80002b0 <__aeabi_uidivmod>
 801c58a:	1e0b      	subs	r3, r1, #0
 801c58c:	d11f      	bne.n	801c5ce <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801c58e:	697b      	ldr	r3, [r7, #20]
 801c590:	689a      	ldr	r2, [r3, #8]
 801c592:	697b      	ldr	r3, [r7, #20]
 801c594:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c596:	429a      	cmp	r2, r3
 801c598:	d319      	bcc.n	801c5ce <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801c59a:	697b      	ldr	r3, [r7, #20]
 801c59c:	689a      	ldr	r2, [r3, #8]
 801c59e:	68f9      	ldr	r1, [r7, #12]
 801c5a0:	23a6      	movs	r3, #166	@ 0xa6
 801c5a2:	009b      	lsls	r3, r3, #2
 801c5a4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801c5a6:	429a      	cmp	r2, r3
 801c5a8:	d211      	bcs.n	801c5ce <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	2200      	movs	r2, #0
 801c5ae:	2100      	movs	r1, #0
 801c5b0:	0018      	movs	r0, r3
 801c5b2:	f000 ffc4 	bl	801d53e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c5b6:	68fa      	ldr	r2, [r7, #12]
 801c5b8:	23a6      	movs	r3, #166	@ 0xa6
 801c5ba:	009b      	lsls	r3, r3, #2
 801c5bc:	2100      	movs	r1, #0
 801c5be:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c5c0:	68f8      	ldr	r0, [r7, #12]
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	2100      	movs	r1, #0
 801c5c8:	f001 fd2c 	bl	801e024 <USBD_LL_PrepareReceive>
 801c5cc:	e02f      	b.n	801c62e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c5ce:	68fa      	ldr	r2, [r7, #12]
 801c5d0:	23ad      	movs	r3, #173	@ 0xad
 801c5d2:	009b      	lsls	r3, r3, #2
 801c5d4:	58d3      	ldr	r3, [r2, r3]
 801c5d6:	68db      	ldr	r3, [r3, #12]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d00d      	beq.n	801c5f8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c5dc:	68fa      	ldr	r2, [r7, #12]
 801c5de:	23a7      	movs	r3, #167	@ 0xa7
 801c5e0:	009b      	lsls	r3, r3, #2
 801c5e2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c5e4:	2b03      	cmp	r3, #3
 801c5e6:	d107      	bne.n	801c5f8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c5e8:	68fa      	ldr	r2, [r7, #12]
 801c5ea:	23ad      	movs	r3, #173	@ 0xad
 801c5ec:	009b      	lsls	r3, r3, #2
 801c5ee:	58d3      	ldr	r3, [r2, r3]
 801c5f0:	68db      	ldr	r3, [r3, #12]
 801c5f2:	68fa      	ldr	r2, [r7, #12]
 801c5f4:	0010      	movs	r0, r2
 801c5f6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	2180      	movs	r1, #128	@ 0x80
 801c5fc:	0018      	movs	r0, r3
 801c5fe:	f001 fc28 	bl	801de52 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	0018      	movs	r0, r3
 801c606:	f000 fff8 	bl	801d5fa <USBD_CtlReceiveStatus>
 801c60a:	e010      	b.n	801c62e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c60c:	68fa      	ldr	r2, [r7, #12]
 801c60e:	23a5      	movs	r3, #165	@ 0xa5
 801c610:	009b      	lsls	r3, r3, #2
 801c612:	58d3      	ldr	r3, [r2, r3]
 801c614:	2b04      	cmp	r3, #4
 801c616:	d005      	beq.n	801c624 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c618:	68fa      	ldr	r2, [r7, #12]
 801c61a:	23a5      	movs	r3, #165	@ 0xa5
 801c61c:	009b      	lsls	r3, r3, #2
 801c61e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c620:	2b00      	cmp	r3, #0
 801c622:	d104      	bne.n	801c62e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	2180      	movs	r1, #128	@ 0x80
 801c628:	0018      	movs	r0, r3
 801c62a:	f001 fc12 	bl	801de52 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c62e:	68fa      	ldr	r2, [r7, #12]
 801c630:	23a8      	movs	r3, #168	@ 0xa8
 801c632:	009b      	lsls	r3, r3, #2
 801c634:	5cd3      	ldrb	r3, [r2, r3]
 801c636:	2b01      	cmp	r3, #1
 801c638:	d124      	bne.n	801c684 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	0018      	movs	r0, r3
 801c63e:	f7ff fe43 	bl	801c2c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c642:	68fa      	ldr	r2, [r7, #12]
 801c644:	23a8      	movs	r3, #168	@ 0xa8
 801c646:	009b      	lsls	r3, r3, #2
 801c648:	2100      	movs	r1, #0
 801c64a:	54d1      	strb	r1, [r2, r3]
 801c64c:	e01a      	b.n	801c684 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c64e:	68fa      	ldr	r2, [r7, #12]
 801c650:	23ad      	movs	r3, #173	@ 0xad
 801c652:	009b      	lsls	r3, r3, #2
 801c654:	58d3      	ldr	r3, [r2, r3]
 801c656:	695b      	ldr	r3, [r3, #20]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d011      	beq.n	801c680 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c65c:	68fa      	ldr	r2, [r7, #12]
 801c65e:	23a7      	movs	r3, #167	@ 0xa7
 801c660:	009b      	lsls	r3, r3, #2
 801c662:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801c664:	2b03      	cmp	r3, #3
 801c666:	d10b      	bne.n	801c680 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c668:	68fa      	ldr	r2, [r7, #12]
 801c66a:	23ad      	movs	r3, #173	@ 0xad
 801c66c:	009b      	lsls	r3, r3, #2
 801c66e:	58d3      	ldr	r3, [r2, r3]
 801c670:	695b      	ldr	r3, [r3, #20]
 801c672:	220b      	movs	r2, #11
 801c674:	18ba      	adds	r2, r7, r2
 801c676:	7811      	ldrb	r1, [r2, #0]
 801c678:	68fa      	ldr	r2, [r7, #12]
 801c67a:	0010      	movs	r0, r2
 801c67c:	4798      	blx	r3
 801c67e:	e001      	b.n	801c684 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c680:	2302      	movs	r3, #2
 801c682:	e000      	b.n	801c686 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801c684:	2300      	movs	r3, #0
}
 801c686:	0018      	movs	r0, r3
 801c688:	46bd      	mov	sp, r7
 801c68a:	b006      	add	sp, #24
 801c68c:	bd80      	pop	{r7, pc}

0801c68e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c68e:	b580      	push	{r7, lr}
 801c690:	b082      	sub	sp, #8
 801c692:	af00      	add	r7, sp, #0
 801c694:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c696:	6878      	ldr	r0, [r7, #4]
 801c698:	2340      	movs	r3, #64	@ 0x40
 801c69a:	2200      	movs	r2, #0
 801c69c:	2100      	movs	r1, #0
 801c69e:	f001 fb76 	bl	801dd8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c6a2:	687a      	ldr	r2, [r7, #4]
 801c6a4:	23ac      	movs	r3, #172	@ 0xac
 801c6a6:	005b      	lsls	r3, r3, #1
 801c6a8:	2101      	movs	r1, #1
 801c6aa:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c6ac:	687a      	ldr	r2, [r7, #4]
 801c6ae:	23b2      	movs	r3, #178	@ 0xb2
 801c6b0:	005b      	lsls	r3, r3, #1
 801c6b2:	2140      	movs	r1, #64	@ 0x40
 801c6b4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c6b6:	6878      	ldr	r0, [r7, #4]
 801c6b8:	2340      	movs	r3, #64	@ 0x40
 801c6ba:	2200      	movs	r2, #0
 801c6bc:	2180      	movs	r1, #128	@ 0x80
 801c6be:	f001 fb66 	bl	801dd8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	2201      	movs	r2, #1
 801c6c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	2240      	movs	r2, #64	@ 0x40
 801c6cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c6ce:	687a      	ldr	r2, [r7, #4]
 801c6d0:	23a7      	movs	r3, #167	@ 0xa7
 801c6d2:	009b      	lsls	r3, r3, #2
 801c6d4:	2101      	movs	r1, #1
 801c6d6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801c6d8:	687a      	ldr	r2, [r7, #4]
 801c6da:	23a5      	movs	r3, #165	@ 0xa5
 801c6dc:	009b      	lsls	r3, r3, #2
 801c6de:	2100      	movs	r1, #0
 801c6e0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	2200      	movs	r2, #0
 801c6e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c6e8:	687a      	ldr	r2, [r7, #4]
 801c6ea:	23a9      	movs	r3, #169	@ 0xa9
 801c6ec:	009b      	lsls	r3, r3, #2
 801c6ee:	2100      	movs	r1, #0
 801c6f0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801c6f2:	687a      	ldr	r2, [r7, #4]
 801c6f4:	23ae      	movs	r3, #174	@ 0xae
 801c6f6:	009b      	lsls	r3, r3, #2
 801c6f8:	58d3      	ldr	r3, [r2, r3]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d00a      	beq.n	801c714 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c6fe:	687a      	ldr	r2, [r7, #4]
 801c700:	23ad      	movs	r3, #173	@ 0xad
 801c702:	009b      	lsls	r3, r3, #2
 801c704:	58d3      	ldr	r3, [r2, r3]
 801c706:	685a      	ldr	r2, [r3, #4]
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	685b      	ldr	r3, [r3, #4]
 801c70c:	b2d9      	uxtb	r1, r3
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	0018      	movs	r0, r3
 801c712:	4790      	blx	r2
  }

  return USBD_OK;
 801c714:	2300      	movs	r3, #0
}
 801c716:	0018      	movs	r0, r3
 801c718:	46bd      	mov	sp, r7
 801c71a:	b002      	add	sp, #8
 801c71c:	bd80      	pop	{r7, pc}

0801c71e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c71e:	b580      	push	{r7, lr}
 801c720:	b082      	sub	sp, #8
 801c722:	af00      	add	r7, sp, #0
 801c724:	6078      	str	r0, [r7, #4]
 801c726:	000a      	movs	r2, r1
 801c728:	1cfb      	adds	r3, r7, #3
 801c72a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	1cfa      	adds	r2, r7, #3
 801c730:	7812      	ldrb	r2, [r2, #0]
 801c732:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c734:	2300      	movs	r3, #0
}
 801c736:	0018      	movs	r0, r3
 801c738:	46bd      	mov	sp, r7
 801c73a:	b002      	add	sp, #8
 801c73c:	bd80      	pop	{r7, pc}
	...

0801c740 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b082      	sub	sp, #8
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c748:	687a      	ldr	r2, [r7, #4]
 801c74a:	23a7      	movs	r3, #167	@ 0xa7
 801c74c:	009b      	lsls	r3, r3, #2
 801c74e:	5cd1      	ldrb	r1, [r2, r3]
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	4a06      	ldr	r2, [pc, #24]	@ (801c76c <USBD_LL_Suspend+0x2c>)
 801c754:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c756:	687a      	ldr	r2, [r7, #4]
 801c758:	23a7      	movs	r3, #167	@ 0xa7
 801c75a:	009b      	lsls	r3, r3, #2
 801c75c:	2104      	movs	r1, #4
 801c75e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801c760:	2300      	movs	r3, #0
}
 801c762:	0018      	movs	r0, r3
 801c764:	46bd      	mov	sp, r7
 801c766:	b002      	add	sp, #8
 801c768:	bd80      	pop	{r7, pc}
 801c76a:	46c0      	nop			@ (mov r8, r8)
 801c76c:	0000029d 	.word	0x0000029d

0801c770 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b082      	sub	sp, #8
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c778:	687a      	ldr	r2, [r7, #4]
 801c77a:	23a7      	movs	r3, #167	@ 0xa7
 801c77c:	009b      	lsls	r3, r3, #2
 801c77e:	5cd3      	ldrb	r3, [r2, r3]
 801c780:	2b04      	cmp	r3, #4
 801c782:	d106      	bne.n	801c792 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	4a05      	ldr	r2, [pc, #20]	@ (801c79c <USBD_LL_Resume+0x2c>)
 801c788:	5c99      	ldrb	r1, [r3, r2]
 801c78a:	687a      	ldr	r2, [r7, #4]
 801c78c:	23a7      	movs	r3, #167	@ 0xa7
 801c78e:	009b      	lsls	r3, r3, #2
 801c790:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801c792:	2300      	movs	r3, #0
}
 801c794:	0018      	movs	r0, r3
 801c796:	46bd      	mov	sp, r7
 801c798:	b002      	add	sp, #8
 801c79a:	bd80      	pop	{r7, pc}
 801c79c:	0000029d 	.word	0x0000029d

0801c7a0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b082      	sub	sp, #8
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c7a8:	687a      	ldr	r2, [r7, #4]
 801c7aa:	23a7      	movs	r3, #167	@ 0xa7
 801c7ac:	009b      	lsls	r3, r3, #2
 801c7ae:	5cd3      	ldrb	r3, [r2, r3]
 801c7b0:	2b03      	cmp	r3, #3
 801c7b2:	d10e      	bne.n	801c7d2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801c7b4:	687a      	ldr	r2, [r7, #4]
 801c7b6:	23ad      	movs	r3, #173	@ 0xad
 801c7b8:	009b      	lsls	r3, r3, #2
 801c7ba:	58d3      	ldr	r3, [r2, r3]
 801c7bc:	69db      	ldr	r3, [r3, #28]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d007      	beq.n	801c7d2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801c7c2:	687a      	ldr	r2, [r7, #4]
 801c7c4:	23ad      	movs	r3, #173	@ 0xad
 801c7c6:	009b      	lsls	r3, r3, #2
 801c7c8:	58d3      	ldr	r3, [r2, r3]
 801c7ca:	69db      	ldr	r3, [r3, #28]
 801c7cc:	687a      	ldr	r2, [r7, #4]
 801c7ce:	0010      	movs	r0, r2
 801c7d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c7d2:	2300      	movs	r3, #0
}
 801c7d4:	0018      	movs	r0, r3
 801c7d6:	46bd      	mov	sp, r7
 801c7d8:	b002      	add	sp, #8
 801c7da:	bd80      	pop	{r7, pc}

0801c7dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b084      	sub	sp, #16
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
 801c7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c7e6:	230f      	movs	r3, #15
 801c7e8:	18fb      	adds	r3, r7, r3
 801c7ea:	2200      	movs	r2, #0
 801c7ec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c7ee:	683b      	ldr	r3, [r7, #0]
 801c7f0:	781b      	ldrb	r3, [r3, #0]
 801c7f2:	001a      	movs	r2, r3
 801c7f4:	2360      	movs	r3, #96	@ 0x60
 801c7f6:	4013      	ands	r3, r2
 801c7f8:	2b40      	cmp	r3, #64	@ 0x40
 801c7fa:	d004      	beq.n	801c806 <USBD_StdDevReq+0x2a>
 801c7fc:	d84f      	bhi.n	801c89e <USBD_StdDevReq+0xc2>
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d00b      	beq.n	801c81a <USBD_StdDevReq+0x3e>
 801c802:	2b20      	cmp	r3, #32
 801c804:	d14b      	bne.n	801c89e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	23ad      	movs	r3, #173	@ 0xad
 801c80a:	009b      	lsls	r3, r3, #2
 801c80c:	58d3      	ldr	r3, [r2, r3]
 801c80e:	689b      	ldr	r3, [r3, #8]
 801c810:	6839      	ldr	r1, [r7, #0]
 801c812:	687a      	ldr	r2, [r7, #4]
 801c814:	0010      	movs	r0, r2
 801c816:	4798      	blx	r3
      break;
 801c818:	e048      	b.n	801c8ac <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c81a:	683b      	ldr	r3, [r7, #0]
 801c81c:	785b      	ldrb	r3, [r3, #1]
 801c81e:	2b09      	cmp	r3, #9
 801c820:	d835      	bhi.n	801c88e <USBD_StdDevReq+0xb2>
 801c822:	009a      	lsls	r2, r3, #2
 801c824:	4b25      	ldr	r3, [pc, #148]	@ (801c8bc <USBD_StdDevReq+0xe0>)
 801c826:	18d3      	adds	r3, r2, r3
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c82c:	683a      	ldr	r2, [r7, #0]
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	0011      	movs	r1, r2
 801c832:	0018      	movs	r0, r3
 801c834:	f000 fa52 	bl	801ccdc <USBD_GetDescriptor>
          break;
 801c838:	e030      	b.n	801c89c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c83a:	683a      	ldr	r2, [r7, #0]
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	0011      	movs	r1, r2
 801c840:	0018      	movs	r0, r3
 801c842:	f000 fbfd 	bl	801d040 <USBD_SetAddress>
          break;
 801c846:	e029      	b.n	801c89c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c848:	683a      	ldr	r2, [r7, #0]
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	0011      	movs	r1, r2
 801c84e:	0018      	movs	r0, r3
 801c850:	f000 fc4a 	bl	801d0e8 <USBD_SetConfig>
          break;
 801c854:	e022      	b.n	801c89c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c856:	683a      	ldr	r2, [r7, #0]
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	0011      	movs	r1, r2
 801c85c:	0018      	movs	r0, r3
 801c85e:	f000 fce7 	bl	801d230 <USBD_GetConfig>
          break;
 801c862:	e01b      	b.n	801c89c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c864:	683a      	ldr	r2, [r7, #0]
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	0011      	movs	r1, r2
 801c86a:	0018      	movs	r0, r3
 801c86c:	f000 fd1b 	bl	801d2a6 <USBD_GetStatus>
          break;
 801c870:	e014      	b.n	801c89c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c872:	683a      	ldr	r2, [r7, #0]
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	0011      	movs	r1, r2
 801c878:	0018      	movs	r0, r3
 801c87a:	f000 fd4e 	bl	801d31a <USBD_SetFeature>
          break;
 801c87e:	e00d      	b.n	801c89c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c880:	683a      	ldr	r2, [r7, #0]
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	0011      	movs	r1, r2
 801c886:	0018      	movs	r0, r3
 801c888:	f000 fd5d 	bl	801d346 <USBD_ClrFeature>
          break;
 801c88c:	e006      	b.n	801c89c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c88e:	683a      	ldr	r2, [r7, #0]
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	0011      	movs	r1, r2
 801c894:	0018      	movs	r0, r3
 801c896:	f000 fdb4 	bl	801d402 <USBD_CtlError>
          break;
 801c89a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c89c:	e006      	b.n	801c8ac <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801c89e:	683a      	ldr	r2, [r7, #0]
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	0011      	movs	r1, r2
 801c8a4:	0018      	movs	r0, r3
 801c8a6:	f000 fdac 	bl	801d402 <USBD_CtlError>
      break;
 801c8aa:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c8ac:	230f      	movs	r3, #15
 801c8ae:	18fb      	adds	r3, r7, r3
 801c8b0:	781b      	ldrb	r3, [r3, #0]
}
 801c8b2:	0018      	movs	r0, r3
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	b004      	add	sp, #16
 801c8b8:	bd80      	pop	{r7, pc}
 801c8ba:	46c0      	nop			@ (mov r8, r8)
 801c8bc:	08026784 	.word	0x08026784

0801c8c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c8c0:	b5b0      	push	{r4, r5, r7, lr}
 801c8c2:	b084      	sub	sp, #16
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c8ca:	230f      	movs	r3, #15
 801c8cc:	18fb      	adds	r3, r7, r3
 801c8ce:	2200      	movs	r2, #0
 801c8d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c8d2:	683b      	ldr	r3, [r7, #0]
 801c8d4:	781b      	ldrb	r3, [r3, #0]
 801c8d6:	001a      	movs	r2, r3
 801c8d8:	2360      	movs	r3, #96	@ 0x60
 801c8da:	4013      	ands	r3, r2
 801c8dc:	2b40      	cmp	r3, #64	@ 0x40
 801c8de:	d004      	beq.n	801c8ea <USBD_StdItfReq+0x2a>
 801c8e0:	d839      	bhi.n	801c956 <USBD_StdItfReq+0x96>
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d001      	beq.n	801c8ea <USBD_StdItfReq+0x2a>
 801c8e6:	2b20      	cmp	r3, #32
 801c8e8:	d135      	bne.n	801c956 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c8ea:	687a      	ldr	r2, [r7, #4]
 801c8ec:	23a7      	movs	r3, #167	@ 0xa7
 801c8ee:	009b      	lsls	r3, r3, #2
 801c8f0:	5cd3      	ldrb	r3, [r2, r3]
 801c8f2:	3b01      	subs	r3, #1
 801c8f4:	2b02      	cmp	r3, #2
 801c8f6:	d825      	bhi.n	801c944 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	889b      	ldrh	r3, [r3, #4]
 801c8fc:	b2db      	uxtb	r3, r3
 801c8fe:	2b01      	cmp	r3, #1
 801c900:	d819      	bhi.n	801c936 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c902:	687a      	ldr	r2, [r7, #4]
 801c904:	23ad      	movs	r3, #173	@ 0xad
 801c906:	009b      	lsls	r3, r3, #2
 801c908:	58d3      	ldr	r3, [r2, r3]
 801c90a:	689b      	ldr	r3, [r3, #8]
 801c90c:	250f      	movs	r5, #15
 801c90e:	197c      	adds	r4, r7, r5
 801c910:	6839      	ldr	r1, [r7, #0]
 801c912:	687a      	ldr	r2, [r7, #4]
 801c914:	0010      	movs	r0, r2
 801c916:	4798      	blx	r3
 801c918:	0003      	movs	r3, r0
 801c91a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c91c:	683b      	ldr	r3, [r7, #0]
 801c91e:	88db      	ldrh	r3, [r3, #6]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d116      	bne.n	801c952 <USBD_StdItfReq+0x92>
 801c924:	197b      	adds	r3, r7, r5
 801c926:	781b      	ldrb	r3, [r3, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d112      	bne.n	801c952 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	0018      	movs	r0, r3
 801c930:	f000 fe4f 	bl	801d5d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c934:	e00d      	b.n	801c952 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c936:	683a      	ldr	r2, [r7, #0]
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	0011      	movs	r1, r2
 801c93c:	0018      	movs	r0, r3
 801c93e:	f000 fd60 	bl	801d402 <USBD_CtlError>
          break;
 801c942:	e006      	b.n	801c952 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c944:	683a      	ldr	r2, [r7, #0]
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	0011      	movs	r1, r2
 801c94a:	0018      	movs	r0, r3
 801c94c:	f000 fd59 	bl	801d402 <USBD_CtlError>
          break;
 801c950:	e000      	b.n	801c954 <USBD_StdItfReq+0x94>
          break;
 801c952:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c954:	e006      	b.n	801c964 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c956:	683a      	ldr	r2, [r7, #0]
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	0011      	movs	r1, r2
 801c95c:	0018      	movs	r0, r3
 801c95e:	f000 fd50 	bl	801d402 <USBD_CtlError>
      break;
 801c962:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c964:	2300      	movs	r3, #0
}
 801c966:	0018      	movs	r0, r3
 801c968:	46bd      	mov	sp, r7
 801c96a:	b004      	add	sp, #16
 801c96c:	bdb0      	pop	{r4, r5, r7, pc}

0801c96e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c96e:	b5b0      	push	{r4, r5, r7, lr}
 801c970:	b084      	sub	sp, #16
 801c972:	af00      	add	r7, sp, #0
 801c974:	6078      	str	r0, [r7, #4]
 801c976:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c978:	230f      	movs	r3, #15
 801c97a:	18fb      	adds	r3, r7, r3
 801c97c:	2200      	movs	r2, #0
 801c97e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c980:	683b      	ldr	r3, [r7, #0]
 801c982:	889a      	ldrh	r2, [r3, #4]
 801c984:	230e      	movs	r3, #14
 801c986:	18fb      	adds	r3, r7, r3
 801c988:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	781b      	ldrb	r3, [r3, #0]
 801c98e:	001a      	movs	r2, r3
 801c990:	2360      	movs	r3, #96	@ 0x60
 801c992:	4013      	ands	r3, r2
 801c994:	2b40      	cmp	r3, #64	@ 0x40
 801c996:	d006      	beq.n	801c9a6 <USBD_StdEPReq+0x38>
 801c998:	d900      	bls.n	801c99c <USBD_StdEPReq+0x2e>
 801c99a:	e190      	b.n	801ccbe <USBD_StdEPReq+0x350>
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d00c      	beq.n	801c9ba <USBD_StdEPReq+0x4c>
 801c9a0:	2b20      	cmp	r3, #32
 801c9a2:	d000      	beq.n	801c9a6 <USBD_StdEPReq+0x38>
 801c9a4:	e18b      	b.n	801ccbe <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c9a6:	687a      	ldr	r2, [r7, #4]
 801c9a8:	23ad      	movs	r3, #173	@ 0xad
 801c9aa:	009b      	lsls	r3, r3, #2
 801c9ac:	58d3      	ldr	r3, [r2, r3]
 801c9ae:	689b      	ldr	r3, [r3, #8]
 801c9b0:	6839      	ldr	r1, [r7, #0]
 801c9b2:	687a      	ldr	r2, [r7, #4]
 801c9b4:	0010      	movs	r0, r2
 801c9b6:	4798      	blx	r3
      break;
 801c9b8:	e188      	b.n	801cccc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c9ba:	683b      	ldr	r3, [r7, #0]
 801c9bc:	781b      	ldrb	r3, [r3, #0]
 801c9be:	001a      	movs	r2, r3
 801c9c0:	2360      	movs	r3, #96	@ 0x60
 801c9c2:	4013      	ands	r3, r2
 801c9c4:	2b20      	cmp	r3, #32
 801c9c6:	d10f      	bne.n	801c9e8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c9c8:	687a      	ldr	r2, [r7, #4]
 801c9ca:	23ad      	movs	r3, #173	@ 0xad
 801c9cc:	009b      	lsls	r3, r3, #2
 801c9ce:	58d3      	ldr	r3, [r2, r3]
 801c9d0:	689b      	ldr	r3, [r3, #8]
 801c9d2:	250f      	movs	r5, #15
 801c9d4:	197c      	adds	r4, r7, r5
 801c9d6:	6839      	ldr	r1, [r7, #0]
 801c9d8:	687a      	ldr	r2, [r7, #4]
 801c9da:	0010      	movs	r0, r2
 801c9dc:	4798      	blx	r3
 801c9de:	0003      	movs	r3, r0
 801c9e0:	7023      	strb	r3, [r4, #0]

        return ret;
 801c9e2:	197b      	adds	r3, r7, r5
 801c9e4:	781b      	ldrb	r3, [r3, #0]
 801c9e6:	e174      	b.n	801ccd2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c9e8:	683b      	ldr	r3, [r7, #0]
 801c9ea:	785b      	ldrb	r3, [r3, #1]
 801c9ec:	2b03      	cmp	r3, #3
 801c9ee:	d007      	beq.n	801ca00 <USBD_StdEPReq+0x92>
 801c9f0:	dd00      	ble.n	801c9f4 <USBD_StdEPReq+0x86>
 801c9f2:	e15c      	b.n	801ccae <USBD_StdEPReq+0x340>
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d100      	bne.n	801c9fa <USBD_StdEPReq+0x8c>
 801c9f8:	e092      	b.n	801cb20 <USBD_StdEPReq+0x1b2>
 801c9fa:	2b01      	cmp	r3, #1
 801c9fc:	d04b      	beq.n	801ca96 <USBD_StdEPReq+0x128>
 801c9fe:	e156      	b.n	801ccae <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801ca00:	687a      	ldr	r2, [r7, #4]
 801ca02:	23a7      	movs	r3, #167	@ 0xa7
 801ca04:	009b      	lsls	r3, r3, #2
 801ca06:	5cd3      	ldrb	r3, [r2, r3]
 801ca08:	2b02      	cmp	r3, #2
 801ca0a:	d002      	beq.n	801ca12 <USBD_StdEPReq+0xa4>
 801ca0c:	2b03      	cmp	r3, #3
 801ca0e:	d01d      	beq.n	801ca4c <USBD_StdEPReq+0xde>
 801ca10:	e039      	b.n	801ca86 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ca12:	220e      	movs	r2, #14
 801ca14:	18bb      	adds	r3, r7, r2
 801ca16:	781b      	ldrb	r3, [r3, #0]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d010      	beq.n	801ca3e <USBD_StdEPReq+0xd0>
 801ca1c:	18bb      	adds	r3, r7, r2
 801ca1e:	781b      	ldrb	r3, [r3, #0]
 801ca20:	2b80      	cmp	r3, #128	@ 0x80
 801ca22:	d00c      	beq.n	801ca3e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801ca24:	18bb      	adds	r3, r7, r2
 801ca26:	781a      	ldrb	r2, [r3, #0]
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	0011      	movs	r1, r2
 801ca2c:	0018      	movs	r0, r3
 801ca2e:	f001 fa10 	bl	801de52 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	2180      	movs	r1, #128	@ 0x80
 801ca36:	0018      	movs	r0, r3
 801ca38:	f001 fa0b 	bl	801de52 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ca3c:	e02a      	b.n	801ca94 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801ca3e:	683a      	ldr	r2, [r7, #0]
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	0011      	movs	r1, r2
 801ca44:	0018      	movs	r0, r3
 801ca46:	f000 fcdc 	bl	801d402 <USBD_CtlError>
              break;
 801ca4a:	e023      	b.n	801ca94 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ca4c:	683b      	ldr	r3, [r7, #0]
 801ca4e:	885b      	ldrh	r3, [r3, #2]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d113      	bne.n	801ca7c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801ca54:	220e      	movs	r2, #14
 801ca56:	18bb      	adds	r3, r7, r2
 801ca58:	781b      	ldrb	r3, [r3, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d00e      	beq.n	801ca7c <USBD_StdEPReq+0x10e>
 801ca5e:	18bb      	adds	r3, r7, r2
 801ca60:	781b      	ldrb	r3, [r3, #0]
 801ca62:	2b80      	cmp	r3, #128	@ 0x80
 801ca64:	d00a      	beq.n	801ca7c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801ca66:	683b      	ldr	r3, [r7, #0]
 801ca68:	88db      	ldrh	r3, [r3, #6]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d106      	bne.n	801ca7c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801ca6e:	18bb      	adds	r3, r7, r2
 801ca70:	781a      	ldrb	r2, [r3, #0]
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	0011      	movs	r1, r2
 801ca76:	0018      	movs	r0, r3
 801ca78:	f001 f9eb 	bl	801de52 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	0018      	movs	r0, r3
 801ca80:	f000 fda7 	bl	801d5d2 <USBD_CtlSendStatus>

              break;
 801ca84:	e006      	b.n	801ca94 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801ca86:	683a      	ldr	r2, [r7, #0]
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	0011      	movs	r1, r2
 801ca8c:	0018      	movs	r0, r3
 801ca8e:	f000 fcb8 	bl	801d402 <USBD_CtlError>
              break;
 801ca92:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ca94:	e112      	b.n	801ccbc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801ca96:	687a      	ldr	r2, [r7, #4]
 801ca98:	23a7      	movs	r3, #167	@ 0xa7
 801ca9a:	009b      	lsls	r3, r3, #2
 801ca9c:	5cd3      	ldrb	r3, [r2, r3]
 801ca9e:	2b02      	cmp	r3, #2
 801caa0:	d002      	beq.n	801caa8 <USBD_StdEPReq+0x13a>
 801caa2:	2b03      	cmp	r3, #3
 801caa4:	d01d      	beq.n	801cae2 <USBD_StdEPReq+0x174>
 801caa6:	e032      	b.n	801cb0e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801caa8:	220e      	movs	r2, #14
 801caaa:	18bb      	adds	r3, r7, r2
 801caac:	781b      	ldrb	r3, [r3, #0]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d010      	beq.n	801cad4 <USBD_StdEPReq+0x166>
 801cab2:	18bb      	adds	r3, r7, r2
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	2b80      	cmp	r3, #128	@ 0x80
 801cab8:	d00c      	beq.n	801cad4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801caba:	18bb      	adds	r3, r7, r2
 801cabc:	781a      	ldrb	r2, [r3, #0]
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	0011      	movs	r1, r2
 801cac2:	0018      	movs	r0, r3
 801cac4:	f001 f9c5 	bl	801de52 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	2180      	movs	r1, #128	@ 0x80
 801cacc:	0018      	movs	r0, r3
 801cace:	f001 f9c0 	bl	801de52 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cad2:	e024      	b.n	801cb1e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801cad4:	683a      	ldr	r2, [r7, #0]
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	0011      	movs	r1, r2
 801cada:	0018      	movs	r0, r3
 801cadc:	f000 fc91 	bl	801d402 <USBD_CtlError>
              break;
 801cae0:	e01d      	b.n	801cb1e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	885b      	ldrh	r3, [r3, #2]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d118      	bne.n	801cb1c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801caea:	210e      	movs	r1, #14
 801caec:	187b      	adds	r3, r7, r1
 801caee:	781b      	ldrb	r3, [r3, #0]
 801caf0:	227f      	movs	r2, #127	@ 0x7f
 801caf2:	4013      	ands	r3, r2
 801caf4:	d006      	beq.n	801cb04 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801caf6:	187b      	adds	r3, r7, r1
 801caf8:	781a      	ldrb	r2, [r3, #0]
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	0011      	movs	r1, r2
 801cafe:	0018      	movs	r0, r3
 801cb00:	f001 f9d2 	bl	801dea8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	0018      	movs	r0, r3
 801cb08:	f000 fd63 	bl	801d5d2 <USBD_CtlSendStatus>
              }
              break;
 801cb0c:	e006      	b.n	801cb1c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801cb0e:	683a      	ldr	r2, [r7, #0]
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	0011      	movs	r1, r2
 801cb14:	0018      	movs	r0, r3
 801cb16:	f000 fc74 	bl	801d402 <USBD_CtlError>
              break;
 801cb1a:	e000      	b.n	801cb1e <USBD_StdEPReq+0x1b0>
              break;
 801cb1c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801cb1e:	e0cd      	b.n	801ccbc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801cb20:	687a      	ldr	r2, [r7, #4]
 801cb22:	23a7      	movs	r3, #167	@ 0xa7
 801cb24:	009b      	lsls	r3, r3, #2
 801cb26:	5cd3      	ldrb	r3, [r2, r3]
 801cb28:	2b02      	cmp	r3, #2
 801cb2a:	d002      	beq.n	801cb32 <USBD_StdEPReq+0x1c4>
 801cb2c:	2b03      	cmp	r3, #3
 801cb2e:	d03c      	beq.n	801cbaa <USBD_StdEPReq+0x23c>
 801cb30:	e0b5      	b.n	801cc9e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cb32:	220e      	movs	r2, #14
 801cb34:	18bb      	adds	r3, r7, r2
 801cb36:	781b      	ldrb	r3, [r3, #0]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d00a      	beq.n	801cb52 <USBD_StdEPReq+0x1e4>
 801cb3c:	18bb      	adds	r3, r7, r2
 801cb3e:	781b      	ldrb	r3, [r3, #0]
 801cb40:	2b80      	cmp	r3, #128	@ 0x80
 801cb42:	d006      	beq.n	801cb52 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801cb44:	683a      	ldr	r2, [r7, #0]
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	0011      	movs	r1, r2
 801cb4a:	0018      	movs	r0, r3
 801cb4c:	f000 fc59 	bl	801d402 <USBD_CtlError>
                break;
 801cb50:	e0ac      	b.n	801ccac <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cb52:	220e      	movs	r2, #14
 801cb54:	18bb      	adds	r3, r7, r2
 801cb56:	781b      	ldrb	r3, [r3, #0]
 801cb58:	b25b      	sxtb	r3, r3
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	da0c      	bge.n	801cb78 <USBD_StdEPReq+0x20a>
 801cb5e:	18bb      	adds	r3, r7, r2
 801cb60:	781b      	ldrb	r3, [r3, #0]
 801cb62:	227f      	movs	r2, #127	@ 0x7f
 801cb64:	401a      	ands	r2, r3
 801cb66:	0013      	movs	r3, r2
 801cb68:	009b      	lsls	r3, r3, #2
 801cb6a:	189b      	adds	r3, r3, r2
 801cb6c:	009b      	lsls	r3, r3, #2
 801cb6e:	3310      	adds	r3, #16
 801cb70:	687a      	ldr	r2, [r7, #4]
 801cb72:	18d3      	adds	r3, r2, r3
 801cb74:	3304      	adds	r3, #4
 801cb76:	e00d      	b.n	801cb94 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cb78:	230e      	movs	r3, #14
 801cb7a:	18fb      	adds	r3, r7, r3
 801cb7c:	781b      	ldrb	r3, [r3, #0]
 801cb7e:	227f      	movs	r2, #127	@ 0x7f
 801cb80:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cb82:	0013      	movs	r3, r2
 801cb84:	009b      	lsls	r3, r3, #2
 801cb86:	189b      	adds	r3, r3, r2
 801cb88:	009b      	lsls	r3, r3, #2
 801cb8a:	3351      	adds	r3, #81	@ 0x51
 801cb8c:	33ff      	adds	r3, #255	@ 0xff
 801cb8e:	687a      	ldr	r2, [r7, #4]
 801cb90:	18d3      	adds	r3, r2, r3
 801cb92:	3304      	adds	r3, #4
 801cb94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801cb96:	68bb      	ldr	r3, [r7, #8]
 801cb98:	2200      	movs	r2, #0
 801cb9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cb9c:	68b9      	ldr	r1, [r7, #8]
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	2202      	movs	r2, #2
 801cba2:	0018      	movs	r0, r3
 801cba4:	f000 fcab 	bl	801d4fe <USBD_CtlSendData>
              break;
 801cba8:	e080      	b.n	801ccac <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801cbaa:	220e      	movs	r2, #14
 801cbac:	18bb      	adds	r3, r7, r2
 801cbae:	781b      	ldrb	r3, [r3, #0]
 801cbb0:	b25b      	sxtb	r3, r3
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	da14      	bge.n	801cbe0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801cbb6:	18bb      	adds	r3, r7, r2
 801cbb8:	781b      	ldrb	r3, [r3, #0]
 801cbba:	220f      	movs	r2, #15
 801cbbc:	401a      	ands	r2, r3
 801cbbe:	6879      	ldr	r1, [r7, #4]
 801cbc0:	0013      	movs	r3, r2
 801cbc2:	009b      	lsls	r3, r3, #2
 801cbc4:	189b      	adds	r3, r3, r2
 801cbc6:	009b      	lsls	r3, r3, #2
 801cbc8:	18cb      	adds	r3, r1, r3
 801cbca:	3318      	adds	r3, #24
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d11e      	bne.n	801cc10 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801cbd2:	683a      	ldr	r2, [r7, #0]
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	0011      	movs	r1, r2
 801cbd8:	0018      	movs	r0, r3
 801cbda:	f000 fc12 	bl	801d402 <USBD_CtlError>
                  break;
 801cbde:	e065      	b.n	801ccac <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801cbe0:	230e      	movs	r3, #14
 801cbe2:	18fb      	adds	r3, r7, r3
 801cbe4:	781b      	ldrb	r3, [r3, #0]
 801cbe6:	220f      	movs	r2, #15
 801cbe8:	401a      	ands	r2, r3
 801cbea:	6878      	ldr	r0, [r7, #4]
 801cbec:	23ac      	movs	r3, #172	@ 0xac
 801cbee:	0059      	lsls	r1, r3, #1
 801cbf0:	0013      	movs	r3, r2
 801cbf2:	009b      	lsls	r3, r3, #2
 801cbf4:	189b      	adds	r3, r3, r2
 801cbf6:	009b      	lsls	r3, r3, #2
 801cbf8:	18c3      	adds	r3, r0, r3
 801cbfa:	185b      	adds	r3, r3, r1
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	d106      	bne.n	801cc10 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801cc02:	683a      	ldr	r2, [r7, #0]
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	0011      	movs	r1, r2
 801cc08:	0018      	movs	r0, r3
 801cc0a:	f000 fbfa 	bl	801d402 <USBD_CtlError>
                  break;
 801cc0e:	e04d      	b.n	801ccac <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc10:	220e      	movs	r2, #14
 801cc12:	18bb      	adds	r3, r7, r2
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	b25b      	sxtb	r3, r3
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	da0c      	bge.n	801cc36 <USBD_StdEPReq+0x2c8>
 801cc1c:	18bb      	adds	r3, r7, r2
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	227f      	movs	r2, #127	@ 0x7f
 801cc22:	401a      	ands	r2, r3
 801cc24:	0013      	movs	r3, r2
 801cc26:	009b      	lsls	r3, r3, #2
 801cc28:	189b      	adds	r3, r3, r2
 801cc2a:	009b      	lsls	r3, r3, #2
 801cc2c:	3310      	adds	r3, #16
 801cc2e:	687a      	ldr	r2, [r7, #4]
 801cc30:	18d3      	adds	r3, r2, r3
 801cc32:	3304      	adds	r3, #4
 801cc34:	e00d      	b.n	801cc52 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cc36:	230e      	movs	r3, #14
 801cc38:	18fb      	adds	r3, r7, r3
 801cc3a:	781b      	ldrb	r3, [r3, #0]
 801cc3c:	227f      	movs	r2, #127	@ 0x7f
 801cc3e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc40:	0013      	movs	r3, r2
 801cc42:	009b      	lsls	r3, r3, #2
 801cc44:	189b      	adds	r3, r3, r2
 801cc46:	009b      	lsls	r3, r3, #2
 801cc48:	3351      	adds	r3, #81	@ 0x51
 801cc4a:	33ff      	adds	r3, #255	@ 0xff
 801cc4c:	687a      	ldr	r2, [r7, #4]
 801cc4e:	18d3      	adds	r3, r2, r3
 801cc50:	3304      	adds	r3, #4
 801cc52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801cc54:	220e      	movs	r2, #14
 801cc56:	18bb      	adds	r3, r7, r2
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d003      	beq.n	801cc66 <USBD_StdEPReq+0x2f8>
 801cc5e:	18bb      	adds	r3, r7, r2
 801cc60:	781b      	ldrb	r3, [r3, #0]
 801cc62:	2b80      	cmp	r3, #128	@ 0x80
 801cc64:	d103      	bne.n	801cc6e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801cc66:	68bb      	ldr	r3, [r7, #8]
 801cc68:	2200      	movs	r2, #0
 801cc6a:	601a      	str	r2, [r3, #0]
 801cc6c:	e010      	b.n	801cc90 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801cc6e:	230e      	movs	r3, #14
 801cc70:	18fb      	adds	r3, r7, r3
 801cc72:	781a      	ldrb	r2, [r3, #0]
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	0011      	movs	r1, r2
 801cc78:	0018      	movs	r0, r3
 801cc7a:	f001 f940 	bl	801defe <USBD_LL_IsStallEP>
 801cc7e:	1e03      	subs	r3, r0, #0
 801cc80:	d003      	beq.n	801cc8a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801cc82:	68bb      	ldr	r3, [r7, #8]
 801cc84:	2201      	movs	r2, #1
 801cc86:	601a      	str	r2, [r3, #0]
 801cc88:	e002      	b.n	801cc90 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801cc8a:	68bb      	ldr	r3, [r7, #8]
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cc90:	68b9      	ldr	r1, [r7, #8]
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	2202      	movs	r2, #2
 801cc96:	0018      	movs	r0, r3
 801cc98:	f000 fc31 	bl	801d4fe <USBD_CtlSendData>
              break;
 801cc9c:	e006      	b.n	801ccac <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801cc9e:	683a      	ldr	r2, [r7, #0]
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	0011      	movs	r1, r2
 801cca4:	0018      	movs	r0, r3
 801cca6:	f000 fbac 	bl	801d402 <USBD_CtlError>
              break;
 801ccaa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ccac:	e006      	b.n	801ccbc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801ccae:	683a      	ldr	r2, [r7, #0]
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	0011      	movs	r1, r2
 801ccb4:	0018      	movs	r0, r3
 801ccb6:	f000 fba4 	bl	801d402 <USBD_CtlError>
          break;
 801ccba:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ccbc:	e006      	b.n	801cccc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801ccbe:	683a      	ldr	r2, [r7, #0]
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	0011      	movs	r1, r2
 801ccc4:	0018      	movs	r0, r3
 801ccc6:	f000 fb9c 	bl	801d402 <USBD_CtlError>
      break;
 801ccca:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801cccc:	230f      	movs	r3, #15
 801ccce:	18fb      	adds	r3, r7, r3
 801ccd0:	781b      	ldrb	r3, [r3, #0]
}
 801ccd2:	0018      	movs	r0, r3
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	b004      	add	sp, #16
 801ccd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801ccdc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b084      	sub	sp, #16
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6078      	str	r0, [r7, #4]
 801cce4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801cce6:	2308      	movs	r3, #8
 801cce8:	18fb      	adds	r3, r7, r3
 801ccea:	2200      	movs	r2, #0
 801ccec:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801ccee:	2300      	movs	r3, #0
 801ccf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801ccf2:	230b      	movs	r3, #11
 801ccf4:	18fb      	adds	r3, r7, r3
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801ccfa:	683b      	ldr	r3, [r7, #0]
 801ccfc:	885b      	ldrh	r3, [r3, #2]
 801ccfe:	0a1b      	lsrs	r3, r3, #8
 801cd00:	b29b      	uxth	r3, r3
 801cd02:	2b07      	cmp	r3, #7
 801cd04:	d900      	bls.n	801cd08 <USBD_GetDescriptor+0x2c>
 801cd06:	e159      	b.n	801cfbc <USBD_GetDescriptor+0x2e0>
 801cd08:	009a      	lsls	r2, r3, #2
 801cd0a:	4bcb      	ldr	r3, [pc, #812]	@ (801d038 <USBD_GetDescriptor+0x35c>)
 801cd0c:	18d3      	adds	r3, r2, r3
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801cd12:	687a      	ldr	r2, [r7, #4]
 801cd14:	23ac      	movs	r3, #172	@ 0xac
 801cd16:	009b      	lsls	r3, r3, #2
 801cd18:	58d3      	ldr	r3, [r2, r3]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	687a      	ldr	r2, [r7, #4]
 801cd1e:	7c12      	ldrb	r2, [r2, #16]
 801cd20:	2108      	movs	r1, #8
 801cd22:	1879      	adds	r1, r7, r1
 801cd24:	0010      	movs	r0, r2
 801cd26:	4798      	blx	r3
 801cd28:	0003      	movs	r3, r0
 801cd2a:	60fb      	str	r3, [r7, #12]
      break;
 801cd2c:	e153      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	7c1b      	ldrb	r3, [r3, #16]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d10f      	bne.n	801cd56 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801cd36:	687a      	ldr	r2, [r7, #4]
 801cd38:	23ad      	movs	r3, #173	@ 0xad
 801cd3a:	009b      	lsls	r3, r3, #2
 801cd3c:	58d3      	ldr	r3, [r2, r3]
 801cd3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd40:	2208      	movs	r2, #8
 801cd42:	18ba      	adds	r2, r7, r2
 801cd44:	0010      	movs	r0, r2
 801cd46:	4798      	blx	r3
 801cd48:	0003      	movs	r3, r0
 801cd4a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	3301      	adds	r3, #1
 801cd50:	2202      	movs	r2, #2
 801cd52:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801cd54:	e13f      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801cd56:	687a      	ldr	r2, [r7, #4]
 801cd58:	23ad      	movs	r3, #173	@ 0xad
 801cd5a:	009b      	lsls	r3, r3, #2
 801cd5c:	58d3      	ldr	r3, [r2, r3]
 801cd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd60:	2208      	movs	r2, #8
 801cd62:	18ba      	adds	r2, r7, r2
 801cd64:	0010      	movs	r0, r2
 801cd66:	4798      	blx	r3
 801cd68:	0003      	movs	r3, r0
 801cd6a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	3301      	adds	r3, #1
 801cd70:	2202      	movs	r2, #2
 801cd72:	701a      	strb	r2, [r3, #0]
      break;
 801cd74:	e12f      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801cd76:	683b      	ldr	r3, [r7, #0]
 801cd78:	885b      	ldrh	r3, [r3, #2]
 801cd7a:	b2db      	uxtb	r3, r3
 801cd7c:	2b05      	cmp	r3, #5
 801cd7e:	d900      	bls.n	801cd82 <USBD_GetDescriptor+0xa6>
 801cd80:	e0d0      	b.n	801cf24 <USBD_GetDescriptor+0x248>
 801cd82:	009a      	lsls	r2, r3, #2
 801cd84:	4bad      	ldr	r3, [pc, #692]	@ (801d03c <USBD_GetDescriptor+0x360>)
 801cd86:	18d3      	adds	r3, r2, r3
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801cd8c:	687a      	ldr	r2, [r7, #4]
 801cd8e:	23ac      	movs	r3, #172	@ 0xac
 801cd90:	009b      	lsls	r3, r3, #2
 801cd92:	58d3      	ldr	r3, [r2, r3]
 801cd94:	685b      	ldr	r3, [r3, #4]
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d00d      	beq.n	801cdb6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801cd9a:	687a      	ldr	r2, [r7, #4]
 801cd9c:	23ac      	movs	r3, #172	@ 0xac
 801cd9e:	009b      	lsls	r3, r3, #2
 801cda0:	58d3      	ldr	r3, [r2, r3]
 801cda2:	685b      	ldr	r3, [r3, #4]
 801cda4:	687a      	ldr	r2, [r7, #4]
 801cda6:	7c12      	ldrb	r2, [r2, #16]
 801cda8:	2108      	movs	r1, #8
 801cdaa:	1879      	adds	r1, r7, r1
 801cdac:	0010      	movs	r0, r2
 801cdae:	4798      	blx	r3
 801cdb0:	0003      	movs	r3, r0
 801cdb2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cdb4:	e0c3      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cdb6:	683a      	ldr	r2, [r7, #0]
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	0011      	movs	r1, r2
 801cdbc:	0018      	movs	r0, r3
 801cdbe:	f000 fb20 	bl	801d402 <USBD_CtlError>
            err++;
 801cdc2:	210b      	movs	r1, #11
 801cdc4:	187b      	adds	r3, r7, r1
 801cdc6:	781a      	ldrb	r2, [r3, #0]
 801cdc8:	187b      	adds	r3, r7, r1
 801cdca:	3201      	adds	r2, #1
 801cdcc:	701a      	strb	r2, [r3, #0]
          break;
 801cdce:	e0b6      	b.n	801cf3e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801cdd0:	687a      	ldr	r2, [r7, #4]
 801cdd2:	23ac      	movs	r3, #172	@ 0xac
 801cdd4:	009b      	lsls	r3, r3, #2
 801cdd6:	58d3      	ldr	r3, [r2, r3]
 801cdd8:	689b      	ldr	r3, [r3, #8]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d00d      	beq.n	801cdfa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801cdde:	687a      	ldr	r2, [r7, #4]
 801cde0:	23ac      	movs	r3, #172	@ 0xac
 801cde2:	009b      	lsls	r3, r3, #2
 801cde4:	58d3      	ldr	r3, [r2, r3]
 801cde6:	689b      	ldr	r3, [r3, #8]
 801cde8:	687a      	ldr	r2, [r7, #4]
 801cdea:	7c12      	ldrb	r2, [r2, #16]
 801cdec:	2108      	movs	r1, #8
 801cdee:	1879      	adds	r1, r7, r1
 801cdf0:	0010      	movs	r0, r2
 801cdf2:	4798      	blx	r3
 801cdf4:	0003      	movs	r3, r0
 801cdf6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cdf8:	e0a1      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cdfa:	683a      	ldr	r2, [r7, #0]
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	0011      	movs	r1, r2
 801ce00:	0018      	movs	r0, r3
 801ce02:	f000 fafe 	bl	801d402 <USBD_CtlError>
            err++;
 801ce06:	210b      	movs	r1, #11
 801ce08:	187b      	adds	r3, r7, r1
 801ce0a:	781a      	ldrb	r2, [r3, #0]
 801ce0c:	187b      	adds	r3, r7, r1
 801ce0e:	3201      	adds	r2, #1
 801ce10:	701a      	strb	r2, [r3, #0]
          break;
 801ce12:	e094      	b.n	801cf3e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ce14:	687a      	ldr	r2, [r7, #4]
 801ce16:	23ac      	movs	r3, #172	@ 0xac
 801ce18:	009b      	lsls	r3, r3, #2
 801ce1a:	58d3      	ldr	r3, [r2, r3]
 801ce1c:	68db      	ldr	r3, [r3, #12]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d00d      	beq.n	801ce3e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ce22:	687a      	ldr	r2, [r7, #4]
 801ce24:	23ac      	movs	r3, #172	@ 0xac
 801ce26:	009b      	lsls	r3, r3, #2
 801ce28:	58d3      	ldr	r3, [r2, r3]
 801ce2a:	68db      	ldr	r3, [r3, #12]
 801ce2c:	687a      	ldr	r2, [r7, #4]
 801ce2e:	7c12      	ldrb	r2, [r2, #16]
 801ce30:	2108      	movs	r1, #8
 801ce32:	1879      	adds	r1, r7, r1
 801ce34:	0010      	movs	r0, r2
 801ce36:	4798      	blx	r3
 801ce38:	0003      	movs	r3, r0
 801ce3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce3c:	e07f      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ce3e:	683a      	ldr	r2, [r7, #0]
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	0011      	movs	r1, r2
 801ce44:	0018      	movs	r0, r3
 801ce46:	f000 fadc 	bl	801d402 <USBD_CtlError>
            err++;
 801ce4a:	210b      	movs	r1, #11
 801ce4c:	187b      	adds	r3, r7, r1
 801ce4e:	781a      	ldrb	r2, [r3, #0]
 801ce50:	187b      	adds	r3, r7, r1
 801ce52:	3201      	adds	r2, #1
 801ce54:	701a      	strb	r2, [r3, #0]
          break;
 801ce56:	e072      	b.n	801cf3e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801ce58:	687a      	ldr	r2, [r7, #4]
 801ce5a:	23ac      	movs	r3, #172	@ 0xac
 801ce5c:	009b      	lsls	r3, r3, #2
 801ce5e:	58d3      	ldr	r3, [r2, r3]
 801ce60:	691b      	ldr	r3, [r3, #16]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d00d      	beq.n	801ce82 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ce66:	687a      	ldr	r2, [r7, #4]
 801ce68:	23ac      	movs	r3, #172	@ 0xac
 801ce6a:	009b      	lsls	r3, r3, #2
 801ce6c:	58d3      	ldr	r3, [r2, r3]
 801ce6e:	691b      	ldr	r3, [r3, #16]
 801ce70:	687a      	ldr	r2, [r7, #4]
 801ce72:	7c12      	ldrb	r2, [r2, #16]
 801ce74:	2108      	movs	r1, #8
 801ce76:	1879      	adds	r1, r7, r1
 801ce78:	0010      	movs	r0, r2
 801ce7a:	4798      	blx	r3
 801ce7c:	0003      	movs	r3, r0
 801ce7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce80:	e05d      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801ce82:	683a      	ldr	r2, [r7, #0]
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	0011      	movs	r1, r2
 801ce88:	0018      	movs	r0, r3
 801ce8a:	f000 faba 	bl	801d402 <USBD_CtlError>
            err++;
 801ce8e:	210b      	movs	r1, #11
 801ce90:	187b      	adds	r3, r7, r1
 801ce92:	781a      	ldrb	r2, [r3, #0]
 801ce94:	187b      	adds	r3, r7, r1
 801ce96:	3201      	adds	r2, #1
 801ce98:	701a      	strb	r2, [r3, #0]
          break;
 801ce9a:	e050      	b.n	801cf3e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801ce9c:	687a      	ldr	r2, [r7, #4]
 801ce9e:	23ac      	movs	r3, #172	@ 0xac
 801cea0:	009b      	lsls	r3, r3, #2
 801cea2:	58d3      	ldr	r3, [r2, r3]
 801cea4:	695b      	ldr	r3, [r3, #20]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d00d      	beq.n	801cec6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801ceaa:	687a      	ldr	r2, [r7, #4]
 801ceac:	23ac      	movs	r3, #172	@ 0xac
 801ceae:	009b      	lsls	r3, r3, #2
 801ceb0:	58d3      	ldr	r3, [r2, r3]
 801ceb2:	695b      	ldr	r3, [r3, #20]
 801ceb4:	687a      	ldr	r2, [r7, #4]
 801ceb6:	7c12      	ldrb	r2, [r2, #16]
 801ceb8:	2108      	movs	r1, #8
 801ceba:	1879      	adds	r1, r7, r1
 801cebc:	0010      	movs	r0, r2
 801cebe:	4798      	blx	r3
 801cec0:	0003      	movs	r3, r0
 801cec2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cec4:	e03b      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cec6:	683a      	ldr	r2, [r7, #0]
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	0011      	movs	r1, r2
 801cecc:	0018      	movs	r0, r3
 801cece:	f000 fa98 	bl	801d402 <USBD_CtlError>
            err++;
 801ced2:	210b      	movs	r1, #11
 801ced4:	187b      	adds	r3, r7, r1
 801ced6:	781a      	ldrb	r2, [r3, #0]
 801ced8:	187b      	adds	r3, r7, r1
 801ceda:	3201      	adds	r2, #1
 801cedc:	701a      	strb	r2, [r3, #0]
          break;
 801cede:	e02e      	b.n	801cf3e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801cee0:	687a      	ldr	r2, [r7, #4]
 801cee2:	23ac      	movs	r3, #172	@ 0xac
 801cee4:	009b      	lsls	r3, r3, #2
 801cee6:	58d3      	ldr	r3, [r2, r3]
 801cee8:	699b      	ldr	r3, [r3, #24]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d00d      	beq.n	801cf0a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801ceee:	687a      	ldr	r2, [r7, #4]
 801cef0:	23ac      	movs	r3, #172	@ 0xac
 801cef2:	009b      	lsls	r3, r3, #2
 801cef4:	58d3      	ldr	r3, [r2, r3]
 801cef6:	699b      	ldr	r3, [r3, #24]
 801cef8:	687a      	ldr	r2, [r7, #4]
 801cefa:	7c12      	ldrb	r2, [r2, #16]
 801cefc:	2108      	movs	r1, #8
 801cefe:	1879      	adds	r1, r7, r1
 801cf00:	0010      	movs	r0, r2
 801cf02:	4798      	blx	r3
 801cf04:	0003      	movs	r3, r0
 801cf06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf08:	e019      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801cf0a:	683a      	ldr	r2, [r7, #0]
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	0011      	movs	r1, r2
 801cf10:	0018      	movs	r0, r3
 801cf12:	f000 fa76 	bl	801d402 <USBD_CtlError>
            err++;
 801cf16:	210b      	movs	r1, #11
 801cf18:	187b      	adds	r3, r7, r1
 801cf1a:	781a      	ldrb	r2, [r3, #0]
 801cf1c:	187b      	adds	r3, r7, r1
 801cf1e:	3201      	adds	r2, #1
 801cf20:	701a      	strb	r2, [r3, #0]
          break;
 801cf22:	e00c      	b.n	801cf3e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801cf24:	683a      	ldr	r2, [r7, #0]
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	0011      	movs	r1, r2
 801cf2a:	0018      	movs	r0, r3
 801cf2c:	f000 fa69 	bl	801d402 <USBD_CtlError>
          err++;
 801cf30:	210b      	movs	r1, #11
 801cf32:	187b      	adds	r3, r7, r1
 801cf34:	781a      	ldrb	r2, [r3, #0]
 801cf36:	187b      	adds	r3, r7, r1
 801cf38:	3201      	adds	r2, #1
 801cf3a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801cf3c:	e04b      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>
 801cf3e:	e04a      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	7c1b      	ldrb	r3, [r3, #16]
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d10b      	bne.n	801cf60 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801cf48:	687a      	ldr	r2, [r7, #4]
 801cf4a:	23ad      	movs	r3, #173	@ 0xad
 801cf4c:	009b      	lsls	r3, r3, #2
 801cf4e:	58d3      	ldr	r3, [r2, r3]
 801cf50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf52:	2208      	movs	r2, #8
 801cf54:	18ba      	adds	r2, r7, r2
 801cf56:	0010      	movs	r0, r2
 801cf58:	4798      	blx	r3
 801cf5a:	0003      	movs	r3, r0
 801cf5c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cf5e:	e03a      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801cf60:	683a      	ldr	r2, [r7, #0]
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	0011      	movs	r1, r2
 801cf66:	0018      	movs	r0, r3
 801cf68:	f000 fa4b 	bl	801d402 <USBD_CtlError>
        err++;
 801cf6c:	210b      	movs	r1, #11
 801cf6e:	187b      	adds	r3, r7, r1
 801cf70:	781a      	ldrb	r2, [r3, #0]
 801cf72:	187b      	adds	r3, r7, r1
 801cf74:	3201      	adds	r2, #1
 801cf76:	701a      	strb	r2, [r3, #0]
      break;
 801cf78:	e02d      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	7c1b      	ldrb	r3, [r3, #16]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d10f      	bne.n	801cfa2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801cf82:	687a      	ldr	r2, [r7, #4]
 801cf84:	23ad      	movs	r3, #173	@ 0xad
 801cf86:	009b      	lsls	r3, r3, #2
 801cf88:	58d3      	ldr	r3, [r2, r3]
 801cf8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf8c:	2208      	movs	r2, #8
 801cf8e:	18ba      	adds	r2, r7, r2
 801cf90:	0010      	movs	r0, r2
 801cf92:	4798      	blx	r3
 801cf94:	0003      	movs	r3, r0
 801cf96:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	3301      	adds	r3, #1
 801cf9c:	2207      	movs	r2, #7
 801cf9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cfa0:	e019      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801cfa2:	683a      	ldr	r2, [r7, #0]
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	0011      	movs	r1, r2
 801cfa8:	0018      	movs	r0, r3
 801cfaa:	f000 fa2a 	bl	801d402 <USBD_CtlError>
        err++;
 801cfae:	210b      	movs	r1, #11
 801cfb0:	187b      	adds	r3, r7, r1
 801cfb2:	781a      	ldrb	r2, [r3, #0]
 801cfb4:	187b      	adds	r3, r7, r1
 801cfb6:	3201      	adds	r2, #1
 801cfb8:	701a      	strb	r2, [r3, #0]
      break;
 801cfba:	e00c      	b.n	801cfd6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801cfbc:	683a      	ldr	r2, [r7, #0]
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	0011      	movs	r1, r2
 801cfc2:	0018      	movs	r0, r3
 801cfc4:	f000 fa1d 	bl	801d402 <USBD_CtlError>
      err++;
 801cfc8:	210b      	movs	r1, #11
 801cfca:	187b      	adds	r3, r7, r1
 801cfcc:	781a      	ldrb	r2, [r3, #0]
 801cfce:	187b      	adds	r3, r7, r1
 801cfd0:	3201      	adds	r2, #1
 801cfd2:	701a      	strb	r2, [r3, #0]
      break;
 801cfd4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801cfd6:	230b      	movs	r3, #11
 801cfd8:	18fb      	adds	r3, r7, r3
 801cfda:	781b      	ldrb	r3, [r3, #0]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d127      	bne.n	801d030 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801cfe0:	2108      	movs	r1, #8
 801cfe2:	187b      	adds	r3, r7, r1
 801cfe4:	881b      	ldrh	r3, [r3, #0]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d019      	beq.n	801d01e <USBD_GetDescriptor+0x342>
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	88db      	ldrh	r3, [r3, #6]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d015      	beq.n	801d01e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801cff2:	683b      	ldr	r3, [r7, #0]
 801cff4:	88da      	ldrh	r2, [r3, #6]
 801cff6:	187b      	adds	r3, r7, r1
 801cff8:	881b      	ldrh	r3, [r3, #0]
 801cffa:	1c18      	adds	r0, r3, #0
 801cffc:	1c11      	adds	r1, r2, #0
 801cffe:	b28a      	uxth	r2, r1
 801d000:	b283      	uxth	r3, r0
 801d002:	429a      	cmp	r2, r3
 801d004:	d900      	bls.n	801d008 <USBD_GetDescriptor+0x32c>
 801d006:	1c01      	adds	r1, r0, #0
 801d008:	b28a      	uxth	r2, r1
 801d00a:	2108      	movs	r1, #8
 801d00c:	187b      	adds	r3, r7, r1
 801d00e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d010:	187b      	adds	r3, r7, r1
 801d012:	881a      	ldrh	r2, [r3, #0]
 801d014:	68f9      	ldr	r1, [r7, #12]
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	0018      	movs	r0, r3
 801d01a:	f000 fa70 	bl	801d4fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d01e:	683b      	ldr	r3, [r7, #0]
 801d020:	88db      	ldrh	r3, [r3, #6]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d105      	bne.n	801d032 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	0018      	movs	r0, r3
 801d02a:	f000 fad2 	bl	801d5d2 <USBD_CtlSendStatus>
 801d02e:	e000      	b.n	801d032 <USBD_GetDescriptor+0x356>
    return;
 801d030:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801d032:	46bd      	mov	sp, r7
 801d034:	b004      	add	sp, #16
 801d036:	bd80      	pop	{r7, pc}
 801d038:	080267ac 	.word	0x080267ac
 801d03c:	080267cc 	.word	0x080267cc

0801d040 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d040:	b590      	push	{r4, r7, lr}
 801d042:	b085      	sub	sp, #20
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
 801d048:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	889b      	ldrh	r3, [r3, #4]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d13d      	bne.n	801d0ce <USBD_SetAddress+0x8e>
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	88db      	ldrh	r3, [r3, #6]
 801d056:	2b00      	cmp	r3, #0
 801d058:	d139      	bne.n	801d0ce <USBD_SetAddress+0x8e>
 801d05a:	683b      	ldr	r3, [r7, #0]
 801d05c:	885b      	ldrh	r3, [r3, #2]
 801d05e:	2b7f      	cmp	r3, #127	@ 0x7f
 801d060:	d835      	bhi.n	801d0ce <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	885b      	ldrh	r3, [r3, #2]
 801d066:	b2da      	uxtb	r2, r3
 801d068:	230f      	movs	r3, #15
 801d06a:	18fb      	adds	r3, r7, r3
 801d06c:	217f      	movs	r1, #127	@ 0x7f
 801d06e:	400a      	ands	r2, r1
 801d070:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d072:	687a      	ldr	r2, [r7, #4]
 801d074:	23a7      	movs	r3, #167	@ 0xa7
 801d076:	009b      	lsls	r3, r3, #2
 801d078:	5cd3      	ldrb	r3, [r2, r3]
 801d07a:	2b03      	cmp	r3, #3
 801d07c:	d106      	bne.n	801d08c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801d07e:	683a      	ldr	r2, [r7, #0]
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	0011      	movs	r1, r2
 801d084:	0018      	movs	r0, r3
 801d086:	f000 f9bc 	bl	801d402 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d08a:	e027      	b.n	801d0dc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	240f      	movs	r4, #15
 801d090:	193a      	adds	r2, r7, r4
 801d092:	4914      	ldr	r1, [pc, #80]	@ (801d0e4 <USBD_SetAddress+0xa4>)
 801d094:	7812      	ldrb	r2, [r2, #0]
 801d096:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d098:	193b      	adds	r3, r7, r4
 801d09a:	781a      	ldrb	r2, [r3, #0]
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	0011      	movs	r1, r2
 801d0a0:	0018      	movs	r0, r3
 801d0a2:	f000 ff5d 	bl	801df60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	0018      	movs	r0, r3
 801d0aa:	f000 fa92 	bl	801d5d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d0ae:	193b      	adds	r3, r7, r4
 801d0b0:	781b      	ldrb	r3, [r3, #0]
 801d0b2:	2b00      	cmp	r3, #0
 801d0b4:	d005      	beq.n	801d0c2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d0b6:	687a      	ldr	r2, [r7, #4]
 801d0b8:	23a7      	movs	r3, #167	@ 0xa7
 801d0ba:	009b      	lsls	r3, r3, #2
 801d0bc:	2102      	movs	r1, #2
 801d0be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d0c0:	e00c      	b.n	801d0dc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d0c2:	687a      	ldr	r2, [r7, #4]
 801d0c4:	23a7      	movs	r3, #167	@ 0xa7
 801d0c6:	009b      	lsls	r3, r3, #2
 801d0c8:	2101      	movs	r1, #1
 801d0ca:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d0cc:	e006      	b.n	801d0dc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d0ce:	683a      	ldr	r2, [r7, #0]
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	0011      	movs	r1, r2
 801d0d4:	0018      	movs	r0, r3
 801d0d6:	f000 f994 	bl	801d402 <USBD_CtlError>
  }
}
 801d0da:	46c0      	nop			@ (mov r8, r8)
 801d0dc:	46c0      	nop			@ (mov r8, r8)
 801d0de:	46bd      	mov	sp, r7
 801d0e0:	b005      	add	sp, #20
 801d0e2:	bd90      	pop	{r4, r7, pc}
 801d0e4:	0000029e 	.word	0x0000029e

0801d0e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b082      	sub	sp, #8
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
 801d0f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d0f2:	683b      	ldr	r3, [r7, #0]
 801d0f4:	885b      	ldrh	r3, [r3, #2]
 801d0f6:	b2da      	uxtb	r2, r3
 801d0f8:	4b4c      	ldr	r3, [pc, #304]	@ (801d22c <USBD_SetConfig+0x144>)
 801d0fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d0fc:	4b4b      	ldr	r3, [pc, #300]	@ (801d22c <USBD_SetConfig+0x144>)
 801d0fe:	781b      	ldrb	r3, [r3, #0]
 801d100:	2b01      	cmp	r3, #1
 801d102:	d906      	bls.n	801d112 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801d104:	683a      	ldr	r2, [r7, #0]
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	0011      	movs	r1, r2
 801d10a:	0018      	movs	r0, r3
 801d10c:	f000 f979 	bl	801d402 <USBD_CtlError>
 801d110:	e088      	b.n	801d224 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801d112:	687a      	ldr	r2, [r7, #4]
 801d114:	23a7      	movs	r3, #167	@ 0xa7
 801d116:	009b      	lsls	r3, r3, #2
 801d118:	5cd3      	ldrb	r3, [r2, r3]
 801d11a:	2b02      	cmp	r3, #2
 801d11c:	d002      	beq.n	801d124 <USBD_SetConfig+0x3c>
 801d11e:	2b03      	cmp	r3, #3
 801d120:	d029      	beq.n	801d176 <USBD_SetConfig+0x8e>
 801d122:	e071      	b.n	801d208 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d124:	4b41      	ldr	r3, [pc, #260]	@ (801d22c <USBD_SetConfig+0x144>)
 801d126:	781b      	ldrb	r3, [r3, #0]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d01f      	beq.n	801d16c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801d12c:	4b3f      	ldr	r3, [pc, #252]	@ (801d22c <USBD_SetConfig+0x144>)
 801d12e:	781b      	ldrb	r3, [r3, #0]
 801d130:	001a      	movs	r2, r3
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d136:	687a      	ldr	r2, [r7, #4]
 801d138:	23a7      	movs	r3, #167	@ 0xa7
 801d13a:	009b      	lsls	r3, r3, #2
 801d13c:	2103      	movs	r1, #3
 801d13e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d140:	4b3a      	ldr	r3, [pc, #232]	@ (801d22c <USBD_SetConfig+0x144>)
 801d142:	781a      	ldrb	r2, [r3, #0]
 801d144:	687b      	ldr	r3, [r7, #4]
 801d146:	0011      	movs	r1, r2
 801d148:	0018      	movs	r0, r3
 801d14a:	f7ff f8c6 	bl	801c2da <USBD_SetClassConfig>
 801d14e:	0003      	movs	r3, r0
 801d150:	2b02      	cmp	r3, #2
 801d152:	d106      	bne.n	801d162 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801d154:	683a      	ldr	r2, [r7, #0]
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	0011      	movs	r1, r2
 801d15a:	0018      	movs	r0, r3
 801d15c:	f000 f951 	bl	801d402 <USBD_CtlError>
            return;
 801d160:	e060      	b.n	801d224 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	0018      	movs	r0, r3
 801d166:	f000 fa34 	bl	801d5d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d16a:	e05b      	b.n	801d224 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	0018      	movs	r0, r3
 801d170:	f000 fa2f 	bl	801d5d2 <USBD_CtlSendStatus>
        break;
 801d174:	e056      	b.n	801d224 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d176:	4b2d      	ldr	r3, [pc, #180]	@ (801d22c <USBD_SetConfig+0x144>)
 801d178:	781b      	ldrb	r3, [r3, #0]
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d115      	bne.n	801d1aa <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d17e:	687a      	ldr	r2, [r7, #4]
 801d180:	23a7      	movs	r3, #167	@ 0xa7
 801d182:	009b      	lsls	r3, r3, #2
 801d184:	2102      	movs	r1, #2
 801d186:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801d188:	4b28      	ldr	r3, [pc, #160]	@ (801d22c <USBD_SetConfig+0x144>)
 801d18a:	781b      	ldrb	r3, [r3, #0]
 801d18c:	001a      	movs	r2, r3
 801d18e:	687b      	ldr	r3, [r7, #4]
 801d190:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d192:	4b26      	ldr	r3, [pc, #152]	@ (801d22c <USBD_SetConfig+0x144>)
 801d194:	781a      	ldrb	r2, [r3, #0]
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	0011      	movs	r1, r2
 801d19a:	0018      	movs	r0, r3
 801d19c:	f7ff f8c4 	bl	801c328 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	0018      	movs	r0, r3
 801d1a4:	f000 fa15 	bl	801d5d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d1a8:	e03c      	b.n	801d224 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801d1aa:	4b20      	ldr	r3, [pc, #128]	@ (801d22c <USBD_SetConfig+0x144>)
 801d1ac:	781b      	ldrb	r3, [r3, #0]
 801d1ae:	001a      	movs	r2, r3
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	685b      	ldr	r3, [r3, #4]
 801d1b4:	429a      	cmp	r2, r3
 801d1b6:	d022      	beq.n	801d1fe <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	685b      	ldr	r3, [r3, #4]
 801d1bc:	b2da      	uxtb	r2, r3
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	0011      	movs	r1, r2
 801d1c2:	0018      	movs	r0, r3
 801d1c4:	f7ff f8b0 	bl	801c328 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d1c8:	4b18      	ldr	r3, [pc, #96]	@ (801d22c <USBD_SetConfig+0x144>)
 801d1ca:	781b      	ldrb	r3, [r3, #0]
 801d1cc:	001a      	movs	r2, r3
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d1d2:	4b16      	ldr	r3, [pc, #88]	@ (801d22c <USBD_SetConfig+0x144>)
 801d1d4:	781a      	ldrb	r2, [r3, #0]
 801d1d6:	687b      	ldr	r3, [r7, #4]
 801d1d8:	0011      	movs	r1, r2
 801d1da:	0018      	movs	r0, r3
 801d1dc:	f7ff f87d 	bl	801c2da <USBD_SetClassConfig>
 801d1e0:	0003      	movs	r3, r0
 801d1e2:	2b02      	cmp	r3, #2
 801d1e4:	d106      	bne.n	801d1f4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801d1e6:	683a      	ldr	r2, [r7, #0]
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	0011      	movs	r1, r2
 801d1ec:	0018      	movs	r0, r3
 801d1ee:	f000 f908 	bl	801d402 <USBD_CtlError>
            return;
 801d1f2:	e017      	b.n	801d224 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	0018      	movs	r0, r3
 801d1f8:	f000 f9eb 	bl	801d5d2 <USBD_CtlSendStatus>
        break;
 801d1fc:	e012      	b.n	801d224 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	0018      	movs	r0, r3
 801d202:	f000 f9e6 	bl	801d5d2 <USBD_CtlSendStatus>
        break;
 801d206:	e00d      	b.n	801d224 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801d208:	683a      	ldr	r2, [r7, #0]
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	0011      	movs	r1, r2
 801d20e:	0018      	movs	r0, r3
 801d210:	f000 f8f7 	bl	801d402 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d214:	4b05      	ldr	r3, [pc, #20]	@ (801d22c <USBD_SetConfig+0x144>)
 801d216:	781a      	ldrb	r2, [r3, #0]
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	0011      	movs	r1, r2
 801d21c:	0018      	movs	r0, r3
 801d21e:	f7ff f883 	bl	801c328 <USBD_ClrClassConfig>
        break;
 801d222:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801d224:	46bd      	mov	sp, r7
 801d226:	b002      	add	sp, #8
 801d228:	bd80      	pop	{r7, pc}
 801d22a:	46c0      	nop			@ (mov r8, r8)
 801d22c:	200020d4 	.word	0x200020d4

0801d230 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d230:	b580      	push	{r7, lr}
 801d232:	b082      	sub	sp, #8
 801d234:	af00      	add	r7, sp, #0
 801d236:	6078      	str	r0, [r7, #4]
 801d238:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d23a:	683b      	ldr	r3, [r7, #0]
 801d23c:	88db      	ldrh	r3, [r3, #6]
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d006      	beq.n	801d250 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801d242:	683a      	ldr	r2, [r7, #0]
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	0011      	movs	r1, r2
 801d248:	0018      	movs	r0, r3
 801d24a:	f000 f8da 	bl	801d402 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d24e:	e026      	b.n	801d29e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801d250:	687a      	ldr	r2, [r7, #4]
 801d252:	23a7      	movs	r3, #167	@ 0xa7
 801d254:	009b      	lsls	r3, r3, #2
 801d256:	5cd3      	ldrb	r3, [r2, r3]
 801d258:	2b02      	cmp	r3, #2
 801d25a:	dc02      	bgt.n	801d262 <USBD_GetConfig+0x32>
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	dc03      	bgt.n	801d268 <USBD_GetConfig+0x38>
 801d260:	e016      	b.n	801d290 <USBD_GetConfig+0x60>
 801d262:	2b03      	cmp	r3, #3
 801d264:	d00c      	beq.n	801d280 <USBD_GetConfig+0x50>
 801d266:	e013      	b.n	801d290 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	2200      	movs	r2, #0
 801d26c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	3308      	adds	r3, #8
 801d272:	0019      	movs	r1, r3
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	2201      	movs	r2, #1
 801d278:	0018      	movs	r0, r3
 801d27a:	f000 f940 	bl	801d4fe <USBD_CtlSendData>
        break;
 801d27e:	e00e      	b.n	801d29e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	1d19      	adds	r1, r3, #4
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	2201      	movs	r2, #1
 801d288:	0018      	movs	r0, r3
 801d28a:	f000 f938 	bl	801d4fe <USBD_CtlSendData>
        break;
 801d28e:	e006      	b.n	801d29e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801d290:	683a      	ldr	r2, [r7, #0]
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	0011      	movs	r1, r2
 801d296:	0018      	movs	r0, r3
 801d298:	f000 f8b3 	bl	801d402 <USBD_CtlError>
        break;
 801d29c:	46c0      	nop			@ (mov r8, r8)
}
 801d29e:	46c0      	nop			@ (mov r8, r8)
 801d2a0:	46bd      	mov	sp, r7
 801d2a2:	b002      	add	sp, #8
 801d2a4:	bd80      	pop	{r7, pc}

0801d2a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d2a6:	b580      	push	{r7, lr}
 801d2a8:	b082      	sub	sp, #8
 801d2aa:	af00      	add	r7, sp, #0
 801d2ac:	6078      	str	r0, [r7, #4]
 801d2ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d2b0:	687a      	ldr	r2, [r7, #4]
 801d2b2:	23a7      	movs	r3, #167	@ 0xa7
 801d2b4:	009b      	lsls	r3, r3, #2
 801d2b6:	5cd3      	ldrb	r3, [r2, r3]
 801d2b8:	3b01      	subs	r3, #1
 801d2ba:	2b02      	cmp	r3, #2
 801d2bc:	d822      	bhi.n	801d304 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d2be:	683b      	ldr	r3, [r7, #0]
 801d2c0:	88db      	ldrh	r3, [r3, #6]
 801d2c2:	2b02      	cmp	r3, #2
 801d2c4:	d006      	beq.n	801d2d4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801d2c6:	683a      	ldr	r2, [r7, #0]
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	0011      	movs	r1, r2
 801d2cc:	0018      	movs	r0, r3
 801d2ce:	f000 f898 	bl	801d402 <USBD_CtlError>
        break;
 801d2d2:	e01e      	b.n	801d312 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	2201      	movs	r2, #1
 801d2d8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d2da:	687a      	ldr	r2, [r7, #4]
 801d2dc:	23a9      	movs	r3, #169	@ 0xa9
 801d2de:	009b      	lsls	r3, r3, #2
 801d2e0:	58d3      	ldr	r3, [r2, r3]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d005      	beq.n	801d2f2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d2e6:	687b      	ldr	r3, [r7, #4]
 801d2e8:	68db      	ldr	r3, [r3, #12]
 801d2ea:	2202      	movs	r2, #2
 801d2ec:	431a      	orrs	r2, r3
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	330c      	adds	r3, #12
 801d2f6:	0019      	movs	r1, r3
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2202      	movs	r2, #2
 801d2fc:	0018      	movs	r0, r3
 801d2fe:	f000 f8fe 	bl	801d4fe <USBD_CtlSendData>
      break;
 801d302:	e006      	b.n	801d312 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801d304:	683a      	ldr	r2, [r7, #0]
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	0011      	movs	r1, r2
 801d30a:	0018      	movs	r0, r3
 801d30c:	f000 f879 	bl	801d402 <USBD_CtlError>
      break;
 801d310:	46c0      	nop			@ (mov r8, r8)
  }
}
 801d312:	46c0      	nop			@ (mov r8, r8)
 801d314:	46bd      	mov	sp, r7
 801d316:	b002      	add	sp, #8
 801d318:	bd80      	pop	{r7, pc}

0801d31a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d31a:	b580      	push	{r7, lr}
 801d31c:	b082      	sub	sp, #8
 801d31e:	af00      	add	r7, sp, #0
 801d320:	6078      	str	r0, [r7, #4]
 801d322:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d324:	683b      	ldr	r3, [r7, #0]
 801d326:	885b      	ldrh	r3, [r3, #2]
 801d328:	2b01      	cmp	r3, #1
 801d32a:	d108      	bne.n	801d33e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801d32c:	687a      	ldr	r2, [r7, #4]
 801d32e:	23a9      	movs	r3, #169	@ 0xa9
 801d330:	009b      	lsls	r3, r3, #2
 801d332:	2101      	movs	r1, #1
 801d334:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	0018      	movs	r0, r3
 801d33a:	f000 f94a 	bl	801d5d2 <USBD_CtlSendStatus>
  }
}
 801d33e:	46c0      	nop			@ (mov r8, r8)
 801d340:	46bd      	mov	sp, r7
 801d342:	b002      	add	sp, #8
 801d344:	bd80      	pop	{r7, pc}

0801d346 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d346:	b580      	push	{r7, lr}
 801d348:	b082      	sub	sp, #8
 801d34a:	af00      	add	r7, sp, #0
 801d34c:	6078      	str	r0, [r7, #4]
 801d34e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d350:	687a      	ldr	r2, [r7, #4]
 801d352:	23a7      	movs	r3, #167	@ 0xa7
 801d354:	009b      	lsls	r3, r3, #2
 801d356:	5cd3      	ldrb	r3, [r2, r3]
 801d358:	3b01      	subs	r3, #1
 801d35a:	2b02      	cmp	r3, #2
 801d35c:	d80d      	bhi.n	801d37a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d35e:	683b      	ldr	r3, [r7, #0]
 801d360:	885b      	ldrh	r3, [r3, #2]
 801d362:	2b01      	cmp	r3, #1
 801d364:	d110      	bne.n	801d388 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801d366:	687a      	ldr	r2, [r7, #4]
 801d368:	23a9      	movs	r3, #169	@ 0xa9
 801d36a:	009b      	lsls	r3, r3, #2
 801d36c:	2100      	movs	r1, #0
 801d36e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801d370:	687b      	ldr	r3, [r7, #4]
 801d372:	0018      	movs	r0, r3
 801d374:	f000 f92d 	bl	801d5d2 <USBD_CtlSendStatus>
      }
      break;
 801d378:	e006      	b.n	801d388 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801d37a:	683a      	ldr	r2, [r7, #0]
 801d37c:	687b      	ldr	r3, [r7, #4]
 801d37e:	0011      	movs	r1, r2
 801d380:	0018      	movs	r0, r3
 801d382:	f000 f83e 	bl	801d402 <USBD_CtlError>
      break;
 801d386:	e000      	b.n	801d38a <USBD_ClrFeature+0x44>
      break;
 801d388:	46c0      	nop			@ (mov r8, r8)
  }
}
 801d38a:	46c0      	nop			@ (mov r8, r8)
 801d38c:	46bd      	mov	sp, r7
 801d38e:	b002      	add	sp, #8
 801d390:	bd80      	pop	{r7, pc}

0801d392 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d392:	b580      	push	{r7, lr}
 801d394:	b082      	sub	sp, #8
 801d396:	af00      	add	r7, sp, #0
 801d398:	6078      	str	r0, [r7, #4]
 801d39a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d39c:	683b      	ldr	r3, [r7, #0]
 801d39e:	781a      	ldrb	r2, [r3, #0]
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d3a4:	683b      	ldr	r3, [r7, #0]
 801d3a6:	785a      	ldrb	r2, [r3, #1]
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d3ac:	683b      	ldr	r3, [r7, #0]
 801d3ae:	3302      	adds	r3, #2
 801d3b0:	781b      	ldrb	r3, [r3, #0]
 801d3b2:	001a      	movs	r2, r3
 801d3b4:	683b      	ldr	r3, [r7, #0]
 801d3b6:	3303      	adds	r3, #3
 801d3b8:	781b      	ldrb	r3, [r3, #0]
 801d3ba:	021b      	lsls	r3, r3, #8
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	18d3      	adds	r3, r2, r3
 801d3c0:	b29a      	uxth	r2, r3
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d3c6:	683b      	ldr	r3, [r7, #0]
 801d3c8:	3304      	adds	r3, #4
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	001a      	movs	r2, r3
 801d3ce:	683b      	ldr	r3, [r7, #0]
 801d3d0:	3305      	adds	r3, #5
 801d3d2:	781b      	ldrb	r3, [r3, #0]
 801d3d4:	021b      	lsls	r3, r3, #8
 801d3d6:	b29b      	uxth	r3, r3
 801d3d8:	18d3      	adds	r3, r2, r3
 801d3da:	b29a      	uxth	r2, r3
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d3e0:	683b      	ldr	r3, [r7, #0]
 801d3e2:	3306      	adds	r3, #6
 801d3e4:	781b      	ldrb	r3, [r3, #0]
 801d3e6:	001a      	movs	r2, r3
 801d3e8:	683b      	ldr	r3, [r7, #0]
 801d3ea:	3307      	adds	r3, #7
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	021b      	lsls	r3, r3, #8
 801d3f0:	b29b      	uxth	r3, r3
 801d3f2:	18d3      	adds	r3, r2, r3
 801d3f4:	b29a      	uxth	r2, r3
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	80da      	strh	r2, [r3, #6]

}
 801d3fa:	46c0      	nop			@ (mov r8, r8)
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	b002      	add	sp, #8
 801d400:	bd80      	pop	{r7, pc}

0801d402 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801d402:	b580      	push	{r7, lr}
 801d404:	b082      	sub	sp, #8
 801d406:	af00      	add	r7, sp, #0
 801d408:	6078      	str	r0, [r7, #4]
 801d40a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	2180      	movs	r1, #128	@ 0x80
 801d410:	0018      	movs	r0, r3
 801d412:	f000 fd1e 	bl	801de52 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	2100      	movs	r1, #0
 801d41a:	0018      	movs	r0, r3
 801d41c:	f000 fd19 	bl	801de52 <USBD_LL_StallEP>
}
 801d420:	46c0      	nop			@ (mov r8, r8)
 801d422:	46bd      	mov	sp, r7
 801d424:	b002      	add	sp, #8
 801d426:	bd80      	pop	{r7, pc}

0801d428 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d428:	b590      	push	{r4, r7, lr}
 801d42a:	b087      	sub	sp, #28
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	60f8      	str	r0, [r7, #12]
 801d430:	60b9      	str	r1, [r7, #8]
 801d432:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d434:	2417      	movs	r4, #23
 801d436:	193b      	adds	r3, r7, r4
 801d438:	2200      	movs	r2, #0
 801d43a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d03c      	beq.n	801d4bc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	0018      	movs	r0, r3
 801d446:	f000 f83d 	bl	801d4c4 <USBD_GetLen>
 801d44a:	0003      	movs	r3, r0
 801d44c:	3301      	adds	r3, #1
 801d44e:	b29b      	uxth	r3, r3
 801d450:	18db      	adds	r3, r3, r3
 801d452:	b29a      	uxth	r2, r3
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801d458:	193b      	adds	r3, r7, r4
 801d45a:	781b      	ldrb	r3, [r3, #0]
 801d45c:	193a      	adds	r2, r7, r4
 801d45e:	1c59      	adds	r1, r3, #1
 801d460:	7011      	strb	r1, [r2, #0]
 801d462:	001a      	movs	r2, r3
 801d464:	68bb      	ldr	r3, [r7, #8]
 801d466:	189b      	adds	r3, r3, r2
 801d468:	687a      	ldr	r2, [r7, #4]
 801d46a:	7812      	ldrb	r2, [r2, #0]
 801d46c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801d46e:	193b      	adds	r3, r7, r4
 801d470:	781b      	ldrb	r3, [r3, #0]
 801d472:	193a      	adds	r2, r7, r4
 801d474:	1c59      	adds	r1, r3, #1
 801d476:	7011      	strb	r1, [r2, #0]
 801d478:	001a      	movs	r2, r3
 801d47a:	68bb      	ldr	r3, [r7, #8]
 801d47c:	189b      	adds	r3, r3, r2
 801d47e:	2203      	movs	r2, #3
 801d480:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801d482:	e017      	b.n	801d4b4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801d484:	68fb      	ldr	r3, [r7, #12]
 801d486:	1c5a      	adds	r2, r3, #1
 801d488:	60fa      	str	r2, [r7, #12]
 801d48a:	2417      	movs	r4, #23
 801d48c:	193a      	adds	r2, r7, r4
 801d48e:	7812      	ldrb	r2, [r2, #0]
 801d490:	1939      	adds	r1, r7, r4
 801d492:	1c50      	adds	r0, r2, #1
 801d494:	7008      	strb	r0, [r1, #0]
 801d496:	0011      	movs	r1, r2
 801d498:	68ba      	ldr	r2, [r7, #8]
 801d49a:	1852      	adds	r2, r2, r1
 801d49c:	781b      	ldrb	r3, [r3, #0]
 801d49e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801d4a0:	193b      	adds	r3, r7, r4
 801d4a2:	781b      	ldrb	r3, [r3, #0]
 801d4a4:	193a      	adds	r2, r7, r4
 801d4a6:	1c59      	adds	r1, r3, #1
 801d4a8:	7011      	strb	r1, [r2, #0]
 801d4aa:	001a      	movs	r2, r3
 801d4ac:	68bb      	ldr	r3, [r7, #8]
 801d4ae:	189b      	adds	r3, r3, r2
 801d4b0:	2200      	movs	r2, #0
 801d4b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	781b      	ldrb	r3, [r3, #0]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d1e3      	bne.n	801d484 <USBD_GetString+0x5c>
    }
  }
}
 801d4bc:	46c0      	nop			@ (mov r8, r8)
 801d4be:	46bd      	mov	sp, r7
 801d4c0:	b007      	add	sp, #28
 801d4c2:	bd90      	pop	{r4, r7, pc}

0801d4c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b084      	sub	sp, #16
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d4cc:	230f      	movs	r3, #15
 801d4ce:	18fb      	adds	r3, r7, r3
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801d4d4:	e008      	b.n	801d4e8 <USBD_GetLen+0x24>
  {
    len++;
 801d4d6:	210f      	movs	r1, #15
 801d4d8:	187b      	adds	r3, r7, r1
 801d4da:	781a      	ldrb	r2, [r3, #0]
 801d4dc:	187b      	adds	r3, r7, r1
 801d4de:	3201      	adds	r2, #1
 801d4e0:	701a      	strb	r2, [r3, #0]
    buf++;
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	3301      	adds	r3, #1
 801d4e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	781b      	ldrb	r3, [r3, #0]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d1f2      	bne.n	801d4d6 <USBD_GetLen+0x12>
  }

  return len;
 801d4f0:	230f      	movs	r3, #15
 801d4f2:	18fb      	adds	r3, r7, r3
 801d4f4:	781b      	ldrb	r3, [r3, #0]
}
 801d4f6:	0018      	movs	r0, r3
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	b004      	add	sp, #16
 801d4fc:	bd80      	pop	{r7, pc}

0801d4fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801d4fe:	b580      	push	{r7, lr}
 801d500:	b084      	sub	sp, #16
 801d502:	af00      	add	r7, sp, #0
 801d504:	60f8      	str	r0, [r7, #12]
 801d506:	60b9      	str	r1, [r7, #8]
 801d508:	1dbb      	adds	r3, r7, #6
 801d50a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d50c:	68fa      	ldr	r2, [r7, #12]
 801d50e:	23a5      	movs	r3, #165	@ 0xa5
 801d510:	009b      	lsls	r3, r3, #2
 801d512:	2102      	movs	r1, #2
 801d514:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801d516:	1dbb      	adds	r3, r7, #6
 801d518:	881a      	ldrh	r2, [r3, #0]
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d51e:	1dbb      	adds	r3, r7, #6
 801d520:	881a      	ldrh	r2, [r3, #0]
 801d522:	68fb      	ldr	r3, [r7, #12]
 801d524:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d526:	1dbb      	adds	r3, r7, #6
 801d528:	881b      	ldrh	r3, [r3, #0]
 801d52a:	68ba      	ldr	r2, [r7, #8]
 801d52c:	68f8      	ldr	r0, [r7, #12]
 801d52e:	2100      	movs	r1, #0
 801d530:	f000 fd41 	bl	801dfb6 <USBD_LL_Transmit>

  return USBD_OK;
 801d534:	2300      	movs	r3, #0
}
 801d536:	0018      	movs	r0, r3
 801d538:	46bd      	mov	sp, r7
 801d53a:	b004      	add	sp, #16
 801d53c:	bd80      	pop	{r7, pc}

0801d53e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d53e:	b580      	push	{r7, lr}
 801d540:	b084      	sub	sp, #16
 801d542:	af00      	add	r7, sp, #0
 801d544:	60f8      	str	r0, [r7, #12]
 801d546:	60b9      	str	r1, [r7, #8]
 801d548:	1dbb      	adds	r3, r7, #6
 801d54a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d54c:	1dbb      	adds	r3, r7, #6
 801d54e:	881b      	ldrh	r3, [r3, #0]
 801d550:	68ba      	ldr	r2, [r7, #8]
 801d552:	68f8      	ldr	r0, [r7, #12]
 801d554:	2100      	movs	r1, #0
 801d556:	f000 fd2e 	bl	801dfb6 <USBD_LL_Transmit>

  return USBD_OK;
 801d55a:	2300      	movs	r3, #0
}
 801d55c:	0018      	movs	r0, r3
 801d55e:	46bd      	mov	sp, r7
 801d560:	b004      	add	sp, #16
 801d562:	bd80      	pop	{r7, pc}

0801d564 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b084      	sub	sp, #16
 801d568:	af00      	add	r7, sp, #0
 801d56a:	60f8      	str	r0, [r7, #12]
 801d56c:	60b9      	str	r1, [r7, #8]
 801d56e:	1dbb      	adds	r3, r7, #6
 801d570:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d572:	68fa      	ldr	r2, [r7, #12]
 801d574:	23a5      	movs	r3, #165	@ 0xa5
 801d576:	009b      	lsls	r3, r3, #2
 801d578:	2103      	movs	r1, #3
 801d57a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801d57c:	1dbb      	adds	r3, r7, #6
 801d57e:	8819      	ldrh	r1, [r3, #0]
 801d580:	68fa      	ldr	r2, [r7, #12]
 801d582:	23ae      	movs	r3, #174	@ 0xae
 801d584:	005b      	lsls	r3, r3, #1
 801d586:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801d588:	1dbb      	adds	r3, r7, #6
 801d58a:	8819      	ldrh	r1, [r3, #0]
 801d58c:	68fa      	ldr	r2, [r7, #12]
 801d58e:	23b0      	movs	r3, #176	@ 0xb0
 801d590:	005b      	lsls	r3, r3, #1
 801d592:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d594:	1dbb      	adds	r3, r7, #6
 801d596:	881b      	ldrh	r3, [r3, #0]
 801d598:	68ba      	ldr	r2, [r7, #8]
 801d59a:	68f8      	ldr	r0, [r7, #12]
 801d59c:	2100      	movs	r1, #0
 801d59e:	f000 fd41 	bl	801e024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d5a2:	2300      	movs	r3, #0
}
 801d5a4:	0018      	movs	r0, r3
 801d5a6:	46bd      	mov	sp, r7
 801d5a8:	b004      	add	sp, #16
 801d5aa:	bd80      	pop	{r7, pc}

0801d5ac <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d5ac:	b580      	push	{r7, lr}
 801d5ae:	b084      	sub	sp, #16
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	60f8      	str	r0, [r7, #12]
 801d5b4:	60b9      	str	r1, [r7, #8]
 801d5b6:	1dbb      	adds	r3, r7, #6
 801d5b8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d5ba:	1dbb      	adds	r3, r7, #6
 801d5bc:	881b      	ldrh	r3, [r3, #0]
 801d5be:	68ba      	ldr	r2, [r7, #8]
 801d5c0:	68f8      	ldr	r0, [r7, #12]
 801d5c2:	2100      	movs	r1, #0
 801d5c4:	f000 fd2e 	bl	801e024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d5c8:	2300      	movs	r3, #0
}
 801d5ca:	0018      	movs	r0, r3
 801d5cc:	46bd      	mov	sp, r7
 801d5ce:	b004      	add	sp, #16
 801d5d0:	bd80      	pop	{r7, pc}

0801d5d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d5d2:	b580      	push	{r7, lr}
 801d5d4:	b082      	sub	sp, #8
 801d5d6:	af00      	add	r7, sp, #0
 801d5d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d5da:	687a      	ldr	r2, [r7, #4]
 801d5dc:	23a5      	movs	r3, #165	@ 0xa5
 801d5de:	009b      	lsls	r3, r3, #2
 801d5e0:	2104      	movs	r1, #4
 801d5e2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d5e4:	6878      	ldr	r0, [r7, #4]
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	2200      	movs	r2, #0
 801d5ea:	2100      	movs	r1, #0
 801d5ec:	f000 fce3 	bl	801dfb6 <USBD_LL_Transmit>

  return USBD_OK;
 801d5f0:	2300      	movs	r3, #0
}
 801d5f2:	0018      	movs	r0, r3
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	b002      	add	sp, #8
 801d5f8:	bd80      	pop	{r7, pc}

0801d5fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d5fa:	b580      	push	{r7, lr}
 801d5fc:	b082      	sub	sp, #8
 801d5fe:	af00      	add	r7, sp, #0
 801d600:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d602:	687a      	ldr	r2, [r7, #4]
 801d604:	23a5      	movs	r3, #165	@ 0xa5
 801d606:	009b      	lsls	r3, r3, #2
 801d608:	2105      	movs	r1, #5
 801d60a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d60c:	6878      	ldr	r0, [r7, #4]
 801d60e:	2300      	movs	r3, #0
 801d610:	2200      	movs	r2, #0
 801d612:	2100      	movs	r1, #0
 801d614:	f000 fd06 	bl	801e024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d618:	2300      	movs	r3, #0
}
 801d61a:	0018      	movs	r0, r3
 801d61c:	46bd      	mov	sp, r7
 801d61e:	b002      	add	sp, #8
 801d620:	bd80      	pop	{r7, pc}
	...

0801d624 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d624:	b580      	push	{r7, lr}
 801d626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d628:	4914      	ldr	r1, [pc, #80]	@ (801d67c <MX_USB_DEVICE_Init+0x58>)
 801d62a:	4b15      	ldr	r3, [pc, #84]	@ (801d680 <MX_USB_DEVICE_Init+0x5c>)
 801d62c:	2200      	movs	r2, #0
 801d62e:	0018      	movs	r0, r3
 801d630:	f7fe fdec 	bl	801c20c <USBD_Init>
 801d634:	1e03      	subs	r3, r0, #0
 801d636:	d001      	beq.n	801d63c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d638:	f7eb fafc 	bl	8008c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d63c:	4a11      	ldr	r2, [pc, #68]	@ (801d684 <MX_USB_DEVICE_Init+0x60>)
 801d63e:	4b10      	ldr	r3, [pc, #64]	@ (801d680 <MX_USB_DEVICE_Init+0x5c>)
 801d640:	0011      	movs	r1, r2
 801d642:	0018      	movs	r0, r3
 801d644:	f7fe fe13 	bl	801c26e <USBD_RegisterClass>
 801d648:	1e03      	subs	r3, r0, #0
 801d64a:	d001      	beq.n	801d650 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801d64c:	f7eb faf2 	bl	8008c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d650:	4a0d      	ldr	r2, [pc, #52]	@ (801d688 <MX_USB_DEVICE_Init+0x64>)
 801d652:	4b0b      	ldr	r3, [pc, #44]	@ (801d680 <MX_USB_DEVICE_Init+0x5c>)
 801d654:	0011      	movs	r1, r2
 801d656:	0018      	movs	r0, r3
 801d658:	f7fe fd28 	bl	801c0ac <USBD_CDC_RegisterInterface>
 801d65c:	1e03      	subs	r3, r0, #0
 801d65e:	d001      	beq.n	801d664 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801d660:	f7eb fae8 	bl	8008c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d664:	4b06      	ldr	r3, [pc, #24]	@ (801d680 <MX_USB_DEVICE_Init+0x5c>)
 801d666:	0018      	movs	r0, r3
 801d668:	f7fe fe21 	bl	801c2ae <USBD_Start>
 801d66c:	1e03      	subs	r3, r0, #0
 801d66e:	d001      	beq.n	801d674 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801d670:	f7eb fae0 	bl	8008c34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d674:	46c0      	nop			@ (mov r8, r8)
 801d676:	46bd      	mov	sp, r7
 801d678:	bd80      	pop	{r7, pc}
 801d67a:	46c0      	nop			@ (mov r8, r8)
 801d67c:	20000208 	.word	0x20000208
 801d680:	200020d8 	.word	0x200020d8
 801d684:	200000f4 	.word	0x200000f4
 801d688:	200001f8 	.word	0x200001f8

0801d68c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d68c:	b580      	push	{r7, lr}
 801d68e:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d690:	4907      	ldr	r1, [pc, #28]	@ (801d6b0 <CDC_Init_FS+0x24>)
 801d692:	4b08      	ldr	r3, [pc, #32]	@ (801d6b4 <CDC_Init_FS+0x28>)
 801d694:	2200      	movs	r2, #0
 801d696:	0018      	movs	r0, r3
 801d698:	f7fe fd23 	bl	801c0e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d69c:	4a06      	ldr	r2, [pc, #24]	@ (801d6b8 <CDC_Init_FS+0x2c>)
 801d69e:	4b05      	ldr	r3, [pc, #20]	@ (801d6b4 <CDC_Init_FS+0x28>)
 801d6a0:	0011      	movs	r1, r2
 801d6a2:	0018      	movs	r0, r3
 801d6a4:	f7fe fd39 	bl	801c11a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d6a8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d6aa:	0018      	movs	r0, r3
 801d6ac:	46bd      	mov	sp, r7
 801d6ae:	bd80      	pop	{r7, pc}
 801d6b0:	2000285c 	.word	0x2000285c
 801d6b4:	200020d8 	.word	0x200020d8
 801d6b8:	2000245c 	.word	0x2000245c

0801d6bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d6c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d6c2:	0018      	movs	r0, r3
 801d6c4:	46bd      	mov	sp, r7
 801d6c6:	bd80      	pop	{r7, pc}

0801d6c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	b082      	sub	sp, #8
 801d6cc:	af00      	add	r7, sp, #0
 801d6ce:	6039      	str	r1, [r7, #0]
 801d6d0:	0011      	movs	r1, r2
 801d6d2:	1dfb      	adds	r3, r7, #7
 801d6d4:	1c02      	adds	r2, r0, #0
 801d6d6:	701a      	strb	r2, [r3, #0]
 801d6d8:	1d3b      	adds	r3, r7, #4
 801d6da:	1c0a      	adds	r2, r1, #0
 801d6dc:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d6de:	1dfb      	adds	r3, r7, #7
 801d6e0:	781b      	ldrb	r3, [r3, #0]
 801d6e2:	2b23      	cmp	r3, #35	@ 0x23
 801d6e4:	d804      	bhi.n	801d6f0 <CDC_Control_FS+0x28>
 801d6e6:	009a      	lsls	r2, r3, #2
 801d6e8:	4b04      	ldr	r3, [pc, #16]	@ (801d6fc <CDC_Control_FS+0x34>)
 801d6ea:	18d3      	adds	r3, r2, r3
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d6f0:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801d6f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d6f4:	0018      	movs	r0, r3
 801d6f6:	46bd      	mov	sp, r7
 801d6f8:	b002      	add	sp, #8
 801d6fa:	bd80      	pop	{r7, pc}
 801d6fc:	080267e4 	.word	0x080267e4

0801d700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d700:	b580      	push	{r7, lr}
 801d702:	b082      	sub	sp, #8
 801d704:	af00      	add	r7, sp, #0
 801d706:	6078      	str	r0, [r7, #4]
 801d708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801d70a:	4b12      	ldr	r3, [pc, #72]	@ (801d754 <CDC_Receive_FS+0x54>)
 801d70c:	781b      	ldrb	r3, [r3, #0]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d013      	beq.n	801d73a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801d712:	683b      	ldr	r3, [r7, #0]
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	b29a      	uxth	r2, r3
 801d718:	2301      	movs	r3, #1
 801d71a:	425b      	negs	r3, r3
 801d71c:	6879      	ldr	r1, [r7, #4]
 801d71e:	480e      	ldr	r0, [pc, #56]	@ (801d758 <CDC_Receive_FS+0x58>)
 801d720:	f7fa fa46 	bl	8017bb0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d724:	687a      	ldr	r2, [r7, #4]
 801d726:	4b0d      	ldr	r3, [pc, #52]	@ (801d75c <CDC_Receive_FS+0x5c>)
 801d728:	0011      	movs	r1, r2
 801d72a:	0018      	movs	r0, r3
 801d72c:	f7fe fcf5 	bl	801c11a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d730:	4b0a      	ldr	r3, [pc, #40]	@ (801d75c <CDC_Receive_FS+0x5c>)
 801d732:	0018      	movs	r0, r3
 801d734:	f7fe fd3c 	bl	801c1b0 <USBD_CDC_ReceivePacket>
 801d738:	e006      	b.n	801d748 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801d73a:	683b      	ldr	r3, [r7, #0]
 801d73c:	681a      	ldr	r2, [r3, #0]
 801d73e:	4b08      	ldr	r3, [pc, #32]	@ (801d760 <CDC_Receive_FS+0x60>)
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	18d2      	adds	r2, r2, r3
 801d744:	4b06      	ldr	r3, [pc, #24]	@ (801d760 <CDC_Receive_FS+0x60>)
 801d746:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801d748:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d74a:	0018      	movs	r0, r3
 801d74c:	46bd      	mov	sp, r7
 801d74e:	b002      	add	sp, #8
 801d750:	bd80      	pop	{r7, pc}
 801d752:	46c0      	nop			@ (mov r8, r8)
 801d754:	2000239c 	.word	0x2000239c
 801d758:	200023a0 	.word	0x200023a0
 801d75c:	200020d8 	.word	0x200020d8
 801d760:	20002458 	.word	0x20002458

0801d764 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d764:	b5b0      	push	{r4, r5, r7, lr}
 801d766:	b084      	sub	sp, #16
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]
 801d76c:	000a      	movs	r2, r1
 801d76e:	1cbb      	adds	r3, r7, #2
 801d770:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d772:	230f      	movs	r3, #15
 801d774:	18fb      	adds	r3, r7, r3
 801d776:	2200      	movs	r2, #0
 801d778:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d77a:	4a11      	ldr	r2, [pc, #68]	@ (801d7c0 <CDC_Transmit_FS+0x5c>)
 801d77c:	23ae      	movs	r3, #174	@ 0xae
 801d77e:	009b      	lsls	r3, r3, #2
 801d780:	58d3      	ldr	r3, [r2, r3]
 801d782:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d784:	68ba      	ldr	r2, [r7, #8]
 801d786:	2385      	movs	r3, #133	@ 0x85
 801d788:	009b      	lsls	r3, r3, #2
 801d78a:	58d3      	ldr	r3, [r2, r3]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d001      	beq.n	801d794 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801d790:	2301      	movs	r3, #1
 801d792:	e010      	b.n	801d7b6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d794:	1cbb      	adds	r3, r7, #2
 801d796:	881a      	ldrh	r2, [r3, #0]
 801d798:	6879      	ldr	r1, [r7, #4]
 801d79a:	4b09      	ldr	r3, [pc, #36]	@ (801d7c0 <CDC_Transmit_FS+0x5c>)
 801d79c:	0018      	movs	r0, r3
 801d79e:	f7fe fca0 	bl	801c0e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d7a2:	250f      	movs	r5, #15
 801d7a4:	197c      	adds	r4, r7, r5
 801d7a6:	4b06      	ldr	r3, [pc, #24]	@ (801d7c0 <CDC_Transmit_FS+0x5c>)
 801d7a8:	0018      	movs	r0, r3
 801d7aa:	f7fe fcca 	bl	801c142 <USBD_CDC_TransmitPacket>
 801d7ae:	0003      	movs	r3, r0
 801d7b0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801d7b2:	197b      	adds	r3, r7, r5
 801d7b4:	781b      	ldrb	r3, [r3, #0]
}
 801d7b6:	0018      	movs	r0, r3
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	b004      	add	sp, #16
 801d7bc:	bdb0      	pop	{r4, r5, r7, pc}
 801d7be:	46c0      	nop			@ (mov r8, r8)
 801d7c0:	200020d8 	.word	0x200020d8

0801d7c4 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	af00      	add	r7, sp, #0
  ESPProg = true;
 801d7c8:	4b02      	ldr	r3, [pc, #8]	@ (801d7d4 <EnableESPProg+0x10>)
 801d7ca:	2201      	movs	r2, #1
 801d7cc:	701a      	strb	r2, [r3, #0]
}
 801d7ce:	46c0      	nop			@ (mov r8, r8)
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	bd80      	pop	{r7, pc}
 801d7d4:	2000239c 	.word	0x2000239c

0801d7d8 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801d7dc:	4b01      	ldr	r3, [pc, #4]	@ (801d7e4 <GetUsbRxPointer+0xc>)
}
 801d7de:	0018      	movs	r0, r3
 801d7e0:	46bd      	mov	sp, r7
 801d7e2:	bd80      	pop	{r7, pc}
 801d7e4:	2000245c 	.word	0x2000245c

0801d7e8 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801d7e8:	b580      	push	{r7, lr}
 801d7ea:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801d7ec:	4b07      	ldr	r3, [pc, #28]	@ (801d80c <ResetUsbRxDataSize+0x24>)
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801d7f2:	4a07      	ldr	r2, [pc, #28]	@ (801d810 <ResetUsbRxDataSize+0x28>)
 801d7f4:	4b07      	ldr	r3, [pc, #28]	@ (801d814 <ResetUsbRxDataSize+0x2c>)
 801d7f6:	0011      	movs	r1, r2
 801d7f8:	0018      	movs	r0, r3
 801d7fa:	f7fe fc8e 	bl	801c11a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d7fe:	4b05      	ldr	r3, [pc, #20]	@ (801d814 <ResetUsbRxDataSize+0x2c>)
 801d800:	0018      	movs	r0, r3
 801d802:	f7fe fcd5 	bl	801c1b0 <USBD_CDC_ReceivePacket>
}
 801d806:	46c0      	nop			@ (mov r8, r8)
 801d808:	46bd      	mov	sp, r7
 801d80a:	bd80      	pop	{r7, pc}
 801d80c:	20002458 	.word	0x20002458
 801d810:	2000245c 	.word	0x2000245c
 801d814:	200020d8 	.word	0x200020d8

0801d818 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801d818:	b580      	push	{r7, lr}
 801d81a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801d81c:	4b02      	ldr	r3, [pc, #8]	@ (801d828 <GetUsbRxDataSize+0x10>)
 801d81e:	681b      	ldr	r3, [r3, #0]
}
 801d820:	0018      	movs	r0, r3
 801d822:	46bd      	mov	sp, r7
 801d824:	bd80      	pop	{r7, pc}
 801d826:	46c0      	nop			@ (mov r8, r8)
 801d828:	20002458 	.word	0x20002458

0801d82c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801d82c:	b580      	push	{r7, lr}
 801d82e:	b082      	sub	sp, #8
 801d830:	af00      	add	r7, sp, #0
 801d832:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801d834:	687a      	ldr	r2, [r7, #4]
 801d836:	4b07      	ldr	r3, [pc, #28]	@ (801d854 <GetUsbRxNextChunk+0x28>)
 801d838:	18d2      	adds	r2, r2, r3
 801d83a:	4b07      	ldr	r3, [pc, #28]	@ (801d858 <GetUsbRxNextChunk+0x2c>)
 801d83c:	0011      	movs	r1, r2
 801d83e:	0018      	movs	r0, r3
 801d840:	f7fe fc6b 	bl	801c11a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d844:	4b04      	ldr	r3, [pc, #16]	@ (801d858 <GetUsbRxNextChunk+0x2c>)
 801d846:	0018      	movs	r0, r3
 801d848:	f7fe fcb2 	bl	801c1b0 <USBD_CDC_ReceivePacket>
}
 801d84c:	46c0      	nop			@ (mov r8, r8)
 801d84e:	46bd      	mov	sp, r7
 801d850:	b002      	add	sp, #8
 801d852:	bd80      	pop	{r7, pc}
 801d854:	2000245c 	.word	0x2000245c
 801d858:	200020d8 	.word	0x200020d8

0801d85c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b082      	sub	sp, #8
 801d860:	af00      	add	r7, sp, #0
 801d862:	0002      	movs	r2, r0
 801d864:	6039      	str	r1, [r7, #0]
 801d866:	1dfb      	adds	r3, r7, #7
 801d868:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d86a:	683b      	ldr	r3, [r7, #0]
 801d86c:	2212      	movs	r2, #18
 801d86e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d870:	4b02      	ldr	r3, [pc, #8]	@ (801d87c <USBD_FS_DeviceDescriptor+0x20>)
}
 801d872:	0018      	movs	r0, r3
 801d874:	46bd      	mov	sp, r7
 801d876:	b002      	add	sp, #8
 801d878:	bd80      	pop	{r7, pc}
 801d87a:	46c0      	nop			@ (mov r8, r8)
 801d87c:	20000224 	.word	0x20000224

0801d880 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d880:	b580      	push	{r7, lr}
 801d882:	b082      	sub	sp, #8
 801d884:	af00      	add	r7, sp, #0
 801d886:	0002      	movs	r2, r0
 801d888:	6039      	str	r1, [r7, #0]
 801d88a:	1dfb      	adds	r3, r7, #7
 801d88c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d88e:	683b      	ldr	r3, [r7, #0]
 801d890:	2204      	movs	r2, #4
 801d892:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d894:	4b02      	ldr	r3, [pc, #8]	@ (801d8a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d896:	0018      	movs	r0, r3
 801d898:	46bd      	mov	sp, r7
 801d89a:	b002      	add	sp, #8
 801d89c:	bd80      	pop	{r7, pc}
 801d89e:	46c0      	nop			@ (mov r8, r8)
 801d8a0:	20000238 	.word	0x20000238

0801d8a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b082      	sub	sp, #8
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	0002      	movs	r2, r0
 801d8ac:	6039      	str	r1, [r7, #0]
 801d8ae:	1dfb      	adds	r3, r7, #7
 801d8b0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d8b2:	1dfb      	adds	r3, r7, #7
 801d8b4:	781b      	ldrb	r3, [r3, #0]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d106      	bne.n	801d8c8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d8ba:	683a      	ldr	r2, [r7, #0]
 801d8bc:	4908      	ldr	r1, [pc, #32]	@ (801d8e0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d8be:	4b09      	ldr	r3, [pc, #36]	@ (801d8e4 <USBD_FS_ProductStrDescriptor+0x40>)
 801d8c0:	0018      	movs	r0, r3
 801d8c2:	f7ff fdb1 	bl	801d428 <USBD_GetString>
 801d8c6:	e005      	b.n	801d8d4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d8c8:	683a      	ldr	r2, [r7, #0]
 801d8ca:	4905      	ldr	r1, [pc, #20]	@ (801d8e0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d8cc:	4b05      	ldr	r3, [pc, #20]	@ (801d8e4 <USBD_FS_ProductStrDescriptor+0x40>)
 801d8ce:	0018      	movs	r0, r3
 801d8d0:	f7ff fdaa 	bl	801d428 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d8d4:	4b02      	ldr	r3, [pc, #8]	@ (801d8e0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d8d6:	0018      	movs	r0, r3
 801d8d8:	46bd      	mov	sp, r7
 801d8da:	b002      	add	sp, #8
 801d8dc:	bd80      	pop	{r7, pc}
 801d8de:	46c0      	nop			@ (mov r8, r8)
 801d8e0:	20002c5c 	.word	0x20002c5c
 801d8e4:	0802623c 	.word	0x0802623c

0801d8e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8e8:	b580      	push	{r7, lr}
 801d8ea:	b082      	sub	sp, #8
 801d8ec:	af00      	add	r7, sp, #0
 801d8ee:	0002      	movs	r2, r0
 801d8f0:	6039      	str	r1, [r7, #0]
 801d8f2:	1dfb      	adds	r3, r7, #7
 801d8f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d8f6:	683a      	ldr	r2, [r7, #0]
 801d8f8:	4904      	ldr	r1, [pc, #16]	@ (801d90c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d8fa:	4b05      	ldr	r3, [pc, #20]	@ (801d910 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d8fc:	0018      	movs	r0, r3
 801d8fe:	f7ff fd93 	bl	801d428 <USBD_GetString>
  return USBD_StrDesc;
 801d902:	4b02      	ldr	r3, [pc, #8]	@ (801d90c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d904:	0018      	movs	r0, r3
 801d906:	46bd      	mov	sp, r7
 801d908:	b002      	add	sp, #8
 801d90a:	bd80      	pop	{r7, pc}
 801d90c:	20002c5c 	.word	0x20002c5c
 801d910:	08026254 	.word	0x08026254

0801d914 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b082      	sub	sp, #8
 801d918:	af00      	add	r7, sp, #0
 801d91a:	0002      	movs	r2, r0
 801d91c:	6039      	str	r1, [r7, #0]
 801d91e:	1dfb      	adds	r3, r7, #7
 801d920:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	221a      	movs	r2, #26
 801d926:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d928:	f000 f84c 	bl	801d9c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d92c:	4b02      	ldr	r3, [pc, #8]	@ (801d938 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d92e:	0018      	movs	r0, r3
 801d930:	46bd      	mov	sp, r7
 801d932:	b002      	add	sp, #8
 801d934:	bd80      	pop	{r7, pc}
 801d936:	46c0      	nop			@ (mov r8, r8)
 801d938:	2000023c 	.word	0x2000023c

0801d93c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d93c:	b580      	push	{r7, lr}
 801d93e:	b082      	sub	sp, #8
 801d940:	af00      	add	r7, sp, #0
 801d942:	0002      	movs	r2, r0
 801d944:	6039      	str	r1, [r7, #0]
 801d946:	1dfb      	adds	r3, r7, #7
 801d948:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d94a:	1dfb      	adds	r3, r7, #7
 801d94c:	781b      	ldrb	r3, [r3, #0]
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d106      	bne.n	801d960 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d952:	683a      	ldr	r2, [r7, #0]
 801d954:	4908      	ldr	r1, [pc, #32]	@ (801d978 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d956:	4b09      	ldr	r3, [pc, #36]	@ (801d97c <USBD_FS_ConfigStrDescriptor+0x40>)
 801d958:	0018      	movs	r0, r3
 801d95a:	f7ff fd65 	bl	801d428 <USBD_GetString>
 801d95e:	e005      	b.n	801d96c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d960:	683a      	ldr	r2, [r7, #0]
 801d962:	4905      	ldr	r1, [pc, #20]	@ (801d978 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d964:	4b05      	ldr	r3, [pc, #20]	@ (801d97c <USBD_FS_ConfigStrDescriptor+0x40>)
 801d966:	0018      	movs	r0, r3
 801d968:	f7ff fd5e 	bl	801d428 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d96c:	4b02      	ldr	r3, [pc, #8]	@ (801d978 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d96e:	0018      	movs	r0, r3
 801d970:	46bd      	mov	sp, r7
 801d972:	b002      	add	sp, #8
 801d974:	bd80      	pop	{r7, pc}
 801d976:	46c0      	nop			@ (mov r8, r8)
 801d978:	20002c5c 	.word	0x20002c5c
 801d97c:	08026268 	.word	0x08026268

0801d980 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	b082      	sub	sp, #8
 801d984:	af00      	add	r7, sp, #0
 801d986:	0002      	movs	r2, r0
 801d988:	6039      	str	r1, [r7, #0]
 801d98a:	1dfb      	adds	r3, r7, #7
 801d98c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d98e:	1dfb      	adds	r3, r7, #7
 801d990:	781b      	ldrb	r3, [r3, #0]
 801d992:	2b00      	cmp	r3, #0
 801d994:	d106      	bne.n	801d9a4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d996:	683a      	ldr	r2, [r7, #0]
 801d998:	4908      	ldr	r1, [pc, #32]	@ (801d9bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d99a:	4b09      	ldr	r3, [pc, #36]	@ (801d9c0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d99c:	0018      	movs	r0, r3
 801d99e:	f7ff fd43 	bl	801d428 <USBD_GetString>
 801d9a2:	e005      	b.n	801d9b0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d9a4:	683a      	ldr	r2, [r7, #0]
 801d9a6:	4905      	ldr	r1, [pc, #20]	@ (801d9bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d9a8:	4b05      	ldr	r3, [pc, #20]	@ (801d9c0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d9aa:	0018      	movs	r0, r3
 801d9ac:	f7ff fd3c 	bl	801d428 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d9b0:	4b02      	ldr	r3, [pc, #8]	@ (801d9bc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d9b2:	0018      	movs	r0, r3
 801d9b4:	46bd      	mov	sp, r7
 801d9b6:	b002      	add	sp, #8
 801d9b8:	bd80      	pop	{r7, pc}
 801d9ba:	46c0      	nop			@ (mov r8, r8)
 801d9bc:	20002c5c 	.word	0x20002c5c
 801d9c0:	08026274 	.word	0x08026274

0801d9c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d9c4:	b580      	push	{r7, lr}
 801d9c6:	b084      	sub	sp, #16
 801d9c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d9ca:	4b10      	ldr	r3, [pc, #64]	@ (801da0c <Get_SerialNum+0x48>)
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d9d0:	4b0f      	ldr	r3, [pc, #60]	@ (801da10 <Get_SerialNum+0x4c>)
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d9d6:	4b0f      	ldr	r3, [pc, #60]	@ (801da14 <Get_SerialNum+0x50>)
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d9dc:	68fa      	ldr	r2, [r7, #12]
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	18d3      	adds	r3, r2, r3
 801d9e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d00b      	beq.n	801da02 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d9ea:	490b      	ldr	r1, [pc, #44]	@ (801da18 <Get_SerialNum+0x54>)
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	2208      	movs	r2, #8
 801d9f0:	0018      	movs	r0, r3
 801d9f2:	f000 f815 	bl	801da20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d9f6:	4909      	ldr	r1, [pc, #36]	@ (801da1c <Get_SerialNum+0x58>)
 801d9f8:	68bb      	ldr	r3, [r7, #8]
 801d9fa:	2204      	movs	r2, #4
 801d9fc:	0018      	movs	r0, r3
 801d9fe:	f000 f80f 	bl	801da20 <IntToUnicode>
  }
}
 801da02:	46c0      	nop			@ (mov r8, r8)
 801da04:	46bd      	mov	sp, r7
 801da06:	b004      	add	sp, #16
 801da08:	bd80      	pop	{r7, pc}
 801da0a:	46c0      	nop			@ (mov r8, r8)
 801da0c:	1ff80050 	.word	0x1ff80050
 801da10:	1ff80054 	.word	0x1ff80054
 801da14:	1ff80058 	.word	0x1ff80058
 801da18:	2000023e 	.word	0x2000023e
 801da1c:	2000024e 	.word	0x2000024e

0801da20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801da20:	b580      	push	{r7, lr}
 801da22:	b086      	sub	sp, #24
 801da24:	af00      	add	r7, sp, #0
 801da26:	60f8      	str	r0, [r7, #12]
 801da28:	60b9      	str	r1, [r7, #8]
 801da2a:	1dfb      	adds	r3, r7, #7
 801da2c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801da2e:	2117      	movs	r1, #23
 801da30:	187b      	adds	r3, r7, r1
 801da32:	2200      	movs	r2, #0
 801da34:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801da36:	187b      	adds	r3, r7, r1
 801da38:	2200      	movs	r2, #0
 801da3a:	701a      	strb	r2, [r3, #0]
 801da3c:	e02f      	b.n	801da9e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	0f1b      	lsrs	r3, r3, #28
 801da42:	2b09      	cmp	r3, #9
 801da44:	d80d      	bhi.n	801da62 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801da46:	68fb      	ldr	r3, [r7, #12]
 801da48:	0f1b      	lsrs	r3, r3, #28
 801da4a:	b2da      	uxtb	r2, r3
 801da4c:	2317      	movs	r3, #23
 801da4e:	18fb      	adds	r3, r7, r3
 801da50:	781b      	ldrb	r3, [r3, #0]
 801da52:	005b      	lsls	r3, r3, #1
 801da54:	0019      	movs	r1, r3
 801da56:	68bb      	ldr	r3, [r7, #8]
 801da58:	185b      	adds	r3, r3, r1
 801da5a:	3230      	adds	r2, #48	@ 0x30
 801da5c:	b2d2      	uxtb	r2, r2
 801da5e:	701a      	strb	r2, [r3, #0]
 801da60:	e00c      	b.n	801da7c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	0f1b      	lsrs	r3, r3, #28
 801da66:	b2da      	uxtb	r2, r3
 801da68:	2317      	movs	r3, #23
 801da6a:	18fb      	adds	r3, r7, r3
 801da6c:	781b      	ldrb	r3, [r3, #0]
 801da6e:	005b      	lsls	r3, r3, #1
 801da70:	0019      	movs	r1, r3
 801da72:	68bb      	ldr	r3, [r7, #8]
 801da74:	185b      	adds	r3, r3, r1
 801da76:	3237      	adds	r2, #55	@ 0x37
 801da78:	b2d2      	uxtb	r2, r2
 801da7a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	011b      	lsls	r3, r3, #4
 801da80:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801da82:	2117      	movs	r1, #23
 801da84:	187b      	adds	r3, r7, r1
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	005b      	lsls	r3, r3, #1
 801da8a:	3301      	adds	r3, #1
 801da8c:	68ba      	ldr	r2, [r7, #8]
 801da8e:	18d3      	adds	r3, r2, r3
 801da90:	2200      	movs	r2, #0
 801da92:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801da94:	187b      	adds	r3, r7, r1
 801da96:	781a      	ldrb	r2, [r3, #0]
 801da98:	187b      	adds	r3, r7, r1
 801da9a:	3201      	adds	r2, #1
 801da9c:	701a      	strb	r2, [r3, #0]
 801da9e:	2317      	movs	r3, #23
 801daa0:	18fa      	adds	r2, r7, r3
 801daa2:	1dfb      	adds	r3, r7, #7
 801daa4:	7812      	ldrb	r2, [r2, #0]
 801daa6:	781b      	ldrb	r3, [r3, #0]
 801daa8:	429a      	cmp	r2, r3
 801daaa:	d3c8      	bcc.n	801da3e <IntToUnicode+0x1e>
  }
}
 801daac:	46c0      	nop			@ (mov r8, r8)
 801daae:	46c0      	nop			@ (mov r8, r8)
 801dab0:	46bd      	mov	sp, r7
 801dab2:	b006      	add	sp, #24
 801dab4:	bd80      	pop	{r7, pc}
	...

0801dab8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801dab8:	b580      	push	{r7, lr}
 801daba:	b082      	sub	sp, #8
 801dabc:	af00      	add	r7, sp, #0
 801dabe:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	4a0a      	ldr	r2, [pc, #40]	@ (801daf0 <HAL_PCD_MspInit+0x38>)
 801dac6:	4293      	cmp	r3, r2
 801dac8:	d10e      	bne.n	801dae8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801daca:	4b0a      	ldr	r3, [pc, #40]	@ (801daf4 <HAL_PCD_MspInit+0x3c>)
 801dacc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dace:	4b09      	ldr	r3, [pc, #36]	@ (801daf4 <HAL_PCD_MspInit+0x3c>)
 801dad0:	2180      	movs	r1, #128	@ 0x80
 801dad2:	0409      	lsls	r1, r1, #16
 801dad4:	430a      	orrs	r2, r1
 801dad6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801dad8:	2200      	movs	r2, #0
 801dada:	2100      	movs	r1, #0
 801dadc:	201f      	movs	r0, #31
 801dade:	f7f2 fadf 	bl	80100a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801dae2:	201f      	movs	r0, #31
 801dae4:	f7f2 faf1 	bl	80100ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801dae8:	46c0      	nop			@ (mov r8, r8)
 801daea:	46bd      	mov	sp, r7
 801daec:	b002      	add	sp, #8
 801daee:	bd80      	pop	{r7, pc}
 801daf0:	40005c00 	.word	0x40005c00
 801daf4:	40021000 	.word	0x40021000

0801daf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801daf8:	b580      	push	{r7, lr}
 801dafa:	b082      	sub	sp, #8
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801db00:	687a      	ldr	r2, [r7, #4]
 801db02:	23bc      	movs	r3, #188	@ 0xbc
 801db04:	009b      	lsls	r3, r3, #2
 801db06:	58d2      	ldr	r2, [r2, r3]
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	21ac      	movs	r1, #172	@ 0xac
 801db0c:	0089      	lsls	r1, r1, #2
 801db0e:	468c      	mov	ip, r1
 801db10:	4463      	add	r3, ip
 801db12:	0019      	movs	r1, r3
 801db14:	0010      	movs	r0, r2
 801db16:	f7fe fc1d 	bl	801c354 <USBD_LL_SetupStage>
}
 801db1a:	46c0      	nop			@ (mov r8, r8)
 801db1c:	46bd      	mov	sp, r7
 801db1e:	b002      	add	sp, #8
 801db20:	bd80      	pop	{r7, pc}

0801db22 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db22:	b590      	push	{r4, r7, lr}
 801db24:	b083      	sub	sp, #12
 801db26:	af00      	add	r7, sp, #0
 801db28:	6078      	str	r0, [r7, #4]
 801db2a:	000a      	movs	r2, r1
 801db2c:	1cfb      	adds	r3, r7, #3
 801db2e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801db30:	687a      	ldr	r2, [r7, #4]
 801db32:	23bc      	movs	r3, #188	@ 0xbc
 801db34:	009b      	lsls	r3, r3, #2
 801db36:	58d4      	ldr	r4, [r2, r3]
 801db38:	1cfb      	adds	r3, r7, #3
 801db3a:	781a      	ldrb	r2, [r3, #0]
 801db3c:	6878      	ldr	r0, [r7, #4]
 801db3e:	23be      	movs	r3, #190	@ 0xbe
 801db40:	0059      	lsls	r1, r3, #1
 801db42:	0013      	movs	r3, r2
 801db44:	009b      	lsls	r3, r3, #2
 801db46:	189b      	adds	r3, r3, r2
 801db48:	00db      	lsls	r3, r3, #3
 801db4a:	18c3      	adds	r3, r0, r3
 801db4c:	185b      	adds	r3, r3, r1
 801db4e:	681a      	ldr	r2, [r3, #0]
 801db50:	1cfb      	adds	r3, r7, #3
 801db52:	781b      	ldrb	r3, [r3, #0]
 801db54:	0019      	movs	r1, r3
 801db56:	0020      	movs	r0, r4
 801db58:	f7fe fc5a 	bl	801c410 <USBD_LL_DataOutStage>
}
 801db5c:	46c0      	nop			@ (mov r8, r8)
 801db5e:	46bd      	mov	sp, r7
 801db60:	b003      	add	sp, #12
 801db62:	bd90      	pop	{r4, r7, pc}

0801db64 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db64:	b580      	push	{r7, lr}
 801db66:	b082      	sub	sp, #8
 801db68:	af00      	add	r7, sp, #0
 801db6a:	6078      	str	r0, [r7, #4]
 801db6c:	000a      	movs	r2, r1
 801db6e:	1cfb      	adds	r3, r7, #3
 801db70:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801db72:	687a      	ldr	r2, [r7, #4]
 801db74:	23bc      	movs	r3, #188	@ 0xbc
 801db76:	009b      	lsls	r3, r3, #2
 801db78:	58d0      	ldr	r0, [r2, r3]
 801db7a:	1cfb      	adds	r3, r7, #3
 801db7c:	781a      	ldrb	r2, [r3, #0]
 801db7e:	6879      	ldr	r1, [r7, #4]
 801db80:	0013      	movs	r3, r2
 801db82:	009b      	lsls	r3, r3, #2
 801db84:	189b      	adds	r3, r3, r2
 801db86:	00db      	lsls	r3, r3, #3
 801db88:	18cb      	adds	r3, r1, r3
 801db8a:	333c      	adds	r3, #60	@ 0x3c
 801db8c:	681a      	ldr	r2, [r3, #0]
 801db8e:	1cfb      	adds	r3, r7, #3
 801db90:	781b      	ldrb	r3, [r3, #0]
 801db92:	0019      	movs	r1, r3
 801db94:	f7fe fcbe 	bl	801c514 <USBD_LL_DataInStage>
}
 801db98:	46c0      	nop			@ (mov r8, r8)
 801db9a:	46bd      	mov	sp, r7
 801db9c:	b002      	add	sp, #8
 801db9e:	bd80      	pop	{r7, pc}

0801dba0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b082      	sub	sp, #8
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801dba8:	687a      	ldr	r2, [r7, #4]
 801dbaa:	23bc      	movs	r3, #188	@ 0xbc
 801dbac:	009b      	lsls	r3, r3, #2
 801dbae:	58d3      	ldr	r3, [r2, r3]
 801dbb0:	0018      	movs	r0, r3
 801dbb2:	f7fe fdf5 	bl	801c7a0 <USBD_LL_SOF>
}
 801dbb6:	46c0      	nop			@ (mov r8, r8)
 801dbb8:	46bd      	mov	sp, r7
 801dbba:	b002      	add	sp, #8
 801dbbc:	bd80      	pop	{r7, pc}

0801dbbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbbe:	b580      	push	{r7, lr}
 801dbc0:	b084      	sub	sp, #16
 801dbc2:	af00      	add	r7, sp, #0
 801dbc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801dbc6:	230f      	movs	r3, #15
 801dbc8:	18fb      	adds	r3, r7, r3
 801dbca:	2201      	movs	r2, #1
 801dbcc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	689b      	ldr	r3, [r3, #8]
 801dbd2:	2b02      	cmp	r3, #2
 801dbd4:	d001      	beq.n	801dbda <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801dbd6:	f7eb f82d 	bl	8008c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dbda:	687a      	ldr	r2, [r7, #4]
 801dbdc:	23bc      	movs	r3, #188	@ 0xbc
 801dbde:	009b      	lsls	r3, r3, #2
 801dbe0:	58d2      	ldr	r2, [r2, r3]
 801dbe2:	230f      	movs	r3, #15
 801dbe4:	18fb      	adds	r3, r7, r3
 801dbe6:	781b      	ldrb	r3, [r3, #0]
 801dbe8:	0019      	movs	r1, r3
 801dbea:	0010      	movs	r0, r2
 801dbec:	f7fe fd97 	bl	801c71e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dbf0:	687a      	ldr	r2, [r7, #4]
 801dbf2:	23bc      	movs	r3, #188	@ 0xbc
 801dbf4:	009b      	lsls	r3, r3, #2
 801dbf6:	58d3      	ldr	r3, [r2, r3]
 801dbf8:	0018      	movs	r0, r3
 801dbfa:	f7fe fd48 	bl	801c68e <USBD_LL_Reset>
}
 801dbfe:	46c0      	nop			@ (mov r8, r8)
 801dc00:	46bd      	mov	sp, r7
 801dc02:	b004      	add	sp, #16
 801dc04:	bd80      	pop	{r7, pc}
	...

0801dc08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc08:	b580      	push	{r7, lr}
 801dc0a:	b082      	sub	sp, #8
 801dc0c:	af00      	add	r7, sp, #0
 801dc0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801dc10:	687a      	ldr	r2, [r7, #4]
 801dc12:	23bc      	movs	r3, #188	@ 0xbc
 801dc14:	009b      	lsls	r3, r3, #2
 801dc16:	58d3      	ldr	r3, [r2, r3]
 801dc18:	0018      	movs	r0, r3
 801dc1a:	f7fe fd91 	bl	801c740 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	699b      	ldr	r3, [r3, #24]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d005      	beq.n	801dc32 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dc26:	4b05      	ldr	r3, [pc, #20]	@ (801dc3c <HAL_PCD_SuspendCallback+0x34>)
 801dc28:	691a      	ldr	r2, [r3, #16]
 801dc2a:	4b04      	ldr	r3, [pc, #16]	@ (801dc3c <HAL_PCD_SuspendCallback+0x34>)
 801dc2c:	2106      	movs	r1, #6
 801dc2e:	430a      	orrs	r2, r1
 801dc30:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801dc32:	46c0      	nop			@ (mov r8, r8)
 801dc34:	46bd      	mov	sp, r7
 801dc36:	b002      	add	sp, #8
 801dc38:	bd80      	pop	{r7, pc}
 801dc3a:	46c0      	nop			@ (mov r8, r8)
 801dc3c:	e000ed00 	.word	0xe000ed00

0801dc40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc40:	b580      	push	{r7, lr}
 801dc42:	b082      	sub	sp, #8
 801dc44:	af00      	add	r7, sp, #0
 801dc46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	699b      	ldr	r3, [r3, #24]
 801dc4c:	2b00      	cmp	r3, #0
 801dc4e:	d007      	beq.n	801dc60 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dc50:	4b09      	ldr	r3, [pc, #36]	@ (801dc78 <HAL_PCD_ResumeCallback+0x38>)
 801dc52:	691a      	ldr	r2, [r3, #16]
 801dc54:	4b08      	ldr	r3, [pc, #32]	@ (801dc78 <HAL_PCD_ResumeCallback+0x38>)
 801dc56:	2106      	movs	r1, #6
 801dc58:	438a      	bics	r2, r1
 801dc5a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801dc5c:	f000 fa44 	bl	801e0e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dc60:	687a      	ldr	r2, [r7, #4]
 801dc62:	23bc      	movs	r3, #188	@ 0xbc
 801dc64:	009b      	lsls	r3, r3, #2
 801dc66:	58d3      	ldr	r3, [r2, r3]
 801dc68:	0018      	movs	r0, r3
 801dc6a:	f7fe fd81 	bl	801c770 <USBD_LL_Resume>
}
 801dc6e:	46c0      	nop			@ (mov r8, r8)
 801dc70:	46bd      	mov	sp, r7
 801dc72:	b002      	add	sp, #8
 801dc74:	bd80      	pop	{r7, pc}
 801dc76:	46c0      	nop			@ (mov r8, r8)
 801dc78:	e000ed00 	.word	0xe000ed00

0801dc7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dc7c:	b580      	push	{r7, lr}
 801dc7e:	b082      	sub	sp, #8
 801dc80:	af00      	add	r7, sp, #0
 801dc82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801dc84:	4a2d      	ldr	r2, [pc, #180]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dc86:	23bc      	movs	r3, #188	@ 0xbc
 801dc88:	009b      	lsls	r3, r3, #2
 801dc8a:	6879      	ldr	r1, [r7, #4]
 801dc8c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801dc8e:	687a      	ldr	r2, [r7, #4]
 801dc90:	23b0      	movs	r3, #176	@ 0xb0
 801dc92:	009b      	lsls	r3, r3, #2
 801dc94:	4929      	ldr	r1, [pc, #164]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dc96:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801dc98:	4b28      	ldr	r3, [pc, #160]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dc9a:	4a29      	ldr	r2, [pc, #164]	@ (801dd40 <USBD_LL_Init+0xc4>)
 801dc9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801dc9e:	4b27      	ldr	r3, [pc, #156]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dca0:	2208      	movs	r2, #8
 801dca2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801dca4:	4b25      	ldr	r3, [pc, #148]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dca6:	2202      	movs	r2, #2
 801dca8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801dcaa:	4b24      	ldr	r3, [pc, #144]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dcac:	2202      	movs	r2, #2
 801dcae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801dcb0:	4b22      	ldr	r3, [pc, #136]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dcb2:	2200      	movs	r2, #0
 801dcb4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801dcb6:	4b21      	ldr	r3, [pc, #132]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dcb8:	2200      	movs	r2, #0
 801dcba:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801dcbc:	4b1f      	ldr	r3, [pc, #124]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dcbe:	2200      	movs	r2, #0
 801dcc0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801dcc2:	4b1e      	ldr	r3, [pc, #120]	@ (801dd3c <USBD_LL_Init+0xc0>)
 801dcc4:	0018      	movs	r0, r3
 801dcc6:	f7f5 ff95 	bl	8013bf4 <HAL_PCD_Init>
 801dcca:	1e03      	subs	r3, r0, #0
 801dccc:	d001      	beq.n	801dcd2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801dcce:	f7ea ffb1 	bl	8008c34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801dcd2:	687a      	ldr	r2, [r7, #4]
 801dcd4:	23b0      	movs	r3, #176	@ 0xb0
 801dcd6:	009b      	lsls	r3, r3, #2
 801dcd8:	58d0      	ldr	r0, [r2, r3]
 801dcda:	2318      	movs	r3, #24
 801dcdc:	2200      	movs	r2, #0
 801dcde:	2100      	movs	r1, #0
 801dce0:	f7f7 fd56 	bl	8015790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801dce4:	687a      	ldr	r2, [r7, #4]
 801dce6:	23b0      	movs	r3, #176	@ 0xb0
 801dce8:	009b      	lsls	r3, r3, #2
 801dcea:	58d0      	ldr	r0, [r2, r3]
 801dcec:	2358      	movs	r3, #88	@ 0x58
 801dcee:	2200      	movs	r2, #0
 801dcf0:	2180      	movs	r1, #128	@ 0x80
 801dcf2:	f7f7 fd4d 	bl	8015790 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801dcf6:	687a      	ldr	r2, [r7, #4]
 801dcf8:	23b0      	movs	r3, #176	@ 0xb0
 801dcfa:	009b      	lsls	r3, r3, #2
 801dcfc:	58d0      	ldr	r0, [r2, r3]
 801dcfe:	23c0      	movs	r3, #192	@ 0xc0
 801dd00:	2200      	movs	r2, #0
 801dd02:	2181      	movs	r1, #129	@ 0x81
 801dd04:	f7f7 fd44 	bl	8015790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801dd08:	687a      	ldr	r2, [r7, #4]
 801dd0a:	23b0      	movs	r3, #176	@ 0xb0
 801dd0c:	009b      	lsls	r3, r3, #2
 801dd0e:	58d0      	ldr	r0, [r2, r3]
 801dd10:	2388      	movs	r3, #136	@ 0x88
 801dd12:	005b      	lsls	r3, r3, #1
 801dd14:	2200      	movs	r2, #0
 801dd16:	2101      	movs	r1, #1
 801dd18:	f7f7 fd3a 	bl	8015790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801dd1c:	687a      	ldr	r2, [r7, #4]
 801dd1e:	23b0      	movs	r3, #176	@ 0xb0
 801dd20:	009b      	lsls	r3, r3, #2
 801dd22:	58d0      	ldr	r0, [r2, r3]
 801dd24:	2380      	movs	r3, #128	@ 0x80
 801dd26:	005b      	lsls	r3, r3, #1
 801dd28:	2200      	movs	r2, #0
 801dd2a:	2182      	movs	r1, #130	@ 0x82
 801dd2c:	f7f7 fd30 	bl	8015790 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801dd30:	2300      	movs	r3, #0
}
 801dd32:	0018      	movs	r0, r3
 801dd34:	46bd      	mov	sp, r7
 801dd36:	b002      	add	sp, #8
 801dd38:	bd80      	pop	{r7, pc}
 801dd3a:	46c0      	nop			@ (mov r8, r8)
 801dd3c:	20002e5c 	.word	0x20002e5c
 801dd40:	40005c00 	.word	0x40005c00

0801dd44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd46:	b085      	sub	sp, #20
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd4c:	210f      	movs	r1, #15
 801dd4e:	187b      	adds	r3, r7, r1
 801dd50:	2200      	movs	r2, #0
 801dd52:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd54:	260e      	movs	r6, #14
 801dd56:	19bb      	adds	r3, r7, r6
 801dd58:	2200      	movs	r2, #0
 801dd5a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801dd5c:	687a      	ldr	r2, [r7, #4]
 801dd5e:	23b0      	movs	r3, #176	@ 0xb0
 801dd60:	009b      	lsls	r3, r3, #2
 801dd62:	58d3      	ldr	r3, [r2, r3]
 801dd64:	000d      	movs	r5, r1
 801dd66:	187c      	adds	r4, r7, r1
 801dd68:	0018      	movs	r0, r3
 801dd6a:	f7f6 f843 	bl	8013df4 <HAL_PCD_Start>
 801dd6e:	0003      	movs	r3, r0
 801dd70:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd72:	19bc      	adds	r4, r7, r6
 801dd74:	197b      	adds	r3, r7, r5
 801dd76:	781b      	ldrb	r3, [r3, #0]
 801dd78:	0018      	movs	r0, r3
 801dd7a:	f000 f9bc 	bl	801e0f6 <USBD_Get_USB_Status>
 801dd7e:	0003      	movs	r3, r0
 801dd80:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801dd82:	19bb      	adds	r3, r7, r6
 801dd84:	781b      	ldrb	r3, [r3, #0]
}
 801dd86:	0018      	movs	r0, r3
 801dd88:	46bd      	mov	sp, r7
 801dd8a:	b005      	add	sp, #20
 801dd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dd8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801dd8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd90:	b085      	sub	sp, #20
 801dd92:	af00      	add	r7, sp, #0
 801dd94:	6078      	str	r0, [r7, #4]
 801dd96:	000c      	movs	r4, r1
 801dd98:	0010      	movs	r0, r2
 801dd9a:	0019      	movs	r1, r3
 801dd9c:	1cfb      	adds	r3, r7, #3
 801dd9e:	1c22      	adds	r2, r4, #0
 801dda0:	701a      	strb	r2, [r3, #0]
 801dda2:	1cbb      	adds	r3, r7, #2
 801dda4:	1c02      	adds	r2, r0, #0
 801dda6:	701a      	strb	r2, [r3, #0]
 801dda8:	003b      	movs	r3, r7
 801ddaa:	1c0a      	adds	r2, r1, #0
 801ddac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ddae:	260f      	movs	r6, #15
 801ddb0:	19bb      	adds	r3, r7, r6
 801ddb2:	2200      	movs	r2, #0
 801ddb4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ddb6:	250e      	movs	r5, #14
 801ddb8:	197b      	adds	r3, r7, r5
 801ddba:	2200      	movs	r2, #0
 801ddbc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ddbe:	687a      	ldr	r2, [r7, #4]
 801ddc0:	23b0      	movs	r3, #176	@ 0xb0
 801ddc2:	009b      	lsls	r3, r3, #2
 801ddc4:	58d0      	ldr	r0, [r2, r3]
 801ddc6:	19bc      	adds	r4, r7, r6
 801ddc8:	1cbb      	adds	r3, r7, #2
 801ddca:	781d      	ldrb	r5, [r3, #0]
 801ddcc:	003b      	movs	r3, r7
 801ddce:	881a      	ldrh	r2, [r3, #0]
 801ddd0:	1cfb      	adds	r3, r7, #3
 801ddd2:	7819      	ldrb	r1, [r3, #0]
 801ddd4:	002b      	movs	r3, r5
 801ddd6:	f7f6 f9a2 	bl	801411e <HAL_PCD_EP_Open>
 801ddda:	0003      	movs	r3, r0
 801dddc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ddde:	250e      	movs	r5, #14
 801dde0:	197c      	adds	r4, r7, r5
 801dde2:	19bb      	adds	r3, r7, r6
 801dde4:	781b      	ldrb	r3, [r3, #0]
 801dde6:	0018      	movs	r0, r3
 801dde8:	f000 f985 	bl	801e0f6 <USBD_Get_USB_Status>
 801ddec:	0003      	movs	r3, r0
 801ddee:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ddf0:	197b      	adds	r3, r7, r5
 801ddf2:	781b      	ldrb	r3, [r3, #0]
}
 801ddf4:	0018      	movs	r0, r3
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	b005      	add	sp, #20
 801ddfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ddfc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ddfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddfe:	b085      	sub	sp, #20
 801de00:	af00      	add	r7, sp, #0
 801de02:	6078      	str	r0, [r7, #4]
 801de04:	000a      	movs	r2, r1
 801de06:	1cfb      	adds	r3, r7, #3
 801de08:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de0a:	210f      	movs	r1, #15
 801de0c:	187b      	adds	r3, r7, r1
 801de0e:	2200      	movs	r2, #0
 801de10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de12:	260e      	movs	r6, #14
 801de14:	19bb      	adds	r3, r7, r6
 801de16:	2200      	movs	r2, #0
 801de18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801de1a:	687a      	ldr	r2, [r7, #4]
 801de1c:	23b0      	movs	r3, #176	@ 0xb0
 801de1e:	009b      	lsls	r3, r3, #2
 801de20:	58d2      	ldr	r2, [r2, r3]
 801de22:	000d      	movs	r5, r1
 801de24:	187c      	adds	r4, r7, r1
 801de26:	1cfb      	adds	r3, r7, #3
 801de28:	781b      	ldrb	r3, [r3, #0]
 801de2a:	0019      	movs	r1, r3
 801de2c:	0010      	movs	r0, r2
 801de2e:	f7f6 f9e5 	bl	80141fc <HAL_PCD_EP_Close>
 801de32:	0003      	movs	r3, r0
 801de34:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801de36:	19bc      	adds	r4, r7, r6
 801de38:	197b      	adds	r3, r7, r5
 801de3a:	781b      	ldrb	r3, [r3, #0]
 801de3c:	0018      	movs	r0, r3
 801de3e:	f000 f95a 	bl	801e0f6 <USBD_Get_USB_Status>
 801de42:	0003      	movs	r3, r0
 801de44:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801de46:	19bb      	adds	r3, r7, r6
 801de48:	781b      	ldrb	r3, [r3, #0]
}
 801de4a:	0018      	movs	r0, r3
 801de4c:	46bd      	mov	sp, r7
 801de4e:	b005      	add	sp, #20
 801de50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801de52 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801de52:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de54:	b085      	sub	sp, #20
 801de56:	af00      	add	r7, sp, #0
 801de58:	6078      	str	r0, [r7, #4]
 801de5a:	000a      	movs	r2, r1
 801de5c:	1cfb      	adds	r3, r7, #3
 801de5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de60:	210f      	movs	r1, #15
 801de62:	187b      	adds	r3, r7, r1
 801de64:	2200      	movs	r2, #0
 801de66:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de68:	260e      	movs	r6, #14
 801de6a:	19bb      	adds	r3, r7, r6
 801de6c:	2200      	movs	r2, #0
 801de6e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801de70:	687a      	ldr	r2, [r7, #4]
 801de72:	23b0      	movs	r3, #176	@ 0xb0
 801de74:	009b      	lsls	r3, r3, #2
 801de76:	58d2      	ldr	r2, [r2, r3]
 801de78:	000d      	movs	r5, r1
 801de7a:	187c      	adds	r4, r7, r1
 801de7c:	1cfb      	adds	r3, r7, #3
 801de7e:	781b      	ldrb	r3, [r3, #0]
 801de80:	0019      	movs	r1, r3
 801de82:	0010      	movs	r0, r2
 801de84:	f7f6 fa97 	bl	80143b6 <HAL_PCD_EP_SetStall>
 801de88:	0003      	movs	r3, r0
 801de8a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801de8c:	19bc      	adds	r4, r7, r6
 801de8e:	197b      	adds	r3, r7, r5
 801de90:	781b      	ldrb	r3, [r3, #0]
 801de92:	0018      	movs	r0, r3
 801de94:	f000 f92f 	bl	801e0f6 <USBD_Get_USB_Status>
 801de98:	0003      	movs	r3, r0
 801de9a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801de9c:	19bb      	adds	r3, r7, r6
 801de9e:	781b      	ldrb	r3, [r3, #0]
}
 801dea0:	0018      	movs	r0, r3
 801dea2:	46bd      	mov	sp, r7
 801dea4:	b005      	add	sp, #20
 801dea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dea8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801deaa:	b085      	sub	sp, #20
 801deac:	af00      	add	r7, sp, #0
 801deae:	6078      	str	r0, [r7, #4]
 801deb0:	000a      	movs	r2, r1
 801deb2:	1cfb      	adds	r3, r7, #3
 801deb4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801deb6:	210f      	movs	r1, #15
 801deb8:	187b      	adds	r3, r7, r1
 801deba:	2200      	movs	r2, #0
 801debc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801debe:	260e      	movs	r6, #14
 801dec0:	19bb      	adds	r3, r7, r6
 801dec2:	2200      	movs	r2, #0
 801dec4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801dec6:	687a      	ldr	r2, [r7, #4]
 801dec8:	23b0      	movs	r3, #176	@ 0xb0
 801deca:	009b      	lsls	r3, r3, #2
 801decc:	58d2      	ldr	r2, [r2, r3]
 801dece:	000d      	movs	r5, r1
 801ded0:	187c      	adds	r4, r7, r1
 801ded2:	1cfb      	adds	r3, r7, #3
 801ded4:	781b      	ldrb	r3, [r3, #0]
 801ded6:	0019      	movs	r1, r3
 801ded8:	0010      	movs	r0, r2
 801deda:	f7f6 fac8 	bl	801446e <HAL_PCD_EP_ClrStall>
 801dede:	0003      	movs	r3, r0
 801dee0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dee2:	19bc      	adds	r4, r7, r6
 801dee4:	197b      	adds	r3, r7, r5
 801dee6:	781b      	ldrb	r3, [r3, #0]
 801dee8:	0018      	movs	r0, r3
 801deea:	f000 f904 	bl	801e0f6 <USBD_Get_USB_Status>
 801deee:	0003      	movs	r3, r0
 801def0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801def2:	19bb      	adds	r3, r7, r6
 801def4:	781b      	ldrb	r3, [r3, #0]
}
 801def6:	0018      	movs	r0, r3
 801def8:	46bd      	mov	sp, r7
 801defa:	b005      	add	sp, #20
 801defc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801defe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801defe:	b580      	push	{r7, lr}
 801df00:	b084      	sub	sp, #16
 801df02:	af00      	add	r7, sp, #0
 801df04:	6078      	str	r0, [r7, #4]
 801df06:	000a      	movs	r2, r1
 801df08:	1cfb      	adds	r3, r7, #3
 801df0a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801df0c:	687a      	ldr	r2, [r7, #4]
 801df0e:	23b0      	movs	r3, #176	@ 0xb0
 801df10:	009b      	lsls	r3, r3, #2
 801df12:	58d3      	ldr	r3, [r2, r3]
 801df14:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801df16:	1cfb      	adds	r3, r7, #3
 801df18:	781b      	ldrb	r3, [r3, #0]
 801df1a:	b25b      	sxtb	r3, r3
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	da0d      	bge.n	801df3c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801df20:	1cfb      	adds	r3, r7, #3
 801df22:	781b      	ldrb	r3, [r3, #0]
 801df24:	227f      	movs	r2, #127	@ 0x7f
 801df26:	4013      	ands	r3, r2
 801df28:	68f9      	ldr	r1, [r7, #12]
 801df2a:	1c5a      	adds	r2, r3, #1
 801df2c:	0013      	movs	r3, r2
 801df2e:	009b      	lsls	r3, r3, #2
 801df30:	189b      	adds	r3, r3, r2
 801df32:	00db      	lsls	r3, r3, #3
 801df34:	18cb      	adds	r3, r1, r3
 801df36:	3302      	adds	r3, #2
 801df38:	781b      	ldrb	r3, [r3, #0]
 801df3a:	e00d      	b.n	801df58 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801df3c:	1cfb      	adds	r3, r7, #3
 801df3e:	781b      	ldrb	r3, [r3, #0]
 801df40:	227f      	movs	r2, #127	@ 0x7f
 801df42:	401a      	ands	r2, r3
 801df44:	68f8      	ldr	r0, [r7, #12]
 801df46:	23b5      	movs	r3, #181	@ 0xb5
 801df48:	0059      	lsls	r1, r3, #1
 801df4a:	0013      	movs	r3, r2
 801df4c:	009b      	lsls	r3, r3, #2
 801df4e:	189b      	adds	r3, r3, r2
 801df50:	00db      	lsls	r3, r3, #3
 801df52:	18c3      	adds	r3, r0, r3
 801df54:	185b      	adds	r3, r3, r1
 801df56:	781b      	ldrb	r3, [r3, #0]
  }
}
 801df58:	0018      	movs	r0, r3
 801df5a:	46bd      	mov	sp, r7
 801df5c:	b004      	add	sp, #16
 801df5e:	bd80      	pop	{r7, pc}

0801df60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801df60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df62:	b085      	sub	sp, #20
 801df64:	af00      	add	r7, sp, #0
 801df66:	6078      	str	r0, [r7, #4]
 801df68:	000a      	movs	r2, r1
 801df6a:	1cfb      	adds	r3, r7, #3
 801df6c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df6e:	210f      	movs	r1, #15
 801df70:	187b      	adds	r3, r7, r1
 801df72:	2200      	movs	r2, #0
 801df74:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df76:	260e      	movs	r6, #14
 801df78:	19bb      	adds	r3, r7, r6
 801df7a:	2200      	movs	r2, #0
 801df7c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801df7e:	687a      	ldr	r2, [r7, #4]
 801df80:	23b0      	movs	r3, #176	@ 0xb0
 801df82:	009b      	lsls	r3, r3, #2
 801df84:	58d2      	ldr	r2, [r2, r3]
 801df86:	000d      	movs	r5, r1
 801df88:	187c      	adds	r4, r7, r1
 801df8a:	1cfb      	adds	r3, r7, #3
 801df8c:	781b      	ldrb	r3, [r3, #0]
 801df8e:	0019      	movs	r1, r3
 801df90:	0010      	movs	r0, r2
 801df92:	f7f6 f899 	bl	80140c8 <HAL_PCD_SetAddress>
 801df96:	0003      	movs	r3, r0
 801df98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df9a:	19bc      	adds	r4, r7, r6
 801df9c:	197b      	adds	r3, r7, r5
 801df9e:	781b      	ldrb	r3, [r3, #0]
 801dfa0:	0018      	movs	r0, r3
 801dfa2:	f000 f8a8 	bl	801e0f6 <USBD_Get_USB_Status>
 801dfa6:	0003      	movs	r3, r0
 801dfa8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801dfaa:	19bb      	adds	r3, r7, r6
 801dfac:	781b      	ldrb	r3, [r3, #0]
}
 801dfae:	0018      	movs	r0, r3
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	b005      	add	sp, #20
 801dfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dfb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801dfb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfb8:	b087      	sub	sp, #28
 801dfba:	af00      	add	r7, sp, #0
 801dfbc:	60f8      	str	r0, [r7, #12]
 801dfbe:	0008      	movs	r0, r1
 801dfc0:	607a      	str	r2, [r7, #4]
 801dfc2:	0019      	movs	r1, r3
 801dfc4:	230b      	movs	r3, #11
 801dfc6:	18fb      	adds	r3, r7, r3
 801dfc8:	1c02      	adds	r2, r0, #0
 801dfca:	701a      	strb	r2, [r3, #0]
 801dfcc:	2408      	movs	r4, #8
 801dfce:	193b      	adds	r3, r7, r4
 801dfd0:	1c0a      	adds	r2, r1, #0
 801dfd2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dfd4:	2117      	movs	r1, #23
 801dfd6:	187b      	adds	r3, r7, r1
 801dfd8:	2200      	movs	r2, #0
 801dfda:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dfdc:	2516      	movs	r5, #22
 801dfde:	197b      	adds	r3, r7, r5
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801dfe4:	68fa      	ldr	r2, [r7, #12]
 801dfe6:	23b0      	movs	r3, #176	@ 0xb0
 801dfe8:	009b      	lsls	r3, r3, #2
 801dfea:	58d0      	ldr	r0, [r2, r3]
 801dfec:	193b      	adds	r3, r7, r4
 801dfee:	881d      	ldrh	r5, [r3, #0]
 801dff0:	000e      	movs	r6, r1
 801dff2:	187c      	adds	r4, r7, r1
 801dff4:	687a      	ldr	r2, [r7, #4]
 801dff6:	230b      	movs	r3, #11
 801dff8:	18fb      	adds	r3, r7, r3
 801dffa:	7819      	ldrb	r1, [r3, #0]
 801dffc:	002b      	movs	r3, r5
 801dffe:	f7f6 f99e 	bl	801433e <HAL_PCD_EP_Transmit>
 801e002:	0003      	movs	r3, r0
 801e004:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e006:	2516      	movs	r5, #22
 801e008:	197c      	adds	r4, r7, r5
 801e00a:	19bb      	adds	r3, r7, r6
 801e00c:	781b      	ldrb	r3, [r3, #0]
 801e00e:	0018      	movs	r0, r3
 801e010:	f000 f871 	bl	801e0f6 <USBD_Get_USB_Status>
 801e014:	0003      	movs	r3, r0
 801e016:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e018:	197b      	adds	r3, r7, r5
 801e01a:	781b      	ldrb	r3, [r3, #0]
}
 801e01c:	0018      	movs	r0, r3
 801e01e:	46bd      	mov	sp, r7
 801e020:	b007      	add	sp, #28
 801e022:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e024 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e024:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e026:	b087      	sub	sp, #28
 801e028:	af00      	add	r7, sp, #0
 801e02a:	60f8      	str	r0, [r7, #12]
 801e02c:	0008      	movs	r0, r1
 801e02e:	607a      	str	r2, [r7, #4]
 801e030:	0019      	movs	r1, r3
 801e032:	230b      	movs	r3, #11
 801e034:	18fb      	adds	r3, r7, r3
 801e036:	1c02      	adds	r2, r0, #0
 801e038:	701a      	strb	r2, [r3, #0]
 801e03a:	2408      	movs	r4, #8
 801e03c:	193b      	adds	r3, r7, r4
 801e03e:	1c0a      	adds	r2, r1, #0
 801e040:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e042:	2117      	movs	r1, #23
 801e044:	187b      	adds	r3, r7, r1
 801e046:	2200      	movs	r2, #0
 801e048:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e04a:	2516      	movs	r5, #22
 801e04c:	197b      	adds	r3, r7, r5
 801e04e:	2200      	movs	r2, #0
 801e050:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e052:	68fa      	ldr	r2, [r7, #12]
 801e054:	23b0      	movs	r3, #176	@ 0xb0
 801e056:	009b      	lsls	r3, r3, #2
 801e058:	58d0      	ldr	r0, [r2, r3]
 801e05a:	193b      	adds	r3, r7, r4
 801e05c:	881d      	ldrh	r5, [r3, #0]
 801e05e:	000e      	movs	r6, r1
 801e060:	187c      	adds	r4, r7, r1
 801e062:	687a      	ldr	r2, [r7, #4]
 801e064:	230b      	movs	r3, #11
 801e066:	18fb      	adds	r3, r7, r3
 801e068:	7819      	ldrb	r1, [r3, #0]
 801e06a:	002b      	movs	r3, r5
 801e06c:	f7f6 f917 	bl	801429e <HAL_PCD_EP_Receive>
 801e070:	0003      	movs	r3, r0
 801e072:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e074:	2516      	movs	r5, #22
 801e076:	197c      	adds	r4, r7, r5
 801e078:	19bb      	adds	r3, r7, r6
 801e07a:	781b      	ldrb	r3, [r3, #0]
 801e07c:	0018      	movs	r0, r3
 801e07e:	f000 f83a 	bl	801e0f6 <USBD_Get_USB_Status>
 801e082:	0003      	movs	r3, r0
 801e084:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e086:	197b      	adds	r3, r7, r5
 801e088:	781b      	ldrb	r3, [r3, #0]
}
 801e08a:	0018      	movs	r0, r3
 801e08c:	46bd      	mov	sp, r7
 801e08e:	b007      	add	sp, #28
 801e090:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e092 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e092:	b580      	push	{r7, lr}
 801e094:	b082      	sub	sp, #8
 801e096:	af00      	add	r7, sp, #0
 801e098:	6078      	str	r0, [r7, #4]
 801e09a:	000a      	movs	r2, r1
 801e09c:	1cfb      	adds	r3, r7, #3
 801e09e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e0a0:	687a      	ldr	r2, [r7, #4]
 801e0a2:	23b0      	movs	r3, #176	@ 0xb0
 801e0a4:	009b      	lsls	r3, r3, #2
 801e0a6:	58d2      	ldr	r2, [r2, r3]
 801e0a8:	1cfb      	adds	r3, r7, #3
 801e0aa:	781b      	ldrb	r3, [r3, #0]
 801e0ac:	0019      	movs	r1, r3
 801e0ae:	0010      	movs	r0, r2
 801e0b0:	f7f6 f92c 	bl	801430c <HAL_PCD_EP_GetRxCount>
 801e0b4:	0003      	movs	r3, r0
}
 801e0b6:	0018      	movs	r0, r3
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	b002      	add	sp, #8
 801e0bc:	bd80      	pop	{r7, pc}
	...

0801e0c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b082      	sub	sp, #8
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e0c8:	4b02      	ldr	r3, [pc, #8]	@ (801e0d4 <USBD_static_malloc+0x14>)
}
 801e0ca:	0018      	movs	r0, r3
 801e0cc:	46bd      	mov	sp, r7
 801e0ce:	b002      	add	sp, #8
 801e0d0:	bd80      	pop	{r7, pc}
 801e0d2:	46c0      	nop			@ (mov r8, r8)
 801e0d4:	20003150 	.word	0x20003150

0801e0d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	b082      	sub	sp, #8
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	6078      	str	r0, [r7, #4]

}
 801e0e0:	46c0      	nop			@ (mov r8, r8)
 801e0e2:	46bd      	mov	sp, r7
 801e0e4:	b002      	add	sp, #8
 801e0e6:	bd80      	pop	{r7, pc}

0801e0e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801e0ec:	f7ea fc5c 	bl	80089a8 <SystemClock_Config>
}
 801e0f0:	46c0      	nop			@ (mov r8, r8)
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	bd80      	pop	{r7, pc}

0801e0f6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e0f6:	b580      	push	{r7, lr}
 801e0f8:	b084      	sub	sp, #16
 801e0fa:	af00      	add	r7, sp, #0
 801e0fc:	0002      	movs	r2, r0
 801e0fe:	1dfb      	adds	r3, r7, #7
 801e100:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e102:	230f      	movs	r3, #15
 801e104:	18fb      	adds	r3, r7, r3
 801e106:	2200      	movs	r2, #0
 801e108:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801e10a:	1dfb      	adds	r3, r7, #7
 801e10c:	781b      	ldrb	r3, [r3, #0]
 801e10e:	2b03      	cmp	r3, #3
 801e110:	d017      	beq.n	801e142 <USBD_Get_USB_Status+0x4c>
 801e112:	dc1b      	bgt.n	801e14c <USBD_Get_USB_Status+0x56>
 801e114:	2b02      	cmp	r3, #2
 801e116:	d00f      	beq.n	801e138 <USBD_Get_USB_Status+0x42>
 801e118:	dc18      	bgt.n	801e14c <USBD_Get_USB_Status+0x56>
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d002      	beq.n	801e124 <USBD_Get_USB_Status+0x2e>
 801e11e:	2b01      	cmp	r3, #1
 801e120:	d005      	beq.n	801e12e <USBD_Get_USB_Status+0x38>
 801e122:	e013      	b.n	801e14c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e124:	230f      	movs	r3, #15
 801e126:	18fb      	adds	r3, r7, r3
 801e128:	2200      	movs	r2, #0
 801e12a:	701a      	strb	r2, [r3, #0]
    break;
 801e12c:	e013      	b.n	801e156 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e12e:	230f      	movs	r3, #15
 801e130:	18fb      	adds	r3, r7, r3
 801e132:	2202      	movs	r2, #2
 801e134:	701a      	strb	r2, [r3, #0]
    break;
 801e136:	e00e      	b.n	801e156 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e138:	230f      	movs	r3, #15
 801e13a:	18fb      	adds	r3, r7, r3
 801e13c:	2201      	movs	r2, #1
 801e13e:	701a      	strb	r2, [r3, #0]
    break;
 801e140:	e009      	b.n	801e156 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e142:	230f      	movs	r3, #15
 801e144:	18fb      	adds	r3, r7, r3
 801e146:	2202      	movs	r2, #2
 801e148:	701a      	strb	r2, [r3, #0]
    break;
 801e14a:	e004      	b.n	801e156 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801e14c:	230f      	movs	r3, #15
 801e14e:	18fb      	adds	r3, r7, r3
 801e150:	2202      	movs	r2, #2
 801e152:	701a      	strb	r2, [r3, #0]
    break;
 801e154:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801e156:	230f      	movs	r3, #15
 801e158:	18fb      	adds	r3, r7, r3
 801e15a:	781b      	ldrb	r3, [r3, #0]
}
 801e15c:	0018      	movs	r0, r3
 801e15e:	46bd      	mov	sp, r7
 801e160:	b004      	add	sp, #16
 801e162:	bd80      	pop	{r7, pc}

0801e164 <arm_cfft_radix4by2_q31>:
 801e164:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e166:	465f      	mov	r7, fp
 801e168:	4656      	mov	r6, sl
 801e16a:	464d      	mov	r5, r9
 801e16c:	4644      	mov	r4, r8
 801e16e:	000b      	movs	r3, r1
 801e170:	b4f0      	push	{r4, r5, r6, r7}
 801e172:	085b      	lsrs	r3, r3, #1
 801e174:	b08f      	sub	sp, #60	@ 0x3c
 801e176:	910a      	str	r1, [sp, #40]	@ 0x28
 801e178:	0007      	movs	r7, r0
 801e17a:	9009      	str	r0, [sp, #36]	@ 0x24
 801e17c:	0011      	movs	r1, r2
 801e17e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e180:	930c      	str	r3, [sp, #48]	@ 0x30
 801e182:	2b00      	cmp	r3, #0
 801e184:	d100      	bne.n	801e188 <arm_cfft_radix4by2_q31+0x24>
 801e186:	e0a0      	b.n	801e2ca <arm_cfft_radix4by2_q31+0x166>
 801e188:	0002      	movs	r2, r0
 801e18a:	00db      	lsls	r3, r3, #3
 801e18c:	3204      	adds	r2, #4
 801e18e:	4691      	mov	r9, r2
 801e190:	4698      	mov	r8, r3
 801e192:	000a      	movs	r2, r1
 801e194:	464e      	mov	r6, r9
 801e196:	4442      	add	r2, r8
 801e198:	4699      	mov	r9, r3
 801e19a:	4688      	mov	r8, r1
 801e19c:	9208      	str	r2, [sp, #32]
 801e19e:	900d      	str	r0, [sp, #52]	@ 0x34
 801e1a0:	4643      	mov	r3, r8
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	469b      	mov	fp, r3
 801e1a6:	4643      	mov	r3, r8
 801e1a8:	685b      	ldr	r3, [r3, #4]
 801e1aa:	469a      	mov	sl, r3
 801e1ac:	683b      	ldr	r3, [r7, #0]
 801e1ae:	109c      	asrs	r4, r3, #2
 801e1b0:	464b      	mov	r3, r9
 801e1b2:	58fb      	ldr	r3, [r7, r3]
 801e1b4:	109a      	asrs	r2, r3, #2
 801e1b6:	18a3      	adds	r3, r4, r2
 801e1b8:	603b      	str	r3, [r7, #0]
 801e1ba:	6833      	ldr	r3, [r6, #0]
 801e1bc:	1aa4      	subs	r4, r4, r2
 801e1be:	109d      	asrs	r5, r3, #2
 801e1c0:	464b      	mov	r3, r9
 801e1c2:	58f3      	ldr	r3, [r6, r3]
 801e1c4:	17e2      	asrs	r2, r4, #31
 801e1c6:	109b      	asrs	r3, r3, #2
 801e1c8:	18e9      	adds	r1, r5, r3
 801e1ca:	6031      	str	r1, [r6, #0]
 801e1cc:	0011      	movs	r1, r2
 801e1ce:	465a      	mov	r2, fp
 801e1d0:	17d2      	asrs	r2, r2, #31
 801e1d2:	0010      	movs	r0, r2
 801e1d4:	4652      	mov	r2, sl
 801e1d6:	1aed      	subs	r5, r5, r3
 801e1d8:	17eb      	asrs	r3, r5, #31
 801e1da:	17d2      	asrs	r2, r2, #31
 801e1dc:	9307      	str	r3, [sp, #28]
 801e1de:	9204      	str	r2, [sp, #16]
 801e1e0:	0003      	movs	r3, r0
 801e1e2:	465a      	mov	r2, fp
 801e1e4:	9006      	str	r0, [sp, #24]
 801e1e6:	0020      	movs	r0, r4
 801e1e8:	9105      	str	r1, [sp, #20]
 801e1ea:	f7e2 f9e9 	bl	80005c0 <__aeabi_lmul>
 801e1ee:	2280      	movs	r2, #128	@ 0x80
 801e1f0:	2300      	movs	r3, #0
 801e1f2:	0612      	lsls	r2, r2, #24
 801e1f4:	1880      	adds	r0, r0, r2
 801e1f6:	4159      	adcs	r1, r3
 801e1f8:	2300      	movs	r3, #0
 801e1fa:	9101      	str	r1, [sp, #4]
 801e1fc:	9300      	str	r3, [sp, #0]
 801e1fe:	4652      	mov	r2, sl
 801e200:	9b04      	ldr	r3, [sp, #16]
 801e202:	0028      	movs	r0, r5
 801e204:	17e9      	asrs	r1, r5, #31
 801e206:	f7e2 f9db 	bl	80005c0 <__aeabi_lmul>
 801e20a:	9a00      	ldr	r2, [sp, #0]
 801e20c:	9b01      	ldr	r3, [sp, #4]
 801e20e:	1880      	adds	r0, r0, r2
 801e210:	4159      	adcs	r1, r3
 801e212:	2280      	movs	r2, #128	@ 0x80
 801e214:	2300      	movs	r3, #0
 801e216:	0612      	lsls	r2, r2, #24
 801e218:	1880      	adds	r0, r0, r2
 801e21a:	4159      	adcs	r1, r3
 801e21c:	464a      	mov	r2, r9
 801e21e:	004b      	lsls	r3, r1, #1
 801e220:	50bb      	str	r3, [r7, r2]
 801e222:	4658      	mov	r0, fp
 801e224:	002a      	movs	r2, r5
 801e226:	9b07      	ldr	r3, [sp, #28]
 801e228:	9906      	ldr	r1, [sp, #24]
 801e22a:	f7e2 f9c9 	bl	80005c0 <__aeabi_lmul>
 801e22e:	2280      	movs	r2, #128	@ 0x80
 801e230:	2300      	movs	r3, #0
 801e232:	0612      	lsls	r2, r2, #24
 801e234:	1880      	adds	r0, r0, r2
 801e236:	4159      	adcs	r1, r3
 801e238:	2000      	movs	r0, #0
 801e23a:	9103      	str	r1, [sp, #12]
 801e23c:	9002      	str	r0, [sp, #8]
 801e23e:	4652      	mov	r2, sl
 801e240:	9b04      	ldr	r3, [sp, #16]
 801e242:	0020      	movs	r0, r4
 801e244:	9905      	ldr	r1, [sp, #20]
 801e246:	f7e2 f9bb 	bl	80005c0 <__aeabi_lmul>
 801e24a:	9a02      	ldr	r2, [sp, #8]
 801e24c:	9b03      	ldr	r3, [sp, #12]
 801e24e:	1a12      	subs	r2, r2, r0
 801e250:	418b      	sbcs	r3, r1
 801e252:	2080      	movs	r0, #128	@ 0x80
 801e254:	2100      	movs	r1, #0
 801e256:	0600      	lsls	r0, r0, #24
 801e258:	1812      	adds	r2, r2, r0
 801e25a:	414b      	adcs	r3, r1
 801e25c:	464a      	mov	r2, r9
 801e25e:	005b      	lsls	r3, r3, #1
 801e260:	50b3      	str	r3, [r6, r2]
 801e262:	2308      	movs	r3, #8
 801e264:	469c      	mov	ip, r3
 801e266:	9b08      	ldr	r3, [sp, #32]
 801e268:	44e0      	add	r8, ip
 801e26a:	3708      	adds	r7, #8
 801e26c:	3608      	adds	r6, #8
 801e26e:	4598      	cmp	r8, r3
 801e270:	d196      	bne.n	801e1a0 <arm_cfft_radix4by2_q31+0x3c>
 801e272:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e274:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e276:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e278:	2302      	movs	r3, #2
 801e27a:	003a      	movs	r2, r7
 801e27c:	0029      	movs	r1, r5
 801e27e:	0020      	movs	r0, r4
 801e280:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801e282:	f000 f957 	bl	801e534 <arm_radix4_butterfly_q31>
 801e286:	46a4      	mov	ip, r4
 801e288:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e28a:	2302      	movs	r3, #2
 801e28c:	0088      	lsls	r0, r1, #2
 801e28e:	4460      	add	r0, ip
 801e290:	003a      	movs	r2, r7
 801e292:	0029      	movs	r1, r5
 801e294:	f000 f94e 	bl	801e534 <arm_radix4_butterfly_q31>
 801e298:	46a4      	mov	ip, r4
 801e29a:	0128      	lsls	r0, r5, #4
 801e29c:	4460      	add	r0, ip
 801e29e:	6833      	ldr	r3, [r6, #0]
 801e2a0:	005b      	lsls	r3, r3, #1
 801e2a2:	6033      	str	r3, [r6, #0]
 801e2a4:	6873      	ldr	r3, [r6, #4]
 801e2a6:	005b      	lsls	r3, r3, #1
 801e2a8:	6073      	str	r3, [r6, #4]
 801e2aa:	68b3      	ldr	r3, [r6, #8]
 801e2ac:	005b      	lsls	r3, r3, #1
 801e2ae:	60b3      	str	r3, [r6, #8]
 801e2b0:	68f3      	ldr	r3, [r6, #12]
 801e2b2:	005b      	lsls	r3, r3, #1
 801e2b4:	60f3      	str	r3, [r6, #12]
 801e2b6:	3610      	adds	r6, #16
 801e2b8:	42b0      	cmp	r0, r6
 801e2ba:	d1f0      	bne.n	801e29e <arm_cfft_radix4by2_q31+0x13a>
 801e2bc:	b00f      	add	sp, #60	@ 0x3c
 801e2be:	bc3c      	pop	{r2, r3, r4, r5}
 801e2c0:	4690      	mov	r8, r2
 801e2c2:	4699      	mov	r9, r3
 801e2c4:	46a2      	mov	sl, r4
 801e2c6:	46ab      	mov	fp, r5
 801e2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2ca:	2302      	movs	r3, #2
 801e2cc:	2100      	movs	r1, #0
 801e2ce:	0015      	movs	r5, r2
 801e2d0:	f000 f930 	bl	801e534 <arm_radix4_butterfly_q31>
 801e2d4:	46bc      	mov	ip, r7
 801e2d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e2d8:	002a      	movs	r2, r5
 801e2da:	0098      	lsls	r0, r3, #2
 801e2dc:	4460      	add	r0, ip
 801e2de:	2302      	movs	r3, #2
 801e2e0:	2100      	movs	r1, #0
 801e2e2:	f000 f927 	bl	801e534 <arm_radix4_butterfly_q31>
 801e2e6:	e7e9      	b.n	801e2bc <arm_cfft_radix4by2_q31+0x158>

0801e2e8 <arm_cfft_radix4by2_inverse_q31>:
 801e2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2ea:	465f      	mov	r7, fp
 801e2ec:	4656      	mov	r6, sl
 801e2ee:	464d      	mov	r5, r9
 801e2f0:	4644      	mov	r4, r8
 801e2f2:	000b      	movs	r3, r1
 801e2f4:	b4f0      	push	{r4, r5, r6, r7}
 801e2f6:	085b      	lsrs	r3, r3, #1
 801e2f8:	b08f      	sub	sp, #60	@ 0x3c
 801e2fa:	910a      	str	r1, [sp, #40]	@ 0x28
 801e2fc:	0007      	movs	r7, r0
 801e2fe:	9009      	str	r0, [sp, #36]	@ 0x24
 801e300:	0011      	movs	r1, r2
 801e302:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e304:	930c      	str	r3, [sp, #48]	@ 0x30
 801e306:	2b00      	cmp	r3, #0
 801e308:	d100      	bne.n	801e30c <arm_cfft_radix4by2_inverse_q31+0x24>
 801e30a:	e0a0      	b.n	801e44e <arm_cfft_radix4by2_inverse_q31+0x166>
 801e30c:	0002      	movs	r2, r0
 801e30e:	00db      	lsls	r3, r3, #3
 801e310:	3204      	adds	r2, #4
 801e312:	4691      	mov	r9, r2
 801e314:	4698      	mov	r8, r3
 801e316:	000a      	movs	r2, r1
 801e318:	464e      	mov	r6, r9
 801e31a:	4442      	add	r2, r8
 801e31c:	4699      	mov	r9, r3
 801e31e:	4688      	mov	r8, r1
 801e320:	9208      	str	r2, [sp, #32]
 801e322:	900d      	str	r0, [sp, #52]	@ 0x34
 801e324:	4643      	mov	r3, r8
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	469b      	mov	fp, r3
 801e32a:	4643      	mov	r3, r8
 801e32c:	685b      	ldr	r3, [r3, #4]
 801e32e:	469a      	mov	sl, r3
 801e330:	683b      	ldr	r3, [r7, #0]
 801e332:	109c      	asrs	r4, r3, #2
 801e334:	464b      	mov	r3, r9
 801e336:	58fb      	ldr	r3, [r7, r3]
 801e338:	109a      	asrs	r2, r3, #2
 801e33a:	18a3      	adds	r3, r4, r2
 801e33c:	603b      	str	r3, [r7, #0]
 801e33e:	6833      	ldr	r3, [r6, #0]
 801e340:	1aa4      	subs	r4, r4, r2
 801e342:	109d      	asrs	r5, r3, #2
 801e344:	464b      	mov	r3, r9
 801e346:	58f3      	ldr	r3, [r6, r3]
 801e348:	17e2      	asrs	r2, r4, #31
 801e34a:	109b      	asrs	r3, r3, #2
 801e34c:	18e9      	adds	r1, r5, r3
 801e34e:	6031      	str	r1, [r6, #0]
 801e350:	0011      	movs	r1, r2
 801e352:	465a      	mov	r2, fp
 801e354:	17d2      	asrs	r2, r2, #31
 801e356:	0010      	movs	r0, r2
 801e358:	4652      	mov	r2, sl
 801e35a:	1aed      	subs	r5, r5, r3
 801e35c:	17eb      	asrs	r3, r5, #31
 801e35e:	17d2      	asrs	r2, r2, #31
 801e360:	9307      	str	r3, [sp, #28]
 801e362:	9204      	str	r2, [sp, #16]
 801e364:	0003      	movs	r3, r0
 801e366:	465a      	mov	r2, fp
 801e368:	9006      	str	r0, [sp, #24]
 801e36a:	0020      	movs	r0, r4
 801e36c:	9105      	str	r1, [sp, #20]
 801e36e:	f7e2 f927 	bl	80005c0 <__aeabi_lmul>
 801e372:	2280      	movs	r2, #128	@ 0x80
 801e374:	2300      	movs	r3, #0
 801e376:	0612      	lsls	r2, r2, #24
 801e378:	1880      	adds	r0, r0, r2
 801e37a:	4159      	adcs	r1, r3
 801e37c:	2300      	movs	r3, #0
 801e37e:	9101      	str	r1, [sp, #4]
 801e380:	9300      	str	r3, [sp, #0]
 801e382:	4652      	mov	r2, sl
 801e384:	9b04      	ldr	r3, [sp, #16]
 801e386:	0028      	movs	r0, r5
 801e388:	17e9      	asrs	r1, r5, #31
 801e38a:	f7e2 f919 	bl	80005c0 <__aeabi_lmul>
 801e38e:	9a00      	ldr	r2, [sp, #0]
 801e390:	9b01      	ldr	r3, [sp, #4]
 801e392:	1a12      	subs	r2, r2, r0
 801e394:	418b      	sbcs	r3, r1
 801e396:	2080      	movs	r0, #128	@ 0x80
 801e398:	2100      	movs	r1, #0
 801e39a:	0600      	lsls	r0, r0, #24
 801e39c:	1812      	adds	r2, r2, r0
 801e39e:	414b      	adcs	r3, r1
 801e3a0:	464a      	mov	r2, r9
 801e3a2:	005b      	lsls	r3, r3, #1
 801e3a4:	50bb      	str	r3, [r7, r2]
 801e3a6:	4658      	mov	r0, fp
 801e3a8:	002a      	movs	r2, r5
 801e3aa:	9b07      	ldr	r3, [sp, #28]
 801e3ac:	9906      	ldr	r1, [sp, #24]
 801e3ae:	f7e2 f907 	bl	80005c0 <__aeabi_lmul>
 801e3b2:	2280      	movs	r2, #128	@ 0x80
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	0612      	lsls	r2, r2, #24
 801e3b8:	1880      	adds	r0, r0, r2
 801e3ba:	4159      	adcs	r1, r3
 801e3bc:	2000      	movs	r0, #0
 801e3be:	9103      	str	r1, [sp, #12]
 801e3c0:	9002      	str	r0, [sp, #8]
 801e3c2:	4652      	mov	r2, sl
 801e3c4:	9b04      	ldr	r3, [sp, #16]
 801e3c6:	0020      	movs	r0, r4
 801e3c8:	9905      	ldr	r1, [sp, #20]
 801e3ca:	f7e2 f8f9 	bl	80005c0 <__aeabi_lmul>
 801e3ce:	9b02      	ldr	r3, [sp, #8]
 801e3d0:	9c03      	ldr	r4, [sp, #12]
 801e3d2:	18c0      	adds	r0, r0, r3
 801e3d4:	4161      	adcs	r1, r4
 801e3d6:	2380      	movs	r3, #128	@ 0x80
 801e3d8:	2400      	movs	r4, #0
 801e3da:	061b      	lsls	r3, r3, #24
 801e3dc:	18c0      	adds	r0, r0, r3
 801e3de:	4161      	adcs	r1, r4
 801e3e0:	464a      	mov	r2, r9
 801e3e2:	004b      	lsls	r3, r1, #1
 801e3e4:	50b3      	str	r3, [r6, r2]
 801e3e6:	2308      	movs	r3, #8
 801e3e8:	469c      	mov	ip, r3
 801e3ea:	9b08      	ldr	r3, [sp, #32]
 801e3ec:	44e0      	add	r8, ip
 801e3ee:	3708      	adds	r7, #8
 801e3f0:	3608      	adds	r6, #8
 801e3f2:	4598      	cmp	r8, r3
 801e3f4:	d196      	bne.n	801e324 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801e3f6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e3f8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e3fa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e3fc:	2302      	movs	r3, #2
 801e3fe:	003a      	movs	r2, r7
 801e400:	0029      	movs	r1, r5
 801e402:	0020      	movs	r0, r4
 801e404:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801e406:	f000 fb3b 	bl	801ea80 <arm_radix4_butterfly_inverse_q31>
 801e40a:	46a4      	mov	ip, r4
 801e40c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e40e:	2302      	movs	r3, #2
 801e410:	0088      	lsls	r0, r1, #2
 801e412:	4460      	add	r0, ip
 801e414:	003a      	movs	r2, r7
 801e416:	0029      	movs	r1, r5
 801e418:	f000 fb32 	bl	801ea80 <arm_radix4_butterfly_inverse_q31>
 801e41c:	46a4      	mov	ip, r4
 801e41e:	0128      	lsls	r0, r5, #4
 801e420:	4460      	add	r0, ip
 801e422:	6833      	ldr	r3, [r6, #0]
 801e424:	005b      	lsls	r3, r3, #1
 801e426:	6033      	str	r3, [r6, #0]
 801e428:	6873      	ldr	r3, [r6, #4]
 801e42a:	005b      	lsls	r3, r3, #1
 801e42c:	6073      	str	r3, [r6, #4]
 801e42e:	68b3      	ldr	r3, [r6, #8]
 801e430:	005b      	lsls	r3, r3, #1
 801e432:	60b3      	str	r3, [r6, #8]
 801e434:	68f3      	ldr	r3, [r6, #12]
 801e436:	005b      	lsls	r3, r3, #1
 801e438:	60f3      	str	r3, [r6, #12]
 801e43a:	3610      	adds	r6, #16
 801e43c:	42b0      	cmp	r0, r6
 801e43e:	d1f0      	bne.n	801e422 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801e440:	b00f      	add	sp, #60	@ 0x3c
 801e442:	bc3c      	pop	{r2, r3, r4, r5}
 801e444:	4690      	mov	r8, r2
 801e446:	4699      	mov	r9, r3
 801e448:	46a2      	mov	sl, r4
 801e44a:	46ab      	mov	fp, r5
 801e44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e44e:	2302      	movs	r3, #2
 801e450:	2100      	movs	r1, #0
 801e452:	0015      	movs	r5, r2
 801e454:	f000 fb14 	bl	801ea80 <arm_radix4_butterfly_inverse_q31>
 801e458:	46bc      	mov	ip, r7
 801e45a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e45c:	002a      	movs	r2, r5
 801e45e:	0098      	lsls	r0, r3, #2
 801e460:	4460      	add	r0, ip
 801e462:	2302      	movs	r3, #2
 801e464:	2100      	movs	r1, #0
 801e466:	f000 fb0b 	bl	801ea80 <arm_radix4_butterfly_inverse_q31>
 801e46a:	e7e9      	b.n	801e440 <arm_cfft_radix4by2_inverse_q31+0x158>

0801e46c <arm_cfft_q31>:
 801e46c:	b570      	push	{r4, r5, r6, lr}
 801e46e:	001e      	movs	r6, r3
 801e470:	2380      	movs	r3, #128	@ 0x80
 801e472:	000d      	movs	r5, r1
 801e474:	0004      	movs	r4, r0
 801e476:	8801      	ldrh	r1, [r0, #0]
 801e478:	005b      	lsls	r3, r3, #1
 801e47a:	2a01      	cmp	r2, #1
 801e47c:	d028      	beq.n	801e4d0 <arm_cfft_q31+0x64>
 801e47e:	4299      	cmp	r1, r3
 801e480:	d020      	beq.n	801e4c4 <arm_cfft_q31+0x58>
 801e482:	d812      	bhi.n	801e4aa <arm_cfft_q31+0x3e>
 801e484:	2920      	cmp	r1, #32
 801e486:	d004      	beq.n	801e492 <arm_cfft_q31+0x26>
 801e488:	d949      	bls.n	801e51e <arm_cfft_q31+0xb2>
 801e48a:	2940      	cmp	r1, #64	@ 0x40
 801e48c:	d01a      	beq.n	801e4c4 <arm_cfft_q31+0x58>
 801e48e:	2980      	cmp	r1, #128	@ 0x80
 801e490:	d103      	bne.n	801e49a <arm_cfft_q31+0x2e>
 801e492:	6862      	ldr	r2, [r4, #4]
 801e494:	0028      	movs	r0, r5
 801e496:	f7ff fe65 	bl	801e164 <arm_cfft_radix4by2_q31>
 801e49a:	2e00      	cmp	r6, #0
 801e49c:	d004      	beq.n	801e4a8 <arm_cfft_q31+0x3c>
 801e49e:	68a2      	ldr	r2, [r4, #8]
 801e4a0:	89a1      	ldrh	r1, [r4, #12]
 801e4a2:	0028      	movs	r0, r5
 801e4a4:	f7e1 fe30 	bl	8000108 <arm_bitreversal_32>
 801e4a8:	bd70      	pop	{r4, r5, r6, pc}
 801e4aa:	2380      	movs	r3, #128	@ 0x80
 801e4ac:	00db      	lsls	r3, r3, #3
 801e4ae:	4299      	cmp	r1, r3
 801e4b0:	d008      	beq.n	801e4c4 <arm_cfft_q31+0x58>
 801e4b2:	d92f      	bls.n	801e514 <arm_cfft_q31+0xa8>
 801e4b4:	2380      	movs	r3, #128	@ 0x80
 801e4b6:	011b      	lsls	r3, r3, #4
 801e4b8:	4299      	cmp	r1, r3
 801e4ba:	d0ea      	beq.n	801e492 <arm_cfft_q31+0x26>
 801e4bc:	2380      	movs	r3, #128	@ 0x80
 801e4be:	015b      	lsls	r3, r3, #5
 801e4c0:	4299      	cmp	r1, r3
 801e4c2:	d1ea      	bne.n	801e49a <arm_cfft_q31+0x2e>
 801e4c4:	2301      	movs	r3, #1
 801e4c6:	6862      	ldr	r2, [r4, #4]
 801e4c8:	0028      	movs	r0, r5
 801e4ca:	f000 f833 	bl	801e534 <arm_radix4_butterfly_q31>
 801e4ce:	e7e4      	b.n	801e49a <arm_cfft_q31+0x2e>
 801e4d0:	4299      	cmp	r1, r3
 801e4d2:	d019      	beq.n	801e508 <arm_cfft_q31+0x9c>
 801e4d4:	d80b      	bhi.n	801e4ee <arm_cfft_q31+0x82>
 801e4d6:	2920      	cmp	r1, #32
 801e4d8:	d004      	beq.n	801e4e4 <arm_cfft_q31+0x78>
 801e4da:	d928      	bls.n	801e52e <arm_cfft_q31+0xc2>
 801e4dc:	2940      	cmp	r1, #64	@ 0x40
 801e4de:	d013      	beq.n	801e508 <arm_cfft_q31+0x9c>
 801e4e0:	2980      	cmp	r1, #128	@ 0x80
 801e4e2:	d1da      	bne.n	801e49a <arm_cfft_q31+0x2e>
 801e4e4:	6862      	ldr	r2, [r4, #4]
 801e4e6:	0028      	movs	r0, r5
 801e4e8:	f7ff fefe 	bl	801e2e8 <arm_cfft_radix4by2_inverse_q31>
 801e4ec:	e7d5      	b.n	801e49a <arm_cfft_q31+0x2e>
 801e4ee:	2380      	movs	r3, #128	@ 0x80
 801e4f0:	00db      	lsls	r3, r3, #3
 801e4f2:	4299      	cmp	r1, r3
 801e4f4:	d008      	beq.n	801e508 <arm_cfft_q31+0x9c>
 801e4f6:	d915      	bls.n	801e524 <arm_cfft_q31+0xb8>
 801e4f8:	2380      	movs	r3, #128	@ 0x80
 801e4fa:	011b      	lsls	r3, r3, #4
 801e4fc:	4299      	cmp	r1, r3
 801e4fe:	d0f1      	beq.n	801e4e4 <arm_cfft_q31+0x78>
 801e500:	2380      	movs	r3, #128	@ 0x80
 801e502:	015b      	lsls	r3, r3, #5
 801e504:	4299      	cmp	r1, r3
 801e506:	d1c8      	bne.n	801e49a <arm_cfft_q31+0x2e>
 801e508:	2301      	movs	r3, #1
 801e50a:	6862      	ldr	r2, [r4, #4]
 801e50c:	0028      	movs	r0, r5
 801e50e:	f000 fab7 	bl	801ea80 <arm_radix4_butterfly_inverse_q31>
 801e512:	e7c2      	b.n	801e49a <arm_cfft_q31+0x2e>
 801e514:	2380      	movs	r3, #128	@ 0x80
 801e516:	009b      	lsls	r3, r3, #2
 801e518:	4299      	cmp	r1, r3
 801e51a:	d0ba      	beq.n	801e492 <arm_cfft_q31+0x26>
 801e51c:	e7bd      	b.n	801e49a <arm_cfft_q31+0x2e>
 801e51e:	2910      	cmp	r1, #16
 801e520:	d1bb      	bne.n	801e49a <arm_cfft_q31+0x2e>
 801e522:	e7cf      	b.n	801e4c4 <arm_cfft_q31+0x58>
 801e524:	2380      	movs	r3, #128	@ 0x80
 801e526:	009b      	lsls	r3, r3, #2
 801e528:	4299      	cmp	r1, r3
 801e52a:	d0db      	beq.n	801e4e4 <arm_cfft_q31+0x78>
 801e52c:	e7b5      	b.n	801e49a <arm_cfft_q31+0x2e>
 801e52e:	2910      	cmp	r1, #16
 801e530:	d1b3      	bne.n	801e49a <arm_cfft_q31+0x2e>
 801e532:	e7e9      	b.n	801e508 <arm_cfft_q31+0x9c>

0801e534 <arm_radix4_butterfly_q31>:
 801e534:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e536:	464d      	mov	r5, r9
 801e538:	4644      	mov	r4, r8
 801e53a:	465f      	mov	r7, fp
 801e53c:	4656      	mov	r6, sl
 801e53e:	469c      	mov	ip, r3
 801e540:	b4f0      	push	{r4, r5, r6, r7}
 801e542:	b0a7      	sub	sp, #156	@ 0x9c
 801e544:	9114      	str	r1, [sp, #80]	@ 0x50
 801e546:	0889      	lsrs	r1, r1, #2
 801e548:	9310      	str	r3, [sp, #64]	@ 0x40
 801e54a:	00cb      	lsls	r3, r1, #3
 801e54c:	0015      	movs	r5, r2
 801e54e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e550:	18c2      	adds	r2, r0, r3
 801e552:	000c      	movs	r4, r1
 801e554:	469a      	mov	sl, r3
 801e556:	9124      	str	r1, [sp, #144]	@ 0x90
 801e558:	18d1      	adds	r1, r2, r3
 801e55a:	4663      	mov	r3, ip
 801e55c:	468b      	mov	fp, r1
 801e55e:	0119      	lsls	r1, r3, #4
 801e560:	910d      	str	r1, [sp, #52]	@ 0x34
 801e562:	00d9      	lsls	r1, r3, #3
 801e564:	005b      	lsls	r3, r3, #1
 801e566:	4463      	add	r3, ip
 801e568:	910e      	str	r1, [sp, #56]	@ 0x38
 801e56a:	00d9      	lsls	r1, r3, #3
 801e56c:	465b      	mov	r3, fp
 801e56e:	44da      	add	sl, fp
 801e570:	4690      	mov	r8, r2
 801e572:	4683      	mov	fp, r0
 801e574:	4699      	mov	r9, r3
 801e576:	9022      	str	r0, [sp, #136]	@ 0x88
 801e578:	9025      	str	r0, [sp, #148]	@ 0x94
 801e57a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e57c:	9502      	str	r5, [sp, #8]
 801e57e:	9500      	str	r5, [sp, #0]
 801e580:	9501      	str	r5, [sp, #4]
 801e582:	9407      	str	r4, [sp, #28]
 801e584:	465b      	mov	r3, fp
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	4642      	mov	r2, r8
 801e58a:	111c      	asrs	r4, r3, #4
 801e58c:	464b      	mov	r3, r9
 801e58e:	4658      	mov	r0, fp
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	6812      	ldr	r2, [r2, #0]
 801e594:	111b      	asrs	r3, r3, #4
 801e596:	18e7      	adds	r7, r4, r3
 801e598:	1ae3      	subs	r3, r4, r3
 801e59a:	1114      	asrs	r4, r2, #4
 801e59c:	4652      	mov	r2, sl
 801e59e:	6840      	ldr	r0, [r0, #4]
 801e5a0:	6812      	ldr	r2, [r2, #0]
 801e5a2:	1105      	asrs	r5, r0, #4
 801e5a4:	4648      	mov	r0, r9
 801e5a6:	9303      	str	r3, [sp, #12]
 801e5a8:	1113      	asrs	r3, r2, #4
 801e5aa:	18e2      	adds	r2, r4, r3
 801e5ac:	465c      	mov	r4, fp
 801e5ae:	6840      	ldr	r0, [r0, #4]
 801e5b0:	1103      	asrs	r3, r0, #4
 801e5b2:	18ee      	adds	r6, r5, r3
 801e5b4:	1ae8      	subs	r0, r5, r3
 801e5b6:	18bb      	adds	r3, r7, r2
 801e5b8:	6023      	str	r3, [r4, #0]
 801e5ba:	4644      	mov	r4, r8
 801e5bc:	6864      	ldr	r4, [r4, #4]
 801e5be:	9004      	str	r0, [sp, #16]
 801e5c0:	1125      	asrs	r5, r4, #4
 801e5c2:	4654      	mov	r4, sl
 801e5c4:	6864      	ldr	r4, [r4, #4]
 801e5c6:	1123      	asrs	r3, r4, #4
 801e5c8:	465c      	mov	r4, fp
 801e5ca:	18eb      	adds	r3, r5, r3
 801e5cc:	18f1      	adds	r1, r6, r3
 801e5ce:	6061      	str	r1, [r4, #4]
 801e5d0:	4655      	mov	r5, sl
 801e5d2:	4644      	mov	r4, r8
 801e5d4:	686d      	ldr	r5, [r5, #4]
 801e5d6:	6864      	ldr	r4, [r4, #4]
 801e5d8:	1129      	asrs	r1, r5, #4
 801e5da:	1124      	asrs	r4, r4, #4
 801e5dc:	1a64      	subs	r4, r4, r1
 801e5de:	4641      	mov	r1, r8
 801e5e0:	6809      	ldr	r1, [r1, #0]
 801e5e2:	9405      	str	r4, [sp, #20]
 801e5e4:	1108      	asrs	r0, r1, #4
 801e5e6:	4651      	mov	r1, sl
 801e5e8:	6809      	ldr	r1, [r1, #0]
 801e5ea:	1abc      	subs	r4, r7, r2
 801e5ec:	1109      	asrs	r1, r1, #4
 801e5ee:	1a41      	subs	r1, r0, r1
 801e5f0:	17e2      	asrs	r2, r4, #31
 801e5f2:	9106      	str	r1, [sp, #24]
 801e5f4:	0011      	movs	r1, r2
 801e5f6:	9a01      	ldr	r2, [sp, #4]
 801e5f8:	9108      	str	r1, [sp, #32]
 801e5fa:	6817      	ldr	r7, [r2, #0]
 801e5fc:	17fd      	asrs	r5, r7, #31
 801e5fe:	0028      	movs	r0, r5
 801e600:	1af5      	subs	r5, r6, r3
 801e602:	17ee      	asrs	r6, r5, #31
 801e604:	960a      	str	r6, [sp, #40]	@ 0x28
 801e606:	6856      	ldr	r6, [r2, #4]
 801e608:	9009      	str	r0, [sp, #36]	@ 0x24
 801e60a:	17f3      	asrs	r3, r6, #31
 801e60c:	003a      	movs	r2, r7
 801e60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e610:	0003      	movs	r3, r0
 801e612:	0020      	movs	r0, r4
 801e614:	f7e1 ffd4 	bl	80005c0 <__aeabi_lmul>
 801e618:	0032      	movs	r2, r6
 801e61a:	17f3      	asrs	r3, r6, #31
 801e61c:	910c      	str	r1, [sp, #48]	@ 0x30
 801e61e:	0028      	movs	r0, r5
 801e620:	17e9      	asrs	r1, r5, #31
 801e622:	f7e1 ffcd 	bl	80005c0 <__aeabi_lmul>
 801e626:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e628:	002a      	movs	r2, r5
 801e62a:	4684      	mov	ip, r0
 801e62c:	4640      	mov	r0, r8
 801e62e:	4461      	add	r1, ip
 801e630:	0049      	lsls	r1, r1, #1
 801e632:	6001      	str	r1, [r0, #0]
 801e634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e638:	0038      	movs	r0, r7
 801e63a:	f7e1 ffc1 	bl	80005c0 <__aeabi_lmul>
 801e63e:	0032      	movs	r2, r6
 801e640:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e642:	000d      	movs	r5, r1
 801e644:	0020      	movs	r0, r4
 801e646:	9908      	ldr	r1, [sp, #32]
 801e648:	f7e1 ffba 	bl	80005c0 <__aeabi_lmul>
 801e64c:	4646      	mov	r6, r8
 801e64e:	1a6d      	subs	r5, r5, r1
 801e650:	006d      	lsls	r5, r5, #1
 801e652:	6075      	str	r5, [r6, #4]
 801e654:	9903      	ldr	r1, [sp, #12]
 801e656:	9d05      	ldr	r5, [sp, #20]
 801e658:	000c      	movs	r4, r1
 801e65a:	46ac      	mov	ip, r5
 801e65c:	4464      	add	r4, ip
 801e65e:	17e6      	asrs	r6, r4, #31
 801e660:	0031      	movs	r1, r6
 801e662:	9b00      	ldr	r3, [sp, #0]
 801e664:	9804      	ldr	r0, [sp, #16]
 801e666:	681e      	ldr	r6, [r3, #0]
 801e668:	17f7      	asrs	r7, r6, #31
 801e66a:	9709      	str	r7, [sp, #36]	@ 0x24
 801e66c:	9f06      	ldr	r7, [sp, #24]
 801e66e:	0032      	movs	r2, r6
 801e670:	1bc7      	subs	r7, r0, r7
 801e672:	17fd      	asrs	r5, r7, #31
 801e674:	950a      	str	r5, [sp, #40]	@ 0x28
 801e676:	685d      	ldr	r5, [r3, #4]
 801e678:	17f3      	asrs	r3, r6, #31
 801e67a:	17e8      	asrs	r0, r5, #31
 801e67c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e67e:	0020      	movs	r0, r4
 801e680:	9108      	str	r1, [sp, #32]
 801e682:	f7e1 ff9d 	bl	80005c0 <__aeabi_lmul>
 801e686:	002a      	movs	r2, r5
 801e688:	17eb      	asrs	r3, r5, #31
 801e68a:	910c      	str	r1, [sp, #48]	@ 0x30
 801e68c:	0038      	movs	r0, r7
 801e68e:	17f9      	asrs	r1, r7, #31
 801e690:	f7e1 ff96 	bl	80005c0 <__aeabi_lmul>
 801e694:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e696:	003a      	movs	r2, r7
 801e698:	4684      	mov	ip, r0
 801e69a:	4648      	mov	r0, r9
 801e69c:	4461      	add	r1, ip
 801e69e:	0049      	lsls	r1, r1, #1
 801e6a0:	6001      	str	r1, [r0, #0]
 801e6a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e6a4:	0030      	movs	r0, r6
 801e6a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e6a8:	f7e1 ff8a 	bl	80005c0 <__aeabi_lmul>
 801e6ac:	002a      	movs	r2, r5
 801e6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e6b0:	000e      	movs	r6, r1
 801e6b2:	0020      	movs	r0, r4
 801e6b4:	9908      	ldr	r1, [sp, #32]
 801e6b6:	f7e1 ff83 	bl	80005c0 <__aeabi_lmul>
 801e6ba:	464c      	mov	r4, r9
 801e6bc:	9d05      	ldr	r5, [sp, #20]
 801e6be:	1a76      	subs	r6, r6, r1
 801e6c0:	9903      	ldr	r1, [sp, #12]
 801e6c2:	0076      	lsls	r6, r6, #1
 801e6c4:	6066      	str	r6, [r4, #4]
 801e6c6:	1b4c      	subs	r4, r1, r5
 801e6c8:	9e06      	ldr	r6, [sp, #24]
 801e6ca:	17e1      	asrs	r1, r4, #31
 801e6cc:	9103      	str	r1, [sp, #12]
 801e6ce:	9902      	ldr	r1, [sp, #8]
 801e6d0:	46b4      	mov	ip, r6
 801e6d2:	680f      	ldr	r7, [r1, #0]
 801e6d4:	9804      	ldr	r0, [sp, #16]
 801e6d6:	17fd      	asrs	r5, r7, #31
 801e6d8:	002b      	movs	r3, r5
 801e6da:	684e      	ldr	r6, [r1, #4]
 801e6dc:	4460      	add	r0, ip
 801e6de:	0005      	movs	r5, r0
 801e6e0:	17c0      	asrs	r0, r0, #31
 801e6e2:	9005      	str	r0, [sp, #20]
 801e6e4:	17f0      	asrs	r0, r6, #31
 801e6e6:	9006      	str	r0, [sp, #24]
 801e6e8:	003a      	movs	r2, r7
 801e6ea:	0020      	movs	r0, r4
 801e6ec:	17e1      	asrs	r1, r4, #31
 801e6ee:	9304      	str	r3, [sp, #16]
 801e6f0:	f7e1 ff66 	bl	80005c0 <__aeabi_lmul>
 801e6f4:	0032      	movs	r2, r6
 801e6f6:	9108      	str	r1, [sp, #32]
 801e6f8:	17f3      	asrs	r3, r6, #31
 801e6fa:	0028      	movs	r0, r5
 801e6fc:	17e9      	asrs	r1, r5, #31
 801e6fe:	f7e1 ff5f 	bl	80005c0 <__aeabi_lmul>
 801e702:	9808      	ldr	r0, [sp, #32]
 801e704:	002a      	movs	r2, r5
 801e706:	4684      	mov	ip, r0
 801e708:	4650      	mov	r0, sl
 801e70a:	4461      	add	r1, ip
 801e70c:	0049      	lsls	r1, r1, #1
 801e70e:	6001      	str	r1, [r0, #0]
 801e710:	9b05      	ldr	r3, [sp, #20]
 801e712:	9904      	ldr	r1, [sp, #16]
 801e714:	0038      	movs	r0, r7
 801e716:	f7e1 ff53 	bl	80005c0 <__aeabi_lmul>
 801e71a:	0020      	movs	r0, r4
 801e71c:	2408      	movs	r4, #8
 801e71e:	000d      	movs	r5, r1
 801e720:	0032      	movs	r2, r6
 801e722:	9b06      	ldr	r3, [sp, #24]
 801e724:	9903      	ldr	r1, [sp, #12]
 801e726:	f7e1 ff4b 	bl	80005c0 <__aeabi_lmul>
 801e72a:	46a4      	mov	ip, r4
 801e72c:	4650      	mov	r0, sl
 801e72e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e730:	44e3      	add	fp, ip
 801e732:	44e0      	add	r8, ip
 801e734:	44e1      	add	r9, ip
 801e736:	44e2      	add	sl, ip
 801e738:	46a4      	mov	ip, r4
 801e73a:	1a6d      	subs	r5, r5, r1
 801e73c:	006d      	lsls	r5, r5, #1
 801e73e:	9a01      	ldr	r2, [sp, #4]
 801e740:	6045      	str	r5, [r0, #4]
 801e742:	9807      	ldr	r0, [sp, #28]
 801e744:	4462      	add	r2, ip
 801e746:	3801      	subs	r0, #1
 801e748:	9201      	str	r2, [sp, #4]
 801e74a:	9007      	str	r0, [sp, #28]
 801e74c:	9b00      	ldr	r3, [sp, #0]
 801e74e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e750:	9902      	ldr	r1, [sp, #8]
 801e752:	4694      	mov	ip, r2
 801e754:	4463      	add	r3, ip
 801e756:	9300      	str	r3, [sp, #0]
 801e758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e75a:	469c      	mov	ip, r3
 801e75c:	4461      	add	r1, ip
 801e75e:	9102      	str	r1, [sp, #8]
 801e760:	2800      	cmp	r0, #0
 801e762:	d000      	beq.n	801e766 <arm_radix4_butterfly_q31+0x232>
 801e764:	e70e      	b.n	801e584 <arm_radix4_butterfly_q31+0x50>
 801e766:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e768:	009b      	lsls	r3, r3, #2
 801e76a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e76c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e76e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e770:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e772:	2b04      	cmp	r3, #4
 801e774:	d800      	bhi.n	801e778 <arm_radix4_butterfly_q31+0x244>
 801e776:	e180      	b.n	801ea7a <arm_radix4_butterfly_q31+0x546>
 801e778:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e77a:	0893      	lsrs	r3, r2, #2
 801e77c:	1e59      	subs	r1, r3, #1
 801e77e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e780:	00db      	lsls	r3, r3, #3
 801e782:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e784:	00d3      	lsls	r3, r2, #3
 801e786:	9300      	str	r3, [sp, #0]
 801e788:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e78a:	911a      	str	r1, [sp, #104]	@ 0x68
 801e78c:	00da      	lsls	r2, r3, #3
 801e78e:	921e      	str	r2, [sp, #120]	@ 0x78
 801e790:	011a      	lsls	r2, r3, #4
 801e792:	921d      	str	r2, [sp, #116]	@ 0x74
 801e794:	001a      	movs	r2, r3
 801e796:	4694      	mov	ip, r2
 801e798:	005b      	lsls	r3, r3, #1
 801e79a:	4463      	add	r3, ip
 801e79c:	00db      	lsls	r3, r3, #3
 801e79e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e7a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e7a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e7a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e7a6:	9318      	str	r3, [sp, #96]	@ 0x60
 801e7a8:	9319      	str	r3, [sp, #100]	@ 0x64
 801e7aa:	9316      	str	r3, [sp, #88]	@ 0x58
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	9315      	str	r3, [sp, #84]	@ 0x54
 801e7b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e7b2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e7b4:	681a      	ldr	r2, [r3, #0]
 801e7b6:	685b      	ldr	r3, [r3, #4]
 801e7b8:	9205      	str	r2, [sp, #20]
 801e7ba:	9306      	str	r3, [sp, #24]
 801e7bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e7be:	468c      	mov	ip, r1
 801e7c0:	681a      	ldr	r2, [r3, #0]
 801e7c2:	685b      	ldr	r3, [r3, #4]
 801e7c4:	9207      	str	r2, [sp, #28]
 801e7c6:	9308      	str	r3, [sp, #32]
 801e7c8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e7ca:	681a      	ldr	r2, [r3, #0]
 801e7cc:	685b      	ldr	r3, [r3, #4]
 801e7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 801e7d0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e7d2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7d4:	0013      	movs	r3, r2
 801e7d6:	4463      	add	r3, ip
 801e7d8:	4698      	mov	r8, r3
 801e7da:	0013      	movs	r3, r2
 801e7dc:	4442      	add	r2, r8
 801e7de:	4691      	mov	r9, r2
 801e7e0:	001a      	movs	r2, r3
 801e7e2:	444a      	add	r2, r9
 801e7e4:	4692      	mov	sl, r2
 801e7e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e7e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e7ea:	4293      	cmp	r3, r2
 801e7ec:	d800      	bhi.n	801e7f0 <arm_radix4_butterfly_q31+0x2bc>
 801e7ee:	e0dd      	b.n	801e9ac <arm_radix4_butterfly_q31+0x478>
 801e7f0:	4694      	mov	ip, r2
 801e7f2:	468b      	mov	fp, r1
 801e7f4:	4644      	mov	r4, r8
 801e7f6:	4655      	mov	r5, sl
 801e7f8:	9b07      	ldr	r3, [sp, #28]
 801e7fa:	17db      	asrs	r3, r3, #31
 801e7fc:	930c      	str	r3, [sp, #48]	@ 0x30
 801e7fe:	9b08      	ldr	r3, [sp, #32]
 801e800:	17db      	asrs	r3, r3, #31
 801e802:	930d      	str	r3, [sp, #52]	@ 0x34
 801e804:	9b05      	ldr	r3, [sp, #20]
 801e806:	17db      	asrs	r3, r3, #31
 801e808:	930e      	str	r3, [sp, #56]	@ 0x38
 801e80a:	9b06      	ldr	r3, [sp, #24]
 801e80c:	17db      	asrs	r3, r3, #31
 801e80e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e812:	17db      	asrs	r3, r3, #31
 801e814:	9310      	str	r3, [sp, #64]	@ 0x40
 801e816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e818:	17db      	asrs	r3, r3, #31
 801e81a:	9311      	str	r3, [sp, #68]	@ 0x44
 801e81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e81e:	4463      	add	r3, ip
 801e820:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e822:	465b      	mov	r3, fp
 801e824:	4659      	mov	r1, fp
 801e826:	681a      	ldr	r2, [r3, #0]
 801e828:	464b      	mov	r3, r9
 801e82a:	684f      	ldr	r7, [r1, #4]
 801e82c:	4649      	mov	r1, r9
 801e82e:	681b      	ldr	r3, [r3, #0]
 801e830:	18d6      	adds	r6, r2, r3
 801e832:	1ad3      	subs	r3, r2, r3
 801e834:	9301      	str	r3, [sp, #4]
 801e836:	684b      	ldr	r3, [r1, #4]
 801e838:	18f8      	adds	r0, r7, r3
 801e83a:	1af9      	subs	r1, r7, r3
 801e83c:	6827      	ldr	r7, [r4, #0]
 801e83e:	9102      	str	r1, [sp, #8]
 801e840:	003a      	movs	r2, r7
 801e842:	682f      	ldr	r7, [r5, #0]
 801e844:	46bc      	mov	ip, r7
 801e846:	465f      	mov	r7, fp
 801e848:	4462      	add	r2, ip
 801e84a:	18b3      	adds	r3, r6, r2
 801e84c:	109b      	asrs	r3, r3, #2
 801e84e:	603b      	str	r3, [r7, #0]
 801e850:	6867      	ldr	r7, [r4, #4]
 801e852:	1ab6      	subs	r6, r6, r2
 801e854:	46b8      	mov	r8, r7
 801e856:	686f      	ldr	r7, [r5, #4]
 801e858:	17f2      	asrs	r2, r6, #31
 801e85a:	46bc      	mov	ip, r7
 801e85c:	44e0      	add	r8, ip
 801e85e:	4643      	mov	r3, r8
 801e860:	465f      	mov	r7, fp
 801e862:	18c1      	adds	r1, r0, r3
 801e864:	1089      	asrs	r1, r1, #2
 801e866:	6079      	str	r1, [r7, #4]
 801e868:	9900      	ldr	r1, [sp, #0]
 801e86a:	4690      	mov	r8, r2
 801e86c:	468c      	mov	ip, r1
 801e86e:	6867      	ldr	r7, [r4, #4]
 801e870:	6869      	ldr	r1, [r5, #4]
 801e872:	44e3      	add	fp, ip
 801e874:	1a7f      	subs	r7, r7, r1
 801e876:	9703      	str	r7, [sp, #12]
 801e878:	6829      	ldr	r1, [r5, #0]
 801e87a:	6827      	ldr	r7, [r4, #0]
 801e87c:	1a7f      	subs	r7, r7, r1
 801e87e:	9704      	str	r7, [sp, #16]
 801e880:	1ac7      	subs	r7, r0, r3
 801e882:	17fa      	asrs	r2, r7, #31
 801e884:	4692      	mov	sl, r2
 801e886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e888:	9a07      	ldr	r2, [sp, #28]
 801e88a:	0030      	movs	r0, r6
 801e88c:	4641      	mov	r1, r8
 801e88e:	f7e1 fe97 	bl	80005c0 <__aeabi_lmul>
 801e892:	9a08      	ldr	r2, [sp, #32]
 801e894:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e896:	9112      	str	r1, [sp, #72]	@ 0x48
 801e898:	0038      	movs	r0, r7
 801e89a:	4651      	mov	r1, sl
 801e89c:	f7e1 fe90 	bl	80005c0 <__aeabi_lmul>
 801e8a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e8a2:	9a07      	ldr	r2, [sp, #28]
 801e8a4:	4684      	mov	ip, r0
 801e8a6:	4461      	add	r1, ip
 801e8a8:	1049      	asrs	r1, r1, #1
 801e8aa:	6021      	str	r1, [r4, #0]
 801e8ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8ae:	0038      	movs	r0, r7
 801e8b0:	4651      	mov	r1, sl
 801e8b2:	f7e1 fe85 	bl	80005c0 <__aeabi_lmul>
 801e8b6:	9a08      	ldr	r2, [sp, #32]
 801e8b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8ba:	000f      	movs	r7, r1
 801e8bc:	0030      	movs	r0, r6
 801e8be:	4641      	mov	r1, r8
 801e8c0:	f7e1 fe7e 	bl	80005c0 <__aeabi_lmul>
 801e8c4:	9b00      	ldr	r3, [sp, #0]
 801e8c6:	9a01      	ldr	r2, [sp, #4]
 801e8c8:	469c      	mov	ip, r3
 801e8ca:	9803      	ldr	r0, [sp, #12]
 801e8cc:	1a7f      	subs	r7, r7, r1
 801e8ce:	107f      	asrs	r7, r7, #1
 801e8d0:	6067      	str	r7, [r4, #4]
 801e8d2:	0016      	movs	r6, r2
 801e8d4:	4464      	add	r4, ip
 801e8d6:	4684      	mov	ip, r0
 801e8d8:	4466      	add	r6, ip
 801e8da:	17f2      	asrs	r2, r6, #31
 801e8dc:	4690      	mov	r8, r2
 801e8de:	9902      	ldr	r1, [sp, #8]
 801e8e0:	9f04      	ldr	r7, [sp, #16]
 801e8e2:	0030      	movs	r0, r6
 801e8e4:	1bcf      	subs	r7, r1, r7
 801e8e6:	17fa      	asrs	r2, r7, #31
 801e8e8:	4692      	mov	sl, r2
 801e8ea:	4641      	mov	r1, r8
 801e8ec:	9a05      	ldr	r2, [sp, #20]
 801e8ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e8f0:	f7e1 fe66 	bl	80005c0 <__aeabi_lmul>
 801e8f4:	9a06      	ldr	r2, [sp, #24]
 801e8f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e8f8:	9112      	str	r1, [sp, #72]	@ 0x48
 801e8fa:	0038      	movs	r0, r7
 801e8fc:	4651      	mov	r1, sl
 801e8fe:	f7e1 fe5f 	bl	80005c0 <__aeabi_lmul>
 801e902:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e904:	9a05      	ldr	r2, [sp, #20]
 801e906:	4684      	mov	ip, r0
 801e908:	4648      	mov	r0, r9
 801e90a:	4461      	add	r1, ip
 801e90c:	1049      	asrs	r1, r1, #1
 801e90e:	6001      	str	r1, [r0, #0]
 801e910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e912:	0038      	movs	r0, r7
 801e914:	4651      	mov	r1, sl
 801e916:	f7e1 fe53 	bl	80005c0 <__aeabi_lmul>
 801e91a:	9a06      	ldr	r2, [sp, #24]
 801e91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e91e:	000f      	movs	r7, r1
 801e920:	0030      	movs	r0, r6
 801e922:	4641      	mov	r1, r8
 801e924:	f7e1 fe4c 	bl	80005c0 <__aeabi_lmul>
 801e928:	464e      	mov	r6, r9
 801e92a:	9a00      	ldr	r2, [sp, #0]
 801e92c:	9b01      	ldr	r3, [sp, #4]
 801e92e:	4694      	mov	ip, r2
 801e930:	9803      	ldr	r0, [sp, #12]
 801e932:	1a7f      	subs	r7, r7, r1
 801e934:	107f      	asrs	r7, r7, #1
 801e936:	6077      	str	r7, [r6, #4]
 801e938:	1a1e      	subs	r6, r3, r0
 801e93a:	9b04      	ldr	r3, [sp, #16]
 801e93c:	44e1      	add	r9, ip
 801e93e:	469c      	mov	ip, r3
 801e940:	17f0      	asrs	r0, r6, #31
 801e942:	4680      	mov	r8, r0
 801e944:	9902      	ldr	r1, [sp, #8]
 801e946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e948:	4461      	add	r1, ip
 801e94a:	17cb      	asrs	r3, r1, #31
 801e94c:	000f      	movs	r7, r1
 801e94e:	469a      	mov	sl, r3
 801e950:	0030      	movs	r0, r6
 801e952:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e954:	4641      	mov	r1, r8
 801e956:	f7e1 fe33 	bl	80005c0 <__aeabi_lmul>
 801e95a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e95c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e95e:	9101      	str	r1, [sp, #4]
 801e960:	0038      	movs	r0, r7
 801e962:	4651      	mov	r1, sl
 801e964:	f7e1 fe2c 	bl	80005c0 <__aeabi_lmul>
 801e968:	9801      	ldr	r0, [sp, #4]
 801e96a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e96c:	4684      	mov	ip, r0
 801e96e:	4461      	add	r1, ip
 801e970:	1049      	asrs	r1, r1, #1
 801e972:	6029      	str	r1, [r5, #0]
 801e974:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e976:	0038      	movs	r0, r7
 801e978:	4651      	mov	r1, sl
 801e97a:	f7e1 fe21 	bl	80005c0 <__aeabi_lmul>
 801e97e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e980:	000f      	movs	r7, r1
 801e982:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e984:	0030      	movs	r0, r6
 801e986:	4641      	mov	r1, r8
 801e988:	f7e1 fe1a 	bl	80005c0 <__aeabi_lmul>
 801e98c:	1a7f      	subs	r7, r7, r1
 801e98e:	107f      	asrs	r7, r7, #1
 801e990:	606f      	str	r7, [r5, #4]
 801e992:	9a00      	ldr	r2, [sp, #0]
 801e994:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e996:	4694      	mov	ip, r2
 801e998:	4465      	add	r5, ip
 801e99a:	468c      	mov	ip, r1
 801e99c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e99e:	0013      	movs	r3, r2
 801e9a0:	4462      	add	r2, ip
 801e9a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e9a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e9a6:	429a      	cmp	r2, r3
 801e9a8:	d900      	bls.n	801e9ac <arm_radix4_butterfly_q31+0x478>
 801e9aa:	e73a      	b.n	801e822 <arm_radix4_butterfly_q31+0x2ee>
 801e9ac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e9ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e9b0:	468c      	mov	ip, r1
 801e9b2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e9b4:	4462      	add	r2, ip
 801e9b6:	468c      	mov	ip, r1
 801e9b8:	9216      	str	r2, [sp, #88]	@ 0x58
 801e9ba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e9bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e9be:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e9c0:	4462      	add	r2, ip
 801e9c2:	468c      	mov	ip, r1
 801e9c4:	9219      	str	r2, [sp, #100]	@ 0x64
 801e9c6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e9c8:	3301      	adds	r3, #1
 801e9ca:	4462      	add	r2, ip
 801e9cc:	9218      	str	r2, [sp, #96]	@ 0x60
 801e9ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e9d0:	9315      	str	r3, [sp, #84]	@ 0x54
 801e9d2:	3208      	adds	r2, #8
 801e9d4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e9d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e9d8:	4293      	cmp	r3, r2
 801e9da:	d800      	bhi.n	801e9de <arm_radix4_butterfly_q31+0x4aa>
 801e9dc:	e6e8      	b.n	801e7b0 <arm_radix4_butterfly_q31+0x27c>
 801e9de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e9e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e9e2:	009b      	lsls	r3, r3, #2
 801e9e4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e9e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e9e8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e9ea:	089b      	lsrs	r3, r3, #2
 801e9ec:	9320      	str	r3, [sp, #128]	@ 0x80
 801e9ee:	2b04      	cmp	r3, #4
 801e9f0:	d900      	bls.n	801e9f4 <arm_radix4_butterfly_q31+0x4c0>
 801e9f2:	e6c1      	b.n	801e778 <arm_radix4_butterfly_q31+0x244>
 801e9f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e9f6:	469a      	mov	sl, r3
 801e9f8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e9fa:	691c      	ldr	r4, [r3, #16]
 801e9fc:	685a      	ldr	r2, [r3, #4]
 801e9fe:	46a1      	mov	r9, r4
 801ea00:	4690      	mov	r8, r2
 801ea02:	6819      	ldr	r1, [r3, #0]
 801ea04:	689a      	ldr	r2, [r3, #8]
 801ea06:	699f      	ldr	r7, [r3, #24]
 801ea08:	188d      	adds	r5, r1, r2
 801ea0a:	444d      	add	r5, r9
 801ea0c:	19ed      	adds	r5, r5, r7
 801ea0e:	69de      	ldr	r6, [r3, #28]
 801ea10:	601d      	str	r5, [r3, #0]
 801ea12:	4645      	mov	r5, r8
 801ea14:	46b4      	mov	ip, r6
 801ea16:	68d8      	ldr	r0, [r3, #12]
 801ea18:	695c      	ldr	r4, [r3, #20]
 801ea1a:	182d      	adds	r5, r5, r0
 801ea1c:	192d      	adds	r5, r5, r4
 801ea1e:	4465      	add	r5, ip
 801ea20:	605d      	str	r5, [r3, #4]
 801ea22:	1a8d      	subs	r5, r1, r2
 801ea24:	444d      	add	r5, r9
 801ea26:	1bed      	subs	r5, r5, r7
 801ea28:	609d      	str	r5, [r3, #8]
 801ea2a:	4645      	mov	r5, r8
 801ea2c:	1a2d      	subs	r5, r5, r0
 801ea2e:	192d      	adds	r5, r5, r4
 801ea30:	1bad      	subs	r5, r5, r6
 801ea32:	464e      	mov	r6, r9
 801ea34:	60dd      	str	r5, [r3, #12]
 801ea36:	180d      	adds	r5, r1, r0
 801ea38:	1bad      	subs	r5, r5, r6
 801ea3a:	4666      	mov	r6, ip
 801ea3c:	1bad      	subs	r5, r5, r6
 801ea3e:	611d      	str	r5, [r3, #16]
 801ea40:	4645      	mov	r5, r8
 801ea42:	1aad      	subs	r5, r5, r2
 801ea44:	4442      	add	r2, r8
 801ea46:	1b12      	subs	r2, r2, r4
 801ea48:	1bd2      	subs	r2, r2, r7
 801ea4a:	1a08      	subs	r0, r1, r0
 801ea4c:	61da      	str	r2, [r3, #28]
 801ea4e:	4649      	mov	r1, r9
 801ea50:	2201      	movs	r2, #1
 801ea52:	1a41      	subs	r1, r0, r1
 801ea54:	4252      	negs	r2, r2
 801ea56:	4461      	add	r1, ip
 801ea58:	4694      	mov	ip, r2
 801ea5a:	44e2      	add	sl, ip
 801ea5c:	4652      	mov	r2, sl
 801ea5e:	1b2d      	subs	r5, r5, r4
 801ea60:	19ed      	adds	r5, r5, r7
 801ea62:	615d      	str	r5, [r3, #20]
 801ea64:	6199      	str	r1, [r3, #24]
 801ea66:	3320      	adds	r3, #32
 801ea68:	2a00      	cmp	r2, #0
 801ea6a:	d1c6      	bne.n	801e9fa <arm_radix4_butterfly_q31+0x4c6>
 801ea6c:	b027      	add	sp, #156	@ 0x9c
 801ea6e:	bc3c      	pop	{r2, r3, r4, r5}
 801ea70:	4690      	mov	r8, r2
 801ea72:	4699      	mov	r9, r3
 801ea74:	46a2      	mov	sl, r4
 801ea76:	46ab      	mov	fp, r5
 801ea78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea7a:	469a      	mov	sl, r3
 801ea7c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ea7e:	e7bc      	b.n	801e9fa <arm_radix4_butterfly_q31+0x4c6>

0801ea80 <arm_radix4_butterfly_inverse_q31>:
 801ea80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea82:	464d      	mov	r5, r9
 801ea84:	4644      	mov	r4, r8
 801ea86:	465f      	mov	r7, fp
 801ea88:	4656      	mov	r6, sl
 801ea8a:	b4f0      	push	{r4, r5, r6, r7}
 801ea8c:	b0a7      	sub	sp, #156	@ 0x9c
 801ea8e:	469c      	mov	ip, r3
 801ea90:	9114      	str	r1, [sp, #80]	@ 0x50
 801ea92:	0889      	lsrs	r1, r1, #2
 801ea94:	9310      	str	r3, [sp, #64]	@ 0x40
 801ea96:	00cb      	lsls	r3, r1, #3
 801ea98:	0015      	movs	r5, r2
 801ea9a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801ea9c:	18c2      	adds	r2, r0, r3
 801ea9e:	000c      	movs	r4, r1
 801eaa0:	9124      	str	r1, [sp, #144]	@ 0x90
 801eaa2:	18d1      	adds	r1, r2, r3
 801eaa4:	468b      	mov	fp, r1
 801eaa6:	469a      	mov	sl, r3
 801eaa8:	4663      	mov	r3, ip
 801eaaa:	44da      	add	sl, fp
 801eaac:	46d0      	mov	r8, sl
 801eaae:	4681      	mov	r9, r0
 801eab0:	4692      	mov	sl, r2
 801eab2:	0119      	lsls	r1, r3, #4
 801eab4:	910d      	str	r1, [sp, #52]	@ 0x34
 801eab6:	00d9      	lsls	r1, r3, #3
 801eab8:	005b      	lsls	r3, r3, #1
 801eaba:	4463      	add	r3, ip
 801eabc:	910e      	str	r1, [sp, #56]	@ 0x38
 801eabe:	00d9      	lsls	r1, r3, #3
 801eac0:	9022      	str	r0, [sp, #136]	@ 0x88
 801eac2:	9025      	str	r0, [sp, #148]	@ 0x94
 801eac4:	910f      	str	r1, [sp, #60]	@ 0x3c
 801eac6:	9502      	str	r5, [sp, #8]
 801eac8:	9500      	str	r5, [sp, #0]
 801eaca:	9501      	str	r5, [sp, #4]
 801eacc:	9409      	str	r4, [sp, #36]	@ 0x24
 801eace:	464b      	mov	r3, r9
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	4652      	mov	r2, sl
 801ead4:	111c      	asrs	r4, r3, #4
 801ead6:	465b      	mov	r3, fp
 801ead8:	4648      	mov	r0, r9
 801eada:	681b      	ldr	r3, [r3, #0]
 801eadc:	6812      	ldr	r2, [r2, #0]
 801eade:	6840      	ldr	r0, [r0, #4]
 801eae0:	111b      	asrs	r3, r3, #4
 801eae2:	18e7      	adds	r7, r4, r3
 801eae4:	1ae3      	subs	r3, r4, r3
 801eae6:	1114      	asrs	r4, r2, #4
 801eae8:	4642      	mov	r2, r8
 801eaea:	1105      	asrs	r5, r0, #4
 801eaec:	4658      	mov	r0, fp
 801eaee:	6812      	ldr	r2, [r2, #0]
 801eaf0:	6840      	ldr	r0, [r0, #4]
 801eaf2:	9303      	str	r3, [sp, #12]
 801eaf4:	1113      	asrs	r3, r2, #4
 801eaf6:	18e2      	adds	r2, r4, r3
 801eaf8:	1103      	asrs	r3, r0, #4
 801eafa:	18ee      	adds	r6, r5, r3
 801eafc:	1ae8      	subs	r0, r5, r3
 801eafe:	464d      	mov	r5, r9
 801eb00:	18bb      	adds	r3, r7, r2
 801eb02:	602b      	str	r3, [r5, #0]
 801eb04:	4641      	mov	r1, r8
 801eb06:	4655      	mov	r5, sl
 801eb08:	6849      	ldr	r1, [r1, #4]
 801eb0a:	686d      	ldr	r5, [r5, #4]
 801eb0c:	110b      	asrs	r3, r1, #4
 801eb0e:	112d      	asrs	r5, r5, #4
 801eb10:	18eb      	adds	r3, r5, r3
 801eb12:	464d      	mov	r5, r9
 801eb14:	18f1      	adds	r1, r6, r3
 801eb16:	6069      	str	r1, [r5, #4]
 801eb18:	4655      	mov	r5, sl
 801eb1a:	686d      	ldr	r5, [r5, #4]
 801eb1c:	9004      	str	r0, [sp, #16]
 801eb1e:	112c      	asrs	r4, r5, #4
 801eb20:	4645      	mov	r5, r8
 801eb22:	686d      	ldr	r5, [r5, #4]
 801eb24:	1129      	asrs	r1, r5, #4
 801eb26:	1a65      	subs	r5, r4, r1
 801eb28:	4651      	mov	r1, sl
 801eb2a:	6809      	ldr	r1, [r1, #0]
 801eb2c:	1abc      	subs	r4, r7, r2
 801eb2e:	1108      	asrs	r0, r1, #4
 801eb30:	4641      	mov	r1, r8
 801eb32:	17e2      	asrs	r2, r4, #31
 801eb34:	6809      	ldr	r1, [r1, #0]
 801eb36:	9207      	str	r2, [sp, #28]
 801eb38:	9a01      	ldr	r2, [sp, #4]
 801eb3a:	1109      	asrs	r1, r1, #4
 801eb3c:	6817      	ldr	r7, [r2, #0]
 801eb3e:	1a41      	subs	r1, r0, r1
 801eb40:	9106      	str	r1, [sp, #24]
 801eb42:	0039      	movs	r1, r7
 801eb44:	17ff      	asrs	r7, r7, #31
 801eb46:	0038      	movs	r0, r7
 801eb48:	9505      	str	r5, [sp, #20]
 801eb4a:	1af5      	subs	r5, r6, r3
 801eb4c:	17ef      	asrs	r7, r5, #31
 801eb4e:	970b      	str	r7, [sp, #44]	@ 0x2c
 801eb50:	6857      	ldr	r7, [r2, #4]
 801eb52:	0003      	movs	r3, r0
 801eb54:	17fe      	asrs	r6, r7, #31
 801eb56:	000a      	movs	r2, r1
 801eb58:	9108      	str	r1, [sp, #32]
 801eb5a:	900a      	str	r0, [sp, #40]	@ 0x28
 801eb5c:	17e1      	asrs	r1, r4, #31
 801eb5e:	0020      	movs	r0, r4
 801eb60:	960c      	str	r6, [sp, #48]	@ 0x30
 801eb62:	f7e1 fd2d 	bl	80005c0 <__aeabi_lmul>
 801eb66:	003a      	movs	r2, r7
 801eb68:	17fb      	asrs	r3, r7, #31
 801eb6a:	000e      	movs	r6, r1
 801eb6c:	0028      	movs	r0, r5
 801eb6e:	17e9      	asrs	r1, r5, #31
 801eb70:	f7e1 fd26 	bl	80005c0 <__aeabi_lmul>
 801eb74:	4653      	mov	r3, sl
 801eb76:	1a76      	subs	r6, r6, r1
 801eb78:	0076      	lsls	r6, r6, #1
 801eb7a:	601e      	str	r6, [r3, #0]
 801eb7c:	002a      	movs	r2, r5
 801eb7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb80:	9808      	ldr	r0, [sp, #32]
 801eb82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb84:	f7e1 fd1c 	bl	80005c0 <__aeabi_lmul>
 801eb88:	003a      	movs	r2, r7
 801eb8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb8c:	000d      	movs	r5, r1
 801eb8e:	0020      	movs	r0, r4
 801eb90:	9907      	ldr	r1, [sp, #28]
 801eb92:	f7e1 fd15 	bl	80005c0 <__aeabi_lmul>
 801eb96:	4657      	mov	r7, sl
 801eb98:	186d      	adds	r5, r5, r1
 801eb9a:	006d      	lsls	r5, r5, #1
 801eb9c:	607d      	str	r5, [r7, #4]
 801eb9e:	9b03      	ldr	r3, [sp, #12]
 801eba0:	9e06      	ldr	r6, [sp, #24]
 801eba2:	9d05      	ldr	r5, [sp, #20]
 801eba4:	46b4      	mov	ip, r6
 801eba6:	1b5d      	subs	r5, r3, r5
 801eba8:	9b00      	ldr	r3, [sp, #0]
 801ebaa:	17ef      	asrs	r7, r5, #31
 801ebac:	0039      	movs	r1, r7
 801ebae:	681f      	ldr	r7, [r3, #0]
 801ebb0:	17fc      	asrs	r4, r7, #31
 801ebb2:	0020      	movs	r0, r4
 801ebb4:	9c04      	ldr	r4, [sp, #16]
 801ebb6:	4464      	add	r4, ip
 801ebb8:	17e6      	asrs	r6, r4, #31
 801ebba:	9407      	str	r4, [sp, #28]
 801ebbc:	9608      	str	r6, [sp, #32]
 801ebbe:	685e      	ldr	r6, [r3, #4]
 801ebc0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ebc2:	17f2      	asrs	r2, r6, #31
 801ebc4:	0003      	movs	r3, r0
 801ebc6:	920c      	str	r2, [sp, #48]	@ 0x30
 801ebc8:	0028      	movs	r0, r5
 801ebca:	003a      	movs	r2, r7
 801ebcc:	910a      	str	r1, [sp, #40]	@ 0x28
 801ebce:	f7e1 fcf7 	bl	80005c0 <__aeabi_lmul>
 801ebd2:	0032      	movs	r2, r6
 801ebd4:	17f3      	asrs	r3, r6, #31
 801ebd6:	9807      	ldr	r0, [sp, #28]
 801ebd8:	000c      	movs	r4, r1
 801ebda:	9908      	ldr	r1, [sp, #32]
 801ebdc:	f7e1 fcf0 	bl	80005c0 <__aeabi_lmul>
 801ebe0:	4658      	mov	r0, fp
 801ebe2:	1a64      	subs	r4, r4, r1
 801ebe4:	0064      	lsls	r4, r4, #1
 801ebe6:	9a07      	ldr	r2, [sp, #28]
 801ebe8:	6004      	str	r4, [r0, #0]
 801ebea:	9b08      	ldr	r3, [sp, #32]
 801ebec:	0038      	movs	r0, r7
 801ebee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ebf0:	f7e1 fce6 	bl	80005c0 <__aeabi_lmul>
 801ebf4:	0032      	movs	r2, r6
 801ebf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebf8:	000c      	movs	r4, r1
 801ebfa:	0028      	movs	r0, r5
 801ebfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebfe:	f7e1 fcdf 	bl	80005c0 <__aeabi_lmul>
 801ec02:	9d05      	ldr	r5, [sp, #20]
 801ec04:	465f      	mov	r7, fp
 801ec06:	46ac      	mov	ip, r5
 801ec08:	1864      	adds	r4, r4, r1
 801ec0a:	9903      	ldr	r1, [sp, #12]
 801ec0c:	0064      	lsls	r4, r4, #1
 801ec0e:	4461      	add	r1, ip
 801ec10:	607c      	str	r4, [r7, #4]
 801ec12:	000c      	movs	r4, r1
 801ec14:	17c9      	asrs	r1, r1, #31
 801ec16:	9105      	str	r1, [sp, #20]
 801ec18:	9902      	ldr	r1, [sp, #8]
 801ec1a:	9804      	ldr	r0, [sp, #16]
 801ec1c:	680d      	ldr	r5, [r1, #0]
 801ec1e:	9e06      	ldr	r6, [sp, #24]
 801ec20:	002b      	movs	r3, r5
 801ec22:	17ed      	asrs	r5, r5, #31
 801ec24:	684f      	ldr	r7, [r1, #4]
 801ec26:	9503      	str	r5, [sp, #12]
 801ec28:	1b85      	subs	r5, r0, r6
 801ec2a:	17e8      	asrs	r0, r5, #31
 801ec2c:	001a      	movs	r2, r3
 801ec2e:	9006      	str	r0, [sp, #24]
 801ec30:	17fe      	asrs	r6, r7, #31
 801ec32:	9304      	str	r3, [sp, #16]
 801ec34:	0020      	movs	r0, r4
 801ec36:	9b03      	ldr	r3, [sp, #12]
 801ec38:	17e1      	asrs	r1, r4, #31
 801ec3a:	9607      	str	r6, [sp, #28]
 801ec3c:	f7e1 fcc0 	bl	80005c0 <__aeabi_lmul>
 801ec40:	003a      	movs	r2, r7
 801ec42:	000e      	movs	r6, r1
 801ec44:	17fb      	asrs	r3, r7, #31
 801ec46:	0028      	movs	r0, r5
 801ec48:	17e9      	asrs	r1, r5, #31
 801ec4a:	f7e1 fcb9 	bl	80005c0 <__aeabi_lmul>
 801ec4e:	4640      	mov	r0, r8
 801ec50:	1a76      	subs	r6, r6, r1
 801ec52:	0076      	lsls	r6, r6, #1
 801ec54:	002a      	movs	r2, r5
 801ec56:	9b06      	ldr	r3, [sp, #24]
 801ec58:	6006      	str	r6, [r0, #0]
 801ec5a:	9903      	ldr	r1, [sp, #12]
 801ec5c:	9804      	ldr	r0, [sp, #16]
 801ec5e:	f7e1 fcaf 	bl	80005c0 <__aeabi_lmul>
 801ec62:	0020      	movs	r0, r4
 801ec64:	2408      	movs	r4, #8
 801ec66:	9b07      	ldr	r3, [sp, #28]
 801ec68:	000d      	movs	r5, r1
 801ec6a:	003a      	movs	r2, r7
 801ec6c:	9905      	ldr	r1, [sp, #20]
 801ec6e:	f7e1 fca7 	bl	80005c0 <__aeabi_lmul>
 801ec72:	4640      	mov	r0, r8
 801ec74:	46a4      	mov	ip, r4
 801ec76:	186d      	adds	r5, r5, r1
 801ec78:	006d      	lsls	r5, r5, #1
 801ec7a:	6045      	str	r5, [r0, #4]
 801ec7c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec7e:	44e1      	add	r9, ip
 801ec80:	3801      	subs	r0, #1
 801ec82:	9009      	str	r0, [sp, #36]	@ 0x24
 801ec84:	9a01      	ldr	r2, [sp, #4]
 801ec86:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ec88:	44e2      	add	sl, ip
 801ec8a:	44e3      	add	fp, ip
 801ec8c:	44e0      	add	r8, ip
 801ec8e:	46a4      	mov	ip, r4
 801ec90:	4462      	add	r2, ip
 801ec92:	9201      	str	r2, [sp, #4]
 801ec94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec96:	9b00      	ldr	r3, [sp, #0]
 801ec98:	4694      	mov	ip, r2
 801ec9a:	4463      	add	r3, ip
 801ec9c:	9300      	str	r3, [sp, #0]
 801ec9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eca0:	9902      	ldr	r1, [sp, #8]
 801eca2:	469c      	mov	ip, r3
 801eca4:	4461      	add	r1, ip
 801eca6:	9102      	str	r1, [sp, #8]
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	d000      	beq.n	801ecae <arm_radix4_butterfly_inverse_q31+0x22e>
 801ecac:	e70f      	b.n	801eace <arm_radix4_butterfly_inverse_q31+0x4e>
 801ecae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ecb0:	009b      	lsls	r3, r3, #2
 801ecb2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ecb4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ecb6:	9320      	str	r3, [sp, #128]	@ 0x80
 801ecb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ecba:	2b04      	cmp	r3, #4
 801ecbc:	d800      	bhi.n	801ecc0 <arm_radix4_butterfly_inverse_q31+0x240>
 801ecbe:	e17c      	b.n	801efba <arm_radix4_butterfly_inverse_q31+0x53a>
 801ecc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ecc2:	0893      	lsrs	r3, r2, #2
 801ecc4:	1e59      	subs	r1, r3, #1
 801ecc6:	9321      	str	r3, [sp, #132]	@ 0x84
 801ecc8:	00db      	lsls	r3, r3, #3
 801ecca:	931b      	str	r3, [sp, #108]	@ 0x6c
 801eccc:	00d3      	lsls	r3, r2, #3
 801ecce:	9300      	str	r3, [sp, #0]
 801ecd0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ecd2:	911a      	str	r1, [sp, #104]	@ 0x68
 801ecd4:	00da      	lsls	r2, r3, #3
 801ecd6:	921e      	str	r2, [sp, #120]	@ 0x78
 801ecd8:	011a      	lsls	r2, r3, #4
 801ecda:	921d      	str	r2, [sp, #116]	@ 0x74
 801ecdc:	001a      	movs	r2, r3
 801ecde:	4694      	mov	ip, r2
 801ece0:	005b      	lsls	r3, r3, #1
 801ece2:	4463      	add	r3, ip
 801ece4:	00db      	lsls	r3, r3, #3
 801ece6:	931c      	str	r3, [sp, #112]	@ 0x70
 801ece8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ecea:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ecec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ecee:	9318      	str	r3, [sp, #96]	@ 0x60
 801ecf0:	9319      	str	r3, [sp, #100]	@ 0x64
 801ecf2:	9316      	str	r3, [sp, #88]	@ 0x58
 801ecf4:	2300      	movs	r3, #0
 801ecf6:	9315      	str	r3, [sp, #84]	@ 0x54
 801ecf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ecfa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ecfc:	681a      	ldr	r2, [r3, #0]
 801ecfe:	685b      	ldr	r3, [r3, #4]
 801ed00:	9205      	str	r2, [sp, #20]
 801ed02:	9306      	str	r3, [sp, #24]
 801ed04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ed06:	468c      	mov	ip, r1
 801ed08:	681a      	ldr	r2, [r3, #0]
 801ed0a:	685b      	ldr	r3, [r3, #4]
 801ed0c:	9207      	str	r2, [sp, #28]
 801ed0e:	9308      	str	r3, [sp, #32]
 801ed10:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ed12:	681a      	ldr	r2, [r3, #0]
 801ed14:	685b      	ldr	r3, [r3, #4]
 801ed16:	9209      	str	r2, [sp, #36]	@ 0x24
 801ed18:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ed1a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed1c:	0013      	movs	r3, r2
 801ed1e:	4463      	add	r3, ip
 801ed20:	4698      	mov	r8, r3
 801ed22:	0013      	movs	r3, r2
 801ed24:	4442      	add	r2, r8
 801ed26:	4691      	mov	r9, r2
 801ed28:	001a      	movs	r2, r3
 801ed2a:	444a      	add	r2, r9
 801ed2c:	4692      	mov	sl, r2
 801ed2e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ed30:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ed32:	4293      	cmp	r3, r2
 801ed34:	d800      	bhi.n	801ed38 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801ed36:	e0d9      	b.n	801eeec <arm_radix4_butterfly_inverse_q31+0x46c>
 801ed38:	4694      	mov	ip, r2
 801ed3a:	4644      	mov	r4, r8
 801ed3c:	4655      	mov	r5, sl
 801ed3e:	4688      	mov	r8, r1
 801ed40:	9b07      	ldr	r3, [sp, #28]
 801ed42:	17db      	asrs	r3, r3, #31
 801ed44:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed46:	9b08      	ldr	r3, [sp, #32]
 801ed48:	17db      	asrs	r3, r3, #31
 801ed4a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed4c:	9b05      	ldr	r3, [sp, #20]
 801ed4e:	17db      	asrs	r3, r3, #31
 801ed50:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed52:	9b06      	ldr	r3, [sp, #24]
 801ed54:	17db      	asrs	r3, r3, #31
 801ed56:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ed58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed5a:	17db      	asrs	r3, r3, #31
 801ed5c:	9310      	str	r3, [sp, #64]	@ 0x40
 801ed5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ed60:	17db      	asrs	r3, r3, #31
 801ed62:	9311      	str	r3, [sp, #68]	@ 0x44
 801ed64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed66:	4463      	add	r3, ip
 801ed68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ed6a:	4643      	mov	r3, r8
 801ed6c:	4641      	mov	r1, r8
 801ed6e:	681a      	ldr	r2, [r3, #0]
 801ed70:	464b      	mov	r3, r9
 801ed72:	684f      	ldr	r7, [r1, #4]
 801ed74:	4649      	mov	r1, r9
 801ed76:	681b      	ldr	r3, [r3, #0]
 801ed78:	18d6      	adds	r6, r2, r3
 801ed7a:	1ad3      	subs	r3, r2, r3
 801ed7c:	9301      	str	r3, [sp, #4]
 801ed7e:	684b      	ldr	r3, [r1, #4]
 801ed80:	1af9      	subs	r1, r7, r3
 801ed82:	9102      	str	r1, [sp, #8]
 801ed84:	6829      	ldr	r1, [r5, #0]
 801ed86:	18f8      	adds	r0, r7, r3
 801ed88:	468c      	mov	ip, r1
 801ed8a:	6827      	ldr	r7, [r4, #0]
 801ed8c:	4467      	add	r7, ip
 801ed8e:	003a      	movs	r2, r7
 801ed90:	19f3      	adds	r3, r6, r7
 801ed92:	4647      	mov	r7, r8
 801ed94:	109b      	asrs	r3, r3, #2
 801ed96:	603b      	str	r3, [r7, #0]
 801ed98:	6869      	ldr	r1, [r5, #4]
 801ed9a:	6867      	ldr	r7, [r4, #4]
 801ed9c:	468c      	mov	ip, r1
 801ed9e:	4467      	add	r7, ip
 801eda0:	003b      	movs	r3, r7
 801eda2:	19c1      	adds	r1, r0, r7
 801eda4:	4647      	mov	r7, r8
 801eda6:	1ab6      	subs	r6, r6, r2
 801eda8:	1089      	asrs	r1, r1, #2
 801edaa:	6079      	str	r1, [r7, #4]
 801edac:	17f2      	asrs	r2, r6, #31
 801edae:	9900      	ldr	r1, [sp, #0]
 801edb0:	4692      	mov	sl, r2
 801edb2:	468c      	mov	ip, r1
 801edb4:	6867      	ldr	r7, [r4, #4]
 801edb6:	6869      	ldr	r1, [r5, #4]
 801edb8:	44e0      	add	r8, ip
 801edba:	1a7f      	subs	r7, r7, r1
 801edbc:	9703      	str	r7, [sp, #12]
 801edbe:	6821      	ldr	r1, [r4, #0]
 801edc0:	682f      	ldr	r7, [r5, #0]
 801edc2:	1bc9      	subs	r1, r1, r7
 801edc4:	1ac7      	subs	r7, r0, r3
 801edc6:	17fa      	asrs	r2, r7, #31
 801edc8:	4693      	mov	fp, r2
 801edca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801edcc:	9a07      	ldr	r2, [sp, #28]
 801edce:	9104      	str	r1, [sp, #16]
 801edd0:	0030      	movs	r0, r6
 801edd2:	4651      	mov	r1, sl
 801edd4:	f7e1 fbf4 	bl	80005c0 <__aeabi_lmul>
 801edd8:	9a08      	ldr	r2, [sp, #32]
 801edda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eddc:	9112      	str	r1, [sp, #72]	@ 0x48
 801edde:	0038      	movs	r0, r7
 801ede0:	4659      	mov	r1, fp
 801ede2:	f7e1 fbed 	bl	80005c0 <__aeabi_lmul>
 801ede6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ede8:	9a07      	ldr	r2, [sp, #28]
 801edea:	1a41      	subs	r1, r0, r1
 801edec:	1049      	asrs	r1, r1, #1
 801edee:	6021      	str	r1, [r4, #0]
 801edf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801edf2:	0038      	movs	r0, r7
 801edf4:	4659      	mov	r1, fp
 801edf6:	f7e1 fbe3 	bl	80005c0 <__aeabi_lmul>
 801edfa:	9a08      	ldr	r2, [sp, #32]
 801edfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edfe:	000f      	movs	r7, r1
 801ee00:	0030      	movs	r0, r6
 801ee02:	4651      	mov	r1, sl
 801ee04:	f7e1 fbdc 	bl	80005c0 <__aeabi_lmul>
 801ee08:	9b00      	ldr	r3, [sp, #0]
 801ee0a:	187f      	adds	r7, r7, r1
 801ee0c:	469c      	mov	ip, r3
 801ee0e:	107f      	asrs	r7, r7, #1
 801ee10:	6067      	str	r7, [r4, #4]
 801ee12:	9a01      	ldr	r2, [sp, #4]
 801ee14:	9f03      	ldr	r7, [sp, #12]
 801ee16:	9802      	ldr	r0, [sp, #8]
 801ee18:	1bd7      	subs	r7, r2, r7
 801ee1a:	17fe      	asrs	r6, r7, #31
 801ee1c:	0031      	movs	r1, r6
 801ee1e:	9e04      	ldr	r6, [sp, #16]
 801ee20:	4682      	mov	sl, r0
 801ee22:	4464      	add	r4, ip
 801ee24:	46b4      	mov	ip, r6
 801ee26:	44e2      	add	sl, ip
 801ee28:	4652      	mov	r2, sl
 801ee2a:	17d2      	asrs	r2, r2, #31
 801ee2c:	4693      	mov	fp, r2
 801ee2e:	0038      	movs	r0, r7
 801ee30:	9a05      	ldr	r2, [sp, #20]
 801ee32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee34:	9112      	str	r1, [sp, #72]	@ 0x48
 801ee36:	f7e1 fbc3 	bl	80005c0 <__aeabi_lmul>
 801ee3a:	9a06      	ldr	r2, [sp, #24]
 801ee3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee3e:	000e      	movs	r6, r1
 801ee40:	4650      	mov	r0, sl
 801ee42:	4659      	mov	r1, fp
 801ee44:	f7e1 fbbc 	bl	80005c0 <__aeabi_lmul>
 801ee48:	4648      	mov	r0, r9
 801ee4a:	1a76      	subs	r6, r6, r1
 801ee4c:	1076      	asrs	r6, r6, #1
 801ee4e:	6006      	str	r6, [r0, #0]
 801ee50:	9a05      	ldr	r2, [sp, #20]
 801ee52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee54:	4650      	mov	r0, sl
 801ee56:	4659      	mov	r1, fp
 801ee58:	f7e1 fbb2 	bl	80005c0 <__aeabi_lmul>
 801ee5c:	9a06      	ldr	r2, [sp, #24]
 801ee5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ee60:	000e      	movs	r6, r1
 801ee62:	0038      	movs	r0, r7
 801ee64:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ee66:	f7e1 fbab 	bl	80005c0 <__aeabi_lmul>
 801ee6a:	9a00      	ldr	r2, [sp, #0]
 801ee6c:	9f03      	ldr	r7, [sp, #12]
 801ee6e:	4694      	mov	ip, r2
 801ee70:	1876      	adds	r6, r6, r1
 801ee72:	4649      	mov	r1, r9
 801ee74:	44e1      	add	r9, ip
 801ee76:	46bc      	mov	ip, r7
 801ee78:	9b01      	ldr	r3, [sp, #4]
 801ee7a:	1076      	asrs	r6, r6, #1
 801ee7c:	4463      	add	r3, ip
 801ee7e:	17df      	asrs	r7, r3, #31
 801ee80:	604e      	str	r6, [r1, #4]
 801ee82:	46ba      	mov	sl, r7
 801ee84:	001e      	movs	r6, r3
 801ee86:	9802      	ldr	r0, [sp, #8]
 801ee88:	9b04      	ldr	r3, [sp, #16]
 801ee8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee8c:	1ac7      	subs	r7, r0, r3
 801ee8e:	17fb      	asrs	r3, r7, #31
 801ee90:	469b      	mov	fp, r3
 801ee92:	0030      	movs	r0, r6
 801ee94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee96:	4651      	mov	r1, sl
 801ee98:	f7e1 fb92 	bl	80005c0 <__aeabi_lmul>
 801ee9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ee9e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801eea0:	9101      	str	r1, [sp, #4]
 801eea2:	0038      	movs	r0, r7
 801eea4:	4659      	mov	r1, fp
 801eea6:	f7e1 fb8b 	bl	80005c0 <__aeabi_lmul>
 801eeaa:	9801      	ldr	r0, [sp, #4]
 801eeac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eeae:	1a41      	subs	r1, r0, r1
 801eeb0:	1049      	asrs	r1, r1, #1
 801eeb2:	6029      	str	r1, [r5, #0]
 801eeb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eeb6:	0038      	movs	r0, r7
 801eeb8:	4659      	mov	r1, fp
 801eeba:	f7e1 fb81 	bl	80005c0 <__aeabi_lmul>
 801eebe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801eec0:	000f      	movs	r7, r1
 801eec2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eec4:	0030      	movs	r0, r6
 801eec6:	4651      	mov	r1, sl
 801eec8:	f7e1 fb7a 	bl	80005c0 <__aeabi_lmul>
 801eecc:	187f      	adds	r7, r7, r1
 801eece:	107f      	asrs	r7, r7, #1
 801eed0:	606f      	str	r7, [r5, #4]
 801eed2:	9a00      	ldr	r2, [sp, #0]
 801eed4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eed6:	4694      	mov	ip, r2
 801eed8:	4465      	add	r5, ip
 801eeda:	468c      	mov	ip, r1
 801eedc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eede:	0013      	movs	r3, r2
 801eee0:	4462      	add	r2, ip
 801eee2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801eee4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eee6:	429a      	cmp	r2, r3
 801eee8:	d900      	bls.n	801eeec <arm_radix4_butterfly_inverse_q31+0x46c>
 801eeea:	e73e      	b.n	801ed6a <arm_radix4_butterfly_inverse_q31+0x2ea>
 801eeec:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eeee:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eef0:	468c      	mov	ip, r1
 801eef2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801eef4:	4462      	add	r2, ip
 801eef6:	468c      	mov	ip, r1
 801eef8:	9216      	str	r2, [sp, #88]	@ 0x58
 801eefa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801eefc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801eefe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ef00:	4462      	add	r2, ip
 801ef02:	468c      	mov	ip, r1
 801ef04:	9219      	str	r2, [sp, #100]	@ 0x64
 801ef06:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ef08:	3301      	adds	r3, #1
 801ef0a:	4462      	add	r2, ip
 801ef0c:	9218      	str	r2, [sp, #96]	@ 0x60
 801ef0e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ef10:	9315      	str	r3, [sp, #84]	@ 0x54
 801ef12:	3208      	adds	r2, #8
 801ef14:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ef16:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ef18:	4293      	cmp	r3, r2
 801ef1a:	d800      	bhi.n	801ef1e <arm_radix4_butterfly_inverse_q31+0x49e>
 801ef1c:	e6ec      	b.n	801ecf8 <arm_radix4_butterfly_inverse_q31+0x278>
 801ef1e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ef20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ef22:	009b      	lsls	r3, r3, #2
 801ef24:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ef26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ef28:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ef2a:	089b      	lsrs	r3, r3, #2
 801ef2c:	9320      	str	r3, [sp, #128]	@ 0x80
 801ef2e:	2b04      	cmp	r3, #4
 801ef30:	d900      	bls.n	801ef34 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801ef32:	e6c5      	b.n	801ecc0 <arm_radix4_butterfly_inverse_q31+0x240>
 801ef34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ef36:	469a      	mov	sl, r3
 801ef38:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ef3a:	681a      	ldr	r2, [r3, #0]
 801ef3c:	6918      	ldr	r0, [r3, #16]
 801ef3e:	4691      	mov	r9, r2
 801ef40:	464c      	mov	r4, r9
 801ef42:	4680      	mov	r8, r0
 801ef44:	69de      	ldr	r6, [r3, #28]
 801ef46:	689d      	ldr	r5, [r3, #8]
 801ef48:	46b4      	mov	ip, r6
 801ef4a:	6998      	ldr	r0, [r3, #24]
 801ef4c:	1964      	adds	r4, r4, r5
 801ef4e:	6859      	ldr	r1, [r3, #4]
 801ef50:	68da      	ldr	r2, [r3, #12]
 801ef52:	4444      	add	r4, r8
 801ef54:	695f      	ldr	r7, [r3, #20]
 801ef56:	1824      	adds	r4, r4, r0
 801ef58:	601c      	str	r4, [r3, #0]
 801ef5a:	188c      	adds	r4, r1, r2
 801ef5c:	19e4      	adds	r4, r4, r7
 801ef5e:	4464      	add	r4, ip
 801ef60:	605c      	str	r4, [r3, #4]
 801ef62:	464c      	mov	r4, r9
 801ef64:	1b64      	subs	r4, r4, r5
 801ef66:	4444      	add	r4, r8
 801ef68:	1a24      	subs	r4, r4, r0
 801ef6a:	609c      	str	r4, [r3, #8]
 801ef6c:	1a8c      	subs	r4, r1, r2
 801ef6e:	19e4      	adds	r4, r4, r7
 801ef70:	1ba4      	subs	r4, r4, r6
 801ef72:	60dc      	str	r4, [r3, #12]
 801ef74:	464c      	mov	r4, r9
 801ef76:	4646      	mov	r6, r8
 801ef78:	1aa4      	subs	r4, r4, r2
 801ef7a:	1ba4      	subs	r4, r4, r6
 801ef7c:	4464      	add	r4, ip
 801ef7e:	611c      	str	r4, [r3, #16]
 801ef80:	194c      	adds	r4, r1, r5
 801ef82:	1be4      	subs	r4, r4, r7
 801ef84:	1a24      	subs	r4, r4, r0
 801ef86:	615c      	str	r4, [r3, #20]
 801ef88:	4644      	mov	r4, r8
 801ef8a:	4666      	mov	r6, ip
 801ef8c:	444a      	add	r2, r9
 801ef8e:	1b12      	subs	r2, r2, r4
 801ef90:	1b92      	subs	r2, r2, r6
 801ef92:	619a      	str	r2, [r3, #24]
 801ef94:	1b4a      	subs	r2, r1, r5
 801ef96:	1bd1      	subs	r1, r2, r7
 801ef98:	2201      	movs	r2, #1
 801ef9a:	4252      	negs	r2, r2
 801ef9c:	4694      	mov	ip, r2
 801ef9e:	44e2      	add	sl, ip
 801efa0:	4652      	mov	r2, sl
 801efa2:	1809      	adds	r1, r1, r0
 801efa4:	61d9      	str	r1, [r3, #28]
 801efa6:	3320      	adds	r3, #32
 801efa8:	2a00      	cmp	r2, #0
 801efaa:	d1c6      	bne.n	801ef3a <arm_radix4_butterfly_inverse_q31+0x4ba>
 801efac:	b027      	add	sp, #156	@ 0x9c
 801efae:	bc3c      	pop	{r2, r3, r4, r5}
 801efb0:	4690      	mov	r8, r2
 801efb2:	4699      	mov	r9, r3
 801efb4:	46a2      	mov	sl, r4
 801efb6:	46ab      	mov	fp, r5
 801efb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efba:	469a      	mov	sl, r3
 801efbc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801efbe:	e7bc      	b.n	801ef3a <arm_radix4_butterfly_inverse_q31+0x4ba>

0801efc0 <arm_cmplx_mag_squared_q31>:
 801efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801efc2:	464f      	mov	r7, r9
 801efc4:	4646      	mov	r6, r8
 801efc6:	0004      	movs	r4, r0
 801efc8:	b4c0      	push	{r6, r7}
 801efca:	0016      	movs	r6, r2
 801efcc:	000f      	movs	r7, r1
 801efce:	2a00      	cmp	r2, #0
 801efd0:	d018      	beq.n	801f004 <arm_cmplx_mag_squared_q31+0x44>
 801efd2:	6823      	ldr	r3, [r4, #0]
 801efd4:	6822      	ldr	r2, [r4, #0]
 801efd6:	17d9      	asrs	r1, r3, #31
 801efd8:	6863      	ldr	r3, [r4, #4]
 801efda:	0010      	movs	r0, r2
 801efdc:	4698      	mov	r8, r3
 801efde:	17db      	asrs	r3, r3, #31
 801efe0:	4699      	mov	r9, r3
 801efe2:	000b      	movs	r3, r1
 801efe4:	f7e1 faec 	bl	80005c0 <__aeabi_lmul>
 801efe8:	4642      	mov	r2, r8
 801efea:	104d      	asrs	r5, r1, #1
 801efec:	464b      	mov	r3, r9
 801efee:	4640      	mov	r0, r8
 801eff0:	4649      	mov	r1, r9
 801eff2:	f7e1 fae5 	bl	80005c0 <__aeabi_lmul>
 801eff6:	1049      	asrs	r1, r1, #1
 801eff8:	1869      	adds	r1, r5, r1
 801effa:	3e01      	subs	r6, #1
 801effc:	c702      	stmia	r7!, {r1}
 801effe:	3408      	adds	r4, #8
 801f000:	2e00      	cmp	r6, #0
 801f002:	d1e6      	bne.n	801efd2 <arm_cmplx_mag_squared_q31+0x12>
 801f004:	bc0c      	pop	{r2, r3}
 801f006:	4690      	mov	r8, r2
 801f008:	4699      	mov	r9, r3
 801f00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801f00c <arm_mult_q31>:
 801f00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f00e:	4646      	mov	r6, r8
 801f010:	464f      	mov	r7, r9
 801f012:	4690      	mov	r8, r2
 801f014:	b4c0      	push	{r6, r7}
 801f016:	001d      	movs	r5, r3
 801f018:	0006      	movs	r6, r0
 801f01a:	000f      	movs	r7, r1
 801f01c:	2400      	movs	r4, #0
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d020      	beq.n	801f064 <arm_mult_q31+0x58>
 801f022:	4b12      	ldr	r3, [pc, #72]	@ (801f06c <arm_mult_q31+0x60>)
 801f024:	4699      	mov	r9, r3
 801f026:	e007      	b.n	801f038 <arm_mult_q31+0x2c>
 801f028:	464b      	mov	r3, r9
 801f02a:	4059      	eors	r1, r3
 801f02c:	4643      	mov	r3, r8
 801f02e:	3d01      	subs	r5, #1
 801f030:	5119      	str	r1, [r3, r4]
 801f032:	3404      	adds	r4, #4
 801f034:	2d00      	cmp	r5, #0
 801f036:	d015      	beq.n	801f064 <arm_mult_q31+0x58>
 801f038:	5933      	ldr	r3, [r6, r4]
 801f03a:	593a      	ldr	r2, [r7, r4]
 801f03c:	17d9      	asrs	r1, r3, #31
 801f03e:	593b      	ldr	r3, [r7, r4]
 801f040:	5930      	ldr	r0, [r6, r4]
 801f042:	17db      	asrs	r3, r3, #31
 801f044:	f7e1 fabc 	bl	80005c0 <__aeabi_lmul>
 801f048:	004b      	lsls	r3, r1, #1
 801f04a:	0fc0      	lsrs	r0, r0, #31
 801f04c:	4318      	orrs	r0, r3
 801f04e:	17c9      	asrs	r1, r1, #31
 801f050:	17c3      	asrs	r3, r0, #31
 801f052:	428b      	cmp	r3, r1
 801f054:	d1e8      	bne.n	801f028 <arm_mult_q31+0x1c>
 801f056:	0001      	movs	r1, r0
 801f058:	4643      	mov	r3, r8
 801f05a:	3d01      	subs	r5, #1
 801f05c:	5119      	str	r1, [r3, r4]
 801f05e:	3404      	adds	r4, #4
 801f060:	2d00      	cmp	r5, #0
 801f062:	d1e9      	bne.n	801f038 <arm_mult_q31+0x2c>
 801f064:	bc0c      	pop	{r2, r3}
 801f066:	4690      	mov	r8, r2
 801f068:	4699      	mov	r9, r3
 801f06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f06c:	7fffffff 	.word	0x7fffffff

0801f070 <arm_add_q31>:
 801f070:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f072:	465f      	mov	r7, fp
 801f074:	4656      	mov	r6, sl
 801f076:	464d      	mov	r5, r9
 801f078:	4644      	mov	r4, r8
 801f07a:	b4f0      	push	{r4, r5, r6, r7}
 801f07c:	4693      	mov	fp, r2
 801f07e:	b083      	sub	sp, #12
 801f080:	4681      	mov	r9, r0
 801f082:	468a      	mov	sl, r1
 801f084:	4698      	mov	r8, r3
 801f086:	2200      	movs	r2, #0
 801f088:	2b00      	cmp	r3, #0
 801f08a:	d020      	beq.n	801f0ce <arm_add_q31+0x5e>
 801f08c:	4649      	mov	r1, r9
 801f08e:	4653      	mov	r3, sl
 801f090:	588e      	ldr	r6, [r1, r2]
 801f092:	589b      	ldr	r3, [r3, r2]
 801f094:	17f7      	asrs	r7, r6, #31
 801f096:	001c      	movs	r4, r3
 801f098:	0030      	movs	r0, r6
 801f09a:	0039      	movs	r1, r7
 801f09c:	17dd      	asrs	r5, r3, #31
 801f09e:	46b4      	mov	ip, r6
 801f0a0:	1900      	adds	r0, r0, r4
 801f0a2:	4169      	adcs	r1, r5
 801f0a4:	4463      	add	r3, ip
 801f0a6:	9000      	str	r0, [sp, #0]
 801f0a8:	9101      	str	r1, [sp, #4]
 801f0aa:	17d9      	asrs	r1, r3, #31
 801f0ac:	468c      	mov	ip, r1
 801f0ae:	9901      	ldr	r1, [sp, #4]
 801f0b0:	458c      	cmp	ip, r1
 801f0b2:	d002      	beq.n	801f0ba <arm_add_q31+0x4a>
 801f0b4:	17cb      	asrs	r3, r1, #31
 801f0b6:	4909      	ldr	r1, [pc, #36]	@ (801f0dc <arm_add_q31+0x6c>)
 801f0b8:	404b      	eors	r3, r1
 801f0ba:	4659      	mov	r1, fp
 801f0bc:	508b      	str	r3, [r1, r2]
 801f0be:	2301      	movs	r3, #1
 801f0c0:	425b      	negs	r3, r3
 801f0c2:	469c      	mov	ip, r3
 801f0c4:	44e0      	add	r8, ip
 801f0c6:	4643      	mov	r3, r8
 801f0c8:	3204      	adds	r2, #4
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d1de      	bne.n	801f08c <arm_add_q31+0x1c>
 801f0ce:	b003      	add	sp, #12
 801f0d0:	bc3c      	pop	{r2, r3, r4, r5}
 801f0d2:	4690      	mov	r8, r2
 801f0d4:	4699      	mov	r9, r3
 801f0d6:	46a2      	mov	sl, r4
 801f0d8:	46ab      	mov	fp, r5
 801f0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f0dc:	7fffffff 	.word	0x7fffffff

0801f0e0 <atof>:
 801f0e0:	b510      	push	{r4, lr}
 801f0e2:	2100      	movs	r1, #0
 801f0e4:	f000 fe12 	bl	801fd0c <strtod>
 801f0e8:	bd10      	pop	{r4, pc}

0801f0ea <atoi>:
 801f0ea:	b510      	push	{r4, lr}
 801f0ec:	220a      	movs	r2, #10
 801f0ee:	2100      	movs	r1, #0
 801f0f0:	f000 fea4 	bl	801fe3c <strtol>
 801f0f4:	bd10      	pop	{r4, pc}
	...

0801f0f8 <sulp>:
 801f0f8:	b570      	push	{r4, r5, r6, lr}
 801f0fa:	0016      	movs	r6, r2
 801f0fc:	000d      	movs	r5, r1
 801f0fe:	f003 fd15 	bl	8022b2c <__ulp>
 801f102:	2e00      	cmp	r6, #0
 801f104:	d00d      	beq.n	801f122 <sulp+0x2a>
 801f106:	236b      	movs	r3, #107	@ 0x6b
 801f108:	006a      	lsls	r2, r5, #1
 801f10a:	0d52      	lsrs	r2, r2, #21
 801f10c:	1a9b      	subs	r3, r3, r2
 801f10e:	2b00      	cmp	r3, #0
 801f110:	dd07      	ble.n	801f122 <sulp+0x2a>
 801f112:	2400      	movs	r4, #0
 801f114:	4a03      	ldr	r2, [pc, #12]	@ (801f124 <sulp+0x2c>)
 801f116:	051b      	lsls	r3, r3, #20
 801f118:	189d      	adds	r5, r3, r2
 801f11a:	002b      	movs	r3, r5
 801f11c:	0022      	movs	r2, r4
 801f11e:	f7e3 fa8d 	bl	800263c <__aeabi_dmul>
 801f122:	bd70      	pop	{r4, r5, r6, pc}
 801f124:	3ff00000 	.word	0x3ff00000

0801f128 <_strtod_l>:
 801f128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f12a:	b0a3      	sub	sp, #140	@ 0x8c
 801f12c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f12e:	2200      	movs	r2, #0
 801f130:	2600      	movs	r6, #0
 801f132:	2700      	movs	r7, #0
 801f134:	9005      	str	r0, [sp, #20]
 801f136:	9109      	str	r1, [sp, #36]	@ 0x24
 801f138:	921e      	str	r2, [sp, #120]	@ 0x78
 801f13a:	911d      	str	r1, [sp, #116]	@ 0x74
 801f13c:	780a      	ldrb	r2, [r1, #0]
 801f13e:	2a2b      	cmp	r2, #43	@ 0x2b
 801f140:	d053      	beq.n	801f1ea <_strtod_l+0xc2>
 801f142:	d83f      	bhi.n	801f1c4 <_strtod_l+0x9c>
 801f144:	2a0d      	cmp	r2, #13
 801f146:	d839      	bhi.n	801f1bc <_strtod_l+0x94>
 801f148:	2a08      	cmp	r2, #8
 801f14a:	d839      	bhi.n	801f1c0 <_strtod_l+0x98>
 801f14c:	2a00      	cmp	r2, #0
 801f14e:	d042      	beq.n	801f1d6 <_strtod_l+0xae>
 801f150:	2200      	movs	r2, #0
 801f152:	9212      	str	r2, [sp, #72]	@ 0x48
 801f154:	2100      	movs	r1, #0
 801f156:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f158:	910c      	str	r1, [sp, #48]	@ 0x30
 801f15a:	782a      	ldrb	r2, [r5, #0]
 801f15c:	2a30      	cmp	r2, #48	@ 0x30
 801f15e:	d000      	beq.n	801f162 <_strtod_l+0x3a>
 801f160:	e083      	b.n	801f26a <_strtod_l+0x142>
 801f162:	786a      	ldrb	r2, [r5, #1]
 801f164:	3120      	adds	r1, #32
 801f166:	438a      	bics	r2, r1
 801f168:	2a58      	cmp	r2, #88	@ 0x58
 801f16a:	d000      	beq.n	801f16e <_strtod_l+0x46>
 801f16c:	e073      	b.n	801f256 <_strtod_l+0x12e>
 801f16e:	9302      	str	r3, [sp, #8]
 801f170:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f172:	4a95      	ldr	r2, [pc, #596]	@ (801f3c8 <_strtod_l+0x2a0>)
 801f174:	9301      	str	r3, [sp, #4]
 801f176:	ab1e      	add	r3, sp, #120	@ 0x78
 801f178:	9300      	str	r3, [sp, #0]
 801f17a:	9805      	ldr	r0, [sp, #20]
 801f17c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f17e:	a91d      	add	r1, sp, #116	@ 0x74
 801f180:	f002 fd84 	bl	8021c8c <__gethex>
 801f184:	230f      	movs	r3, #15
 801f186:	0002      	movs	r2, r0
 801f188:	401a      	ands	r2, r3
 801f18a:	0004      	movs	r4, r0
 801f18c:	9206      	str	r2, [sp, #24]
 801f18e:	4218      	tst	r0, r3
 801f190:	d005      	beq.n	801f19e <_strtod_l+0x76>
 801f192:	2a06      	cmp	r2, #6
 801f194:	d12b      	bne.n	801f1ee <_strtod_l+0xc6>
 801f196:	2300      	movs	r3, #0
 801f198:	3501      	adds	r5, #1
 801f19a:	951d      	str	r5, [sp, #116]	@ 0x74
 801f19c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f19e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d002      	beq.n	801f1aa <_strtod_l+0x82>
 801f1a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f1a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f1a8:	6013      	str	r3, [r2, #0]
 801f1aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d019      	beq.n	801f1e4 <_strtod_l+0xbc>
 801f1b0:	2380      	movs	r3, #128	@ 0x80
 801f1b2:	0030      	movs	r0, r6
 801f1b4:	061b      	lsls	r3, r3, #24
 801f1b6:	18f9      	adds	r1, r7, r3
 801f1b8:	b023      	add	sp, #140	@ 0x8c
 801f1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f1bc:	2a20      	cmp	r2, #32
 801f1be:	d1c7      	bne.n	801f150 <_strtod_l+0x28>
 801f1c0:	3101      	adds	r1, #1
 801f1c2:	e7ba      	b.n	801f13a <_strtod_l+0x12>
 801f1c4:	2a2d      	cmp	r2, #45	@ 0x2d
 801f1c6:	d1c3      	bne.n	801f150 <_strtod_l+0x28>
 801f1c8:	3a2c      	subs	r2, #44	@ 0x2c
 801f1ca:	9212      	str	r2, [sp, #72]	@ 0x48
 801f1cc:	1c4a      	adds	r2, r1, #1
 801f1ce:	921d      	str	r2, [sp, #116]	@ 0x74
 801f1d0:	784a      	ldrb	r2, [r1, #1]
 801f1d2:	2a00      	cmp	r2, #0
 801f1d4:	d1be      	bne.n	801f154 <_strtod_l+0x2c>
 801f1d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1d8:	931d      	str	r3, [sp, #116]	@ 0x74
 801f1da:	2300      	movs	r3, #0
 801f1dc:	9312      	str	r3, [sp, #72]	@ 0x48
 801f1de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d1df      	bne.n	801f1a4 <_strtod_l+0x7c>
 801f1e4:	0030      	movs	r0, r6
 801f1e6:	0039      	movs	r1, r7
 801f1e8:	e7e6      	b.n	801f1b8 <_strtod_l+0x90>
 801f1ea:	2200      	movs	r2, #0
 801f1ec:	e7ed      	b.n	801f1ca <_strtod_l+0xa2>
 801f1ee:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f1f0:	2a00      	cmp	r2, #0
 801f1f2:	d007      	beq.n	801f204 <_strtod_l+0xdc>
 801f1f4:	2135      	movs	r1, #53	@ 0x35
 801f1f6:	a820      	add	r0, sp, #128	@ 0x80
 801f1f8:	f003 fd8e 	bl	8022d18 <__copybits>
 801f1fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f1fe:	9805      	ldr	r0, [sp, #20]
 801f200:	f003 f948 	bl	8022494 <_Bfree>
 801f204:	9806      	ldr	r0, [sp, #24]
 801f206:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f208:	3801      	subs	r0, #1
 801f20a:	2804      	cmp	r0, #4
 801f20c:	d806      	bhi.n	801f21c <_strtod_l+0xf4>
 801f20e:	f7e0 ffb5 	bl	800017c <__gnu_thumb1_case_uqi>
 801f212:	0312      	.short	0x0312
 801f214:	1e1c      	.short	0x1e1c
 801f216:	12          	.byte	0x12
 801f217:	00          	.byte	0x00
 801f218:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f21a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801f21c:	05e4      	lsls	r4, r4, #23
 801f21e:	d502      	bpl.n	801f226 <_strtod_l+0xfe>
 801f220:	2380      	movs	r3, #128	@ 0x80
 801f222:	061b      	lsls	r3, r3, #24
 801f224:	431f      	orrs	r7, r3
 801f226:	4b69      	ldr	r3, [pc, #420]	@ (801f3cc <_strtod_l+0x2a4>)
 801f228:	423b      	tst	r3, r7
 801f22a:	d1b8      	bne.n	801f19e <_strtod_l+0x76>
 801f22c:	f001 fdb2 	bl	8020d94 <__errno>
 801f230:	2322      	movs	r3, #34	@ 0x22
 801f232:	6003      	str	r3, [r0, #0]
 801f234:	e7b3      	b.n	801f19e <_strtod_l+0x76>
 801f236:	4966      	ldr	r1, [pc, #408]	@ (801f3d0 <_strtod_l+0x2a8>)
 801f238:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f23a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f23c:	400a      	ands	r2, r1
 801f23e:	4965      	ldr	r1, [pc, #404]	@ (801f3d4 <_strtod_l+0x2ac>)
 801f240:	185b      	adds	r3, r3, r1
 801f242:	051b      	lsls	r3, r3, #20
 801f244:	431a      	orrs	r2, r3
 801f246:	0017      	movs	r7, r2
 801f248:	e7e8      	b.n	801f21c <_strtod_l+0xf4>
 801f24a:	4f60      	ldr	r7, [pc, #384]	@ (801f3cc <_strtod_l+0x2a4>)
 801f24c:	e7e6      	b.n	801f21c <_strtod_l+0xf4>
 801f24e:	2601      	movs	r6, #1
 801f250:	4f61      	ldr	r7, [pc, #388]	@ (801f3d8 <_strtod_l+0x2b0>)
 801f252:	4276      	negs	r6, r6
 801f254:	e7e2      	b.n	801f21c <_strtod_l+0xf4>
 801f256:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f258:	1c5a      	adds	r2, r3, #1
 801f25a:	921d      	str	r2, [sp, #116]	@ 0x74
 801f25c:	785b      	ldrb	r3, [r3, #1]
 801f25e:	2b30      	cmp	r3, #48	@ 0x30
 801f260:	d0f9      	beq.n	801f256 <_strtod_l+0x12e>
 801f262:	2b00      	cmp	r3, #0
 801f264:	d09b      	beq.n	801f19e <_strtod_l+0x76>
 801f266:	2301      	movs	r3, #1
 801f268:	930c      	str	r3, [sp, #48]	@ 0x30
 801f26a:	2500      	movs	r5, #0
 801f26c:	220a      	movs	r2, #10
 801f26e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f270:	950d      	str	r5, [sp, #52]	@ 0x34
 801f272:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f274:	9508      	str	r5, [sp, #32]
 801f276:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f278:	7804      	ldrb	r4, [r0, #0]
 801f27a:	0023      	movs	r3, r4
 801f27c:	3b30      	subs	r3, #48	@ 0x30
 801f27e:	b2d9      	uxtb	r1, r3
 801f280:	2909      	cmp	r1, #9
 801f282:	d927      	bls.n	801f2d4 <_strtod_l+0x1ac>
 801f284:	2201      	movs	r2, #1
 801f286:	4955      	ldr	r1, [pc, #340]	@ (801f3dc <_strtod_l+0x2b4>)
 801f288:	f001 fcf6 	bl	8020c78 <strncmp>
 801f28c:	2800      	cmp	r0, #0
 801f28e:	d031      	beq.n	801f2f4 <_strtod_l+0x1cc>
 801f290:	2000      	movs	r0, #0
 801f292:	0023      	movs	r3, r4
 801f294:	4684      	mov	ip, r0
 801f296:	9a08      	ldr	r2, [sp, #32]
 801f298:	900e      	str	r0, [sp, #56]	@ 0x38
 801f29a:	9206      	str	r2, [sp, #24]
 801f29c:	2220      	movs	r2, #32
 801f29e:	0019      	movs	r1, r3
 801f2a0:	4391      	bics	r1, r2
 801f2a2:	000a      	movs	r2, r1
 801f2a4:	2100      	movs	r1, #0
 801f2a6:	9107      	str	r1, [sp, #28]
 801f2a8:	2a45      	cmp	r2, #69	@ 0x45
 801f2aa:	d000      	beq.n	801f2ae <_strtod_l+0x186>
 801f2ac:	e0c0      	b.n	801f430 <_strtod_l+0x308>
 801f2ae:	9b06      	ldr	r3, [sp, #24]
 801f2b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f2b2:	4303      	orrs	r3, r0
 801f2b4:	4313      	orrs	r3, r2
 801f2b6:	428b      	cmp	r3, r1
 801f2b8:	d08d      	beq.n	801f1d6 <_strtod_l+0xae>
 801f2ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f2be:	3301      	adds	r3, #1
 801f2c0:	931d      	str	r3, [sp, #116]	@ 0x74
 801f2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2c4:	785b      	ldrb	r3, [r3, #1]
 801f2c6:	2b2b      	cmp	r3, #43	@ 0x2b
 801f2c8:	d070      	beq.n	801f3ac <_strtod_l+0x284>
 801f2ca:	000c      	movs	r4, r1
 801f2cc:	2b2d      	cmp	r3, #45	@ 0x2d
 801f2ce:	d173      	bne.n	801f3b8 <_strtod_l+0x290>
 801f2d0:	2401      	movs	r4, #1
 801f2d2:	e06c      	b.n	801f3ae <_strtod_l+0x286>
 801f2d4:	9908      	ldr	r1, [sp, #32]
 801f2d6:	2908      	cmp	r1, #8
 801f2d8:	dc09      	bgt.n	801f2ee <_strtod_l+0x1c6>
 801f2da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f2dc:	4351      	muls	r1, r2
 801f2de:	185b      	adds	r3, r3, r1
 801f2e0:	930d      	str	r3, [sp, #52]	@ 0x34
 801f2e2:	9b08      	ldr	r3, [sp, #32]
 801f2e4:	3001      	adds	r0, #1
 801f2e6:	3301      	adds	r3, #1
 801f2e8:	9308      	str	r3, [sp, #32]
 801f2ea:	901d      	str	r0, [sp, #116]	@ 0x74
 801f2ec:	e7c3      	b.n	801f276 <_strtod_l+0x14e>
 801f2ee:	4355      	muls	r5, r2
 801f2f0:	195d      	adds	r5, r3, r5
 801f2f2:	e7f6      	b.n	801f2e2 <_strtod_l+0x1ba>
 801f2f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f2f6:	1c5a      	adds	r2, r3, #1
 801f2f8:	921d      	str	r2, [sp, #116]	@ 0x74
 801f2fa:	9a08      	ldr	r2, [sp, #32]
 801f2fc:	785b      	ldrb	r3, [r3, #1]
 801f2fe:	2a00      	cmp	r2, #0
 801f300:	d03a      	beq.n	801f378 <_strtod_l+0x250>
 801f302:	900e      	str	r0, [sp, #56]	@ 0x38
 801f304:	9206      	str	r2, [sp, #24]
 801f306:	001a      	movs	r2, r3
 801f308:	3a30      	subs	r2, #48	@ 0x30
 801f30a:	2a09      	cmp	r2, #9
 801f30c:	d912      	bls.n	801f334 <_strtod_l+0x20c>
 801f30e:	2201      	movs	r2, #1
 801f310:	4694      	mov	ip, r2
 801f312:	e7c3      	b.n	801f29c <_strtod_l+0x174>
 801f314:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f316:	3001      	adds	r0, #1
 801f318:	1c5a      	adds	r2, r3, #1
 801f31a:	921d      	str	r2, [sp, #116]	@ 0x74
 801f31c:	785b      	ldrb	r3, [r3, #1]
 801f31e:	2b30      	cmp	r3, #48	@ 0x30
 801f320:	d0f8      	beq.n	801f314 <_strtod_l+0x1ec>
 801f322:	001a      	movs	r2, r3
 801f324:	3a31      	subs	r2, #49	@ 0x31
 801f326:	2a08      	cmp	r2, #8
 801f328:	d83b      	bhi.n	801f3a2 <_strtod_l+0x27a>
 801f32a:	900e      	str	r0, [sp, #56]	@ 0x38
 801f32c:	2000      	movs	r0, #0
 801f32e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f330:	9006      	str	r0, [sp, #24]
 801f332:	9213      	str	r2, [sp, #76]	@ 0x4c
 801f334:	001a      	movs	r2, r3
 801f336:	1c41      	adds	r1, r0, #1
 801f338:	3a30      	subs	r2, #48	@ 0x30
 801f33a:	2b30      	cmp	r3, #48	@ 0x30
 801f33c:	d016      	beq.n	801f36c <_strtod_l+0x244>
 801f33e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f340:	185b      	adds	r3, r3, r1
 801f342:	930e      	str	r3, [sp, #56]	@ 0x38
 801f344:	9b06      	ldr	r3, [sp, #24]
 801f346:	210a      	movs	r1, #10
 801f348:	469c      	mov	ip, r3
 801f34a:	4484      	add	ip, r0
 801f34c:	459c      	cmp	ip, r3
 801f34e:	d115      	bne.n	801f37c <_strtod_l+0x254>
 801f350:	9906      	ldr	r1, [sp, #24]
 801f352:	9b06      	ldr	r3, [sp, #24]
 801f354:	3101      	adds	r1, #1
 801f356:	1809      	adds	r1, r1, r0
 801f358:	181b      	adds	r3, r3, r0
 801f35a:	9106      	str	r1, [sp, #24]
 801f35c:	2b08      	cmp	r3, #8
 801f35e:	dc19      	bgt.n	801f394 <_strtod_l+0x26c>
 801f360:	230a      	movs	r3, #10
 801f362:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f364:	434b      	muls	r3, r1
 801f366:	2100      	movs	r1, #0
 801f368:	18d3      	adds	r3, r2, r3
 801f36a:	930d      	str	r3, [sp, #52]	@ 0x34
 801f36c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f36e:	0008      	movs	r0, r1
 801f370:	1c5a      	adds	r2, r3, #1
 801f372:	921d      	str	r2, [sp, #116]	@ 0x74
 801f374:	785b      	ldrb	r3, [r3, #1]
 801f376:	e7c6      	b.n	801f306 <_strtod_l+0x1de>
 801f378:	9808      	ldr	r0, [sp, #32]
 801f37a:	e7d0      	b.n	801f31e <_strtod_l+0x1f6>
 801f37c:	1c5c      	adds	r4, r3, #1
 801f37e:	2b08      	cmp	r3, #8
 801f380:	dc04      	bgt.n	801f38c <_strtod_l+0x264>
 801f382:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f384:	434b      	muls	r3, r1
 801f386:	930d      	str	r3, [sp, #52]	@ 0x34
 801f388:	0023      	movs	r3, r4
 801f38a:	e7df      	b.n	801f34c <_strtod_l+0x224>
 801f38c:	2c10      	cmp	r4, #16
 801f38e:	dcfb      	bgt.n	801f388 <_strtod_l+0x260>
 801f390:	434d      	muls	r5, r1
 801f392:	e7f9      	b.n	801f388 <_strtod_l+0x260>
 801f394:	2100      	movs	r1, #0
 801f396:	2b0f      	cmp	r3, #15
 801f398:	dce8      	bgt.n	801f36c <_strtod_l+0x244>
 801f39a:	230a      	movs	r3, #10
 801f39c:	435d      	muls	r5, r3
 801f39e:	1955      	adds	r5, r2, r5
 801f3a0:	e7e4      	b.n	801f36c <_strtod_l+0x244>
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	920e      	str	r2, [sp, #56]	@ 0x38
 801f3a6:	9206      	str	r2, [sp, #24]
 801f3a8:	3201      	adds	r2, #1
 801f3aa:	e7b1      	b.n	801f310 <_strtod_l+0x1e8>
 801f3ac:	2400      	movs	r4, #0
 801f3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3b0:	3302      	adds	r3, #2
 801f3b2:	931d      	str	r3, [sp, #116]	@ 0x74
 801f3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3b6:	789b      	ldrb	r3, [r3, #2]
 801f3b8:	001a      	movs	r2, r3
 801f3ba:	3a30      	subs	r2, #48	@ 0x30
 801f3bc:	2a09      	cmp	r2, #9
 801f3be:	d913      	bls.n	801f3e8 <_strtod_l+0x2c0>
 801f3c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3c2:	921d      	str	r2, [sp, #116]	@ 0x74
 801f3c4:	2200      	movs	r2, #0
 801f3c6:	e032      	b.n	801f42e <_strtod_l+0x306>
 801f3c8:	08026c7c 	.word	0x08026c7c
 801f3cc:	7ff00000 	.word	0x7ff00000
 801f3d0:	ffefffff 	.word	0xffefffff
 801f3d4:	00000433 	.word	0x00000433
 801f3d8:	7fffffff 	.word	0x7fffffff
 801f3dc:	08026c64 	.word	0x08026c64
 801f3e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f3e2:	1c5a      	adds	r2, r3, #1
 801f3e4:	921d      	str	r2, [sp, #116]	@ 0x74
 801f3e6:	785b      	ldrb	r3, [r3, #1]
 801f3e8:	2b30      	cmp	r3, #48	@ 0x30
 801f3ea:	d0f9      	beq.n	801f3e0 <_strtod_l+0x2b8>
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	9207      	str	r2, [sp, #28]
 801f3f0:	001a      	movs	r2, r3
 801f3f2:	3a31      	subs	r2, #49	@ 0x31
 801f3f4:	2a08      	cmp	r2, #8
 801f3f6:	d81b      	bhi.n	801f430 <_strtod_l+0x308>
 801f3f8:	3b30      	subs	r3, #48	@ 0x30
 801f3fa:	9310      	str	r3, [sp, #64]	@ 0x40
 801f3fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f3fe:	9307      	str	r3, [sp, #28]
 801f400:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f402:	1c59      	adds	r1, r3, #1
 801f404:	911d      	str	r1, [sp, #116]	@ 0x74
 801f406:	785b      	ldrb	r3, [r3, #1]
 801f408:	001a      	movs	r2, r3
 801f40a:	3a30      	subs	r2, #48	@ 0x30
 801f40c:	2a09      	cmp	r2, #9
 801f40e:	d93a      	bls.n	801f486 <_strtod_l+0x35e>
 801f410:	9a07      	ldr	r2, [sp, #28]
 801f412:	1a8a      	subs	r2, r1, r2
 801f414:	49b4      	ldr	r1, [pc, #720]	@ (801f6e8 <_strtod_l+0x5c0>)
 801f416:	9107      	str	r1, [sp, #28]
 801f418:	2a08      	cmp	r2, #8
 801f41a:	dc04      	bgt.n	801f426 <_strtod_l+0x2fe>
 801f41c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f41e:	9207      	str	r2, [sp, #28]
 801f420:	428a      	cmp	r2, r1
 801f422:	dd00      	ble.n	801f426 <_strtod_l+0x2fe>
 801f424:	9107      	str	r1, [sp, #28]
 801f426:	2c00      	cmp	r4, #0
 801f428:	d002      	beq.n	801f430 <_strtod_l+0x308>
 801f42a:	9a07      	ldr	r2, [sp, #28]
 801f42c:	4252      	negs	r2, r2
 801f42e:	9207      	str	r2, [sp, #28]
 801f430:	9a06      	ldr	r2, [sp, #24]
 801f432:	2a00      	cmp	r2, #0
 801f434:	d14d      	bne.n	801f4d2 <_strtod_l+0x3aa>
 801f436:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f438:	4310      	orrs	r0, r2
 801f43a:	d000      	beq.n	801f43e <_strtod_l+0x316>
 801f43c:	e6af      	b.n	801f19e <_strtod_l+0x76>
 801f43e:	4662      	mov	r2, ip
 801f440:	2a00      	cmp	r2, #0
 801f442:	d000      	beq.n	801f446 <_strtod_l+0x31e>
 801f444:	e6c7      	b.n	801f1d6 <_strtod_l+0xae>
 801f446:	2b69      	cmp	r3, #105	@ 0x69
 801f448:	d027      	beq.n	801f49a <_strtod_l+0x372>
 801f44a:	dc23      	bgt.n	801f494 <_strtod_l+0x36c>
 801f44c:	2b49      	cmp	r3, #73	@ 0x49
 801f44e:	d024      	beq.n	801f49a <_strtod_l+0x372>
 801f450:	2b4e      	cmp	r3, #78	@ 0x4e
 801f452:	d000      	beq.n	801f456 <_strtod_l+0x32e>
 801f454:	e6bf      	b.n	801f1d6 <_strtod_l+0xae>
 801f456:	49a5      	ldr	r1, [pc, #660]	@ (801f6ec <_strtod_l+0x5c4>)
 801f458:	a81d      	add	r0, sp, #116	@ 0x74
 801f45a:	f002 fe4d 	bl	80220f8 <__match>
 801f45e:	2800      	cmp	r0, #0
 801f460:	d100      	bne.n	801f464 <_strtod_l+0x33c>
 801f462:	e6b8      	b.n	801f1d6 <_strtod_l+0xae>
 801f464:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f466:	781b      	ldrb	r3, [r3, #0]
 801f468:	2b28      	cmp	r3, #40	@ 0x28
 801f46a:	d12c      	bne.n	801f4c6 <_strtod_l+0x39e>
 801f46c:	49a0      	ldr	r1, [pc, #640]	@ (801f6f0 <_strtod_l+0x5c8>)
 801f46e:	aa20      	add	r2, sp, #128	@ 0x80
 801f470:	a81d      	add	r0, sp, #116	@ 0x74
 801f472:	f002 fe55 	bl	8022120 <__hexnan>
 801f476:	2805      	cmp	r0, #5
 801f478:	d125      	bne.n	801f4c6 <_strtod_l+0x39e>
 801f47a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f47c:	4a9d      	ldr	r2, [pc, #628]	@ (801f6f4 <_strtod_l+0x5cc>)
 801f47e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f480:	431a      	orrs	r2, r3
 801f482:	0017      	movs	r7, r2
 801f484:	e68b      	b.n	801f19e <_strtod_l+0x76>
 801f486:	220a      	movs	r2, #10
 801f488:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f48a:	434a      	muls	r2, r1
 801f48c:	18d2      	adds	r2, r2, r3
 801f48e:	3a30      	subs	r2, #48	@ 0x30
 801f490:	9210      	str	r2, [sp, #64]	@ 0x40
 801f492:	e7b5      	b.n	801f400 <_strtod_l+0x2d8>
 801f494:	2b6e      	cmp	r3, #110	@ 0x6e
 801f496:	d0de      	beq.n	801f456 <_strtod_l+0x32e>
 801f498:	e69d      	b.n	801f1d6 <_strtod_l+0xae>
 801f49a:	4997      	ldr	r1, [pc, #604]	@ (801f6f8 <_strtod_l+0x5d0>)
 801f49c:	a81d      	add	r0, sp, #116	@ 0x74
 801f49e:	f002 fe2b 	bl	80220f8 <__match>
 801f4a2:	2800      	cmp	r0, #0
 801f4a4:	d100      	bne.n	801f4a8 <_strtod_l+0x380>
 801f4a6:	e696      	b.n	801f1d6 <_strtod_l+0xae>
 801f4a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f4aa:	4994      	ldr	r1, [pc, #592]	@ (801f6fc <_strtod_l+0x5d4>)
 801f4ac:	3b01      	subs	r3, #1
 801f4ae:	a81d      	add	r0, sp, #116	@ 0x74
 801f4b0:	931d      	str	r3, [sp, #116]	@ 0x74
 801f4b2:	f002 fe21 	bl	80220f8 <__match>
 801f4b6:	2800      	cmp	r0, #0
 801f4b8:	d102      	bne.n	801f4c0 <_strtod_l+0x398>
 801f4ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f4bc:	3301      	adds	r3, #1
 801f4be:	931d      	str	r3, [sp, #116]	@ 0x74
 801f4c0:	2600      	movs	r6, #0
 801f4c2:	4f8c      	ldr	r7, [pc, #560]	@ (801f6f4 <_strtod_l+0x5cc>)
 801f4c4:	e66b      	b.n	801f19e <_strtod_l+0x76>
 801f4c6:	488e      	ldr	r0, [pc, #568]	@ (801f700 <_strtod_l+0x5d8>)
 801f4c8:	f001 fca6 	bl	8020e18 <nan>
 801f4cc:	0006      	movs	r6, r0
 801f4ce:	000f      	movs	r7, r1
 801f4d0:	e665      	b.n	801f19e <_strtod_l+0x76>
 801f4d2:	9b07      	ldr	r3, [sp, #28]
 801f4d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f4d6:	1a9b      	subs	r3, r3, r2
 801f4d8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f4da:	9b08      	ldr	r3, [sp, #32]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d101      	bne.n	801f4e4 <_strtod_l+0x3bc>
 801f4e0:	9b06      	ldr	r3, [sp, #24]
 801f4e2:	9308      	str	r3, [sp, #32]
 801f4e4:	9c06      	ldr	r4, [sp, #24]
 801f4e6:	2c10      	cmp	r4, #16
 801f4e8:	dd00      	ble.n	801f4ec <_strtod_l+0x3c4>
 801f4ea:	2410      	movs	r4, #16
 801f4ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801f4ee:	f7e3 ff95 	bl	800341c <__aeabi_ui2d>
 801f4f2:	9b06      	ldr	r3, [sp, #24]
 801f4f4:	0006      	movs	r6, r0
 801f4f6:	000f      	movs	r7, r1
 801f4f8:	2b09      	cmp	r3, #9
 801f4fa:	dc13      	bgt.n	801f524 <_strtod_l+0x3fc>
 801f4fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d100      	bne.n	801f504 <_strtod_l+0x3dc>
 801f502:	e64c      	b.n	801f19e <_strtod_l+0x76>
 801f504:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f506:	2b00      	cmp	r3, #0
 801f508:	dc00      	bgt.n	801f50c <_strtod_l+0x3e4>
 801f50a:	e07e      	b.n	801f60a <_strtod_l+0x4e2>
 801f50c:	2b16      	cmp	r3, #22
 801f50e:	dc63      	bgt.n	801f5d8 <_strtod_l+0x4b0>
 801f510:	497c      	ldr	r1, [pc, #496]	@ (801f704 <_strtod_l+0x5dc>)
 801f512:	00db      	lsls	r3, r3, #3
 801f514:	18c9      	adds	r1, r1, r3
 801f516:	0032      	movs	r2, r6
 801f518:	6808      	ldr	r0, [r1, #0]
 801f51a:	6849      	ldr	r1, [r1, #4]
 801f51c:	003b      	movs	r3, r7
 801f51e:	f7e3 f88d 	bl	800263c <__aeabi_dmul>
 801f522:	e7d3      	b.n	801f4cc <_strtod_l+0x3a4>
 801f524:	0022      	movs	r2, r4
 801f526:	4b77      	ldr	r3, [pc, #476]	@ (801f704 <_strtod_l+0x5dc>)
 801f528:	3a09      	subs	r2, #9
 801f52a:	00d2      	lsls	r2, r2, #3
 801f52c:	189b      	adds	r3, r3, r2
 801f52e:	681a      	ldr	r2, [r3, #0]
 801f530:	685b      	ldr	r3, [r3, #4]
 801f532:	f7e3 f883 	bl	800263c <__aeabi_dmul>
 801f536:	0006      	movs	r6, r0
 801f538:	0028      	movs	r0, r5
 801f53a:	000f      	movs	r7, r1
 801f53c:	f7e3 ff6e 	bl	800341c <__aeabi_ui2d>
 801f540:	000b      	movs	r3, r1
 801f542:	0002      	movs	r2, r0
 801f544:	0039      	movs	r1, r7
 801f546:	0030      	movs	r0, r6
 801f548:	f7e2 f8d0 	bl	80016ec <__aeabi_dadd>
 801f54c:	9b06      	ldr	r3, [sp, #24]
 801f54e:	0006      	movs	r6, r0
 801f550:	000f      	movs	r7, r1
 801f552:	2b0f      	cmp	r3, #15
 801f554:	ddd2      	ble.n	801f4fc <_strtod_l+0x3d4>
 801f556:	9b06      	ldr	r3, [sp, #24]
 801f558:	1b1c      	subs	r4, r3, r4
 801f55a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f55c:	18e4      	adds	r4, r4, r3
 801f55e:	2c00      	cmp	r4, #0
 801f560:	dc00      	bgt.n	801f564 <_strtod_l+0x43c>
 801f562:	e09b      	b.n	801f69c <_strtod_l+0x574>
 801f564:	220f      	movs	r2, #15
 801f566:	0023      	movs	r3, r4
 801f568:	4013      	ands	r3, r2
 801f56a:	4214      	tst	r4, r2
 801f56c:	d00a      	beq.n	801f584 <_strtod_l+0x45c>
 801f56e:	4965      	ldr	r1, [pc, #404]	@ (801f704 <_strtod_l+0x5dc>)
 801f570:	00db      	lsls	r3, r3, #3
 801f572:	18c9      	adds	r1, r1, r3
 801f574:	0032      	movs	r2, r6
 801f576:	6808      	ldr	r0, [r1, #0]
 801f578:	6849      	ldr	r1, [r1, #4]
 801f57a:	003b      	movs	r3, r7
 801f57c:	f7e3 f85e 	bl	800263c <__aeabi_dmul>
 801f580:	0006      	movs	r6, r0
 801f582:	000f      	movs	r7, r1
 801f584:	230f      	movs	r3, #15
 801f586:	439c      	bics	r4, r3
 801f588:	d073      	beq.n	801f672 <_strtod_l+0x54a>
 801f58a:	3326      	adds	r3, #38	@ 0x26
 801f58c:	33ff      	adds	r3, #255	@ 0xff
 801f58e:	429c      	cmp	r4, r3
 801f590:	dd4b      	ble.n	801f62a <_strtod_l+0x502>
 801f592:	2300      	movs	r3, #0
 801f594:	9306      	str	r3, [sp, #24]
 801f596:	9307      	str	r3, [sp, #28]
 801f598:	930d      	str	r3, [sp, #52]	@ 0x34
 801f59a:	9308      	str	r3, [sp, #32]
 801f59c:	2322      	movs	r3, #34	@ 0x22
 801f59e:	2600      	movs	r6, #0
 801f5a0:	9a05      	ldr	r2, [sp, #20]
 801f5a2:	4f54      	ldr	r7, [pc, #336]	@ (801f6f4 <_strtod_l+0x5cc>)
 801f5a4:	6013      	str	r3, [r2, #0]
 801f5a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f5a8:	42b3      	cmp	r3, r6
 801f5aa:	d100      	bne.n	801f5ae <_strtod_l+0x486>
 801f5ac:	e5f7      	b.n	801f19e <_strtod_l+0x76>
 801f5ae:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f5b0:	9805      	ldr	r0, [sp, #20]
 801f5b2:	f002 ff6f 	bl	8022494 <_Bfree>
 801f5b6:	9908      	ldr	r1, [sp, #32]
 801f5b8:	9805      	ldr	r0, [sp, #20]
 801f5ba:	f002 ff6b 	bl	8022494 <_Bfree>
 801f5be:	9907      	ldr	r1, [sp, #28]
 801f5c0:	9805      	ldr	r0, [sp, #20]
 801f5c2:	f002 ff67 	bl	8022494 <_Bfree>
 801f5c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f5c8:	9805      	ldr	r0, [sp, #20]
 801f5ca:	f002 ff63 	bl	8022494 <_Bfree>
 801f5ce:	9906      	ldr	r1, [sp, #24]
 801f5d0:	9805      	ldr	r0, [sp, #20]
 801f5d2:	f002 ff5f 	bl	8022494 <_Bfree>
 801f5d6:	e5e2      	b.n	801f19e <_strtod_l+0x76>
 801f5d8:	2325      	movs	r3, #37	@ 0x25
 801f5da:	9a06      	ldr	r2, [sp, #24]
 801f5dc:	1a9b      	subs	r3, r3, r2
 801f5de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	dbb8      	blt.n	801f556 <_strtod_l+0x42e>
 801f5e4:	240f      	movs	r4, #15
 801f5e6:	9b06      	ldr	r3, [sp, #24]
 801f5e8:	4d46      	ldr	r5, [pc, #280]	@ (801f704 <_strtod_l+0x5dc>)
 801f5ea:	1ae4      	subs	r4, r4, r3
 801f5ec:	00e1      	lsls	r1, r4, #3
 801f5ee:	1869      	adds	r1, r5, r1
 801f5f0:	0032      	movs	r2, r6
 801f5f2:	6808      	ldr	r0, [r1, #0]
 801f5f4:	6849      	ldr	r1, [r1, #4]
 801f5f6:	003b      	movs	r3, r7
 801f5f8:	f7e3 f820 	bl	800263c <__aeabi_dmul>
 801f5fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5fe:	1b1c      	subs	r4, r3, r4
 801f600:	00e4      	lsls	r4, r4, #3
 801f602:	192d      	adds	r5, r5, r4
 801f604:	682a      	ldr	r2, [r5, #0]
 801f606:	686b      	ldr	r3, [r5, #4]
 801f608:	e789      	b.n	801f51e <_strtod_l+0x3f6>
 801f60a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f60c:	3316      	adds	r3, #22
 801f60e:	dba2      	blt.n	801f556 <_strtod_l+0x42e>
 801f610:	9907      	ldr	r1, [sp, #28]
 801f612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f614:	4b3b      	ldr	r3, [pc, #236]	@ (801f704 <_strtod_l+0x5dc>)
 801f616:	1a52      	subs	r2, r2, r1
 801f618:	00d2      	lsls	r2, r2, #3
 801f61a:	189b      	adds	r3, r3, r2
 801f61c:	0030      	movs	r0, r6
 801f61e:	681a      	ldr	r2, [r3, #0]
 801f620:	685b      	ldr	r3, [r3, #4]
 801f622:	0039      	movs	r1, r7
 801f624:	f7e2 fbc6 	bl	8001db4 <__aeabi_ddiv>
 801f628:	e750      	b.n	801f4cc <_strtod_l+0x3a4>
 801f62a:	2300      	movs	r3, #0
 801f62c:	0030      	movs	r0, r6
 801f62e:	0039      	movs	r1, r7
 801f630:	4d35      	ldr	r5, [pc, #212]	@ (801f708 <_strtod_l+0x5e0>)
 801f632:	1124      	asrs	r4, r4, #4
 801f634:	9309      	str	r3, [sp, #36]	@ 0x24
 801f636:	2c01      	cmp	r4, #1
 801f638:	dc1e      	bgt.n	801f678 <_strtod_l+0x550>
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	d001      	beq.n	801f642 <_strtod_l+0x51a>
 801f63e:	0006      	movs	r6, r0
 801f640:	000f      	movs	r7, r1
 801f642:	4b32      	ldr	r3, [pc, #200]	@ (801f70c <_strtod_l+0x5e4>)
 801f644:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f646:	18ff      	adds	r7, r7, r3
 801f648:	4b2f      	ldr	r3, [pc, #188]	@ (801f708 <_strtod_l+0x5e0>)
 801f64a:	00d5      	lsls	r5, r2, #3
 801f64c:	195d      	adds	r5, r3, r5
 801f64e:	0032      	movs	r2, r6
 801f650:	6828      	ldr	r0, [r5, #0]
 801f652:	6869      	ldr	r1, [r5, #4]
 801f654:	003b      	movs	r3, r7
 801f656:	f7e2 fff1 	bl	800263c <__aeabi_dmul>
 801f65a:	4b26      	ldr	r3, [pc, #152]	@ (801f6f4 <_strtod_l+0x5cc>)
 801f65c:	4a2c      	ldr	r2, [pc, #176]	@ (801f710 <_strtod_l+0x5e8>)
 801f65e:	0006      	movs	r6, r0
 801f660:	400b      	ands	r3, r1
 801f662:	4293      	cmp	r3, r2
 801f664:	d895      	bhi.n	801f592 <_strtod_l+0x46a>
 801f666:	4a2b      	ldr	r2, [pc, #172]	@ (801f714 <_strtod_l+0x5ec>)
 801f668:	4293      	cmp	r3, r2
 801f66a:	d913      	bls.n	801f694 <_strtod_l+0x56c>
 801f66c:	2601      	movs	r6, #1
 801f66e:	4f2a      	ldr	r7, [pc, #168]	@ (801f718 <_strtod_l+0x5f0>)
 801f670:	4276      	negs	r6, r6
 801f672:	2300      	movs	r3, #0
 801f674:	9309      	str	r3, [sp, #36]	@ 0x24
 801f676:	e086      	b.n	801f786 <_strtod_l+0x65e>
 801f678:	2201      	movs	r2, #1
 801f67a:	4214      	tst	r4, r2
 801f67c:	d004      	beq.n	801f688 <_strtod_l+0x560>
 801f67e:	682a      	ldr	r2, [r5, #0]
 801f680:	686b      	ldr	r3, [r5, #4]
 801f682:	f7e2 ffdb 	bl	800263c <__aeabi_dmul>
 801f686:	2301      	movs	r3, #1
 801f688:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f68a:	1064      	asrs	r4, r4, #1
 801f68c:	3201      	adds	r2, #1
 801f68e:	9209      	str	r2, [sp, #36]	@ 0x24
 801f690:	3508      	adds	r5, #8
 801f692:	e7d0      	b.n	801f636 <_strtod_l+0x50e>
 801f694:	23d4      	movs	r3, #212	@ 0xd4
 801f696:	049b      	lsls	r3, r3, #18
 801f698:	18cf      	adds	r7, r1, r3
 801f69a:	e7ea      	b.n	801f672 <_strtod_l+0x54a>
 801f69c:	2c00      	cmp	r4, #0
 801f69e:	d0e8      	beq.n	801f672 <_strtod_l+0x54a>
 801f6a0:	4264      	negs	r4, r4
 801f6a2:	230f      	movs	r3, #15
 801f6a4:	0022      	movs	r2, r4
 801f6a6:	401a      	ands	r2, r3
 801f6a8:	421c      	tst	r4, r3
 801f6aa:	d00a      	beq.n	801f6c2 <_strtod_l+0x59a>
 801f6ac:	4b15      	ldr	r3, [pc, #84]	@ (801f704 <_strtod_l+0x5dc>)
 801f6ae:	00d2      	lsls	r2, r2, #3
 801f6b0:	189b      	adds	r3, r3, r2
 801f6b2:	0030      	movs	r0, r6
 801f6b4:	681a      	ldr	r2, [r3, #0]
 801f6b6:	685b      	ldr	r3, [r3, #4]
 801f6b8:	0039      	movs	r1, r7
 801f6ba:	f7e2 fb7b 	bl	8001db4 <__aeabi_ddiv>
 801f6be:	0006      	movs	r6, r0
 801f6c0:	000f      	movs	r7, r1
 801f6c2:	1124      	asrs	r4, r4, #4
 801f6c4:	d0d5      	beq.n	801f672 <_strtod_l+0x54a>
 801f6c6:	2c1f      	cmp	r4, #31
 801f6c8:	dd28      	ble.n	801f71c <_strtod_l+0x5f4>
 801f6ca:	2300      	movs	r3, #0
 801f6cc:	9306      	str	r3, [sp, #24]
 801f6ce:	9307      	str	r3, [sp, #28]
 801f6d0:	930d      	str	r3, [sp, #52]	@ 0x34
 801f6d2:	9308      	str	r3, [sp, #32]
 801f6d4:	2322      	movs	r3, #34	@ 0x22
 801f6d6:	9a05      	ldr	r2, [sp, #20]
 801f6d8:	2600      	movs	r6, #0
 801f6da:	6013      	str	r3, [r2, #0]
 801f6dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f6de:	2700      	movs	r7, #0
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d000      	beq.n	801f6e6 <_strtod_l+0x5be>
 801f6e4:	e763      	b.n	801f5ae <_strtod_l+0x486>
 801f6e6:	e55a      	b.n	801f19e <_strtod_l+0x76>
 801f6e8:	00004e1f 	.word	0x00004e1f
 801f6ec:	08026dc6 	.word	0x08026dc6
 801f6f0:	08026c68 	.word	0x08026c68
 801f6f4:	7ff00000 	.word	0x7ff00000
 801f6f8:	08026dbe 	.word	0x08026dbe
 801f6fc:	08026df8 	.word	0x08026df8
 801f700:	08027084 	.word	0x08027084
 801f704:	08026f70 	.word	0x08026f70
 801f708:	08026f48 	.word	0x08026f48
 801f70c:	fcb00000 	.word	0xfcb00000
 801f710:	7ca00000 	.word	0x7ca00000
 801f714:	7c900000 	.word	0x7c900000
 801f718:	7fefffff 	.word	0x7fefffff
 801f71c:	2310      	movs	r3, #16
 801f71e:	0022      	movs	r2, r4
 801f720:	401a      	ands	r2, r3
 801f722:	9209      	str	r2, [sp, #36]	@ 0x24
 801f724:	421c      	tst	r4, r3
 801f726:	d001      	beq.n	801f72c <_strtod_l+0x604>
 801f728:	335a      	adds	r3, #90	@ 0x5a
 801f72a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f72c:	0030      	movs	r0, r6
 801f72e:	0039      	movs	r1, r7
 801f730:	2300      	movs	r3, #0
 801f732:	4dbf      	ldr	r5, [pc, #764]	@ (801fa30 <_strtod_l+0x908>)
 801f734:	2201      	movs	r2, #1
 801f736:	4214      	tst	r4, r2
 801f738:	d004      	beq.n	801f744 <_strtod_l+0x61c>
 801f73a:	682a      	ldr	r2, [r5, #0]
 801f73c:	686b      	ldr	r3, [r5, #4]
 801f73e:	f7e2 ff7d 	bl	800263c <__aeabi_dmul>
 801f742:	2301      	movs	r3, #1
 801f744:	1064      	asrs	r4, r4, #1
 801f746:	3508      	adds	r5, #8
 801f748:	2c00      	cmp	r4, #0
 801f74a:	d1f3      	bne.n	801f734 <_strtod_l+0x60c>
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	d001      	beq.n	801f754 <_strtod_l+0x62c>
 801f750:	0006      	movs	r6, r0
 801f752:	000f      	movs	r7, r1
 801f754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f756:	2b00      	cmp	r3, #0
 801f758:	d00d      	beq.n	801f776 <_strtod_l+0x64e>
 801f75a:	236b      	movs	r3, #107	@ 0x6b
 801f75c:	007a      	lsls	r2, r7, #1
 801f75e:	0d52      	lsrs	r2, r2, #21
 801f760:	0039      	movs	r1, r7
 801f762:	1a9b      	subs	r3, r3, r2
 801f764:	2b00      	cmp	r3, #0
 801f766:	dd06      	ble.n	801f776 <_strtod_l+0x64e>
 801f768:	2b1f      	cmp	r3, #31
 801f76a:	dd5a      	ble.n	801f822 <_strtod_l+0x6fa>
 801f76c:	2600      	movs	r6, #0
 801f76e:	2b34      	cmp	r3, #52	@ 0x34
 801f770:	dd50      	ble.n	801f814 <_strtod_l+0x6ec>
 801f772:	27dc      	movs	r7, #220	@ 0xdc
 801f774:	04bf      	lsls	r7, r7, #18
 801f776:	2200      	movs	r2, #0
 801f778:	2300      	movs	r3, #0
 801f77a:	0030      	movs	r0, r6
 801f77c:	0039      	movs	r1, r7
 801f77e:	f7e0 fe97 	bl	80004b0 <__aeabi_dcmpeq>
 801f782:	2800      	cmp	r0, #0
 801f784:	d1a1      	bne.n	801f6ca <_strtod_l+0x5a2>
 801f786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f788:	9a08      	ldr	r2, [sp, #32]
 801f78a:	9300      	str	r3, [sp, #0]
 801f78c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f78e:	9b06      	ldr	r3, [sp, #24]
 801f790:	9805      	ldr	r0, [sp, #20]
 801f792:	f002 fee7 	bl	8022564 <__s2b>
 801f796:	900d      	str	r0, [sp, #52]	@ 0x34
 801f798:	2800      	cmp	r0, #0
 801f79a:	d100      	bne.n	801f79e <_strtod_l+0x676>
 801f79c:	e6f9      	b.n	801f592 <_strtod_l+0x46a>
 801f79e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7a0:	9907      	ldr	r1, [sp, #28]
 801f7a2:	17da      	asrs	r2, r3, #31
 801f7a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7a6:	1a5b      	subs	r3, r3, r1
 801f7a8:	401a      	ands	r2, r3
 801f7aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7ac:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f7ae:	43db      	mvns	r3, r3
 801f7b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7b2:	17db      	asrs	r3, r3, #31
 801f7b4:	401a      	ands	r2, r3
 801f7b6:	2300      	movs	r3, #0
 801f7b8:	921a      	str	r2, [sp, #104]	@ 0x68
 801f7ba:	9306      	str	r3, [sp, #24]
 801f7bc:	9307      	str	r3, [sp, #28]
 801f7be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7c0:	9805      	ldr	r0, [sp, #20]
 801f7c2:	6859      	ldr	r1, [r3, #4]
 801f7c4:	f002 fe22 	bl	802240c <_Balloc>
 801f7c8:	9008      	str	r0, [sp, #32]
 801f7ca:	2800      	cmp	r0, #0
 801f7cc:	d100      	bne.n	801f7d0 <_strtod_l+0x6a8>
 801f7ce:	e6e5      	b.n	801f59c <_strtod_l+0x474>
 801f7d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7d2:	300c      	adds	r0, #12
 801f7d4:	0019      	movs	r1, r3
 801f7d6:	691a      	ldr	r2, [r3, #16]
 801f7d8:	310c      	adds	r1, #12
 801f7da:	3202      	adds	r2, #2
 801f7dc:	0092      	lsls	r2, r2, #2
 801f7de:	f001 fb11 	bl	8020e04 <memcpy>
 801f7e2:	ab20      	add	r3, sp, #128	@ 0x80
 801f7e4:	9301      	str	r3, [sp, #4]
 801f7e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f7e8:	9300      	str	r3, [sp, #0]
 801f7ea:	0032      	movs	r2, r6
 801f7ec:	003b      	movs	r3, r7
 801f7ee:	9805      	ldr	r0, [sp, #20]
 801f7f0:	9610      	str	r6, [sp, #64]	@ 0x40
 801f7f2:	9711      	str	r7, [sp, #68]	@ 0x44
 801f7f4:	f003 fa06 	bl	8022c04 <__d2b>
 801f7f8:	901e      	str	r0, [sp, #120]	@ 0x78
 801f7fa:	2800      	cmp	r0, #0
 801f7fc:	d100      	bne.n	801f800 <_strtod_l+0x6d8>
 801f7fe:	e6cd      	b.n	801f59c <_strtod_l+0x474>
 801f800:	2101      	movs	r1, #1
 801f802:	9805      	ldr	r0, [sp, #20]
 801f804:	f002 ff4a 	bl	802269c <__i2b>
 801f808:	9007      	str	r0, [sp, #28]
 801f80a:	2800      	cmp	r0, #0
 801f80c:	d10e      	bne.n	801f82c <_strtod_l+0x704>
 801f80e:	2300      	movs	r3, #0
 801f810:	9307      	str	r3, [sp, #28]
 801f812:	e6c3      	b.n	801f59c <_strtod_l+0x474>
 801f814:	234b      	movs	r3, #75	@ 0x4b
 801f816:	1a9a      	subs	r2, r3, r2
 801f818:	3b4c      	subs	r3, #76	@ 0x4c
 801f81a:	4093      	lsls	r3, r2
 801f81c:	4019      	ands	r1, r3
 801f81e:	000f      	movs	r7, r1
 801f820:	e7a9      	b.n	801f776 <_strtod_l+0x64e>
 801f822:	2201      	movs	r2, #1
 801f824:	4252      	negs	r2, r2
 801f826:	409a      	lsls	r2, r3
 801f828:	4016      	ands	r6, r2
 801f82a:	e7a4      	b.n	801f776 <_strtod_l+0x64e>
 801f82c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f82e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f830:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801f832:	1ad4      	subs	r4, r2, r3
 801f834:	2b00      	cmp	r3, #0
 801f836:	db01      	blt.n	801f83c <_strtod_l+0x714>
 801f838:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f83a:	195d      	adds	r5, r3, r5
 801f83c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f83e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f840:	1a5b      	subs	r3, r3, r1
 801f842:	2136      	movs	r1, #54	@ 0x36
 801f844:	189b      	adds	r3, r3, r2
 801f846:	1a8a      	subs	r2, r1, r2
 801f848:	497a      	ldr	r1, [pc, #488]	@ (801fa34 <_strtod_l+0x90c>)
 801f84a:	2001      	movs	r0, #1
 801f84c:	468c      	mov	ip, r1
 801f84e:	2100      	movs	r1, #0
 801f850:	3b01      	subs	r3, #1
 801f852:	9116      	str	r1, [sp, #88]	@ 0x58
 801f854:	9014      	str	r0, [sp, #80]	@ 0x50
 801f856:	4563      	cmp	r3, ip
 801f858:	da06      	bge.n	801f868 <_strtod_l+0x740>
 801f85a:	4661      	mov	r1, ip
 801f85c:	1ac9      	subs	r1, r1, r3
 801f85e:	1a52      	subs	r2, r2, r1
 801f860:	291f      	cmp	r1, #31
 801f862:	dc3f      	bgt.n	801f8e4 <_strtod_l+0x7bc>
 801f864:	4088      	lsls	r0, r1
 801f866:	9014      	str	r0, [sp, #80]	@ 0x50
 801f868:	18ab      	adds	r3, r5, r2
 801f86a:	930e      	str	r3, [sp, #56]	@ 0x38
 801f86c:	18a4      	adds	r4, r4, r2
 801f86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f872:	191c      	adds	r4, r3, r4
 801f874:	002b      	movs	r3, r5
 801f876:	4295      	cmp	r5, r2
 801f878:	dd00      	ble.n	801f87c <_strtod_l+0x754>
 801f87a:	0013      	movs	r3, r2
 801f87c:	42a3      	cmp	r3, r4
 801f87e:	dd00      	ble.n	801f882 <_strtod_l+0x75a>
 801f880:	0023      	movs	r3, r4
 801f882:	2b00      	cmp	r3, #0
 801f884:	dd04      	ble.n	801f890 <_strtod_l+0x768>
 801f886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f888:	1ae4      	subs	r4, r4, r3
 801f88a:	1ad2      	subs	r2, r2, r3
 801f88c:	920e      	str	r2, [sp, #56]	@ 0x38
 801f88e:	1aed      	subs	r5, r5, r3
 801f890:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f892:	2b00      	cmp	r3, #0
 801f894:	dd16      	ble.n	801f8c4 <_strtod_l+0x79c>
 801f896:	001a      	movs	r2, r3
 801f898:	9907      	ldr	r1, [sp, #28]
 801f89a:	9805      	ldr	r0, [sp, #20]
 801f89c:	f002 ffc8 	bl	8022830 <__pow5mult>
 801f8a0:	9007      	str	r0, [sp, #28]
 801f8a2:	2800      	cmp	r0, #0
 801f8a4:	d0b3      	beq.n	801f80e <_strtod_l+0x6e6>
 801f8a6:	0001      	movs	r1, r0
 801f8a8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f8aa:	9805      	ldr	r0, [sp, #20]
 801f8ac:	f002 ff0e 	bl	80226cc <__multiply>
 801f8b0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f8b2:	2800      	cmp	r0, #0
 801f8b4:	d100      	bne.n	801f8b8 <_strtod_l+0x790>
 801f8b6:	e671      	b.n	801f59c <_strtod_l+0x474>
 801f8b8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f8ba:	9805      	ldr	r0, [sp, #20]
 801f8bc:	f002 fdea 	bl	8022494 <_Bfree>
 801f8c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8c2:	931e      	str	r3, [sp, #120]	@ 0x78
 801f8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	dc12      	bgt.n	801f8f0 <_strtod_l+0x7c8>
 801f8ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	dd18      	ble.n	801f902 <_strtod_l+0x7da>
 801f8d0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f8d2:	9908      	ldr	r1, [sp, #32]
 801f8d4:	9805      	ldr	r0, [sp, #20]
 801f8d6:	f002 ffab 	bl	8022830 <__pow5mult>
 801f8da:	9008      	str	r0, [sp, #32]
 801f8dc:	2800      	cmp	r0, #0
 801f8de:	d110      	bne.n	801f902 <_strtod_l+0x7da>
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	e65a      	b.n	801f59a <_strtod_l+0x472>
 801f8e4:	4954      	ldr	r1, [pc, #336]	@ (801fa38 <_strtod_l+0x910>)
 801f8e6:	1acb      	subs	r3, r1, r3
 801f8e8:	0001      	movs	r1, r0
 801f8ea:	4099      	lsls	r1, r3
 801f8ec:	9116      	str	r1, [sp, #88]	@ 0x58
 801f8ee:	e7ba      	b.n	801f866 <_strtod_l+0x73e>
 801f8f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f8f2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f8f4:	9805      	ldr	r0, [sp, #20]
 801f8f6:	f002 fff7 	bl	80228e8 <__lshift>
 801f8fa:	901e      	str	r0, [sp, #120]	@ 0x78
 801f8fc:	2800      	cmp	r0, #0
 801f8fe:	d1e4      	bne.n	801f8ca <_strtod_l+0x7a2>
 801f900:	e64c      	b.n	801f59c <_strtod_l+0x474>
 801f902:	2c00      	cmp	r4, #0
 801f904:	dd07      	ble.n	801f916 <_strtod_l+0x7ee>
 801f906:	0022      	movs	r2, r4
 801f908:	9908      	ldr	r1, [sp, #32]
 801f90a:	9805      	ldr	r0, [sp, #20]
 801f90c:	f002 ffec 	bl	80228e8 <__lshift>
 801f910:	9008      	str	r0, [sp, #32]
 801f912:	2800      	cmp	r0, #0
 801f914:	d0e4      	beq.n	801f8e0 <_strtod_l+0x7b8>
 801f916:	2d00      	cmp	r5, #0
 801f918:	dd08      	ble.n	801f92c <_strtod_l+0x804>
 801f91a:	002a      	movs	r2, r5
 801f91c:	9907      	ldr	r1, [sp, #28]
 801f91e:	9805      	ldr	r0, [sp, #20]
 801f920:	f002 ffe2 	bl	80228e8 <__lshift>
 801f924:	9007      	str	r0, [sp, #28]
 801f926:	2800      	cmp	r0, #0
 801f928:	d100      	bne.n	801f92c <_strtod_l+0x804>
 801f92a:	e637      	b.n	801f59c <_strtod_l+0x474>
 801f92c:	9a08      	ldr	r2, [sp, #32]
 801f92e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f930:	9805      	ldr	r0, [sp, #20]
 801f932:	f003 f861 	bl	80229f8 <__mdiff>
 801f936:	9006      	str	r0, [sp, #24]
 801f938:	2800      	cmp	r0, #0
 801f93a:	d100      	bne.n	801f93e <_strtod_l+0x816>
 801f93c:	e62e      	b.n	801f59c <_strtod_l+0x474>
 801f93e:	68c3      	ldr	r3, [r0, #12]
 801f940:	9907      	ldr	r1, [sp, #28]
 801f942:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f944:	2300      	movs	r3, #0
 801f946:	60c3      	str	r3, [r0, #12]
 801f948:	f003 f83a 	bl	80229c0 <__mcmp>
 801f94c:	2800      	cmp	r0, #0
 801f94e:	da3b      	bge.n	801f9c8 <_strtod_l+0x8a0>
 801f950:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f952:	4333      	orrs	r3, r6
 801f954:	d167      	bne.n	801fa26 <_strtod_l+0x8fe>
 801f956:	033b      	lsls	r3, r7, #12
 801f958:	d165      	bne.n	801fa26 <_strtod_l+0x8fe>
 801f95a:	22d6      	movs	r2, #214	@ 0xd6
 801f95c:	4b37      	ldr	r3, [pc, #220]	@ (801fa3c <_strtod_l+0x914>)
 801f95e:	04d2      	lsls	r2, r2, #19
 801f960:	403b      	ands	r3, r7
 801f962:	4293      	cmp	r3, r2
 801f964:	d95f      	bls.n	801fa26 <_strtod_l+0x8fe>
 801f966:	9b06      	ldr	r3, [sp, #24]
 801f968:	695b      	ldr	r3, [r3, #20]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d103      	bne.n	801f976 <_strtod_l+0x84e>
 801f96e:	9b06      	ldr	r3, [sp, #24]
 801f970:	691b      	ldr	r3, [r3, #16]
 801f972:	2b01      	cmp	r3, #1
 801f974:	dd57      	ble.n	801fa26 <_strtod_l+0x8fe>
 801f976:	9906      	ldr	r1, [sp, #24]
 801f978:	2201      	movs	r2, #1
 801f97a:	9805      	ldr	r0, [sp, #20]
 801f97c:	f002 ffb4 	bl	80228e8 <__lshift>
 801f980:	9907      	ldr	r1, [sp, #28]
 801f982:	9006      	str	r0, [sp, #24]
 801f984:	f003 f81c 	bl	80229c0 <__mcmp>
 801f988:	2800      	cmp	r0, #0
 801f98a:	dd4c      	ble.n	801fa26 <_strtod_l+0x8fe>
 801f98c:	4b2b      	ldr	r3, [pc, #172]	@ (801fa3c <_strtod_l+0x914>)
 801f98e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f990:	403b      	ands	r3, r7
 801f992:	2a00      	cmp	r2, #0
 801f994:	d074      	beq.n	801fa80 <_strtod_l+0x958>
 801f996:	22d6      	movs	r2, #214	@ 0xd6
 801f998:	04d2      	lsls	r2, r2, #19
 801f99a:	4293      	cmp	r3, r2
 801f99c:	d870      	bhi.n	801fa80 <_strtod_l+0x958>
 801f99e:	22dc      	movs	r2, #220	@ 0xdc
 801f9a0:	0492      	lsls	r2, r2, #18
 801f9a2:	4293      	cmp	r3, r2
 801f9a4:	d800      	bhi.n	801f9a8 <_strtod_l+0x880>
 801f9a6:	e695      	b.n	801f6d4 <_strtod_l+0x5ac>
 801f9a8:	0030      	movs	r0, r6
 801f9aa:	0039      	movs	r1, r7
 801f9ac:	4b24      	ldr	r3, [pc, #144]	@ (801fa40 <_strtod_l+0x918>)
 801f9ae:	2200      	movs	r2, #0
 801f9b0:	f7e2 fe44 	bl	800263c <__aeabi_dmul>
 801f9b4:	4b21      	ldr	r3, [pc, #132]	@ (801fa3c <_strtod_l+0x914>)
 801f9b6:	0006      	movs	r6, r0
 801f9b8:	000f      	movs	r7, r1
 801f9ba:	420b      	tst	r3, r1
 801f9bc:	d000      	beq.n	801f9c0 <_strtod_l+0x898>
 801f9be:	e5f6      	b.n	801f5ae <_strtod_l+0x486>
 801f9c0:	2322      	movs	r3, #34	@ 0x22
 801f9c2:	9a05      	ldr	r2, [sp, #20]
 801f9c4:	6013      	str	r3, [r2, #0]
 801f9c6:	e5f2      	b.n	801f5ae <_strtod_l+0x486>
 801f9c8:	970e      	str	r7, [sp, #56]	@ 0x38
 801f9ca:	2800      	cmp	r0, #0
 801f9cc:	d175      	bne.n	801faba <_strtod_l+0x992>
 801f9ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f9d0:	033b      	lsls	r3, r7, #12
 801f9d2:	0b1b      	lsrs	r3, r3, #12
 801f9d4:	2a00      	cmp	r2, #0
 801f9d6:	d039      	beq.n	801fa4c <_strtod_l+0x924>
 801f9d8:	4a1a      	ldr	r2, [pc, #104]	@ (801fa44 <_strtod_l+0x91c>)
 801f9da:	4293      	cmp	r3, r2
 801f9dc:	d138      	bne.n	801fa50 <_strtod_l+0x928>
 801f9de:	2101      	movs	r1, #1
 801f9e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9e2:	4249      	negs	r1, r1
 801f9e4:	0032      	movs	r2, r6
 801f9e6:	0008      	movs	r0, r1
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	d00b      	beq.n	801fa04 <_strtod_l+0x8dc>
 801f9ec:	24d4      	movs	r4, #212	@ 0xd4
 801f9ee:	4b13      	ldr	r3, [pc, #76]	@ (801fa3c <_strtod_l+0x914>)
 801f9f0:	0008      	movs	r0, r1
 801f9f2:	403b      	ands	r3, r7
 801f9f4:	04e4      	lsls	r4, r4, #19
 801f9f6:	42a3      	cmp	r3, r4
 801f9f8:	d804      	bhi.n	801fa04 <_strtod_l+0x8dc>
 801f9fa:	306c      	adds	r0, #108	@ 0x6c
 801f9fc:	0d1b      	lsrs	r3, r3, #20
 801f9fe:	1ac3      	subs	r3, r0, r3
 801fa00:	4099      	lsls	r1, r3
 801fa02:	0008      	movs	r0, r1
 801fa04:	4282      	cmp	r2, r0
 801fa06:	d123      	bne.n	801fa50 <_strtod_l+0x928>
 801fa08:	4b0f      	ldr	r3, [pc, #60]	@ (801fa48 <_strtod_l+0x920>)
 801fa0a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fa0c:	4299      	cmp	r1, r3
 801fa0e:	d102      	bne.n	801fa16 <_strtod_l+0x8ee>
 801fa10:	3201      	adds	r2, #1
 801fa12:	d100      	bne.n	801fa16 <_strtod_l+0x8ee>
 801fa14:	e5c2      	b.n	801f59c <_strtod_l+0x474>
 801fa16:	4b09      	ldr	r3, [pc, #36]	@ (801fa3c <_strtod_l+0x914>)
 801fa18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa1a:	2600      	movs	r6, #0
 801fa1c:	401a      	ands	r2, r3
 801fa1e:	0013      	movs	r3, r2
 801fa20:	2280      	movs	r2, #128	@ 0x80
 801fa22:	0352      	lsls	r2, r2, #13
 801fa24:	189f      	adds	r7, r3, r2
 801fa26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d1bd      	bne.n	801f9a8 <_strtod_l+0x880>
 801fa2c:	e5bf      	b.n	801f5ae <_strtod_l+0x486>
 801fa2e:	46c0      	nop			@ (mov r8, r8)
 801fa30:	08026c90 	.word	0x08026c90
 801fa34:	fffffc02 	.word	0xfffffc02
 801fa38:	fffffbe2 	.word	0xfffffbe2
 801fa3c:	7ff00000 	.word	0x7ff00000
 801fa40:	39500000 	.word	0x39500000
 801fa44:	000fffff 	.word	0x000fffff
 801fa48:	7fefffff 	.word	0x7fefffff
 801fa4c:	4333      	orrs	r3, r6
 801fa4e:	d09d      	beq.n	801f98c <_strtod_l+0x864>
 801fa50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d01c      	beq.n	801fa90 <_strtod_l+0x968>
 801fa56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa58:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fa5a:	4213      	tst	r3, r2
 801fa5c:	d0e3      	beq.n	801fa26 <_strtod_l+0x8fe>
 801fa5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fa60:	0030      	movs	r0, r6
 801fa62:	0039      	movs	r1, r7
 801fa64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d016      	beq.n	801fa98 <_strtod_l+0x970>
 801fa6a:	f7ff fb45 	bl	801f0f8 <sulp>
 801fa6e:	0002      	movs	r2, r0
 801fa70:	000b      	movs	r3, r1
 801fa72:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa74:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fa76:	f7e1 fe39 	bl	80016ec <__aeabi_dadd>
 801fa7a:	0006      	movs	r6, r0
 801fa7c:	000f      	movs	r7, r1
 801fa7e:	e7d2      	b.n	801fa26 <_strtod_l+0x8fe>
 801fa80:	2601      	movs	r6, #1
 801fa82:	4a92      	ldr	r2, [pc, #584]	@ (801fccc <_strtod_l+0xba4>)
 801fa84:	4276      	negs	r6, r6
 801fa86:	189b      	adds	r3, r3, r2
 801fa88:	4a91      	ldr	r2, [pc, #580]	@ (801fcd0 <_strtod_l+0xba8>)
 801fa8a:	431a      	orrs	r2, r3
 801fa8c:	0017      	movs	r7, r2
 801fa8e:	e7ca      	b.n	801fa26 <_strtod_l+0x8fe>
 801fa90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fa92:	4233      	tst	r3, r6
 801fa94:	d0c7      	beq.n	801fa26 <_strtod_l+0x8fe>
 801fa96:	e7e2      	b.n	801fa5e <_strtod_l+0x936>
 801fa98:	f7ff fb2e 	bl	801f0f8 <sulp>
 801fa9c:	0002      	movs	r2, r0
 801fa9e:	000b      	movs	r3, r1
 801faa0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801faa2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801faa4:	f7e3 f892 	bl	8002bcc <__aeabi_dsub>
 801faa8:	2200      	movs	r2, #0
 801faaa:	2300      	movs	r3, #0
 801faac:	0006      	movs	r6, r0
 801faae:	000f      	movs	r7, r1
 801fab0:	f7e0 fcfe 	bl	80004b0 <__aeabi_dcmpeq>
 801fab4:	2800      	cmp	r0, #0
 801fab6:	d0b6      	beq.n	801fa26 <_strtod_l+0x8fe>
 801fab8:	e60c      	b.n	801f6d4 <_strtod_l+0x5ac>
 801faba:	9907      	ldr	r1, [sp, #28]
 801fabc:	9806      	ldr	r0, [sp, #24]
 801fabe:	f003 f901 	bl	8022cc4 <__ratio>
 801fac2:	2380      	movs	r3, #128	@ 0x80
 801fac4:	2200      	movs	r2, #0
 801fac6:	05db      	lsls	r3, r3, #23
 801fac8:	0004      	movs	r4, r0
 801faca:	000d      	movs	r5, r1
 801facc:	f7e0 fd00 	bl	80004d0 <__aeabi_dcmple>
 801fad0:	2800      	cmp	r0, #0
 801fad2:	d06c      	beq.n	801fbae <_strtod_l+0xa86>
 801fad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d177      	bne.n	801fbca <_strtod_l+0xaa2>
 801fada:	2e00      	cmp	r6, #0
 801fadc:	d157      	bne.n	801fb8e <_strtod_l+0xa66>
 801fade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fae0:	031b      	lsls	r3, r3, #12
 801fae2:	d15a      	bne.n	801fb9a <_strtod_l+0xa72>
 801fae4:	2200      	movs	r2, #0
 801fae6:	0020      	movs	r0, r4
 801fae8:	0029      	movs	r1, r5
 801faea:	4b7a      	ldr	r3, [pc, #488]	@ (801fcd4 <_strtod_l+0xbac>)
 801faec:	f7e0 fce6 	bl	80004bc <__aeabi_dcmplt>
 801faf0:	2800      	cmp	r0, #0
 801faf2:	d159      	bne.n	801fba8 <_strtod_l+0xa80>
 801faf4:	0020      	movs	r0, r4
 801faf6:	0029      	movs	r1, r5
 801faf8:	2200      	movs	r2, #0
 801fafa:	4b77      	ldr	r3, [pc, #476]	@ (801fcd8 <_strtod_l+0xbb0>)
 801fafc:	f7e2 fd9e 	bl	800263c <__aeabi_dmul>
 801fb00:	0004      	movs	r4, r0
 801fb02:	000d      	movs	r5, r1
 801fb04:	2380      	movs	r3, #128	@ 0x80
 801fb06:	061b      	lsls	r3, r3, #24
 801fb08:	18eb      	adds	r3, r5, r3
 801fb0a:	940a      	str	r4, [sp, #40]	@ 0x28
 801fb0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fb0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb12:	9214      	str	r2, [sp, #80]	@ 0x50
 801fb14:	9315      	str	r3, [sp, #84]	@ 0x54
 801fb16:	4a71      	ldr	r2, [pc, #452]	@ (801fcdc <_strtod_l+0xbb4>)
 801fb18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb1a:	4013      	ands	r3, r2
 801fb1c:	9316      	str	r3, [sp, #88]	@ 0x58
 801fb1e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fb20:	4b6f      	ldr	r3, [pc, #444]	@ (801fce0 <_strtod_l+0xbb8>)
 801fb22:	429a      	cmp	r2, r3
 801fb24:	d000      	beq.n	801fb28 <_strtod_l+0xa00>
 801fb26:	e087      	b.n	801fc38 <_strtod_l+0xb10>
 801fb28:	4a6e      	ldr	r2, [pc, #440]	@ (801fce4 <_strtod_l+0xbbc>)
 801fb2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb2c:	4694      	mov	ip, r2
 801fb2e:	4463      	add	r3, ip
 801fb30:	001f      	movs	r7, r3
 801fb32:	0030      	movs	r0, r6
 801fb34:	0019      	movs	r1, r3
 801fb36:	f002 fff9 	bl	8022b2c <__ulp>
 801fb3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb3e:	f7e2 fd7d 	bl	800263c <__aeabi_dmul>
 801fb42:	0032      	movs	r2, r6
 801fb44:	003b      	movs	r3, r7
 801fb46:	f7e1 fdd1 	bl	80016ec <__aeabi_dadd>
 801fb4a:	4a64      	ldr	r2, [pc, #400]	@ (801fcdc <_strtod_l+0xbb4>)
 801fb4c:	4b66      	ldr	r3, [pc, #408]	@ (801fce8 <_strtod_l+0xbc0>)
 801fb4e:	0006      	movs	r6, r0
 801fb50:	400a      	ands	r2, r1
 801fb52:	429a      	cmp	r2, r3
 801fb54:	d940      	bls.n	801fbd8 <_strtod_l+0xab0>
 801fb56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fb58:	4a64      	ldr	r2, [pc, #400]	@ (801fcec <_strtod_l+0xbc4>)
 801fb5a:	4293      	cmp	r3, r2
 801fb5c:	d103      	bne.n	801fb66 <_strtod_l+0xa3e>
 801fb5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fb60:	3301      	adds	r3, #1
 801fb62:	d100      	bne.n	801fb66 <_strtod_l+0xa3e>
 801fb64:	e51a      	b.n	801f59c <_strtod_l+0x474>
 801fb66:	2601      	movs	r6, #1
 801fb68:	4f60      	ldr	r7, [pc, #384]	@ (801fcec <_strtod_l+0xbc4>)
 801fb6a:	4276      	negs	r6, r6
 801fb6c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801fb6e:	9805      	ldr	r0, [sp, #20]
 801fb70:	f002 fc90 	bl	8022494 <_Bfree>
 801fb74:	9908      	ldr	r1, [sp, #32]
 801fb76:	9805      	ldr	r0, [sp, #20]
 801fb78:	f002 fc8c 	bl	8022494 <_Bfree>
 801fb7c:	9907      	ldr	r1, [sp, #28]
 801fb7e:	9805      	ldr	r0, [sp, #20]
 801fb80:	f002 fc88 	bl	8022494 <_Bfree>
 801fb84:	9906      	ldr	r1, [sp, #24]
 801fb86:	9805      	ldr	r0, [sp, #20]
 801fb88:	f002 fc84 	bl	8022494 <_Bfree>
 801fb8c:	e617      	b.n	801f7be <_strtod_l+0x696>
 801fb8e:	2e01      	cmp	r6, #1
 801fb90:	d103      	bne.n	801fb9a <_strtod_l+0xa72>
 801fb92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d100      	bne.n	801fb9a <_strtod_l+0xa72>
 801fb98:	e59c      	b.n	801f6d4 <_strtod_l+0x5ac>
 801fb9a:	2300      	movs	r3, #0
 801fb9c:	4c54      	ldr	r4, [pc, #336]	@ (801fcf0 <_strtod_l+0xbc8>)
 801fb9e:	4d4d      	ldr	r5, [pc, #308]	@ (801fcd4 <_strtod_l+0xbac>)
 801fba0:	930a      	str	r3, [sp, #40]	@ 0x28
 801fba2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fba4:	2400      	movs	r4, #0
 801fba6:	e7b2      	b.n	801fb0e <_strtod_l+0x9e6>
 801fba8:	2400      	movs	r4, #0
 801fbaa:	4d4b      	ldr	r5, [pc, #300]	@ (801fcd8 <_strtod_l+0xbb0>)
 801fbac:	e7aa      	b.n	801fb04 <_strtod_l+0x9dc>
 801fbae:	0020      	movs	r0, r4
 801fbb0:	0029      	movs	r1, r5
 801fbb2:	4b49      	ldr	r3, [pc, #292]	@ (801fcd8 <_strtod_l+0xbb0>)
 801fbb4:	2200      	movs	r2, #0
 801fbb6:	f7e2 fd41 	bl	800263c <__aeabi_dmul>
 801fbba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fbbc:	0004      	movs	r4, r0
 801fbbe:	000d      	movs	r5, r1
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d09f      	beq.n	801fb04 <_strtod_l+0x9dc>
 801fbc4:	940a      	str	r4, [sp, #40]	@ 0x28
 801fbc6:	950b      	str	r5, [sp, #44]	@ 0x2c
 801fbc8:	e7a1      	b.n	801fb0e <_strtod_l+0x9e6>
 801fbca:	2300      	movs	r3, #0
 801fbcc:	4c41      	ldr	r4, [pc, #260]	@ (801fcd4 <_strtod_l+0xbac>)
 801fbce:	0025      	movs	r5, r4
 801fbd0:	930a      	str	r3, [sp, #40]	@ 0x28
 801fbd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fbd4:	001c      	movs	r4, r3
 801fbd6:	e79a      	b.n	801fb0e <_strtod_l+0x9e6>
 801fbd8:	23d4      	movs	r3, #212	@ 0xd4
 801fbda:	049b      	lsls	r3, r3, #18
 801fbdc:	18cf      	adds	r7, r1, r3
 801fbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbe0:	9710      	str	r7, [sp, #64]	@ 0x40
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d1c2      	bne.n	801fb6c <_strtod_l+0xa44>
 801fbe6:	4b3d      	ldr	r3, [pc, #244]	@ (801fcdc <_strtod_l+0xbb4>)
 801fbe8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fbea:	403b      	ands	r3, r7
 801fbec:	429a      	cmp	r2, r3
 801fbee:	d1bd      	bne.n	801fb6c <_strtod_l+0xa44>
 801fbf0:	0020      	movs	r0, r4
 801fbf2:	0029      	movs	r1, r5
 801fbf4:	f7e0 fd48 	bl	8000688 <__aeabi_d2lz>
 801fbf8:	f7e0 fd80 	bl	80006fc <__aeabi_l2d>
 801fbfc:	0002      	movs	r2, r0
 801fbfe:	000b      	movs	r3, r1
 801fc00:	0020      	movs	r0, r4
 801fc02:	0029      	movs	r1, r5
 801fc04:	f7e2 ffe2 	bl	8002bcc <__aeabi_dsub>
 801fc08:	033c      	lsls	r4, r7, #12
 801fc0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc0c:	0b24      	lsrs	r4, r4, #12
 801fc0e:	4334      	orrs	r4, r6
 801fc10:	900e      	str	r0, [sp, #56]	@ 0x38
 801fc12:	910f      	str	r1, [sp, #60]	@ 0x3c
 801fc14:	4a37      	ldr	r2, [pc, #220]	@ (801fcf4 <_strtod_l+0xbcc>)
 801fc16:	431c      	orrs	r4, r3
 801fc18:	d052      	beq.n	801fcc0 <_strtod_l+0xb98>
 801fc1a:	4b37      	ldr	r3, [pc, #220]	@ (801fcf8 <_strtod_l+0xbd0>)
 801fc1c:	f7e0 fc4e 	bl	80004bc <__aeabi_dcmplt>
 801fc20:	2800      	cmp	r0, #0
 801fc22:	d000      	beq.n	801fc26 <_strtod_l+0xafe>
 801fc24:	e4c3      	b.n	801f5ae <_strtod_l+0x486>
 801fc26:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801fc28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fc2a:	4a34      	ldr	r2, [pc, #208]	@ (801fcfc <_strtod_l+0xbd4>)
 801fc2c:	4b2a      	ldr	r3, [pc, #168]	@ (801fcd8 <_strtod_l+0xbb0>)
 801fc2e:	f7e0 fc59 	bl	80004e4 <__aeabi_dcmpgt>
 801fc32:	2800      	cmp	r0, #0
 801fc34:	d09a      	beq.n	801fb6c <_strtod_l+0xa44>
 801fc36:	e4ba      	b.n	801f5ae <_strtod_l+0x486>
 801fc38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d02a      	beq.n	801fc94 <_strtod_l+0xb6c>
 801fc3e:	23d4      	movs	r3, #212	@ 0xd4
 801fc40:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fc42:	04db      	lsls	r3, r3, #19
 801fc44:	429a      	cmp	r2, r3
 801fc46:	d825      	bhi.n	801fc94 <_strtod_l+0xb6c>
 801fc48:	0020      	movs	r0, r4
 801fc4a:	0029      	movs	r1, r5
 801fc4c:	4a2c      	ldr	r2, [pc, #176]	@ (801fd00 <_strtod_l+0xbd8>)
 801fc4e:	4b2d      	ldr	r3, [pc, #180]	@ (801fd04 <_strtod_l+0xbdc>)
 801fc50:	f7e0 fc3e 	bl	80004d0 <__aeabi_dcmple>
 801fc54:	2800      	cmp	r0, #0
 801fc56:	d016      	beq.n	801fc86 <_strtod_l+0xb5e>
 801fc58:	0020      	movs	r0, r4
 801fc5a:	0029      	movs	r1, r5
 801fc5c:	f7e0 fcf6 	bl	800064c <__aeabi_d2uiz>
 801fc60:	2800      	cmp	r0, #0
 801fc62:	d100      	bne.n	801fc66 <_strtod_l+0xb3e>
 801fc64:	3001      	adds	r0, #1
 801fc66:	f7e3 fbd9 	bl	800341c <__aeabi_ui2d>
 801fc6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc6c:	0004      	movs	r4, r0
 801fc6e:	000d      	movs	r5, r1
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d122      	bne.n	801fcba <_strtod_l+0xb92>
 801fc74:	2380      	movs	r3, #128	@ 0x80
 801fc76:	061b      	lsls	r3, r3, #24
 801fc78:	18cb      	adds	r3, r1, r3
 801fc7a:	9018      	str	r0, [sp, #96]	@ 0x60
 801fc7c:	9319      	str	r3, [sp, #100]	@ 0x64
 801fc7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fc80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc82:	9214      	str	r2, [sp, #80]	@ 0x50
 801fc84:	9315      	str	r3, [sp, #84]	@ 0x54
 801fc86:	22d6      	movs	r2, #214	@ 0xd6
 801fc88:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fc8a:	04d2      	lsls	r2, r2, #19
 801fc8c:	189b      	adds	r3, r3, r2
 801fc8e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fc90:	1a9b      	subs	r3, r3, r2
 801fc92:	9315      	str	r3, [sp, #84]	@ 0x54
 801fc94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fc96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fc98:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fc9a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801fc9c:	f002 ff46 	bl	8022b2c <__ulp>
 801fca0:	0002      	movs	r2, r0
 801fca2:	000b      	movs	r3, r1
 801fca4:	0030      	movs	r0, r6
 801fca6:	0039      	movs	r1, r7
 801fca8:	f7e2 fcc8 	bl	800263c <__aeabi_dmul>
 801fcac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fcae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fcb0:	f7e1 fd1c 	bl	80016ec <__aeabi_dadd>
 801fcb4:	0006      	movs	r6, r0
 801fcb6:	000f      	movs	r7, r1
 801fcb8:	e791      	b.n	801fbde <_strtod_l+0xab6>
 801fcba:	9418      	str	r4, [sp, #96]	@ 0x60
 801fcbc:	9519      	str	r5, [sp, #100]	@ 0x64
 801fcbe:	e7de      	b.n	801fc7e <_strtod_l+0xb56>
 801fcc0:	4b11      	ldr	r3, [pc, #68]	@ (801fd08 <_strtod_l+0xbe0>)
 801fcc2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801fcc4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fcc6:	f7e0 fbf9 	bl	80004bc <__aeabi_dcmplt>
 801fcca:	e7b2      	b.n	801fc32 <_strtod_l+0xb0a>
 801fccc:	fff00000 	.word	0xfff00000
 801fcd0:	000fffff 	.word	0x000fffff
 801fcd4:	3ff00000 	.word	0x3ff00000
 801fcd8:	3fe00000 	.word	0x3fe00000
 801fcdc:	7ff00000 	.word	0x7ff00000
 801fce0:	7fe00000 	.word	0x7fe00000
 801fce4:	fcb00000 	.word	0xfcb00000
 801fce8:	7c9fffff 	.word	0x7c9fffff
 801fcec:	7fefffff 	.word	0x7fefffff
 801fcf0:	bff00000 	.word	0xbff00000
 801fcf4:	94a03595 	.word	0x94a03595
 801fcf8:	3fdfffff 	.word	0x3fdfffff
 801fcfc:	35afe535 	.word	0x35afe535
 801fd00:	ffc00000 	.word	0xffc00000
 801fd04:	41dfffff 	.word	0x41dfffff
 801fd08:	3fcfffff 	.word	0x3fcfffff

0801fd0c <strtod>:
 801fd0c:	b510      	push	{r4, lr}
 801fd0e:	4c04      	ldr	r4, [pc, #16]	@ (801fd20 <strtod+0x14>)
 801fd10:	000a      	movs	r2, r1
 801fd12:	0001      	movs	r1, r0
 801fd14:	4b03      	ldr	r3, [pc, #12]	@ (801fd24 <strtod+0x18>)
 801fd16:	6820      	ldr	r0, [r4, #0]
 801fd18:	f7ff fa06 	bl	801f128 <_strtod_l>
 801fd1c:	bd10      	pop	{r4, pc}
 801fd1e:	46c0      	nop			@ (mov r8, r8)
 801fd20:	200003d0 	.word	0x200003d0
 801fd24:	20000264 	.word	0x20000264

0801fd28 <_strtol_l.constprop.0>:
 801fd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd2a:	b085      	sub	sp, #20
 801fd2c:	0017      	movs	r7, r2
 801fd2e:	001e      	movs	r6, r3
 801fd30:	9003      	str	r0, [sp, #12]
 801fd32:	9101      	str	r1, [sp, #4]
 801fd34:	2b24      	cmp	r3, #36	@ 0x24
 801fd36:	d844      	bhi.n	801fdc2 <_strtol_l.constprop.0+0x9a>
 801fd38:	000c      	movs	r4, r1
 801fd3a:	2b01      	cmp	r3, #1
 801fd3c:	d041      	beq.n	801fdc2 <_strtol_l.constprop.0+0x9a>
 801fd3e:	4b3d      	ldr	r3, [pc, #244]	@ (801fe34 <_strtol_l.constprop.0+0x10c>)
 801fd40:	2208      	movs	r2, #8
 801fd42:	469c      	mov	ip, r3
 801fd44:	0023      	movs	r3, r4
 801fd46:	4661      	mov	r1, ip
 801fd48:	781d      	ldrb	r5, [r3, #0]
 801fd4a:	3401      	adds	r4, #1
 801fd4c:	5d48      	ldrb	r0, [r1, r5]
 801fd4e:	0001      	movs	r1, r0
 801fd50:	4011      	ands	r1, r2
 801fd52:	4210      	tst	r0, r2
 801fd54:	d1f6      	bne.n	801fd44 <_strtol_l.constprop.0+0x1c>
 801fd56:	2d2d      	cmp	r5, #45	@ 0x2d
 801fd58:	d13a      	bne.n	801fdd0 <_strtol_l.constprop.0+0xa8>
 801fd5a:	7825      	ldrb	r5, [r4, #0]
 801fd5c:	1c9c      	adds	r4, r3, #2
 801fd5e:	2301      	movs	r3, #1
 801fd60:	9300      	str	r3, [sp, #0]
 801fd62:	2210      	movs	r2, #16
 801fd64:	0033      	movs	r3, r6
 801fd66:	4393      	bics	r3, r2
 801fd68:	d109      	bne.n	801fd7e <_strtol_l.constprop.0+0x56>
 801fd6a:	2d30      	cmp	r5, #48	@ 0x30
 801fd6c:	d136      	bne.n	801fddc <_strtol_l.constprop.0+0xb4>
 801fd6e:	2120      	movs	r1, #32
 801fd70:	7823      	ldrb	r3, [r4, #0]
 801fd72:	438b      	bics	r3, r1
 801fd74:	2b58      	cmp	r3, #88	@ 0x58
 801fd76:	d131      	bne.n	801fddc <_strtol_l.constprop.0+0xb4>
 801fd78:	0016      	movs	r6, r2
 801fd7a:	7865      	ldrb	r5, [r4, #1]
 801fd7c:	3402      	adds	r4, #2
 801fd7e:	4a2e      	ldr	r2, [pc, #184]	@ (801fe38 <_strtol_l.constprop.0+0x110>)
 801fd80:	9b00      	ldr	r3, [sp, #0]
 801fd82:	4694      	mov	ip, r2
 801fd84:	4463      	add	r3, ip
 801fd86:	0031      	movs	r1, r6
 801fd88:	0018      	movs	r0, r3
 801fd8a:	9302      	str	r3, [sp, #8]
 801fd8c:	f7e0 fa90 	bl	80002b0 <__aeabi_uidivmod>
 801fd90:	2200      	movs	r2, #0
 801fd92:	4684      	mov	ip, r0
 801fd94:	0010      	movs	r0, r2
 801fd96:	002b      	movs	r3, r5
 801fd98:	3b30      	subs	r3, #48	@ 0x30
 801fd9a:	2b09      	cmp	r3, #9
 801fd9c:	d825      	bhi.n	801fdea <_strtol_l.constprop.0+0xc2>
 801fd9e:	001d      	movs	r5, r3
 801fda0:	42ae      	cmp	r6, r5
 801fda2:	dd31      	ble.n	801fe08 <_strtol_l.constprop.0+0xe0>
 801fda4:	1c53      	adds	r3, r2, #1
 801fda6:	d009      	beq.n	801fdbc <_strtol_l.constprop.0+0x94>
 801fda8:	2201      	movs	r2, #1
 801fdaa:	4252      	negs	r2, r2
 801fdac:	4584      	cmp	ip, r0
 801fdae:	d305      	bcc.n	801fdbc <_strtol_l.constprop.0+0x94>
 801fdb0:	d101      	bne.n	801fdb6 <_strtol_l.constprop.0+0x8e>
 801fdb2:	42a9      	cmp	r1, r5
 801fdb4:	db25      	blt.n	801fe02 <_strtol_l.constprop.0+0xda>
 801fdb6:	2201      	movs	r2, #1
 801fdb8:	4370      	muls	r0, r6
 801fdba:	1828      	adds	r0, r5, r0
 801fdbc:	7825      	ldrb	r5, [r4, #0]
 801fdbe:	3401      	adds	r4, #1
 801fdc0:	e7e9      	b.n	801fd96 <_strtol_l.constprop.0+0x6e>
 801fdc2:	f000 ffe7 	bl	8020d94 <__errno>
 801fdc6:	2316      	movs	r3, #22
 801fdc8:	6003      	str	r3, [r0, #0]
 801fdca:	2000      	movs	r0, #0
 801fdcc:	b005      	add	sp, #20
 801fdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fdd0:	9100      	str	r1, [sp, #0]
 801fdd2:	2d2b      	cmp	r5, #43	@ 0x2b
 801fdd4:	d1c5      	bne.n	801fd62 <_strtol_l.constprop.0+0x3a>
 801fdd6:	7825      	ldrb	r5, [r4, #0]
 801fdd8:	1c9c      	adds	r4, r3, #2
 801fdda:	e7c2      	b.n	801fd62 <_strtol_l.constprop.0+0x3a>
 801fddc:	2e00      	cmp	r6, #0
 801fdde:	d1ce      	bne.n	801fd7e <_strtol_l.constprop.0+0x56>
 801fde0:	3608      	adds	r6, #8
 801fde2:	2d30      	cmp	r5, #48	@ 0x30
 801fde4:	d0cb      	beq.n	801fd7e <_strtol_l.constprop.0+0x56>
 801fde6:	3602      	adds	r6, #2
 801fde8:	e7c9      	b.n	801fd7e <_strtol_l.constprop.0+0x56>
 801fdea:	002b      	movs	r3, r5
 801fdec:	3b41      	subs	r3, #65	@ 0x41
 801fdee:	2b19      	cmp	r3, #25
 801fdf0:	d801      	bhi.n	801fdf6 <_strtol_l.constprop.0+0xce>
 801fdf2:	3d37      	subs	r5, #55	@ 0x37
 801fdf4:	e7d4      	b.n	801fda0 <_strtol_l.constprop.0+0x78>
 801fdf6:	002b      	movs	r3, r5
 801fdf8:	3b61      	subs	r3, #97	@ 0x61
 801fdfa:	2b19      	cmp	r3, #25
 801fdfc:	d804      	bhi.n	801fe08 <_strtol_l.constprop.0+0xe0>
 801fdfe:	3d57      	subs	r5, #87	@ 0x57
 801fe00:	e7ce      	b.n	801fda0 <_strtol_l.constprop.0+0x78>
 801fe02:	2201      	movs	r2, #1
 801fe04:	4252      	negs	r2, r2
 801fe06:	e7d9      	b.n	801fdbc <_strtol_l.constprop.0+0x94>
 801fe08:	1c53      	adds	r3, r2, #1
 801fe0a:	d108      	bne.n	801fe1e <_strtol_l.constprop.0+0xf6>
 801fe0c:	2322      	movs	r3, #34	@ 0x22
 801fe0e:	9a03      	ldr	r2, [sp, #12]
 801fe10:	9802      	ldr	r0, [sp, #8]
 801fe12:	6013      	str	r3, [r2, #0]
 801fe14:	2f00      	cmp	r7, #0
 801fe16:	d0d9      	beq.n	801fdcc <_strtol_l.constprop.0+0xa4>
 801fe18:	1e63      	subs	r3, r4, #1
 801fe1a:	9301      	str	r3, [sp, #4]
 801fe1c:	e007      	b.n	801fe2e <_strtol_l.constprop.0+0x106>
 801fe1e:	9b00      	ldr	r3, [sp, #0]
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d000      	beq.n	801fe26 <_strtol_l.constprop.0+0xfe>
 801fe24:	4240      	negs	r0, r0
 801fe26:	2f00      	cmp	r7, #0
 801fe28:	d0d0      	beq.n	801fdcc <_strtol_l.constprop.0+0xa4>
 801fe2a:	2a00      	cmp	r2, #0
 801fe2c:	d1f4      	bne.n	801fe18 <_strtol_l.constprop.0+0xf0>
 801fe2e:	9b01      	ldr	r3, [sp, #4]
 801fe30:	603b      	str	r3, [r7, #0]
 801fe32:	e7cb      	b.n	801fdcc <_strtol_l.constprop.0+0xa4>
 801fe34:	08026cb9 	.word	0x08026cb9
 801fe38:	7fffffff 	.word	0x7fffffff

0801fe3c <strtol>:
 801fe3c:	b510      	push	{r4, lr}
 801fe3e:	4c04      	ldr	r4, [pc, #16]	@ (801fe50 <strtol+0x14>)
 801fe40:	0013      	movs	r3, r2
 801fe42:	000a      	movs	r2, r1
 801fe44:	0001      	movs	r1, r0
 801fe46:	6820      	ldr	r0, [r4, #0]
 801fe48:	f7ff ff6e 	bl	801fd28 <_strtol_l.constprop.0>
 801fe4c:	bd10      	pop	{r4, pc}
 801fe4e:	46c0      	nop			@ (mov r8, r8)
 801fe50:	200003d0 	.word	0x200003d0

0801fe54 <__cvt>:
 801fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe56:	001f      	movs	r7, r3
 801fe58:	2300      	movs	r3, #0
 801fe5a:	0016      	movs	r6, r2
 801fe5c:	b08b      	sub	sp, #44	@ 0x2c
 801fe5e:	429f      	cmp	r7, r3
 801fe60:	da04      	bge.n	801fe6c <__cvt+0x18>
 801fe62:	2180      	movs	r1, #128	@ 0x80
 801fe64:	0609      	lsls	r1, r1, #24
 801fe66:	187b      	adds	r3, r7, r1
 801fe68:	001f      	movs	r7, r3
 801fe6a:	232d      	movs	r3, #45	@ 0x2d
 801fe6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fe6e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fe70:	7013      	strb	r3, [r2, #0]
 801fe72:	2320      	movs	r3, #32
 801fe74:	2203      	movs	r2, #3
 801fe76:	439d      	bics	r5, r3
 801fe78:	2d46      	cmp	r5, #70	@ 0x46
 801fe7a:	d007      	beq.n	801fe8c <__cvt+0x38>
 801fe7c:	002b      	movs	r3, r5
 801fe7e:	3b45      	subs	r3, #69	@ 0x45
 801fe80:	4259      	negs	r1, r3
 801fe82:	414b      	adcs	r3, r1
 801fe84:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fe86:	3a01      	subs	r2, #1
 801fe88:	18cb      	adds	r3, r1, r3
 801fe8a:	9310      	str	r3, [sp, #64]	@ 0x40
 801fe8c:	ab09      	add	r3, sp, #36	@ 0x24
 801fe8e:	9304      	str	r3, [sp, #16]
 801fe90:	ab08      	add	r3, sp, #32
 801fe92:	9303      	str	r3, [sp, #12]
 801fe94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fe96:	9200      	str	r2, [sp, #0]
 801fe98:	9302      	str	r3, [sp, #8]
 801fe9a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fe9c:	0032      	movs	r2, r6
 801fe9e:	9301      	str	r3, [sp, #4]
 801fea0:	003b      	movs	r3, r7
 801fea2:	f001 f84d 	bl	8020f40 <_dtoa_r>
 801fea6:	0004      	movs	r4, r0
 801fea8:	2d47      	cmp	r5, #71	@ 0x47
 801feaa:	d11b      	bne.n	801fee4 <__cvt+0x90>
 801feac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801feae:	07db      	lsls	r3, r3, #31
 801feb0:	d511      	bpl.n	801fed6 <__cvt+0x82>
 801feb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801feb4:	18c3      	adds	r3, r0, r3
 801feb6:	9307      	str	r3, [sp, #28]
 801feb8:	2200      	movs	r2, #0
 801feba:	2300      	movs	r3, #0
 801febc:	0030      	movs	r0, r6
 801febe:	0039      	movs	r1, r7
 801fec0:	f7e0 faf6 	bl	80004b0 <__aeabi_dcmpeq>
 801fec4:	2800      	cmp	r0, #0
 801fec6:	d001      	beq.n	801fecc <__cvt+0x78>
 801fec8:	9b07      	ldr	r3, [sp, #28]
 801feca:	9309      	str	r3, [sp, #36]	@ 0x24
 801fecc:	2230      	movs	r2, #48	@ 0x30
 801fece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fed0:	9907      	ldr	r1, [sp, #28]
 801fed2:	428b      	cmp	r3, r1
 801fed4:	d320      	bcc.n	801ff18 <__cvt+0xc4>
 801fed6:	0020      	movs	r0, r4
 801fed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801feda:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fedc:	1b1b      	subs	r3, r3, r4
 801fede:	6013      	str	r3, [r2, #0]
 801fee0:	b00b      	add	sp, #44	@ 0x2c
 801fee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fee4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fee6:	18c3      	adds	r3, r0, r3
 801fee8:	9307      	str	r3, [sp, #28]
 801feea:	2d46      	cmp	r5, #70	@ 0x46
 801feec:	d1e4      	bne.n	801feb8 <__cvt+0x64>
 801feee:	7803      	ldrb	r3, [r0, #0]
 801fef0:	2b30      	cmp	r3, #48	@ 0x30
 801fef2:	d10c      	bne.n	801ff0e <__cvt+0xba>
 801fef4:	2200      	movs	r2, #0
 801fef6:	2300      	movs	r3, #0
 801fef8:	0030      	movs	r0, r6
 801fefa:	0039      	movs	r1, r7
 801fefc:	f7e0 fad8 	bl	80004b0 <__aeabi_dcmpeq>
 801ff00:	2800      	cmp	r0, #0
 801ff02:	d104      	bne.n	801ff0e <__cvt+0xba>
 801ff04:	2301      	movs	r3, #1
 801ff06:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ff08:	1a9b      	subs	r3, r3, r2
 801ff0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ff0c:	6013      	str	r3, [r2, #0]
 801ff0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ff10:	9a07      	ldr	r2, [sp, #28]
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	18d3      	adds	r3, r2, r3
 801ff16:	e7ce      	b.n	801feb6 <__cvt+0x62>
 801ff18:	1c59      	adds	r1, r3, #1
 801ff1a:	9109      	str	r1, [sp, #36]	@ 0x24
 801ff1c:	701a      	strb	r2, [r3, #0]
 801ff1e:	e7d6      	b.n	801fece <__cvt+0x7a>

0801ff20 <__exponent>:
 801ff20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff22:	232b      	movs	r3, #43	@ 0x2b
 801ff24:	0005      	movs	r5, r0
 801ff26:	000c      	movs	r4, r1
 801ff28:	b085      	sub	sp, #20
 801ff2a:	7002      	strb	r2, [r0, #0]
 801ff2c:	2900      	cmp	r1, #0
 801ff2e:	da01      	bge.n	801ff34 <__exponent+0x14>
 801ff30:	424c      	negs	r4, r1
 801ff32:	3302      	adds	r3, #2
 801ff34:	706b      	strb	r3, [r5, #1]
 801ff36:	2c09      	cmp	r4, #9
 801ff38:	dd2c      	ble.n	801ff94 <__exponent+0x74>
 801ff3a:	ab02      	add	r3, sp, #8
 801ff3c:	1dde      	adds	r6, r3, #7
 801ff3e:	0020      	movs	r0, r4
 801ff40:	210a      	movs	r1, #10
 801ff42:	f7e0 fa9f 	bl	8000484 <__aeabi_idivmod>
 801ff46:	0037      	movs	r7, r6
 801ff48:	3130      	adds	r1, #48	@ 0x30
 801ff4a:	3e01      	subs	r6, #1
 801ff4c:	0020      	movs	r0, r4
 801ff4e:	7031      	strb	r1, [r6, #0]
 801ff50:	210a      	movs	r1, #10
 801ff52:	9401      	str	r4, [sp, #4]
 801ff54:	f7e0 f9b0 	bl	80002b8 <__divsi3>
 801ff58:	9b01      	ldr	r3, [sp, #4]
 801ff5a:	0004      	movs	r4, r0
 801ff5c:	2b63      	cmp	r3, #99	@ 0x63
 801ff5e:	dcee      	bgt.n	801ff3e <__exponent+0x1e>
 801ff60:	1eba      	subs	r2, r7, #2
 801ff62:	1ca8      	adds	r0, r5, #2
 801ff64:	0001      	movs	r1, r0
 801ff66:	0013      	movs	r3, r2
 801ff68:	3430      	adds	r4, #48	@ 0x30
 801ff6a:	7014      	strb	r4, [r2, #0]
 801ff6c:	ac02      	add	r4, sp, #8
 801ff6e:	3407      	adds	r4, #7
 801ff70:	429c      	cmp	r4, r3
 801ff72:	d80a      	bhi.n	801ff8a <__exponent+0x6a>
 801ff74:	2300      	movs	r3, #0
 801ff76:	42a2      	cmp	r2, r4
 801ff78:	d803      	bhi.n	801ff82 <__exponent+0x62>
 801ff7a:	3309      	adds	r3, #9
 801ff7c:	aa02      	add	r2, sp, #8
 801ff7e:	189b      	adds	r3, r3, r2
 801ff80:	1bdb      	subs	r3, r3, r7
 801ff82:	18c0      	adds	r0, r0, r3
 801ff84:	1b40      	subs	r0, r0, r5
 801ff86:	b005      	add	sp, #20
 801ff88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff8a:	781c      	ldrb	r4, [r3, #0]
 801ff8c:	3301      	adds	r3, #1
 801ff8e:	700c      	strb	r4, [r1, #0]
 801ff90:	3101      	adds	r1, #1
 801ff92:	e7eb      	b.n	801ff6c <__exponent+0x4c>
 801ff94:	2330      	movs	r3, #48	@ 0x30
 801ff96:	18e4      	adds	r4, r4, r3
 801ff98:	70ab      	strb	r3, [r5, #2]
 801ff9a:	1d28      	adds	r0, r5, #4
 801ff9c:	70ec      	strb	r4, [r5, #3]
 801ff9e:	e7f1      	b.n	801ff84 <__exponent+0x64>

0801ffa0 <_printf_float>:
 801ffa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffa2:	b097      	sub	sp, #92	@ 0x5c
 801ffa4:	000d      	movs	r5, r1
 801ffa6:	920a      	str	r2, [sp, #40]	@ 0x28
 801ffa8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801ffaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ffac:	9009      	str	r0, [sp, #36]	@ 0x24
 801ffae:	f000 fe9f 	bl	8020cf0 <_localeconv_r>
 801ffb2:	6803      	ldr	r3, [r0, #0]
 801ffb4:	0018      	movs	r0, r3
 801ffb6:	930d      	str	r3, [sp, #52]	@ 0x34
 801ffb8:	f7e0 f8d8 	bl	800016c <strlen>
 801ffbc:	2300      	movs	r3, #0
 801ffbe:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ffc0:	9314      	str	r3, [sp, #80]	@ 0x50
 801ffc2:	7e2b      	ldrb	r3, [r5, #24]
 801ffc4:	2207      	movs	r2, #7
 801ffc6:	930c      	str	r3, [sp, #48]	@ 0x30
 801ffc8:	682b      	ldr	r3, [r5, #0]
 801ffca:	930e      	str	r3, [sp, #56]	@ 0x38
 801ffcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ffce:	6823      	ldr	r3, [r4, #0]
 801ffd0:	05c9      	lsls	r1, r1, #23
 801ffd2:	d545      	bpl.n	8020060 <_printf_float+0xc0>
 801ffd4:	189b      	adds	r3, r3, r2
 801ffd6:	4393      	bics	r3, r2
 801ffd8:	001a      	movs	r2, r3
 801ffda:	3208      	adds	r2, #8
 801ffdc:	6022      	str	r2, [r4, #0]
 801ffde:	2201      	movs	r2, #1
 801ffe0:	681e      	ldr	r6, [r3, #0]
 801ffe2:	685f      	ldr	r7, [r3, #4]
 801ffe4:	007b      	lsls	r3, r7, #1
 801ffe6:	085b      	lsrs	r3, r3, #1
 801ffe8:	9311      	str	r3, [sp, #68]	@ 0x44
 801ffea:	9610      	str	r6, [sp, #64]	@ 0x40
 801ffec:	64ae      	str	r6, [r5, #72]	@ 0x48
 801ffee:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801fff0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fff2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fff4:	4ba7      	ldr	r3, [pc, #668]	@ (8020294 <_printf_float+0x2f4>)
 801fff6:	4252      	negs	r2, r2
 801fff8:	f7e3 f984 	bl	8003304 <__aeabi_dcmpun>
 801fffc:	2800      	cmp	r0, #0
 801fffe:	d131      	bne.n	8020064 <_printf_float+0xc4>
 8020000:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020002:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8020004:	2201      	movs	r2, #1
 8020006:	4ba3      	ldr	r3, [pc, #652]	@ (8020294 <_printf_float+0x2f4>)
 8020008:	4252      	negs	r2, r2
 802000a:	f7e0 fa61 	bl	80004d0 <__aeabi_dcmple>
 802000e:	2800      	cmp	r0, #0
 8020010:	d128      	bne.n	8020064 <_printf_float+0xc4>
 8020012:	2200      	movs	r2, #0
 8020014:	2300      	movs	r3, #0
 8020016:	0030      	movs	r0, r6
 8020018:	0039      	movs	r1, r7
 802001a:	f7e0 fa4f 	bl	80004bc <__aeabi_dcmplt>
 802001e:	2800      	cmp	r0, #0
 8020020:	d003      	beq.n	802002a <_printf_float+0x8a>
 8020022:	002b      	movs	r3, r5
 8020024:	222d      	movs	r2, #45	@ 0x2d
 8020026:	3343      	adds	r3, #67	@ 0x43
 8020028:	701a      	strb	r2, [r3, #0]
 802002a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802002c:	4f9a      	ldr	r7, [pc, #616]	@ (8020298 <_printf_float+0x2f8>)
 802002e:	2b47      	cmp	r3, #71	@ 0x47
 8020030:	d900      	bls.n	8020034 <_printf_float+0x94>
 8020032:	4f9a      	ldr	r7, [pc, #616]	@ (802029c <_printf_float+0x2fc>)
 8020034:	2303      	movs	r3, #3
 8020036:	2400      	movs	r4, #0
 8020038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802003a:	612b      	str	r3, [r5, #16]
 802003c:	3301      	adds	r3, #1
 802003e:	439a      	bics	r2, r3
 8020040:	602a      	str	r2, [r5, #0]
 8020042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020044:	0029      	movs	r1, r5
 8020046:	9300      	str	r3, [sp, #0]
 8020048:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802004a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802004c:	aa15      	add	r2, sp, #84	@ 0x54
 802004e:	f000 f9e5 	bl	802041c <_printf_common>
 8020052:	3001      	adds	r0, #1
 8020054:	d000      	beq.n	8020058 <_printf_float+0xb8>
 8020056:	e09f      	b.n	8020198 <_printf_float+0x1f8>
 8020058:	2001      	movs	r0, #1
 802005a:	4240      	negs	r0, r0
 802005c:	b017      	add	sp, #92	@ 0x5c
 802005e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020060:	3307      	adds	r3, #7
 8020062:	e7b8      	b.n	801ffd6 <_printf_float+0x36>
 8020064:	0032      	movs	r2, r6
 8020066:	003b      	movs	r3, r7
 8020068:	0030      	movs	r0, r6
 802006a:	0039      	movs	r1, r7
 802006c:	f7e3 f94a 	bl	8003304 <__aeabi_dcmpun>
 8020070:	2800      	cmp	r0, #0
 8020072:	d00b      	beq.n	802008c <_printf_float+0xec>
 8020074:	2f00      	cmp	r7, #0
 8020076:	da03      	bge.n	8020080 <_printf_float+0xe0>
 8020078:	002b      	movs	r3, r5
 802007a:	222d      	movs	r2, #45	@ 0x2d
 802007c:	3343      	adds	r3, #67	@ 0x43
 802007e:	701a      	strb	r2, [r3, #0]
 8020080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020082:	4f87      	ldr	r7, [pc, #540]	@ (80202a0 <_printf_float+0x300>)
 8020084:	2b47      	cmp	r3, #71	@ 0x47
 8020086:	d9d5      	bls.n	8020034 <_printf_float+0x94>
 8020088:	4f86      	ldr	r7, [pc, #536]	@ (80202a4 <_printf_float+0x304>)
 802008a:	e7d3      	b.n	8020034 <_printf_float+0x94>
 802008c:	2220      	movs	r2, #32
 802008e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020090:	686b      	ldr	r3, [r5, #4]
 8020092:	4394      	bics	r4, r2
 8020094:	1c5a      	adds	r2, r3, #1
 8020096:	d146      	bne.n	8020126 <_printf_float+0x186>
 8020098:	3307      	adds	r3, #7
 802009a:	606b      	str	r3, [r5, #4]
 802009c:	2380      	movs	r3, #128	@ 0x80
 802009e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80200a0:	00db      	lsls	r3, r3, #3
 80200a2:	4313      	orrs	r3, r2
 80200a4:	2200      	movs	r2, #0
 80200a6:	602b      	str	r3, [r5, #0]
 80200a8:	9206      	str	r2, [sp, #24]
 80200aa:	aa14      	add	r2, sp, #80	@ 0x50
 80200ac:	9205      	str	r2, [sp, #20]
 80200ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80200b0:	a90a      	add	r1, sp, #40	@ 0x28
 80200b2:	9204      	str	r2, [sp, #16]
 80200b4:	aa13      	add	r2, sp, #76	@ 0x4c
 80200b6:	9203      	str	r2, [sp, #12]
 80200b8:	2223      	movs	r2, #35	@ 0x23
 80200ba:	1852      	adds	r2, r2, r1
 80200bc:	9202      	str	r2, [sp, #8]
 80200be:	9301      	str	r3, [sp, #4]
 80200c0:	686b      	ldr	r3, [r5, #4]
 80200c2:	0032      	movs	r2, r6
 80200c4:	9300      	str	r3, [sp, #0]
 80200c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80200c8:	003b      	movs	r3, r7
 80200ca:	f7ff fec3 	bl	801fe54 <__cvt>
 80200ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80200d0:	0007      	movs	r7, r0
 80200d2:	2c47      	cmp	r4, #71	@ 0x47
 80200d4:	d12d      	bne.n	8020132 <_printf_float+0x192>
 80200d6:	1cd3      	adds	r3, r2, #3
 80200d8:	db02      	blt.n	80200e0 <_printf_float+0x140>
 80200da:	686b      	ldr	r3, [r5, #4]
 80200dc:	429a      	cmp	r2, r3
 80200de:	dd48      	ble.n	8020172 <_printf_float+0x1d2>
 80200e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80200e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80200e4:	3b02      	subs	r3, #2
 80200e6:	b2db      	uxtb	r3, r3
 80200e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80200ea:	0028      	movs	r0, r5
 80200ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80200ee:	3901      	subs	r1, #1
 80200f0:	3050      	adds	r0, #80	@ 0x50
 80200f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80200f4:	f7ff ff14 	bl	801ff20 <__exponent>
 80200f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80200fa:	0004      	movs	r4, r0
 80200fc:	1813      	adds	r3, r2, r0
 80200fe:	612b      	str	r3, [r5, #16]
 8020100:	2a01      	cmp	r2, #1
 8020102:	dc02      	bgt.n	802010a <_printf_float+0x16a>
 8020104:	682a      	ldr	r2, [r5, #0]
 8020106:	07d2      	lsls	r2, r2, #31
 8020108:	d501      	bpl.n	802010e <_printf_float+0x16e>
 802010a:	3301      	adds	r3, #1
 802010c:	612b      	str	r3, [r5, #16]
 802010e:	2323      	movs	r3, #35	@ 0x23
 8020110:	aa0a      	add	r2, sp, #40	@ 0x28
 8020112:	189b      	adds	r3, r3, r2
 8020114:	781b      	ldrb	r3, [r3, #0]
 8020116:	2b00      	cmp	r3, #0
 8020118:	d100      	bne.n	802011c <_printf_float+0x17c>
 802011a:	e792      	b.n	8020042 <_printf_float+0xa2>
 802011c:	002b      	movs	r3, r5
 802011e:	222d      	movs	r2, #45	@ 0x2d
 8020120:	3343      	adds	r3, #67	@ 0x43
 8020122:	701a      	strb	r2, [r3, #0]
 8020124:	e78d      	b.n	8020042 <_printf_float+0xa2>
 8020126:	2c47      	cmp	r4, #71	@ 0x47
 8020128:	d1b8      	bne.n	802009c <_printf_float+0xfc>
 802012a:	2b00      	cmp	r3, #0
 802012c:	d1b6      	bne.n	802009c <_printf_float+0xfc>
 802012e:	3301      	adds	r3, #1
 8020130:	e7b3      	b.n	802009a <_printf_float+0xfa>
 8020132:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020134:	0011      	movs	r1, r2
 8020136:	2b65      	cmp	r3, #101	@ 0x65
 8020138:	d9d7      	bls.n	80200ea <_printf_float+0x14a>
 802013a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802013c:	2b66      	cmp	r3, #102	@ 0x66
 802013e:	d11a      	bne.n	8020176 <_printf_float+0x1d6>
 8020140:	686b      	ldr	r3, [r5, #4]
 8020142:	2a00      	cmp	r2, #0
 8020144:	dd09      	ble.n	802015a <_printf_float+0x1ba>
 8020146:	612a      	str	r2, [r5, #16]
 8020148:	2b00      	cmp	r3, #0
 802014a:	d102      	bne.n	8020152 <_printf_float+0x1b2>
 802014c:	6829      	ldr	r1, [r5, #0]
 802014e:	07c9      	lsls	r1, r1, #31
 8020150:	d50b      	bpl.n	802016a <_printf_float+0x1ca>
 8020152:	3301      	adds	r3, #1
 8020154:	189b      	adds	r3, r3, r2
 8020156:	612b      	str	r3, [r5, #16]
 8020158:	e007      	b.n	802016a <_printf_float+0x1ca>
 802015a:	2b00      	cmp	r3, #0
 802015c:	d103      	bne.n	8020166 <_printf_float+0x1c6>
 802015e:	2201      	movs	r2, #1
 8020160:	6829      	ldr	r1, [r5, #0]
 8020162:	4211      	tst	r1, r2
 8020164:	d000      	beq.n	8020168 <_printf_float+0x1c8>
 8020166:	1c9a      	adds	r2, r3, #2
 8020168:	612a      	str	r2, [r5, #16]
 802016a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802016c:	2400      	movs	r4, #0
 802016e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8020170:	e7cd      	b.n	802010e <_printf_float+0x16e>
 8020172:	2367      	movs	r3, #103	@ 0x67
 8020174:	930c      	str	r3, [sp, #48]	@ 0x30
 8020176:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020178:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802017a:	4299      	cmp	r1, r3
 802017c:	db06      	blt.n	802018c <_printf_float+0x1ec>
 802017e:	682b      	ldr	r3, [r5, #0]
 8020180:	6129      	str	r1, [r5, #16]
 8020182:	07db      	lsls	r3, r3, #31
 8020184:	d5f1      	bpl.n	802016a <_printf_float+0x1ca>
 8020186:	3101      	adds	r1, #1
 8020188:	6129      	str	r1, [r5, #16]
 802018a:	e7ee      	b.n	802016a <_printf_float+0x1ca>
 802018c:	2201      	movs	r2, #1
 802018e:	2900      	cmp	r1, #0
 8020190:	dce0      	bgt.n	8020154 <_printf_float+0x1b4>
 8020192:	1892      	adds	r2, r2, r2
 8020194:	1a52      	subs	r2, r2, r1
 8020196:	e7dd      	b.n	8020154 <_printf_float+0x1b4>
 8020198:	682a      	ldr	r2, [r5, #0]
 802019a:	0553      	lsls	r3, r2, #21
 802019c:	d408      	bmi.n	80201b0 <_printf_float+0x210>
 802019e:	692b      	ldr	r3, [r5, #16]
 80201a0:	003a      	movs	r2, r7
 80201a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80201a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80201a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80201a8:	47a0      	blx	r4
 80201aa:	3001      	adds	r0, #1
 80201ac:	d129      	bne.n	8020202 <_printf_float+0x262>
 80201ae:	e753      	b.n	8020058 <_printf_float+0xb8>
 80201b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201b2:	2b65      	cmp	r3, #101	@ 0x65
 80201b4:	d800      	bhi.n	80201b8 <_printf_float+0x218>
 80201b6:	e0da      	b.n	802036e <_printf_float+0x3ce>
 80201b8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80201ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80201bc:	2200      	movs	r2, #0
 80201be:	2300      	movs	r3, #0
 80201c0:	f7e0 f976 	bl	80004b0 <__aeabi_dcmpeq>
 80201c4:	2800      	cmp	r0, #0
 80201c6:	d033      	beq.n	8020230 <_printf_float+0x290>
 80201c8:	2301      	movs	r3, #1
 80201ca:	4a37      	ldr	r2, [pc, #220]	@ (80202a8 <_printf_float+0x308>)
 80201cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80201ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80201d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80201d2:	47a0      	blx	r4
 80201d4:	3001      	adds	r0, #1
 80201d6:	d100      	bne.n	80201da <_printf_float+0x23a>
 80201d8:	e73e      	b.n	8020058 <_printf_float+0xb8>
 80201da:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80201dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80201de:	42b3      	cmp	r3, r6
 80201e0:	db02      	blt.n	80201e8 <_printf_float+0x248>
 80201e2:	682b      	ldr	r3, [r5, #0]
 80201e4:	07db      	lsls	r3, r3, #31
 80201e6:	d50c      	bpl.n	8020202 <_printf_float+0x262>
 80201e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80201ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80201ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80201f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80201f2:	47a0      	blx	r4
 80201f4:	2400      	movs	r4, #0
 80201f6:	3001      	adds	r0, #1
 80201f8:	d100      	bne.n	80201fc <_printf_float+0x25c>
 80201fa:	e72d      	b.n	8020058 <_printf_float+0xb8>
 80201fc:	1e73      	subs	r3, r6, #1
 80201fe:	42a3      	cmp	r3, r4
 8020200:	dc0a      	bgt.n	8020218 <_printf_float+0x278>
 8020202:	682b      	ldr	r3, [r5, #0]
 8020204:	079b      	lsls	r3, r3, #30
 8020206:	d500      	bpl.n	802020a <_printf_float+0x26a>
 8020208:	e105      	b.n	8020416 <_printf_float+0x476>
 802020a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802020c:	68e8      	ldr	r0, [r5, #12]
 802020e:	4298      	cmp	r0, r3
 8020210:	db00      	blt.n	8020214 <_printf_float+0x274>
 8020212:	e723      	b.n	802005c <_printf_float+0xbc>
 8020214:	0018      	movs	r0, r3
 8020216:	e721      	b.n	802005c <_printf_float+0xbc>
 8020218:	002a      	movs	r2, r5
 802021a:	2301      	movs	r3, #1
 802021c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802021e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020220:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020222:	321a      	adds	r2, #26
 8020224:	47b8      	blx	r7
 8020226:	3001      	adds	r0, #1
 8020228:	d100      	bne.n	802022c <_printf_float+0x28c>
 802022a:	e715      	b.n	8020058 <_printf_float+0xb8>
 802022c:	3401      	adds	r4, #1
 802022e:	e7e5      	b.n	80201fc <_printf_float+0x25c>
 8020230:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020232:	2b00      	cmp	r3, #0
 8020234:	dc3a      	bgt.n	80202ac <_printf_float+0x30c>
 8020236:	2301      	movs	r3, #1
 8020238:	4a1b      	ldr	r2, [pc, #108]	@ (80202a8 <_printf_float+0x308>)
 802023a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802023c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802023e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020240:	47a0      	blx	r4
 8020242:	3001      	adds	r0, #1
 8020244:	d100      	bne.n	8020248 <_printf_float+0x2a8>
 8020246:	e707      	b.n	8020058 <_printf_float+0xb8>
 8020248:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 802024a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802024c:	4333      	orrs	r3, r6
 802024e:	d102      	bne.n	8020256 <_printf_float+0x2b6>
 8020250:	682b      	ldr	r3, [r5, #0]
 8020252:	07db      	lsls	r3, r3, #31
 8020254:	d5d5      	bpl.n	8020202 <_printf_float+0x262>
 8020256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020258:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802025a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802025c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802025e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020260:	47a0      	blx	r4
 8020262:	2300      	movs	r3, #0
 8020264:	3001      	adds	r0, #1
 8020266:	d100      	bne.n	802026a <_printf_float+0x2ca>
 8020268:	e6f6      	b.n	8020058 <_printf_float+0xb8>
 802026a:	930c      	str	r3, [sp, #48]	@ 0x30
 802026c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802026e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020270:	425b      	negs	r3, r3
 8020272:	4293      	cmp	r3, r2
 8020274:	dc01      	bgt.n	802027a <_printf_float+0x2da>
 8020276:	0033      	movs	r3, r6
 8020278:	e792      	b.n	80201a0 <_printf_float+0x200>
 802027a:	002a      	movs	r2, r5
 802027c:	2301      	movs	r3, #1
 802027e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020280:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020282:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020284:	321a      	adds	r2, #26
 8020286:	47a0      	blx	r4
 8020288:	3001      	adds	r0, #1
 802028a:	d100      	bne.n	802028e <_printf_float+0x2ee>
 802028c:	e6e4      	b.n	8020058 <_printf_float+0xb8>
 802028e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020290:	3301      	adds	r3, #1
 8020292:	e7ea      	b.n	802026a <_printf_float+0x2ca>
 8020294:	7fefffff 	.word	0x7fefffff
 8020298:	08026db9 	.word	0x08026db9
 802029c:	08026dbd 	.word	0x08026dbd
 80202a0:	08026dc1 	.word	0x08026dc1
 80202a4:	08026dc5 	.word	0x08026dc5
 80202a8:	08026dc9 	.word	0x08026dc9
 80202ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80202ae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80202b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80202b2:	429e      	cmp	r6, r3
 80202b4:	dd00      	ble.n	80202b8 <_printf_float+0x318>
 80202b6:	001e      	movs	r6, r3
 80202b8:	2e00      	cmp	r6, #0
 80202ba:	dc31      	bgt.n	8020320 <_printf_float+0x380>
 80202bc:	43f3      	mvns	r3, r6
 80202be:	2400      	movs	r4, #0
 80202c0:	17db      	asrs	r3, r3, #31
 80202c2:	4033      	ands	r3, r6
 80202c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80202c6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80202c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202ca:	1af3      	subs	r3, r6, r3
 80202cc:	42a3      	cmp	r3, r4
 80202ce:	dc30      	bgt.n	8020332 <_printf_float+0x392>
 80202d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80202d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80202d4:	429a      	cmp	r2, r3
 80202d6:	dc38      	bgt.n	802034a <_printf_float+0x3aa>
 80202d8:	682b      	ldr	r3, [r5, #0]
 80202da:	07db      	lsls	r3, r3, #31
 80202dc:	d435      	bmi.n	802034a <_printf_float+0x3aa>
 80202de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80202e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80202e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80202e4:	1b9b      	subs	r3, r3, r6
 80202e6:	1b14      	subs	r4, r2, r4
 80202e8:	429c      	cmp	r4, r3
 80202ea:	dd00      	ble.n	80202ee <_printf_float+0x34e>
 80202ec:	001c      	movs	r4, r3
 80202ee:	2c00      	cmp	r4, #0
 80202f0:	dc34      	bgt.n	802035c <_printf_float+0x3bc>
 80202f2:	43e3      	mvns	r3, r4
 80202f4:	2600      	movs	r6, #0
 80202f6:	17db      	asrs	r3, r3, #31
 80202f8:	401c      	ands	r4, r3
 80202fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80202fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80202fe:	1ad3      	subs	r3, r2, r3
 8020300:	1b1b      	subs	r3, r3, r4
 8020302:	42b3      	cmp	r3, r6
 8020304:	dc00      	bgt.n	8020308 <_printf_float+0x368>
 8020306:	e77c      	b.n	8020202 <_printf_float+0x262>
 8020308:	002a      	movs	r2, r5
 802030a:	2301      	movs	r3, #1
 802030c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802030e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020310:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020312:	321a      	adds	r2, #26
 8020314:	47b8      	blx	r7
 8020316:	3001      	adds	r0, #1
 8020318:	d100      	bne.n	802031c <_printf_float+0x37c>
 802031a:	e69d      	b.n	8020058 <_printf_float+0xb8>
 802031c:	3601      	adds	r6, #1
 802031e:	e7ec      	b.n	80202fa <_printf_float+0x35a>
 8020320:	0033      	movs	r3, r6
 8020322:	003a      	movs	r2, r7
 8020324:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020328:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802032a:	47a0      	blx	r4
 802032c:	3001      	adds	r0, #1
 802032e:	d1c5      	bne.n	80202bc <_printf_float+0x31c>
 8020330:	e692      	b.n	8020058 <_printf_float+0xb8>
 8020332:	002a      	movs	r2, r5
 8020334:	2301      	movs	r3, #1
 8020336:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020338:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802033a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802033c:	321a      	adds	r2, #26
 802033e:	47b0      	blx	r6
 8020340:	3001      	adds	r0, #1
 8020342:	d100      	bne.n	8020346 <_printf_float+0x3a6>
 8020344:	e688      	b.n	8020058 <_printf_float+0xb8>
 8020346:	3401      	adds	r4, #1
 8020348:	e7bd      	b.n	80202c6 <_printf_float+0x326>
 802034a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802034c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802034e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020350:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020352:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020354:	47a0      	blx	r4
 8020356:	3001      	adds	r0, #1
 8020358:	d1c1      	bne.n	80202de <_printf_float+0x33e>
 802035a:	e67d      	b.n	8020058 <_printf_float+0xb8>
 802035c:	19ba      	adds	r2, r7, r6
 802035e:	0023      	movs	r3, r4
 8020360:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020364:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020366:	47b0      	blx	r6
 8020368:	3001      	adds	r0, #1
 802036a:	d1c2      	bne.n	80202f2 <_printf_float+0x352>
 802036c:	e674      	b.n	8020058 <_printf_float+0xb8>
 802036e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020370:	930c      	str	r3, [sp, #48]	@ 0x30
 8020372:	2b01      	cmp	r3, #1
 8020374:	dc02      	bgt.n	802037c <_printf_float+0x3dc>
 8020376:	2301      	movs	r3, #1
 8020378:	421a      	tst	r2, r3
 802037a:	d039      	beq.n	80203f0 <_printf_float+0x450>
 802037c:	2301      	movs	r3, #1
 802037e:	003a      	movs	r2, r7
 8020380:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020384:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020386:	47b0      	blx	r6
 8020388:	3001      	adds	r0, #1
 802038a:	d100      	bne.n	802038e <_printf_float+0x3ee>
 802038c:	e664      	b.n	8020058 <_printf_float+0xb8>
 802038e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020390:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8020394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020396:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8020398:	47b0      	blx	r6
 802039a:	3001      	adds	r0, #1
 802039c:	d100      	bne.n	80203a0 <_printf_float+0x400>
 802039e:	e65b      	b.n	8020058 <_printf_float+0xb8>
 80203a0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80203a2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80203a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203a6:	2200      	movs	r2, #0
 80203a8:	3b01      	subs	r3, #1
 80203aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80203ac:	2300      	movs	r3, #0
 80203ae:	f7e0 f87f 	bl	80004b0 <__aeabi_dcmpeq>
 80203b2:	2800      	cmp	r0, #0
 80203b4:	d11a      	bne.n	80203ec <_printf_float+0x44c>
 80203b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203b8:	1c7a      	adds	r2, r7, #1
 80203ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80203bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80203be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80203c0:	47b0      	blx	r6
 80203c2:	3001      	adds	r0, #1
 80203c4:	d10e      	bne.n	80203e4 <_printf_float+0x444>
 80203c6:	e647      	b.n	8020058 <_printf_float+0xb8>
 80203c8:	002a      	movs	r2, r5
 80203ca:	2301      	movs	r3, #1
 80203cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80203ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80203d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80203d2:	321a      	adds	r2, #26
 80203d4:	47b8      	blx	r7
 80203d6:	3001      	adds	r0, #1
 80203d8:	d100      	bne.n	80203dc <_printf_float+0x43c>
 80203da:	e63d      	b.n	8020058 <_printf_float+0xb8>
 80203dc:	3601      	adds	r6, #1
 80203de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203e0:	429e      	cmp	r6, r3
 80203e2:	dbf1      	blt.n	80203c8 <_printf_float+0x428>
 80203e4:	002a      	movs	r2, r5
 80203e6:	0023      	movs	r3, r4
 80203e8:	3250      	adds	r2, #80	@ 0x50
 80203ea:	e6da      	b.n	80201a2 <_printf_float+0x202>
 80203ec:	2600      	movs	r6, #0
 80203ee:	e7f6      	b.n	80203de <_printf_float+0x43e>
 80203f0:	003a      	movs	r2, r7
 80203f2:	e7e2      	b.n	80203ba <_printf_float+0x41a>
 80203f4:	002a      	movs	r2, r5
 80203f6:	2301      	movs	r3, #1
 80203f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80203fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80203fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80203fe:	3219      	adds	r2, #25
 8020400:	47b0      	blx	r6
 8020402:	3001      	adds	r0, #1
 8020404:	d100      	bne.n	8020408 <_printf_float+0x468>
 8020406:	e627      	b.n	8020058 <_printf_float+0xb8>
 8020408:	3401      	adds	r4, #1
 802040a:	68eb      	ldr	r3, [r5, #12]
 802040c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802040e:	1a9b      	subs	r3, r3, r2
 8020410:	42a3      	cmp	r3, r4
 8020412:	dcef      	bgt.n	80203f4 <_printf_float+0x454>
 8020414:	e6f9      	b.n	802020a <_printf_float+0x26a>
 8020416:	2400      	movs	r4, #0
 8020418:	e7f7      	b.n	802040a <_printf_float+0x46a>
 802041a:	46c0      	nop			@ (mov r8, r8)

0802041c <_printf_common>:
 802041c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802041e:	0016      	movs	r6, r2
 8020420:	9301      	str	r3, [sp, #4]
 8020422:	688a      	ldr	r2, [r1, #8]
 8020424:	690b      	ldr	r3, [r1, #16]
 8020426:	000c      	movs	r4, r1
 8020428:	9000      	str	r0, [sp, #0]
 802042a:	4293      	cmp	r3, r2
 802042c:	da00      	bge.n	8020430 <_printf_common+0x14>
 802042e:	0013      	movs	r3, r2
 8020430:	0022      	movs	r2, r4
 8020432:	6033      	str	r3, [r6, #0]
 8020434:	3243      	adds	r2, #67	@ 0x43
 8020436:	7812      	ldrb	r2, [r2, #0]
 8020438:	2a00      	cmp	r2, #0
 802043a:	d001      	beq.n	8020440 <_printf_common+0x24>
 802043c:	3301      	adds	r3, #1
 802043e:	6033      	str	r3, [r6, #0]
 8020440:	6823      	ldr	r3, [r4, #0]
 8020442:	069b      	lsls	r3, r3, #26
 8020444:	d502      	bpl.n	802044c <_printf_common+0x30>
 8020446:	6833      	ldr	r3, [r6, #0]
 8020448:	3302      	adds	r3, #2
 802044a:	6033      	str	r3, [r6, #0]
 802044c:	6822      	ldr	r2, [r4, #0]
 802044e:	2306      	movs	r3, #6
 8020450:	0015      	movs	r5, r2
 8020452:	401d      	ands	r5, r3
 8020454:	421a      	tst	r2, r3
 8020456:	d027      	beq.n	80204a8 <_printf_common+0x8c>
 8020458:	0023      	movs	r3, r4
 802045a:	3343      	adds	r3, #67	@ 0x43
 802045c:	781b      	ldrb	r3, [r3, #0]
 802045e:	1e5a      	subs	r2, r3, #1
 8020460:	4193      	sbcs	r3, r2
 8020462:	6822      	ldr	r2, [r4, #0]
 8020464:	0692      	lsls	r2, r2, #26
 8020466:	d430      	bmi.n	80204ca <_printf_common+0xae>
 8020468:	0022      	movs	r2, r4
 802046a:	9901      	ldr	r1, [sp, #4]
 802046c:	9800      	ldr	r0, [sp, #0]
 802046e:	9d08      	ldr	r5, [sp, #32]
 8020470:	3243      	adds	r2, #67	@ 0x43
 8020472:	47a8      	blx	r5
 8020474:	3001      	adds	r0, #1
 8020476:	d025      	beq.n	80204c4 <_printf_common+0xa8>
 8020478:	2206      	movs	r2, #6
 802047a:	6823      	ldr	r3, [r4, #0]
 802047c:	2500      	movs	r5, #0
 802047e:	4013      	ands	r3, r2
 8020480:	2b04      	cmp	r3, #4
 8020482:	d105      	bne.n	8020490 <_printf_common+0x74>
 8020484:	6833      	ldr	r3, [r6, #0]
 8020486:	68e5      	ldr	r5, [r4, #12]
 8020488:	1aed      	subs	r5, r5, r3
 802048a:	43eb      	mvns	r3, r5
 802048c:	17db      	asrs	r3, r3, #31
 802048e:	401d      	ands	r5, r3
 8020490:	68a3      	ldr	r3, [r4, #8]
 8020492:	6922      	ldr	r2, [r4, #16]
 8020494:	4293      	cmp	r3, r2
 8020496:	dd01      	ble.n	802049c <_printf_common+0x80>
 8020498:	1a9b      	subs	r3, r3, r2
 802049a:	18ed      	adds	r5, r5, r3
 802049c:	2600      	movs	r6, #0
 802049e:	42b5      	cmp	r5, r6
 80204a0:	d120      	bne.n	80204e4 <_printf_common+0xc8>
 80204a2:	2000      	movs	r0, #0
 80204a4:	e010      	b.n	80204c8 <_printf_common+0xac>
 80204a6:	3501      	adds	r5, #1
 80204a8:	68e3      	ldr	r3, [r4, #12]
 80204aa:	6832      	ldr	r2, [r6, #0]
 80204ac:	1a9b      	subs	r3, r3, r2
 80204ae:	42ab      	cmp	r3, r5
 80204b0:	ddd2      	ble.n	8020458 <_printf_common+0x3c>
 80204b2:	0022      	movs	r2, r4
 80204b4:	2301      	movs	r3, #1
 80204b6:	9901      	ldr	r1, [sp, #4]
 80204b8:	9800      	ldr	r0, [sp, #0]
 80204ba:	9f08      	ldr	r7, [sp, #32]
 80204bc:	3219      	adds	r2, #25
 80204be:	47b8      	blx	r7
 80204c0:	3001      	adds	r0, #1
 80204c2:	d1f0      	bne.n	80204a6 <_printf_common+0x8a>
 80204c4:	2001      	movs	r0, #1
 80204c6:	4240      	negs	r0, r0
 80204c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80204ca:	2030      	movs	r0, #48	@ 0x30
 80204cc:	18e1      	adds	r1, r4, r3
 80204ce:	3143      	adds	r1, #67	@ 0x43
 80204d0:	7008      	strb	r0, [r1, #0]
 80204d2:	0021      	movs	r1, r4
 80204d4:	1c5a      	adds	r2, r3, #1
 80204d6:	3145      	adds	r1, #69	@ 0x45
 80204d8:	7809      	ldrb	r1, [r1, #0]
 80204da:	18a2      	adds	r2, r4, r2
 80204dc:	3243      	adds	r2, #67	@ 0x43
 80204de:	3302      	adds	r3, #2
 80204e0:	7011      	strb	r1, [r2, #0]
 80204e2:	e7c1      	b.n	8020468 <_printf_common+0x4c>
 80204e4:	0022      	movs	r2, r4
 80204e6:	2301      	movs	r3, #1
 80204e8:	9901      	ldr	r1, [sp, #4]
 80204ea:	9800      	ldr	r0, [sp, #0]
 80204ec:	9f08      	ldr	r7, [sp, #32]
 80204ee:	321a      	adds	r2, #26
 80204f0:	47b8      	blx	r7
 80204f2:	3001      	adds	r0, #1
 80204f4:	d0e6      	beq.n	80204c4 <_printf_common+0xa8>
 80204f6:	3601      	adds	r6, #1
 80204f8:	e7d1      	b.n	802049e <_printf_common+0x82>
	...

080204fc <_printf_i>:
 80204fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204fe:	b08b      	sub	sp, #44	@ 0x2c
 8020500:	9206      	str	r2, [sp, #24]
 8020502:	000a      	movs	r2, r1
 8020504:	3243      	adds	r2, #67	@ 0x43
 8020506:	9307      	str	r3, [sp, #28]
 8020508:	9005      	str	r0, [sp, #20]
 802050a:	9203      	str	r2, [sp, #12]
 802050c:	7e0a      	ldrb	r2, [r1, #24]
 802050e:	000c      	movs	r4, r1
 8020510:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020512:	2a78      	cmp	r2, #120	@ 0x78
 8020514:	d809      	bhi.n	802052a <_printf_i+0x2e>
 8020516:	2a62      	cmp	r2, #98	@ 0x62
 8020518:	d80b      	bhi.n	8020532 <_printf_i+0x36>
 802051a:	2a00      	cmp	r2, #0
 802051c:	d100      	bne.n	8020520 <_printf_i+0x24>
 802051e:	e0bc      	b.n	802069a <_printf_i+0x19e>
 8020520:	497b      	ldr	r1, [pc, #492]	@ (8020710 <_printf_i+0x214>)
 8020522:	9104      	str	r1, [sp, #16]
 8020524:	2a58      	cmp	r2, #88	@ 0x58
 8020526:	d100      	bne.n	802052a <_printf_i+0x2e>
 8020528:	e090      	b.n	802064c <_printf_i+0x150>
 802052a:	0025      	movs	r5, r4
 802052c:	3542      	adds	r5, #66	@ 0x42
 802052e:	702a      	strb	r2, [r5, #0]
 8020530:	e022      	b.n	8020578 <_printf_i+0x7c>
 8020532:	0010      	movs	r0, r2
 8020534:	3863      	subs	r0, #99	@ 0x63
 8020536:	2815      	cmp	r0, #21
 8020538:	d8f7      	bhi.n	802052a <_printf_i+0x2e>
 802053a:	f7df fe29 	bl	8000190 <__gnu_thumb1_case_shi>
 802053e:	0016      	.short	0x0016
 8020540:	fff6001f 	.word	0xfff6001f
 8020544:	fff6fff6 	.word	0xfff6fff6
 8020548:	001ffff6 	.word	0x001ffff6
 802054c:	fff6fff6 	.word	0xfff6fff6
 8020550:	fff6fff6 	.word	0xfff6fff6
 8020554:	003600a1 	.word	0x003600a1
 8020558:	fff60080 	.word	0xfff60080
 802055c:	00b2fff6 	.word	0x00b2fff6
 8020560:	0036fff6 	.word	0x0036fff6
 8020564:	fff6fff6 	.word	0xfff6fff6
 8020568:	0084      	.short	0x0084
 802056a:	0025      	movs	r5, r4
 802056c:	681a      	ldr	r2, [r3, #0]
 802056e:	3542      	adds	r5, #66	@ 0x42
 8020570:	1d11      	adds	r1, r2, #4
 8020572:	6019      	str	r1, [r3, #0]
 8020574:	6813      	ldr	r3, [r2, #0]
 8020576:	702b      	strb	r3, [r5, #0]
 8020578:	2301      	movs	r3, #1
 802057a:	e0a0      	b.n	80206be <_printf_i+0x1c2>
 802057c:	6818      	ldr	r0, [r3, #0]
 802057e:	6809      	ldr	r1, [r1, #0]
 8020580:	1d02      	adds	r2, r0, #4
 8020582:	060d      	lsls	r5, r1, #24
 8020584:	d50b      	bpl.n	802059e <_printf_i+0xa2>
 8020586:	6806      	ldr	r6, [r0, #0]
 8020588:	601a      	str	r2, [r3, #0]
 802058a:	2e00      	cmp	r6, #0
 802058c:	da03      	bge.n	8020596 <_printf_i+0x9a>
 802058e:	232d      	movs	r3, #45	@ 0x2d
 8020590:	9a03      	ldr	r2, [sp, #12]
 8020592:	4276      	negs	r6, r6
 8020594:	7013      	strb	r3, [r2, #0]
 8020596:	4b5e      	ldr	r3, [pc, #376]	@ (8020710 <_printf_i+0x214>)
 8020598:	270a      	movs	r7, #10
 802059a:	9304      	str	r3, [sp, #16]
 802059c:	e018      	b.n	80205d0 <_printf_i+0xd4>
 802059e:	6806      	ldr	r6, [r0, #0]
 80205a0:	601a      	str	r2, [r3, #0]
 80205a2:	0649      	lsls	r1, r1, #25
 80205a4:	d5f1      	bpl.n	802058a <_printf_i+0x8e>
 80205a6:	b236      	sxth	r6, r6
 80205a8:	e7ef      	b.n	802058a <_printf_i+0x8e>
 80205aa:	6808      	ldr	r0, [r1, #0]
 80205ac:	6819      	ldr	r1, [r3, #0]
 80205ae:	c940      	ldmia	r1!, {r6}
 80205b0:	0605      	lsls	r5, r0, #24
 80205b2:	d402      	bmi.n	80205ba <_printf_i+0xbe>
 80205b4:	0640      	lsls	r0, r0, #25
 80205b6:	d500      	bpl.n	80205ba <_printf_i+0xbe>
 80205b8:	b2b6      	uxth	r6, r6
 80205ba:	6019      	str	r1, [r3, #0]
 80205bc:	4b54      	ldr	r3, [pc, #336]	@ (8020710 <_printf_i+0x214>)
 80205be:	270a      	movs	r7, #10
 80205c0:	9304      	str	r3, [sp, #16]
 80205c2:	2a6f      	cmp	r2, #111	@ 0x6f
 80205c4:	d100      	bne.n	80205c8 <_printf_i+0xcc>
 80205c6:	3f02      	subs	r7, #2
 80205c8:	0023      	movs	r3, r4
 80205ca:	2200      	movs	r2, #0
 80205cc:	3343      	adds	r3, #67	@ 0x43
 80205ce:	701a      	strb	r2, [r3, #0]
 80205d0:	6863      	ldr	r3, [r4, #4]
 80205d2:	60a3      	str	r3, [r4, #8]
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	db03      	blt.n	80205e0 <_printf_i+0xe4>
 80205d8:	2104      	movs	r1, #4
 80205da:	6822      	ldr	r2, [r4, #0]
 80205dc:	438a      	bics	r2, r1
 80205de:	6022      	str	r2, [r4, #0]
 80205e0:	2e00      	cmp	r6, #0
 80205e2:	d102      	bne.n	80205ea <_printf_i+0xee>
 80205e4:	9d03      	ldr	r5, [sp, #12]
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	d00c      	beq.n	8020604 <_printf_i+0x108>
 80205ea:	9d03      	ldr	r5, [sp, #12]
 80205ec:	0030      	movs	r0, r6
 80205ee:	0039      	movs	r1, r7
 80205f0:	f7df fe5e 	bl	80002b0 <__aeabi_uidivmod>
 80205f4:	9b04      	ldr	r3, [sp, #16]
 80205f6:	3d01      	subs	r5, #1
 80205f8:	5c5b      	ldrb	r3, [r3, r1]
 80205fa:	702b      	strb	r3, [r5, #0]
 80205fc:	0033      	movs	r3, r6
 80205fe:	0006      	movs	r6, r0
 8020600:	429f      	cmp	r7, r3
 8020602:	d9f3      	bls.n	80205ec <_printf_i+0xf0>
 8020604:	2f08      	cmp	r7, #8
 8020606:	d109      	bne.n	802061c <_printf_i+0x120>
 8020608:	6823      	ldr	r3, [r4, #0]
 802060a:	07db      	lsls	r3, r3, #31
 802060c:	d506      	bpl.n	802061c <_printf_i+0x120>
 802060e:	6862      	ldr	r2, [r4, #4]
 8020610:	6923      	ldr	r3, [r4, #16]
 8020612:	429a      	cmp	r2, r3
 8020614:	dc02      	bgt.n	802061c <_printf_i+0x120>
 8020616:	2330      	movs	r3, #48	@ 0x30
 8020618:	3d01      	subs	r5, #1
 802061a:	702b      	strb	r3, [r5, #0]
 802061c:	9b03      	ldr	r3, [sp, #12]
 802061e:	1b5b      	subs	r3, r3, r5
 8020620:	6123      	str	r3, [r4, #16]
 8020622:	9b07      	ldr	r3, [sp, #28]
 8020624:	0021      	movs	r1, r4
 8020626:	9300      	str	r3, [sp, #0]
 8020628:	9805      	ldr	r0, [sp, #20]
 802062a:	9b06      	ldr	r3, [sp, #24]
 802062c:	aa09      	add	r2, sp, #36	@ 0x24
 802062e:	f7ff fef5 	bl	802041c <_printf_common>
 8020632:	3001      	adds	r0, #1
 8020634:	d148      	bne.n	80206c8 <_printf_i+0x1cc>
 8020636:	2001      	movs	r0, #1
 8020638:	4240      	negs	r0, r0
 802063a:	b00b      	add	sp, #44	@ 0x2c
 802063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802063e:	2220      	movs	r2, #32
 8020640:	6809      	ldr	r1, [r1, #0]
 8020642:	430a      	orrs	r2, r1
 8020644:	6022      	str	r2, [r4, #0]
 8020646:	2278      	movs	r2, #120	@ 0x78
 8020648:	4932      	ldr	r1, [pc, #200]	@ (8020714 <_printf_i+0x218>)
 802064a:	9104      	str	r1, [sp, #16]
 802064c:	0021      	movs	r1, r4
 802064e:	3145      	adds	r1, #69	@ 0x45
 8020650:	700a      	strb	r2, [r1, #0]
 8020652:	6819      	ldr	r1, [r3, #0]
 8020654:	6822      	ldr	r2, [r4, #0]
 8020656:	c940      	ldmia	r1!, {r6}
 8020658:	0610      	lsls	r0, r2, #24
 802065a:	d402      	bmi.n	8020662 <_printf_i+0x166>
 802065c:	0650      	lsls	r0, r2, #25
 802065e:	d500      	bpl.n	8020662 <_printf_i+0x166>
 8020660:	b2b6      	uxth	r6, r6
 8020662:	6019      	str	r1, [r3, #0]
 8020664:	07d3      	lsls	r3, r2, #31
 8020666:	d502      	bpl.n	802066e <_printf_i+0x172>
 8020668:	2320      	movs	r3, #32
 802066a:	4313      	orrs	r3, r2
 802066c:	6023      	str	r3, [r4, #0]
 802066e:	2e00      	cmp	r6, #0
 8020670:	d001      	beq.n	8020676 <_printf_i+0x17a>
 8020672:	2710      	movs	r7, #16
 8020674:	e7a8      	b.n	80205c8 <_printf_i+0xcc>
 8020676:	2220      	movs	r2, #32
 8020678:	6823      	ldr	r3, [r4, #0]
 802067a:	4393      	bics	r3, r2
 802067c:	6023      	str	r3, [r4, #0]
 802067e:	e7f8      	b.n	8020672 <_printf_i+0x176>
 8020680:	681a      	ldr	r2, [r3, #0]
 8020682:	680d      	ldr	r5, [r1, #0]
 8020684:	1d10      	adds	r0, r2, #4
 8020686:	6949      	ldr	r1, [r1, #20]
 8020688:	6018      	str	r0, [r3, #0]
 802068a:	6813      	ldr	r3, [r2, #0]
 802068c:	062e      	lsls	r6, r5, #24
 802068e:	d501      	bpl.n	8020694 <_printf_i+0x198>
 8020690:	6019      	str	r1, [r3, #0]
 8020692:	e002      	b.n	802069a <_printf_i+0x19e>
 8020694:	066d      	lsls	r5, r5, #25
 8020696:	d5fb      	bpl.n	8020690 <_printf_i+0x194>
 8020698:	8019      	strh	r1, [r3, #0]
 802069a:	2300      	movs	r3, #0
 802069c:	9d03      	ldr	r5, [sp, #12]
 802069e:	6123      	str	r3, [r4, #16]
 80206a0:	e7bf      	b.n	8020622 <_printf_i+0x126>
 80206a2:	681a      	ldr	r2, [r3, #0]
 80206a4:	1d11      	adds	r1, r2, #4
 80206a6:	6019      	str	r1, [r3, #0]
 80206a8:	6815      	ldr	r5, [r2, #0]
 80206aa:	2100      	movs	r1, #0
 80206ac:	0028      	movs	r0, r5
 80206ae:	6862      	ldr	r2, [r4, #4]
 80206b0:	f000 fb9d 	bl	8020dee <memchr>
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d001      	beq.n	80206bc <_printf_i+0x1c0>
 80206b8:	1b40      	subs	r0, r0, r5
 80206ba:	6060      	str	r0, [r4, #4]
 80206bc:	6863      	ldr	r3, [r4, #4]
 80206be:	6123      	str	r3, [r4, #16]
 80206c0:	2300      	movs	r3, #0
 80206c2:	9a03      	ldr	r2, [sp, #12]
 80206c4:	7013      	strb	r3, [r2, #0]
 80206c6:	e7ac      	b.n	8020622 <_printf_i+0x126>
 80206c8:	002a      	movs	r2, r5
 80206ca:	6923      	ldr	r3, [r4, #16]
 80206cc:	9906      	ldr	r1, [sp, #24]
 80206ce:	9805      	ldr	r0, [sp, #20]
 80206d0:	9d07      	ldr	r5, [sp, #28]
 80206d2:	47a8      	blx	r5
 80206d4:	3001      	adds	r0, #1
 80206d6:	d0ae      	beq.n	8020636 <_printf_i+0x13a>
 80206d8:	6823      	ldr	r3, [r4, #0]
 80206da:	079b      	lsls	r3, r3, #30
 80206dc:	d415      	bmi.n	802070a <_printf_i+0x20e>
 80206de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206e0:	68e0      	ldr	r0, [r4, #12]
 80206e2:	4298      	cmp	r0, r3
 80206e4:	daa9      	bge.n	802063a <_printf_i+0x13e>
 80206e6:	0018      	movs	r0, r3
 80206e8:	e7a7      	b.n	802063a <_printf_i+0x13e>
 80206ea:	0022      	movs	r2, r4
 80206ec:	2301      	movs	r3, #1
 80206ee:	9906      	ldr	r1, [sp, #24]
 80206f0:	9805      	ldr	r0, [sp, #20]
 80206f2:	9e07      	ldr	r6, [sp, #28]
 80206f4:	3219      	adds	r2, #25
 80206f6:	47b0      	blx	r6
 80206f8:	3001      	adds	r0, #1
 80206fa:	d09c      	beq.n	8020636 <_printf_i+0x13a>
 80206fc:	3501      	adds	r5, #1
 80206fe:	68e3      	ldr	r3, [r4, #12]
 8020700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020702:	1a9b      	subs	r3, r3, r2
 8020704:	42ab      	cmp	r3, r5
 8020706:	dcf0      	bgt.n	80206ea <_printf_i+0x1ee>
 8020708:	e7e9      	b.n	80206de <_printf_i+0x1e2>
 802070a:	2500      	movs	r5, #0
 802070c:	e7f7      	b.n	80206fe <_printf_i+0x202>
 802070e:	46c0      	nop			@ (mov r8, r8)
 8020710:	08026dcb 	.word	0x08026dcb
 8020714:	08026ddc 	.word	0x08026ddc

08020718 <std>:
 8020718:	2300      	movs	r3, #0
 802071a:	b510      	push	{r4, lr}
 802071c:	0004      	movs	r4, r0
 802071e:	6003      	str	r3, [r0, #0]
 8020720:	6043      	str	r3, [r0, #4]
 8020722:	6083      	str	r3, [r0, #8]
 8020724:	8181      	strh	r1, [r0, #12]
 8020726:	6643      	str	r3, [r0, #100]	@ 0x64
 8020728:	81c2      	strh	r2, [r0, #14]
 802072a:	6103      	str	r3, [r0, #16]
 802072c:	6143      	str	r3, [r0, #20]
 802072e:	6183      	str	r3, [r0, #24]
 8020730:	0019      	movs	r1, r3
 8020732:	2208      	movs	r2, #8
 8020734:	305c      	adds	r0, #92	@ 0x5c
 8020736:	f000 fa89 	bl	8020c4c <memset>
 802073a:	4b0b      	ldr	r3, [pc, #44]	@ (8020768 <std+0x50>)
 802073c:	6224      	str	r4, [r4, #32]
 802073e:	6263      	str	r3, [r4, #36]	@ 0x24
 8020740:	4b0a      	ldr	r3, [pc, #40]	@ (802076c <std+0x54>)
 8020742:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020744:	4b0a      	ldr	r3, [pc, #40]	@ (8020770 <std+0x58>)
 8020746:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020748:	4b0a      	ldr	r3, [pc, #40]	@ (8020774 <std+0x5c>)
 802074a:	6323      	str	r3, [r4, #48]	@ 0x30
 802074c:	4b0a      	ldr	r3, [pc, #40]	@ (8020778 <std+0x60>)
 802074e:	429c      	cmp	r4, r3
 8020750:	d005      	beq.n	802075e <std+0x46>
 8020752:	4b0a      	ldr	r3, [pc, #40]	@ (802077c <std+0x64>)
 8020754:	429c      	cmp	r4, r3
 8020756:	d002      	beq.n	802075e <std+0x46>
 8020758:	4b09      	ldr	r3, [pc, #36]	@ (8020780 <std+0x68>)
 802075a:	429c      	cmp	r4, r3
 802075c:	d103      	bne.n	8020766 <std+0x4e>
 802075e:	0020      	movs	r0, r4
 8020760:	3058      	adds	r0, #88	@ 0x58
 8020762:	f000 fb41 	bl	8020de8 <__retarget_lock_init_recursive>
 8020766:	bd10      	pop	{r4, pc}
 8020768:	080209c1 	.word	0x080209c1
 802076c:	080209e9 	.word	0x080209e9
 8020770:	08020a21 	.word	0x08020a21
 8020774:	08020a4d 	.word	0x08020a4d
 8020778:	20003370 	.word	0x20003370
 802077c:	200033d8 	.word	0x200033d8
 8020780:	20003440 	.word	0x20003440

08020784 <stdio_exit_handler>:
 8020784:	b510      	push	{r4, lr}
 8020786:	4a03      	ldr	r2, [pc, #12]	@ (8020794 <stdio_exit_handler+0x10>)
 8020788:	4903      	ldr	r1, [pc, #12]	@ (8020798 <stdio_exit_handler+0x14>)
 802078a:	4804      	ldr	r0, [pc, #16]	@ (802079c <stdio_exit_handler+0x18>)
 802078c:	f000 f86c 	bl	8020868 <_fwalk_sglue>
 8020790:	bd10      	pop	{r4, pc}
 8020792:	46c0      	nop			@ (mov r8, r8)
 8020794:	20000258 	.word	0x20000258
 8020798:	0802340d 	.word	0x0802340d
 802079c:	200003d4 	.word	0x200003d4

080207a0 <cleanup_stdio>:
 80207a0:	6841      	ldr	r1, [r0, #4]
 80207a2:	4b0b      	ldr	r3, [pc, #44]	@ (80207d0 <cleanup_stdio+0x30>)
 80207a4:	b510      	push	{r4, lr}
 80207a6:	0004      	movs	r4, r0
 80207a8:	4299      	cmp	r1, r3
 80207aa:	d001      	beq.n	80207b0 <cleanup_stdio+0x10>
 80207ac:	f002 fe2e 	bl	802340c <_fflush_r>
 80207b0:	68a1      	ldr	r1, [r4, #8]
 80207b2:	4b08      	ldr	r3, [pc, #32]	@ (80207d4 <cleanup_stdio+0x34>)
 80207b4:	4299      	cmp	r1, r3
 80207b6:	d002      	beq.n	80207be <cleanup_stdio+0x1e>
 80207b8:	0020      	movs	r0, r4
 80207ba:	f002 fe27 	bl	802340c <_fflush_r>
 80207be:	68e1      	ldr	r1, [r4, #12]
 80207c0:	4b05      	ldr	r3, [pc, #20]	@ (80207d8 <cleanup_stdio+0x38>)
 80207c2:	4299      	cmp	r1, r3
 80207c4:	d002      	beq.n	80207cc <cleanup_stdio+0x2c>
 80207c6:	0020      	movs	r0, r4
 80207c8:	f002 fe20 	bl	802340c <_fflush_r>
 80207cc:	bd10      	pop	{r4, pc}
 80207ce:	46c0      	nop			@ (mov r8, r8)
 80207d0:	20003370 	.word	0x20003370
 80207d4:	200033d8 	.word	0x200033d8
 80207d8:	20003440 	.word	0x20003440

080207dc <global_stdio_init.part.0>:
 80207dc:	b510      	push	{r4, lr}
 80207de:	4b09      	ldr	r3, [pc, #36]	@ (8020804 <global_stdio_init.part.0+0x28>)
 80207e0:	4a09      	ldr	r2, [pc, #36]	@ (8020808 <global_stdio_init.part.0+0x2c>)
 80207e2:	2104      	movs	r1, #4
 80207e4:	601a      	str	r2, [r3, #0]
 80207e6:	4809      	ldr	r0, [pc, #36]	@ (802080c <global_stdio_init.part.0+0x30>)
 80207e8:	2200      	movs	r2, #0
 80207ea:	f7ff ff95 	bl	8020718 <std>
 80207ee:	2201      	movs	r2, #1
 80207f0:	2109      	movs	r1, #9
 80207f2:	4807      	ldr	r0, [pc, #28]	@ (8020810 <global_stdio_init.part.0+0x34>)
 80207f4:	f7ff ff90 	bl	8020718 <std>
 80207f8:	2202      	movs	r2, #2
 80207fa:	2112      	movs	r1, #18
 80207fc:	4805      	ldr	r0, [pc, #20]	@ (8020814 <global_stdio_init.part.0+0x38>)
 80207fe:	f7ff ff8b 	bl	8020718 <std>
 8020802:	bd10      	pop	{r4, pc}
 8020804:	200034a8 	.word	0x200034a8
 8020808:	08020785 	.word	0x08020785
 802080c:	20003370 	.word	0x20003370
 8020810:	200033d8 	.word	0x200033d8
 8020814:	20003440 	.word	0x20003440

08020818 <__sfp_lock_acquire>:
 8020818:	b510      	push	{r4, lr}
 802081a:	4802      	ldr	r0, [pc, #8]	@ (8020824 <__sfp_lock_acquire+0xc>)
 802081c:	f000 fae5 	bl	8020dea <__retarget_lock_acquire_recursive>
 8020820:	bd10      	pop	{r4, pc}
 8020822:	46c0      	nop			@ (mov r8, r8)
 8020824:	200034b1 	.word	0x200034b1

08020828 <__sfp_lock_release>:
 8020828:	b510      	push	{r4, lr}
 802082a:	4802      	ldr	r0, [pc, #8]	@ (8020834 <__sfp_lock_release+0xc>)
 802082c:	f000 fade 	bl	8020dec <__retarget_lock_release_recursive>
 8020830:	bd10      	pop	{r4, pc}
 8020832:	46c0      	nop			@ (mov r8, r8)
 8020834:	200034b1 	.word	0x200034b1

08020838 <__sinit>:
 8020838:	b510      	push	{r4, lr}
 802083a:	0004      	movs	r4, r0
 802083c:	f7ff ffec 	bl	8020818 <__sfp_lock_acquire>
 8020840:	6a23      	ldr	r3, [r4, #32]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d002      	beq.n	802084c <__sinit+0x14>
 8020846:	f7ff ffef 	bl	8020828 <__sfp_lock_release>
 802084a:	bd10      	pop	{r4, pc}
 802084c:	4b04      	ldr	r3, [pc, #16]	@ (8020860 <__sinit+0x28>)
 802084e:	6223      	str	r3, [r4, #32]
 8020850:	4b04      	ldr	r3, [pc, #16]	@ (8020864 <__sinit+0x2c>)
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	2b00      	cmp	r3, #0
 8020856:	d1f6      	bne.n	8020846 <__sinit+0xe>
 8020858:	f7ff ffc0 	bl	80207dc <global_stdio_init.part.0>
 802085c:	e7f3      	b.n	8020846 <__sinit+0xe>
 802085e:	46c0      	nop			@ (mov r8, r8)
 8020860:	080207a1 	.word	0x080207a1
 8020864:	200034a8 	.word	0x200034a8

08020868 <_fwalk_sglue>:
 8020868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802086a:	0014      	movs	r4, r2
 802086c:	2600      	movs	r6, #0
 802086e:	9000      	str	r0, [sp, #0]
 8020870:	9101      	str	r1, [sp, #4]
 8020872:	68a5      	ldr	r5, [r4, #8]
 8020874:	6867      	ldr	r7, [r4, #4]
 8020876:	3f01      	subs	r7, #1
 8020878:	d504      	bpl.n	8020884 <_fwalk_sglue+0x1c>
 802087a:	6824      	ldr	r4, [r4, #0]
 802087c:	2c00      	cmp	r4, #0
 802087e:	d1f8      	bne.n	8020872 <_fwalk_sglue+0xa>
 8020880:	0030      	movs	r0, r6
 8020882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020884:	89ab      	ldrh	r3, [r5, #12]
 8020886:	2b01      	cmp	r3, #1
 8020888:	d908      	bls.n	802089c <_fwalk_sglue+0x34>
 802088a:	220e      	movs	r2, #14
 802088c:	5eab      	ldrsh	r3, [r5, r2]
 802088e:	3301      	adds	r3, #1
 8020890:	d004      	beq.n	802089c <_fwalk_sglue+0x34>
 8020892:	0029      	movs	r1, r5
 8020894:	9800      	ldr	r0, [sp, #0]
 8020896:	9b01      	ldr	r3, [sp, #4]
 8020898:	4798      	blx	r3
 802089a:	4306      	orrs	r6, r0
 802089c:	3568      	adds	r5, #104	@ 0x68
 802089e:	e7ea      	b.n	8020876 <_fwalk_sglue+0xe>

080208a0 <iprintf>:
 80208a0:	b40f      	push	{r0, r1, r2, r3}
 80208a2:	b507      	push	{r0, r1, r2, lr}
 80208a4:	4905      	ldr	r1, [pc, #20]	@ (80208bc <iprintf+0x1c>)
 80208a6:	ab04      	add	r3, sp, #16
 80208a8:	6808      	ldr	r0, [r1, #0]
 80208aa:	cb04      	ldmia	r3!, {r2}
 80208ac:	6881      	ldr	r1, [r0, #8]
 80208ae:	9301      	str	r3, [sp, #4]
 80208b0:	f002 fc0a 	bl	80230c8 <_vfiprintf_r>
 80208b4:	b003      	add	sp, #12
 80208b6:	bc08      	pop	{r3}
 80208b8:	b004      	add	sp, #16
 80208ba:	4718      	bx	r3
 80208bc:	200003d0 	.word	0x200003d0

080208c0 <_puts_r>:
 80208c0:	6a03      	ldr	r3, [r0, #32]
 80208c2:	b570      	push	{r4, r5, r6, lr}
 80208c4:	0005      	movs	r5, r0
 80208c6:	000e      	movs	r6, r1
 80208c8:	6884      	ldr	r4, [r0, #8]
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d101      	bne.n	80208d2 <_puts_r+0x12>
 80208ce:	f7ff ffb3 	bl	8020838 <__sinit>
 80208d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80208d4:	07db      	lsls	r3, r3, #31
 80208d6:	d405      	bmi.n	80208e4 <_puts_r+0x24>
 80208d8:	89a3      	ldrh	r3, [r4, #12]
 80208da:	059b      	lsls	r3, r3, #22
 80208dc:	d402      	bmi.n	80208e4 <_puts_r+0x24>
 80208de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80208e0:	f000 fa83 	bl	8020dea <__retarget_lock_acquire_recursive>
 80208e4:	89a3      	ldrh	r3, [r4, #12]
 80208e6:	071b      	lsls	r3, r3, #28
 80208e8:	d502      	bpl.n	80208f0 <_puts_r+0x30>
 80208ea:	6923      	ldr	r3, [r4, #16]
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d11f      	bne.n	8020930 <_puts_r+0x70>
 80208f0:	0021      	movs	r1, r4
 80208f2:	0028      	movs	r0, r5
 80208f4:	f000 f94c 	bl	8020b90 <__swsetup_r>
 80208f8:	2800      	cmp	r0, #0
 80208fa:	d019      	beq.n	8020930 <_puts_r+0x70>
 80208fc:	2501      	movs	r5, #1
 80208fe:	426d      	negs	r5, r5
 8020900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020902:	07db      	lsls	r3, r3, #31
 8020904:	d405      	bmi.n	8020912 <_puts_r+0x52>
 8020906:	89a3      	ldrh	r3, [r4, #12]
 8020908:	059b      	lsls	r3, r3, #22
 802090a:	d402      	bmi.n	8020912 <_puts_r+0x52>
 802090c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802090e:	f000 fa6d 	bl	8020dec <__retarget_lock_release_recursive>
 8020912:	0028      	movs	r0, r5
 8020914:	bd70      	pop	{r4, r5, r6, pc}
 8020916:	3601      	adds	r6, #1
 8020918:	60a3      	str	r3, [r4, #8]
 802091a:	2b00      	cmp	r3, #0
 802091c:	da04      	bge.n	8020928 <_puts_r+0x68>
 802091e:	69a2      	ldr	r2, [r4, #24]
 8020920:	429a      	cmp	r2, r3
 8020922:	dc16      	bgt.n	8020952 <_puts_r+0x92>
 8020924:	290a      	cmp	r1, #10
 8020926:	d014      	beq.n	8020952 <_puts_r+0x92>
 8020928:	6823      	ldr	r3, [r4, #0]
 802092a:	1c5a      	adds	r2, r3, #1
 802092c:	6022      	str	r2, [r4, #0]
 802092e:	7019      	strb	r1, [r3, #0]
 8020930:	68a3      	ldr	r3, [r4, #8]
 8020932:	7831      	ldrb	r1, [r6, #0]
 8020934:	3b01      	subs	r3, #1
 8020936:	2900      	cmp	r1, #0
 8020938:	d1ed      	bne.n	8020916 <_puts_r+0x56>
 802093a:	60a3      	str	r3, [r4, #8]
 802093c:	2b00      	cmp	r3, #0
 802093e:	da0f      	bge.n	8020960 <_puts_r+0xa0>
 8020940:	0022      	movs	r2, r4
 8020942:	0028      	movs	r0, r5
 8020944:	310a      	adds	r1, #10
 8020946:	f000 f8e1 	bl	8020b0c <__swbuf_r>
 802094a:	3001      	adds	r0, #1
 802094c:	d0d6      	beq.n	80208fc <_puts_r+0x3c>
 802094e:	250a      	movs	r5, #10
 8020950:	e7d6      	b.n	8020900 <_puts_r+0x40>
 8020952:	0022      	movs	r2, r4
 8020954:	0028      	movs	r0, r5
 8020956:	f000 f8d9 	bl	8020b0c <__swbuf_r>
 802095a:	3001      	adds	r0, #1
 802095c:	d1e8      	bne.n	8020930 <_puts_r+0x70>
 802095e:	e7cd      	b.n	80208fc <_puts_r+0x3c>
 8020960:	6823      	ldr	r3, [r4, #0]
 8020962:	1c5a      	adds	r2, r3, #1
 8020964:	6022      	str	r2, [r4, #0]
 8020966:	220a      	movs	r2, #10
 8020968:	701a      	strb	r2, [r3, #0]
 802096a:	e7f0      	b.n	802094e <_puts_r+0x8e>

0802096c <puts>:
 802096c:	b510      	push	{r4, lr}
 802096e:	4b03      	ldr	r3, [pc, #12]	@ (802097c <puts+0x10>)
 8020970:	0001      	movs	r1, r0
 8020972:	6818      	ldr	r0, [r3, #0]
 8020974:	f7ff ffa4 	bl	80208c0 <_puts_r>
 8020978:	bd10      	pop	{r4, pc}
 802097a:	46c0      	nop			@ (mov r8, r8)
 802097c:	200003d0 	.word	0x200003d0

08020980 <siprintf>:
 8020980:	b40e      	push	{r1, r2, r3}
 8020982:	b500      	push	{lr}
 8020984:	490b      	ldr	r1, [pc, #44]	@ (80209b4 <siprintf+0x34>)
 8020986:	b09c      	sub	sp, #112	@ 0x70
 8020988:	ab1d      	add	r3, sp, #116	@ 0x74
 802098a:	9002      	str	r0, [sp, #8]
 802098c:	9006      	str	r0, [sp, #24]
 802098e:	9107      	str	r1, [sp, #28]
 8020990:	9104      	str	r1, [sp, #16]
 8020992:	4809      	ldr	r0, [pc, #36]	@ (80209b8 <siprintf+0x38>)
 8020994:	4909      	ldr	r1, [pc, #36]	@ (80209bc <siprintf+0x3c>)
 8020996:	cb04      	ldmia	r3!, {r2}
 8020998:	9105      	str	r1, [sp, #20]
 802099a:	6800      	ldr	r0, [r0, #0]
 802099c:	a902      	add	r1, sp, #8
 802099e:	9301      	str	r3, [sp, #4]
 80209a0:	f002 fa6c 	bl	8022e7c <_svfiprintf_r>
 80209a4:	2200      	movs	r2, #0
 80209a6:	9b02      	ldr	r3, [sp, #8]
 80209a8:	701a      	strb	r2, [r3, #0]
 80209aa:	b01c      	add	sp, #112	@ 0x70
 80209ac:	bc08      	pop	{r3}
 80209ae:	b003      	add	sp, #12
 80209b0:	4718      	bx	r3
 80209b2:	46c0      	nop			@ (mov r8, r8)
 80209b4:	7fffffff 	.word	0x7fffffff
 80209b8:	200003d0 	.word	0x200003d0
 80209bc:	ffff0208 	.word	0xffff0208

080209c0 <__sread>:
 80209c0:	b570      	push	{r4, r5, r6, lr}
 80209c2:	000c      	movs	r4, r1
 80209c4:	250e      	movs	r5, #14
 80209c6:	5f49      	ldrsh	r1, [r1, r5]
 80209c8:	f000 f9bc 	bl	8020d44 <_read_r>
 80209cc:	2800      	cmp	r0, #0
 80209ce:	db03      	blt.n	80209d8 <__sread+0x18>
 80209d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80209d2:	181b      	adds	r3, r3, r0
 80209d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80209d6:	bd70      	pop	{r4, r5, r6, pc}
 80209d8:	89a3      	ldrh	r3, [r4, #12]
 80209da:	4a02      	ldr	r2, [pc, #8]	@ (80209e4 <__sread+0x24>)
 80209dc:	4013      	ands	r3, r2
 80209de:	81a3      	strh	r3, [r4, #12]
 80209e0:	e7f9      	b.n	80209d6 <__sread+0x16>
 80209e2:	46c0      	nop			@ (mov r8, r8)
 80209e4:	ffffefff 	.word	0xffffefff

080209e8 <__swrite>:
 80209e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209ea:	001f      	movs	r7, r3
 80209ec:	898b      	ldrh	r3, [r1, #12]
 80209ee:	0005      	movs	r5, r0
 80209f0:	000c      	movs	r4, r1
 80209f2:	0016      	movs	r6, r2
 80209f4:	05db      	lsls	r3, r3, #23
 80209f6:	d505      	bpl.n	8020a04 <__swrite+0x1c>
 80209f8:	230e      	movs	r3, #14
 80209fa:	5ec9      	ldrsh	r1, [r1, r3]
 80209fc:	2200      	movs	r2, #0
 80209fe:	2302      	movs	r3, #2
 8020a00:	f000 f98c 	bl	8020d1c <_lseek_r>
 8020a04:	89a3      	ldrh	r3, [r4, #12]
 8020a06:	4a05      	ldr	r2, [pc, #20]	@ (8020a1c <__swrite+0x34>)
 8020a08:	0028      	movs	r0, r5
 8020a0a:	4013      	ands	r3, r2
 8020a0c:	81a3      	strh	r3, [r4, #12]
 8020a0e:	0032      	movs	r2, r6
 8020a10:	230e      	movs	r3, #14
 8020a12:	5ee1      	ldrsh	r1, [r4, r3]
 8020a14:	003b      	movs	r3, r7
 8020a16:	f000 f9a9 	bl	8020d6c <_write_r>
 8020a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020a1c:	ffffefff 	.word	0xffffefff

08020a20 <__sseek>:
 8020a20:	b570      	push	{r4, r5, r6, lr}
 8020a22:	000c      	movs	r4, r1
 8020a24:	250e      	movs	r5, #14
 8020a26:	5f49      	ldrsh	r1, [r1, r5]
 8020a28:	f000 f978 	bl	8020d1c <_lseek_r>
 8020a2c:	89a3      	ldrh	r3, [r4, #12]
 8020a2e:	1c42      	adds	r2, r0, #1
 8020a30:	d103      	bne.n	8020a3a <__sseek+0x1a>
 8020a32:	4a05      	ldr	r2, [pc, #20]	@ (8020a48 <__sseek+0x28>)
 8020a34:	4013      	ands	r3, r2
 8020a36:	81a3      	strh	r3, [r4, #12]
 8020a38:	bd70      	pop	{r4, r5, r6, pc}
 8020a3a:	2280      	movs	r2, #128	@ 0x80
 8020a3c:	0152      	lsls	r2, r2, #5
 8020a3e:	4313      	orrs	r3, r2
 8020a40:	81a3      	strh	r3, [r4, #12]
 8020a42:	6560      	str	r0, [r4, #84]	@ 0x54
 8020a44:	e7f8      	b.n	8020a38 <__sseek+0x18>
 8020a46:	46c0      	nop			@ (mov r8, r8)
 8020a48:	ffffefff 	.word	0xffffefff

08020a4c <__sclose>:
 8020a4c:	b510      	push	{r4, lr}
 8020a4e:	230e      	movs	r3, #14
 8020a50:	5ec9      	ldrsh	r1, [r1, r3]
 8020a52:	f000 f951 	bl	8020cf8 <_close_r>
 8020a56:	bd10      	pop	{r4, pc}

08020a58 <_vsniprintf_r>:
 8020a58:	b530      	push	{r4, r5, lr}
 8020a5a:	0014      	movs	r4, r2
 8020a5c:	0005      	movs	r5, r0
 8020a5e:	001a      	movs	r2, r3
 8020a60:	b09b      	sub	sp, #108	@ 0x6c
 8020a62:	2c00      	cmp	r4, #0
 8020a64:	da05      	bge.n	8020a72 <_vsniprintf_r+0x1a>
 8020a66:	238b      	movs	r3, #139	@ 0x8b
 8020a68:	6003      	str	r3, [r0, #0]
 8020a6a:	2001      	movs	r0, #1
 8020a6c:	4240      	negs	r0, r0
 8020a6e:	b01b      	add	sp, #108	@ 0x6c
 8020a70:	bd30      	pop	{r4, r5, pc}
 8020a72:	2382      	movs	r3, #130	@ 0x82
 8020a74:	4668      	mov	r0, sp
 8020a76:	009b      	lsls	r3, r3, #2
 8020a78:	8183      	strh	r3, [r0, #12]
 8020a7a:	2300      	movs	r3, #0
 8020a7c:	9100      	str	r1, [sp, #0]
 8020a7e:	9104      	str	r1, [sp, #16]
 8020a80:	429c      	cmp	r4, r3
 8020a82:	d000      	beq.n	8020a86 <_vsniprintf_r+0x2e>
 8020a84:	1e63      	subs	r3, r4, #1
 8020a86:	9302      	str	r3, [sp, #8]
 8020a88:	9305      	str	r3, [sp, #20]
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	4669      	mov	r1, sp
 8020a8e:	425b      	negs	r3, r3
 8020a90:	81cb      	strh	r3, [r1, #14]
 8020a92:	0028      	movs	r0, r5
 8020a94:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020a96:	f002 f9f1 	bl	8022e7c <_svfiprintf_r>
 8020a9a:	1c43      	adds	r3, r0, #1
 8020a9c:	da01      	bge.n	8020aa2 <_vsniprintf_r+0x4a>
 8020a9e:	238b      	movs	r3, #139	@ 0x8b
 8020aa0:	602b      	str	r3, [r5, #0]
 8020aa2:	2c00      	cmp	r4, #0
 8020aa4:	d0e3      	beq.n	8020a6e <_vsniprintf_r+0x16>
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	9b00      	ldr	r3, [sp, #0]
 8020aaa:	701a      	strb	r2, [r3, #0]
 8020aac:	e7df      	b.n	8020a6e <_vsniprintf_r+0x16>
	...

08020ab0 <vsniprintf>:
 8020ab0:	b513      	push	{r0, r1, r4, lr}
 8020ab2:	4c04      	ldr	r4, [pc, #16]	@ (8020ac4 <vsniprintf+0x14>)
 8020ab4:	9300      	str	r3, [sp, #0]
 8020ab6:	0013      	movs	r3, r2
 8020ab8:	000a      	movs	r2, r1
 8020aba:	0001      	movs	r1, r0
 8020abc:	6820      	ldr	r0, [r4, #0]
 8020abe:	f7ff ffcb 	bl	8020a58 <_vsniprintf_r>
 8020ac2:	bd16      	pop	{r1, r2, r4, pc}
 8020ac4:	200003d0 	.word	0x200003d0

08020ac8 <_vsiprintf_r>:
 8020ac8:	b500      	push	{lr}
 8020aca:	b09b      	sub	sp, #108	@ 0x6c
 8020acc:	9100      	str	r1, [sp, #0]
 8020ace:	9104      	str	r1, [sp, #16]
 8020ad0:	4906      	ldr	r1, [pc, #24]	@ (8020aec <_vsiprintf_r+0x24>)
 8020ad2:	9105      	str	r1, [sp, #20]
 8020ad4:	9102      	str	r1, [sp, #8]
 8020ad6:	4906      	ldr	r1, [pc, #24]	@ (8020af0 <_vsiprintf_r+0x28>)
 8020ad8:	9103      	str	r1, [sp, #12]
 8020ada:	4669      	mov	r1, sp
 8020adc:	f002 f9ce 	bl	8022e7c <_svfiprintf_r>
 8020ae0:	2200      	movs	r2, #0
 8020ae2:	9b00      	ldr	r3, [sp, #0]
 8020ae4:	701a      	strb	r2, [r3, #0]
 8020ae6:	b01b      	add	sp, #108	@ 0x6c
 8020ae8:	bd00      	pop	{pc}
 8020aea:	46c0      	nop			@ (mov r8, r8)
 8020aec:	7fffffff 	.word	0x7fffffff
 8020af0:	ffff0208 	.word	0xffff0208

08020af4 <vsiprintf>:
 8020af4:	b510      	push	{r4, lr}
 8020af6:	4c04      	ldr	r4, [pc, #16]	@ (8020b08 <vsiprintf+0x14>)
 8020af8:	0013      	movs	r3, r2
 8020afa:	000a      	movs	r2, r1
 8020afc:	0001      	movs	r1, r0
 8020afe:	6820      	ldr	r0, [r4, #0]
 8020b00:	f7ff ffe2 	bl	8020ac8 <_vsiprintf_r>
 8020b04:	bd10      	pop	{r4, pc}
 8020b06:	46c0      	nop			@ (mov r8, r8)
 8020b08:	200003d0 	.word	0x200003d0

08020b0c <__swbuf_r>:
 8020b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b0e:	0006      	movs	r6, r0
 8020b10:	000d      	movs	r5, r1
 8020b12:	0014      	movs	r4, r2
 8020b14:	2800      	cmp	r0, #0
 8020b16:	d004      	beq.n	8020b22 <__swbuf_r+0x16>
 8020b18:	6a03      	ldr	r3, [r0, #32]
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	d101      	bne.n	8020b22 <__swbuf_r+0x16>
 8020b1e:	f7ff fe8b 	bl	8020838 <__sinit>
 8020b22:	69a3      	ldr	r3, [r4, #24]
 8020b24:	60a3      	str	r3, [r4, #8]
 8020b26:	89a3      	ldrh	r3, [r4, #12]
 8020b28:	071b      	lsls	r3, r3, #28
 8020b2a:	d502      	bpl.n	8020b32 <__swbuf_r+0x26>
 8020b2c:	6923      	ldr	r3, [r4, #16]
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d109      	bne.n	8020b46 <__swbuf_r+0x3a>
 8020b32:	0021      	movs	r1, r4
 8020b34:	0030      	movs	r0, r6
 8020b36:	f000 f82b 	bl	8020b90 <__swsetup_r>
 8020b3a:	2800      	cmp	r0, #0
 8020b3c:	d003      	beq.n	8020b46 <__swbuf_r+0x3a>
 8020b3e:	2501      	movs	r5, #1
 8020b40:	426d      	negs	r5, r5
 8020b42:	0028      	movs	r0, r5
 8020b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020b46:	6923      	ldr	r3, [r4, #16]
 8020b48:	6820      	ldr	r0, [r4, #0]
 8020b4a:	b2ef      	uxtb	r7, r5
 8020b4c:	1ac0      	subs	r0, r0, r3
 8020b4e:	6963      	ldr	r3, [r4, #20]
 8020b50:	b2ed      	uxtb	r5, r5
 8020b52:	4283      	cmp	r3, r0
 8020b54:	dc05      	bgt.n	8020b62 <__swbuf_r+0x56>
 8020b56:	0021      	movs	r1, r4
 8020b58:	0030      	movs	r0, r6
 8020b5a:	f002 fc57 	bl	802340c <_fflush_r>
 8020b5e:	2800      	cmp	r0, #0
 8020b60:	d1ed      	bne.n	8020b3e <__swbuf_r+0x32>
 8020b62:	68a3      	ldr	r3, [r4, #8]
 8020b64:	3001      	adds	r0, #1
 8020b66:	3b01      	subs	r3, #1
 8020b68:	60a3      	str	r3, [r4, #8]
 8020b6a:	6823      	ldr	r3, [r4, #0]
 8020b6c:	1c5a      	adds	r2, r3, #1
 8020b6e:	6022      	str	r2, [r4, #0]
 8020b70:	701f      	strb	r7, [r3, #0]
 8020b72:	6963      	ldr	r3, [r4, #20]
 8020b74:	4283      	cmp	r3, r0
 8020b76:	d004      	beq.n	8020b82 <__swbuf_r+0x76>
 8020b78:	89a3      	ldrh	r3, [r4, #12]
 8020b7a:	07db      	lsls	r3, r3, #31
 8020b7c:	d5e1      	bpl.n	8020b42 <__swbuf_r+0x36>
 8020b7e:	2d0a      	cmp	r5, #10
 8020b80:	d1df      	bne.n	8020b42 <__swbuf_r+0x36>
 8020b82:	0021      	movs	r1, r4
 8020b84:	0030      	movs	r0, r6
 8020b86:	f002 fc41 	bl	802340c <_fflush_r>
 8020b8a:	2800      	cmp	r0, #0
 8020b8c:	d0d9      	beq.n	8020b42 <__swbuf_r+0x36>
 8020b8e:	e7d6      	b.n	8020b3e <__swbuf_r+0x32>

08020b90 <__swsetup_r>:
 8020b90:	4b2d      	ldr	r3, [pc, #180]	@ (8020c48 <__swsetup_r+0xb8>)
 8020b92:	b570      	push	{r4, r5, r6, lr}
 8020b94:	0005      	movs	r5, r0
 8020b96:	6818      	ldr	r0, [r3, #0]
 8020b98:	000c      	movs	r4, r1
 8020b9a:	2800      	cmp	r0, #0
 8020b9c:	d004      	beq.n	8020ba8 <__swsetup_r+0x18>
 8020b9e:	6a03      	ldr	r3, [r0, #32]
 8020ba0:	2b00      	cmp	r3, #0
 8020ba2:	d101      	bne.n	8020ba8 <__swsetup_r+0x18>
 8020ba4:	f7ff fe48 	bl	8020838 <__sinit>
 8020ba8:	230c      	movs	r3, #12
 8020baa:	5ee2      	ldrsh	r2, [r4, r3]
 8020bac:	0713      	lsls	r3, r2, #28
 8020bae:	d423      	bmi.n	8020bf8 <__swsetup_r+0x68>
 8020bb0:	06d3      	lsls	r3, r2, #27
 8020bb2:	d407      	bmi.n	8020bc4 <__swsetup_r+0x34>
 8020bb4:	2309      	movs	r3, #9
 8020bb6:	602b      	str	r3, [r5, #0]
 8020bb8:	2340      	movs	r3, #64	@ 0x40
 8020bba:	2001      	movs	r0, #1
 8020bbc:	4313      	orrs	r3, r2
 8020bbe:	81a3      	strh	r3, [r4, #12]
 8020bc0:	4240      	negs	r0, r0
 8020bc2:	e03a      	b.n	8020c3a <__swsetup_r+0xaa>
 8020bc4:	0752      	lsls	r2, r2, #29
 8020bc6:	d513      	bpl.n	8020bf0 <__swsetup_r+0x60>
 8020bc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020bca:	2900      	cmp	r1, #0
 8020bcc:	d008      	beq.n	8020be0 <__swsetup_r+0x50>
 8020bce:	0023      	movs	r3, r4
 8020bd0:	3344      	adds	r3, #68	@ 0x44
 8020bd2:	4299      	cmp	r1, r3
 8020bd4:	d002      	beq.n	8020bdc <__swsetup_r+0x4c>
 8020bd6:	0028      	movs	r0, r5
 8020bd8:	f000 ffa6 	bl	8021b28 <_free_r>
 8020bdc:	2300      	movs	r3, #0
 8020bde:	6363      	str	r3, [r4, #52]	@ 0x34
 8020be0:	2224      	movs	r2, #36	@ 0x24
 8020be2:	89a3      	ldrh	r3, [r4, #12]
 8020be4:	4393      	bics	r3, r2
 8020be6:	81a3      	strh	r3, [r4, #12]
 8020be8:	2300      	movs	r3, #0
 8020bea:	6063      	str	r3, [r4, #4]
 8020bec:	6923      	ldr	r3, [r4, #16]
 8020bee:	6023      	str	r3, [r4, #0]
 8020bf0:	2308      	movs	r3, #8
 8020bf2:	89a2      	ldrh	r2, [r4, #12]
 8020bf4:	4313      	orrs	r3, r2
 8020bf6:	81a3      	strh	r3, [r4, #12]
 8020bf8:	6923      	ldr	r3, [r4, #16]
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	d10b      	bne.n	8020c16 <__swsetup_r+0x86>
 8020bfe:	21a0      	movs	r1, #160	@ 0xa0
 8020c00:	2280      	movs	r2, #128	@ 0x80
 8020c02:	89a3      	ldrh	r3, [r4, #12]
 8020c04:	0089      	lsls	r1, r1, #2
 8020c06:	0092      	lsls	r2, r2, #2
 8020c08:	400b      	ands	r3, r1
 8020c0a:	4293      	cmp	r3, r2
 8020c0c:	d003      	beq.n	8020c16 <__swsetup_r+0x86>
 8020c0e:	0021      	movs	r1, r4
 8020c10:	0028      	movs	r0, r5
 8020c12:	f002 fc51 	bl	80234b8 <__smakebuf_r>
 8020c16:	230c      	movs	r3, #12
 8020c18:	5ee2      	ldrsh	r2, [r4, r3]
 8020c1a:	2101      	movs	r1, #1
 8020c1c:	0013      	movs	r3, r2
 8020c1e:	400b      	ands	r3, r1
 8020c20:	420a      	tst	r2, r1
 8020c22:	d00b      	beq.n	8020c3c <__swsetup_r+0xac>
 8020c24:	2300      	movs	r3, #0
 8020c26:	60a3      	str	r3, [r4, #8]
 8020c28:	6963      	ldr	r3, [r4, #20]
 8020c2a:	425b      	negs	r3, r3
 8020c2c:	61a3      	str	r3, [r4, #24]
 8020c2e:	2000      	movs	r0, #0
 8020c30:	6923      	ldr	r3, [r4, #16]
 8020c32:	4283      	cmp	r3, r0
 8020c34:	d101      	bne.n	8020c3a <__swsetup_r+0xaa>
 8020c36:	0613      	lsls	r3, r2, #24
 8020c38:	d4be      	bmi.n	8020bb8 <__swsetup_r+0x28>
 8020c3a:	bd70      	pop	{r4, r5, r6, pc}
 8020c3c:	0791      	lsls	r1, r2, #30
 8020c3e:	d400      	bmi.n	8020c42 <__swsetup_r+0xb2>
 8020c40:	6963      	ldr	r3, [r4, #20]
 8020c42:	60a3      	str	r3, [r4, #8]
 8020c44:	e7f3      	b.n	8020c2e <__swsetup_r+0x9e>
 8020c46:	46c0      	nop			@ (mov r8, r8)
 8020c48:	200003d0 	.word	0x200003d0

08020c4c <memset>:
 8020c4c:	0003      	movs	r3, r0
 8020c4e:	1882      	adds	r2, r0, r2
 8020c50:	4293      	cmp	r3, r2
 8020c52:	d100      	bne.n	8020c56 <memset+0xa>
 8020c54:	4770      	bx	lr
 8020c56:	7019      	strb	r1, [r3, #0]
 8020c58:	3301      	adds	r3, #1
 8020c5a:	e7f9      	b.n	8020c50 <memset+0x4>

08020c5c <strchr>:
 8020c5c:	b2c9      	uxtb	r1, r1
 8020c5e:	7803      	ldrb	r3, [r0, #0]
 8020c60:	2b00      	cmp	r3, #0
 8020c62:	d004      	beq.n	8020c6e <strchr+0x12>
 8020c64:	428b      	cmp	r3, r1
 8020c66:	d100      	bne.n	8020c6a <strchr+0xe>
 8020c68:	4770      	bx	lr
 8020c6a:	3001      	adds	r0, #1
 8020c6c:	e7f7      	b.n	8020c5e <strchr+0x2>
 8020c6e:	424b      	negs	r3, r1
 8020c70:	4159      	adcs	r1, r3
 8020c72:	4249      	negs	r1, r1
 8020c74:	4008      	ands	r0, r1
 8020c76:	e7f7      	b.n	8020c68 <strchr+0xc>

08020c78 <strncmp>:
 8020c78:	b530      	push	{r4, r5, lr}
 8020c7a:	0005      	movs	r5, r0
 8020c7c:	1e10      	subs	r0, r2, #0
 8020c7e:	d00b      	beq.n	8020c98 <strncmp+0x20>
 8020c80:	2400      	movs	r4, #0
 8020c82:	3a01      	subs	r2, #1
 8020c84:	5d2b      	ldrb	r3, [r5, r4]
 8020c86:	5d08      	ldrb	r0, [r1, r4]
 8020c88:	4283      	cmp	r3, r0
 8020c8a:	d104      	bne.n	8020c96 <strncmp+0x1e>
 8020c8c:	42a2      	cmp	r2, r4
 8020c8e:	d002      	beq.n	8020c96 <strncmp+0x1e>
 8020c90:	3401      	adds	r4, #1
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	d1f6      	bne.n	8020c84 <strncmp+0xc>
 8020c96:	1a18      	subs	r0, r3, r0
 8020c98:	bd30      	pop	{r4, r5, pc}

08020c9a <strncpy>:
 8020c9a:	0003      	movs	r3, r0
 8020c9c:	b530      	push	{r4, r5, lr}
 8020c9e:	001d      	movs	r5, r3
 8020ca0:	2a00      	cmp	r2, #0
 8020ca2:	d006      	beq.n	8020cb2 <strncpy+0x18>
 8020ca4:	780c      	ldrb	r4, [r1, #0]
 8020ca6:	3a01      	subs	r2, #1
 8020ca8:	3301      	adds	r3, #1
 8020caa:	702c      	strb	r4, [r5, #0]
 8020cac:	3101      	adds	r1, #1
 8020cae:	2c00      	cmp	r4, #0
 8020cb0:	d1f5      	bne.n	8020c9e <strncpy+0x4>
 8020cb2:	2100      	movs	r1, #0
 8020cb4:	189a      	adds	r2, r3, r2
 8020cb6:	4293      	cmp	r3, r2
 8020cb8:	d100      	bne.n	8020cbc <strncpy+0x22>
 8020cba:	bd30      	pop	{r4, r5, pc}
 8020cbc:	7019      	strb	r1, [r3, #0]
 8020cbe:	3301      	adds	r3, #1
 8020cc0:	e7f9      	b.n	8020cb6 <strncpy+0x1c>

08020cc2 <strstr>:
 8020cc2:	780a      	ldrb	r2, [r1, #0]
 8020cc4:	b530      	push	{r4, r5, lr}
 8020cc6:	2a00      	cmp	r2, #0
 8020cc8:	d10c      	bne.n	8020ce4 <strstr+0x22>
 8020cca:	bd30      	pop	{r4, r5, pc}
 8020ccc:	429a      	cmp	r2, r3
 8020cce:	d108      	bne.n	8020ce2 <strstr+0x20>
 8020cd0:	2301      	movs	r3, #1
 8020cd2:	5ccc      	ldrb	r4, [r1, r3]
 8020cd4:	2c00      	cmp	r4, #0
 8020cd6:	d0f8      	beq.n	8020cca <strstr+0x8>
 8020cd8:	5cc5      	ldrb	r5, [r0, r3]
 8020cda:	42a5      	cmp	r5, r4
 8020cdc:	d101      	bne.n	8020ce2 <strstr+0x20>
 8020cde:	3301      	adds	r3, #1
 8020ce0:	e7f7      	b.n	8020cd2 <strstr+0x10>
 8020ce2:	3001      	adds	r0, #1
 8020ce4:	7803      	ldrb	r3, [r0, #0]
 8020ce6:	2b00      	cmp	r3, #0
 8020ce8:	d1f0      	bne.n	8020ccc <strstr+0xa>
 8020cea:	0018      	movs	r0, r3
 8020cec:	e7ed      	b.n	8020cca <strstr+0x8>
	...

08020cf0 <_localeconv_r>:
 8020cf0:	4800      	ldr	r0, [pc, #0]	@ (8020cf4 <_localeconv_r+0x4>)
 8020cf2:	4770      	bx	lr
 8020cf4:	20000354 	.word	0x20000354

08020cf8 <_close_r>:
 8020cf8:	2300      	movs	r3, #0
 8020cfa:	b570      	push	{r4, r5, r6, lr}
 8020cfc:	4d06      	ldr	r5, [pc, #24]	@ (8020d18 <_close_r+0x20>)
 8020cfe:	0004      	movs	r4, r0
 8020d00:	0008      	movs	r0, r1
 8020d02:	602b      	str	r3, [r5, #0]
 8020d04:	f7ed fc86 	bl	800e614 <_close>
 8020d08:	1c43      	adds	r3, r0, #1
 8020d0a:	d103      	bne.n	8020d14 <_close_r+0x1c>
 8020d0c:	682b      	ldr	r3, [r5, #0]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d000      	beq.n	8020d14 <_close_r+0x1c>
 8020d12:	6023      	str	r3, [r4, #0]
 8020d14:	bd70      	pop	{r4, r5, r6, pc}
 8020d16:	46c0      	nop			@ (mov r8, r8)
 8020d18:	200034ac 	.word	0x200034ac

08020d1c <_lseek_r>:
 8020d1c:	b570      	push	{r4, r5, r6, lr}
 8020d1e:	0004      	movs	r4, r0
 8020d20:	0008      	movs	r0, r1
 8020d22:	0011      	movs	r1, r2
 8020d24:	001a      	movs	r2, r3
 8020d26:	2300      	movs	r3, #0
 8020d28:	4d05      	ldr	r5, [pc, #20]	@ (8020d40 <_lseek_r+0x24>)
 8020d2a:	602b      	str	r3, [r5, #0]
 8020d2c:	f7ed fc93 	bl	800e656 <_lseek>
 8020d30:	1c43      	adds	r3, r0, #1
 8020d32:	d103      	bne.n	8020d3c <_lseek_r+0x20>
 8020d34:	682b      	ldr	r3, [r5, #0]
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d000      	beq.n	8020d3c <_lseek_r+0x20>
 8020d3a:	6023      	str	r3, [r4, #0]
 8020d3c:	bd70      	pop	{r4, r5, r6, pc}
 8020d3e:	46c0      	nop			@ (mov r8, r8)
 8020d40:	200034ac 	.word	0x200034ac

08020d44 <_read_r>:
 8020d44:	b570      	push	{r4, r5, r6, lr}
 8020d46:	0004      	movs	r4, r0
 8020d48:	0008      	movs	r0, r1
 8020d4a:	0011      	movs	r1, r2
 8020d4c:	001a      	movs	r2, r3
 8020d4e:	2300      	movs	r3, #0
 8020d50:	4d05      	ldr	r5, [pc, #20]	@ (8020d68 <_read_r+0x24>)
 8020d52:	602b      	str	r3, [r5, #0]
 8020d54:	f7ed fc41 	bl	800e5da <_read>
 8020d58:	1c43      	adds	r3, r0, #1
 8020d5a:	d103      	bne.n	8020d64 <_read_r+0x20>
 8020d5c:	682b      	ldr	r3, [r5, #0]
 8020d5e:	2b00      	cmp	r3, #0
 8020d60:	d000      	beq.n	8020d64 <_read_r+0x20>
 8020d62:	6023      	str	r3, [r4, #0]
 8020d64:	bd70      	pop	{r4, r5, r6, pc}
 8020d66:	46c0      	nop			@ (mov r8, r8)
 8020d68:	200034ac 	.word	0x200034ac

08020d6c <_write_r>:
 8020d6c:	b570      	push	{r4, r5, r6, lr}
 8020d6e:	0004      	movs	r4, r0
 8020d70:	0008      	movs	r0, r1
 8020d72:	0011      	movs	r1, r2
 8020d74:	001a      	movs	r2, r3
 8020d76:	2300      	movs	r3, #0
 8020d78:	4d05      	ldr	r5, [pc, #20]	@ (8020d90 <_write_r+0x24>)
 8020d7a:	602b      	str	r3, [r5, #0]
 8020d7c:	f7ee f8fe 	bl	800ef7c <_write>
 8020d80:	1c43      	adds	r3, r0, #1
 8020d82:	d103      	bne.n	8020d8c <_write_r+0x20>
 8020d84:	682b      	ldr	r3, [r5, #0]
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d000      	beq.n	8020d8c <_write_r+0x20>
 8020d8a:	6023      	str	r3, [r4, #0]
 8020d8c:	bd70      	pop	{r4, r5, r6, pc}
 8020d8e:	46c0      	nop			@ (mov r8, r8)
 8020d90:	200034ac 	.word	0x200034ac

08020d94 <__errno>:
 8020d94:	4b01      	ldr	r3, [pc, #4]	@ (8020d9c <__errno+0x8>)
 8020d96:	6818      	ldr	r0, [r3, #0]
 8020d98:	4770      	bx	lr
 8020d9a:	46c0      	nop			@ (mov r8, r8)
 8020d9c:	200003d0 	.word	0x200003d0

08020da0 <__libc_init_array>:
 8020da0:	b570      	push	{r4, r5, r6, lr}
 8020da2:	2600      	movs	r6, #0
 8020da4:	4c0c      	ldr	r4, [pc, #48]	@ (8020dd8 <__libc_init_array+0x38>)
 8020da6:	4d0d      	ldr	r5, [pc, #52]	@ (8020ddc <__libc_init_array+0x3c>)
 8020da8:	1b64      	subs	r4, r4, r5
 8020daa:	10a4      	asrs	r4, r4, #2
 8020dac:	42a6      	cmp	r6, r4
 8020dae:	d109      	bne.n	8020dc4 <__libc_init_array+0x24>
 8020db0:	2600      	movs	r6, #0
 8020db2:	f002 fee9 	bl	8023b88 <_init>
 8020db6:	4c0a      	ldr	r4, [pc, #40]	@ (8020de0 <__libc_init_array+0x40>)
 8020db8:	4d0a      	ldr	r5, [pc, #40]	@ (8020de4 <__libc_init_array+0x44>)
 8020dba:	1b64      	subs	r4, r4, r5
 8020dbc:	10a4      	asrs	r4, r4, #2
 8020dbe:	42a6      	cmp	r6, r4
 8020dc0:	d105      	bne.n	8020dce <__libc_init_array+0x2e>
 8020dc2:	bd70      	pop	{r4, r5, r6, pc}
 8020dc4:	00b3      	lsls	r3, r6, #2
 8020dc6:	58eb      	ldr	r3, [r5, r3]
 8020dc8:	4798      	blx	r3
 8020dca:	3601      	adds	r6, #1
 8020dcc:	e7ee      	b.n	8020dac <__libc_init_array+0xc>
 8020dce:	00b3      	lsls	r3, r6, #2
 8020dd0:	58eb      	ldr	r3, [r5, r3]
 8020dd2:	4798      	blx	r3
 8020dd4:	3601      	adds	r6, #1
 8020dd6:	e7f2      	b.n	8020dbe <__libc_init_array+0x1e>
 8020dd8:	080270a8 	.word	0x080270a8
 8020ddc:	080270a8 	.word	0x080270a8
 8020de0:	080270ac 	.word	0x080270ac
 8020de4:	080270a8 	.word	0x080270a8

08020de8 <__retarget_lock_init_recursive>:
 8020de8:	4770      	bx	lr

08020dea <__retarget_lock_acquire_recursive>:
 8020dea:	4770      	bx	lr

08020dec <__retarget_lock_release_recursive>:
 8020dec:	4770      	bx	lr

08020dee <memchr>:
 8020dee:	b2c9      	uxtb	r1, r1
 8020df0:	1882      	adds	r2, r0, r2
 8020df2:	4290      	cmp	r0, r2
 8020df4:	d101      	bne.n	8020dfa <memchr+0xc>
 8020df6:	2000      	movs	r0, #0
 8020df8:	4770      	bx	lr
 8020dfa:	7803      	ldrb	r3, [r0, #0]
 8020dfc:	428b      	cmp	r3, r1
 8020dfe:	d0fb      	beq.n	8020df8 <memchr+0xa>
 8020e00:	3001      	adds	r0, #1
 8020e02:	e7f6      	b.n	8020df2 <memchr+0x4>

08020e04 <memcpy>:
 8020e04:	2300      	movs	r3, #0
 8020e06:	b510      	push	{r4, lr}
 8020e08:	429a      	cmp	r2, r3
 8020e0a:	d100      	bne.n	8020e0e <memcpy+0xa>
 8020e0c:	bd10      	pop	{r4, pc}
 8020e0e:	5ccc      	ldrb	r4, [r1, r3]
 8020e10:	54c4      	strb	r4, [r0, r3]
 8020e12:	3301      	adds	r3, #1
 8020e14:	e7f8      	b.n	8020e08 <memcpy+0x4>
	...

08020e18 <nan>:
 8020e18:	2000      	movs	r0, #0
 8020e1a:	4901      	ldr	r1, [pc, #4]	@ (8020e20 <nan+0x8>)
 8020e1c:	4770      	bx	lr
 8020e1e:	46c0      	nop			@ (mov r8, r8)
 8020e20:	7ff80000 	.word	0x7ff80000

08020e24 <quorem>:
 8020e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e26:	6902      	ldr	r2, [r0, #16]
 8020e28:	690f      	ldr	r7, [r1, #16]
 8020e2a:	b087      	sub	sp, #28
 8020e2c:	0006      	movs	r6, r0
 8020e2e:	000b      	movs	r3, r1
 8020e30:	2000      	movs	r0, #0
 8020e32:	9102      	str	r1, [sp, #8]
 8020e34:	42ba      	cmp	r2, r7
 8020e36:	db6d      	blt.n	8020f14 <quorem+0xf0>
 8020e38:	3f01      	subs	r7, #1
 8020e3a:	00bc      	lsls	r4, r7, #2
 8020e3c:	3314      	adds	r3, #20
 8020e3e:	9305      	str	r3, [sp, #20]
 8020e40:	191b      	adds	r3, r3, r4
 8020e42:	9303      	str	r3, [sp, #12]
 8020e44:	0033      	movs	r3, r6
 8020e46:	3314      	adds	r3, #20
 8020e48:	191c      	adds	r4, r3, r4
 8020e4a:	9301      	str	r3, [sp, #4]
 8020e4c:	6823      	ldr	r3, [r4, #0]
 8020e4e:	9304      	str	r3, [sp, #16]
 8020e50:	9b03      	ldr	r3, [sp, #12]
 8020e52:	9804      	ldr	r0, [sp, #16]
 8020e54:	681d      	ldr	r5, [r3, #0]
 8020e56:	3501      	adds	r5, #1
 8020e58:	0029      	movs	r1, r5
 8020e5a:	f7df f9a3 	bl	80001a4 <__udivsi3>
 8020e5e:	9b04      	ldr	r3, [sp, #16]
 8020e60:	9000      	str	r0, [sp, #0]
 8020e62:	42ab      	cmp	r3, r5
 8020e64:	d32b      	bcc.n	8020ebe <quorem+0x9a>
 8020e66:	9b05      	ldr	r3, [sp, #20]
 8020e68:	9d01      	ldr	r5, [sp, #4]
 8020e6a:	469c      	mov	ip, r3
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	9305      	str	r3, [sp, #20]
 8020e70:	9304      	str	r3, [sp, #16]
 8020e72:	4662      	mov	r2, ip
 8020e74:	ca08      	ldmia	r2!, {r3}
 8020e76:	6828      	ldr	r0, [r5, #0]
 8020e78:	4694      	mov	ip, r2
 8020e7a:	9a00      	ldr	r2, [sp, #0]
 8020e7c:	b299      	uxth	r1, r3
 8020e7e:	4351      	muls	r1, r2
 8020e80:	9a05      	ldr	r2, [sp, #20]
 8020e82:	0c1b      	lsrs	r3, r3, #16
 8020e84:	1889      	adds	r1, r1, r2
 8020e86:	9a00      	ldr	r2, [sp, #0]
 8020e88:	4353      	muls	r3, r2
 8020e8a:	0c0a      	lsrs	r2, r1, #16
 8020e8c:	189b      	adds	r3, r3, r2
 8020e8e:	0c1a      	lsrs	r2, r3, #16
 8020e90:	b289      	uxth	r1, r1
 8020e92:	9205      	str	r2, [sp, #20]
 8020e94:	b282      	uxth	r2, r0
 8020e96:	1a52      	subs	r2, r2, r1
 8020e98:	9904      	ldr	r1, [sp, #16]
 8020e9a:	0c00      	lsrs	r0, r0, #16
 8020e9c:	1852      	adds	r2, r2, r1
 8020e9e:	b29b      	uxth	r3, r3
 8020ea0:	1411      	asrs	r1, r2, #16
 8020ea2:	1ac3      	subs	r3, r0, r3
 8020ea4:	185b      	adds	r3, r3, r1
 8020ea6:	1419      	asrs	r1, r3, #16
 8020ea8:	b292      	uxth	r2, r2
 8020eaa:	041b      	lsls	r3, r3, #16
 8020eac:	431a      	orrs	r2, r3
 8020eae:	9b03      	ldr	r3, [sp, #12]
 8020eb0:	9104      	str	r1, [sp, #16]
 8020eb2:	c504      	stmia	r5!, {r2}
 8020eb4:	4563      	cmp	r3, ip
 8020eb6:	d2dc      	bcs.n	8020e72 <quorem+0x4e>
 8020eb8:	6823      	ldr	r3, [r4, #0]
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d030      	beq.n	8020f20 <quorem+0xfc>
 8020ebe:	0030      	movs	r0, r6
 8020ec0:	9902      	ldr	r1, [sp, #8]
 8020ec2:	f001 fd7d 	bl	80229c0 <__mcmp>
 8020ec6:	2800      	cmp	r0, #0
 8020ec8:	db23      	blt.n	8020f12 <quorem+0xee>
 8020eca:	0034      	movs	r4, r6
 8020ecc:	2500      	movs	r5, #0
 8020ece:	9902      	ldr	r1, [sp, #8]
 8020ed0:	3414      	adds	r4, #20
 8020ed2:	3114      	adds	r1, #20
 8020ed4:	6823      	ldr	r3, [r4, #0]
 8020ed6:	c901      	ldmia	r1!, {r0}
 8020ed8:	9302      	str	r3, [sp, #8]
 8020eda:	466b      	mov	r3, sp
 8020edc:	891b      	ldrh	r3, [r3, #8]
 8020ede:	b282      	uxth	r2, r0
 8020ee0:	1a9a      	subs	r2, r3, r2
 8020ee2:	9b02      	ldr	r3, [sp, #8]
 8020ee4:	1952      	adds	r2, r2, r5
 8020ee6:	0c00      	lsrs	r0, r0, #16
 8020ee8:	0c1b      	lsrs	r3, r3, #16
 8020eea:	1a1b      	subs	r3, r3, r0
 8020eec:	1410      	asrs	r0, r2, #16
 8020eee:	181b      	adds	r3, r3, r0
 8020ef0:	141d      	asrs	r5, r3, #16
 8020ef2:	b292      	uxth	r2, r2
 8020ef4:	041b      	lsls	r3, r3, #16
 8020ef6:	431a      	orrs	r2, r3
 8020ef8:	9b03      	ldr	r3, [sp, #12]
 8020efa:	c404      	stmia	r4!, {r2}
 8020efc:	428b      	cmp	r3, r1
 8020efe:	d2e9      	bcs.n	8020ed4 <quorem+0xb0>
 8020f00:	9a01      	ldr	r2, [sp, #4]
 8020f02:	00bb      	lsls	r3, r7, #2
 8020f04:	18d3      	adds	r3, r2, r3
 8020f06:	681a      	ldr	r2, [r3, #0]
 8020f08:	2a00      	cmp	r2, #0
 8020f0a:	d013      	beq.n	8020f34 <quorem+0x110>
 8020f0c:	9b00      	ldr	r3, [sp, #0]
 8020f0e:	3301      	adds	r3, #1
 8020f10:	9300      	str	r3, [sp, #0]
 8020f12:	9800      	ldr	r0, [sp, #0]
 8020f14:	b007      	add	sp, #28
 8020f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f18:	6823      	ldr	r3, [r4, #0]
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d104      	bne.n	8020f28 <quorem+0x104>
 8020f1e:	3f01      	subs	r7, #1
 8020f20:	9b01      	ldr	r3, [sp, #4]
 8020f22:	3c04      	subs	r4, #4
 8020f24:	42a3      	cmp	r3, r4
 8020f26:	d3f7      	bcc.n	8020f18 <quorem+0xf4>
 8020f28:	6137      	str	r7, [r6, #16]
 8020f2a:	e7c8      	b.n	8020ebe <quorem+0x9a>
 8020f2c:	681a      	ldr	r2, [r3, #0]
 8020f2e:	2a00      	cmp	r2, #0
 8020f30:	d104      	bne.n	8020f3c <quorem+0x118>
 8020f32:	3f01      	subs	r7, #1
 8020f34:	9a01      	ldr	r2, [sp, #4]
 8020f36:	3b04      	subs	r3, #4
 8020f38:	429a      	cmp	r2, r3
 8020f3a:	d3f7      	bcc.n	8020f2c <quorem+0x108>
 8020f3c:	6137      	str	r7, [r6, #16]
 8020f3e:	e7e5      	b.n	8020f0c <quorem+0xe8>

08020f40 <_dtoa_r>:
 8020f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f42:	0014      	movs	r4, r2
 8020f44:	001d      	movs	r5, r3
 8020f46:	69c6      	ldr	r6, [r0, #28]
 8020f48:	b09d      	sub	sp, #116	@ 0x74
 8020f4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8020f4c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020f4e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020f50:	9003      	str	r0, [sp, #12]
 8020f52:	2e00      	cmp	r6, #0
 8020f54:	d10f      	bne.n	8020f76 <_dtoa_r+0x36>
 8020f56:	2010      	movs	r0, #16
 8020f58:	f001 f98a 	bl	8022270 <malloc>
 8020f5c:	9b03      	ldr	r3, [sp, #12]
 8020f5e:	1e02      	subs	r2, r0, #0
 8020f60:	61d8      	str	r0, [r3, #28]
 8020f62:	d104      	bne.n	8020f6e <_dtoa_r+0x2e>
 8020f64:	21ef      	movs	r1, #239	@ 0xef
 8020f66:	4bc7      	ldr	r3, [pc, #796]	@ (8021284 <_dtoa_r+0x344>)
 8020f68:	48c7      	ldr	r0, [pc, #796]	@ (8021288 <_dtoa_r+0x348>)
 8020f6a:	f002 fb2f 	bl	80235cc <__assert_func>
 8020f6e:	6046      	str	r6, [r0, #4]
 8020f70:	6086      	str	r6, [r0, #8]
 8020f72:	6006      	str	r6, [r0, #0]
 8020f74:	60c6      	str	r6, [r0, #12]
 8020f76:	9b03      	ldr	r3, [sp, #12]
 8020f78:	69db      	ldr	r3, [r3, #28]
 8020f7a:	6819      	ldr	r1, [r3, #0]
 8020f7c:	2900      	cmp	r1, #0
 8020f7e:	d00b      	beq.n	8020f98 <_dtoa_r+0x58>
 8020f80:	685a      	ldr	r2, [r3, #4]
 8020f82:	2301      	movs	r3, #1
 8020f84:	4093      	lsls	r3, r2
 8020f86:	604a      	str	r2, [r1, #4]
 8020f88:	608b      	str	r3, [r1, #8]
 8020f8a:	9803      	ldr	r0, [sp, #12]
 8020f8c:	f001 fa82 	bl	8022494 <_Bfree>
 8020f90:	2200      	movs	r2, #0
 8020f92:	9b03      	ldr	r3, [sp, #12]
 8020f94:	69db      	ldr	r3, [r3, #28]
 8020f96:	601a      	str	r2, [r3, #0]
 8020f98:	2d00      	cmp	r5, #0
 8020f9a:	da1e      	bge.n	8020fda <_dtoa_r+0x9a>
 8020f9c:	2301      	movs	r3, #1
 8020f9e:	603b      	str	r3, [r7, #0]
 8020fa0:	006b      	lsls	r3, r5, #1
 8020fa2:	085b      	lsrs	r3, r3, #1
 8020fa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020fa6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020fa8:	4bb8      	ldr	r3, [pc, #736]	@ (802128c <_dtoa_r+0x34c>)
 8020faa:	4ab8      	ldr	r2, [pc, #736]	@ (802128c <_dtoa_r+0x34c>)
 8020fac:	403b      	ands	r3, r7
 8020fae:	4293      	cmp	r3, r2
 8020fb0:	d116      	bne.n	8020fe0 <_dtoa_r+0xa0>
 8020fb2:	4bb7      	ldr	r3, [pc, #732]	@ (8021290 <_dtoa_r+0x350>)
 8020fb4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020fb6:	6013      	str	r3, [r2, #0]
 8020fb8:	033b      	lsls	r3, r7, #12
 8020fba:	0b1b      	lsrs	r3, r3, #12
 8020fbc:	4323      	orrs	r3, r4
 8020fbe:	d101      	bne.n	8020fc4 <_dtoa_r+0x84>
 8020fc0:	f000 fd83 	bl	8021aca <_dtoa_r+0xb8a>
 8020fc4:	4bb3      	ldr	r3, [pc, #716]	@ (8021294 <_dtoa_r+0x354>)
 8020fc6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020fc8:	9308      	str	r3, [sp, #32]
 8020fca:	2a00      	cmp	r2, #0
 8020fcc:	d002      	beq.n	8020fd4 <_dtoa_r+0x94>
 8020fce:	4bb2      	ldr	r3, [pc, #712]	@ (8021298 <_dtoa_r+0x358>)
 8020fd0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020fd2:	6013      	str	r3, [r2, #0]
 8020fd4:	9808      	ldr	r0, [sp, #32]
 8020fd6:	b01d      	add	sp, #116	@ 0x74
 8020fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fda:	2300      	movs	r3, #0
 8020fdc:	603b      	str	r3, [r7, #0]
 8020fde:	e7e2      	b.n	8020fa6 <_dtoa_r+0x66>
 8020fe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fe4:	9212      	str	r2, [sp, #72]	@ 0x48
 8020fe6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020fe8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020fea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020fec:	2200      	movs	r2, #0
 8020fee:	2300      	movs	r3, #0
 8020ff0:	f7df fa5e 	bl	80004b0 <__aeabi_dcmpeq>
 8020ff4:	1e06      	subs	r6, r0, #0
 8020ff6:	d00b      	beq.n	8021010 <_dtoa_r+0xd0>
 8020ff8:	2301      	movs	r3, #1
 8020ffa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020ffc:	6013      	str	r3, [r2, #0]
 8020ffe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021000:	2b00      	cmp	r3, #0
 8021002:	d002      	beq.n	802100a <_dtoa_r+0xca>
 8021004:	4ba5      	ldr	r3, [pc, #660]	@ (802129c <_dtoa_r+0x35c>)
 8021006:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021008:	6013      	str	r3, [r2, #0]
 802100a:	4ba5      	ldr	r3, [pc, #660]	@ (80212a0 <_dtoa_r+0x360>)
 802100c:	9308      	str	r3, [sp, #32]
 802100e:	e7e1      	b.n	8020fd4 <_dtoa_r+0x94>
 8021010:	ab1a      	add	r3, sp, #104	@ 0x68
 8021012:	9301      	str	r3, [sp, #4]
 8021014:	ab1b      	add	r3, sp, #108	@ 0x6c
 8021016:	9300      	str	r3, [sp, #0]
 8021018:	9803      	ldr	r0, [sp, #12]
 802101a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802101c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802101e:	f001 fdf1 	bl	8022c04 <__d2b>
 8021022:	007a      	lsls	r2, r7, #1
 8021024:	9005      	str	r0, [sp, #20]
 8021026:	0d52      	lsrs	r2, r2, #21
 8021028:	d100      	bne.n	802102c <_dtoa_r+0xec>
 802102a:	e07b      	b.n	8021124 <_dtoa_r+0x1e4>
 802102c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802102e:	9618      	str	r6, [sp, #96]	@ 0x60
 8021030:	0319      	lsls	r1, r3, #12
 8021032:	4b9c      	ldr	r3, [pc, #624]	@ (80212a4 <_dtoa_r+0x364>)
 8021034:	0b09      	lsrs	r1, r1, #12
 8021036:	430b      	orrs	r3, r1
 8021038:	499b      	ldr	r1, [pc, #620]	@ (80212a8 <_dtoa_r+0x368>)
 802103a:	1857      	adds	r7, r2, r1
 802103c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802103e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021040:	0019      	movs	r1, r3
 8021042:	2200      	movs	r2, #0
 8021044:	4b99      	ldr	r3, [pc, #612]	@ (80212ac <_dtoa_r+0x36c>)
 8021046:	f7e1 fdc1 	bl	8002bcc <__aeabi_dsub>
 802104a:	4a99      	ldr	r2, [pc, #612]	@ (80212b0 <_dtoa_r+0x370>)
 802104c:	4b99      	ldr	r3, [pc, #612]	@ (80212b4 <_dtoa_r+0x374>)
 802104e:	f7e1 faf5 	bl	800263c <__aeabi_dmul>
 8021052:	4a99      	ldr	r2, [pc, #612]	@ (80212b8 <_dtoa_r+0x378>)
 8021054:	4b99      	ldr	r3, [pc, #612]	@ (80212bc <_dtoa_r+0x37c>)
 8021056:	f7e0 fb49 	bl	80016ec <__aeabi_dadd>
 802105a:	0004      	movs	r4, r0
 802105c:	0038      	movs	r0, r7
 802105e:	000d      	movs	r5, r1
 8021060:	f7e2 f9ae 	bl	80033c0 <__aeabi_i2d>
 8021064:	4a96      	ldr	r2, [pc, #600]	@ (80212c0 <_dtoa_r+0x380>)
 8021066:	4b97      	ldr	r3, [pc, #604]	@ (80212c4 <_dtoa_r+0x384>)
 8021068:	f7e1 fae8 	bl	800263c <__aeabi_dmul>
 802106c:	0002      	movs	r2, r0
 802106e:	000b      	movs	r3, r1
 8021070:	0020      	movs	r0, r4
 8021072:	0029      	movs	r1, r5
 8021074:	f7e0 fb3a 	bl	80016ec <__aeabi_dadd>
 8021078:	0004      	movs	r4, r0
 802107a:	000d      	movs	r5, r1
 802107c:	f7e2 f964 	bl	8003348 <__aeabi_d2iz>
 8021080:	2200      	movs	r2, #0
 8021082:	9004      	str	r0, [sp, #16]
 8021084:	2300      	movs	r3, #0
 8021086:	0020      	movs	r0, r4
 8021088:	0029      	movs	r1, r5
 802108a:	f7df fa17 	bl	80004bc <__aeabi_dcmplt>
 802108e:	2800      	cmp	r0, #0
 8021090:	d00b      	beq.n	80210aa <_dtoa_r+0x16a>
 8021092:	9804      	ldr	r0, [sp, #16]
 8021094:	f7e2 f994 	bl	80033c0 <__aeabi_i2d>
 8021098:	002b      	movs	r3, r5
 802109a:	0022      	movs	r2, r4
 802109c:	f7df fa08 	bl	80004b0 <__aeabi_dcmpeq>
 80210a0:	4243      	negs	r3, r0
 80210a2:	4158      	adcs	r0, r3
 80210a4:	9b04      	ldr	r3, [sp, #16]
 80210a6:	1a1b      	subs	r3, r3, r0
 80210a8:	9304      	str	r3, [sp, #16]
 80210aa:	2301      	movs	r3, #1
 80210ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80210ae:	9b04      	ldr	r3, [sp, #16]
 80210b0:	2b16      	cmp	r3, #22
 80210b2:	d810      	bhi.n	80210d6 <_dtoa_r+0x196>
 80210b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80210b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80210b8:	9a04      	ldr	r2, [sp, #16]
 80210ba:	4b83      	ldr	r3, [pc, #524]	@ (80212c8 <_dtoa_r+0x388>)
 80210bc:	00d2      	lsls	r2, r2, #3
 80210be:	189b      	adds	r3, r3, r2
 80210c0:	681a      	ldr	r2, [r3, #0]
 80210c2:	685b      	ldr	r3, [r3, #4]
 80210c4:	f7df f9fa 	bl	80004bc <__aeabi_dcmplt>
 80210c8:	2800      	cmp	r0, #0
 80210ca:	d047      	beq.n	802115c <_dtoa_r+0x21c>
 80210cc:	9b04      	ldr	r3, [sp, #16]
 80210ce:	3b01      	subs	r3, #1
 80210d0:	9304      	str	r3, [sp, #16]
 80210d2:	2300      	movs	r3, #0
 80210d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80210d6:	2200      	movs	r2, #0
 80210d8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80210da:	9206      	str	r2, [sp, #24]
 80210dc:	1bdb      	subs	r3, r3, r7
 80210de:	1e5a      	subs	r2, r3, #1
 80210e0:	d53e      	bpl.n	8021160 <_dtoa_r+0x220>
 80210e2:	2201      	movs	r2, #1
 80210e4:	1ad3      	subs	r3, r2, r3
 80210e6:	9306      	str	r3, [sp, #24]
 80210e8:	2300      	movs	r3, #0
 80210ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80210ec:	9b04      	ldr	r3, [sp, #16]
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	db38      	blt.n	8021164 <_dtoa_r+0x224>
 80210f2:	9a04      	ldr	r2, [sp, #16]
 80210f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210f6:	4694      	mov	ip, r2
 80210f8:	4463      	add	r3, ip
 80210fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80210fc:	2300      	movs	r3, #0
 80210fe:	9214      	str	r2, [sp, #80]	@ 0x50
 8021100:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021102:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021104:	2401      	movs	r4, #1
 8021106:	2b09      	cmp	r3, #9
 8021108:	d867      	bhi.n	80211da <_dtoa_r+0x29a>
 802110a:	2b05      	cmp	r3, #5
 802110c:	dd02      	ble.n	8021114 <_dtoa_r+0x1d4>
 802110e:	2400      	movs	r4, #0
 8021110:	3b04      	subs	r3, #4
 8021112:	9322      	str	r3, [sp, #136]	@ 0x88
 8021114:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021116:	1e98      	subs	r0, r3, #2
 8021118:	2803      	cmp	r0, #3
 802111a:	d867      	bhi.n	80211ec <_dtoa_r+0x2ac>
 802111c:	f7df f82e 	bl	800017c <__gnu_thumb1_case_uqi>
 8021120:	5b383a2b 	.word	0x5b383a2b
 8021124:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021126:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8021128:	18f6      	adds	r6, r6, r3
 802112a:	4b68      	ldr	r3, [pc, #416]	@ (80212cc <_dtoa_r+0x38c>)
 802112c:	18f2      	adds	r2, r6, r3
 802112e:	2a20      	cmp	r2, #32
 8021130:	dd0f      	ble.n	8021152 <_dtoa_r+0x212>
 8021132:	2340      	movs	r3, #64	@ 0x40
 8021134:	1a9b      	subs	r3, r3, r2
 8021136:	409f      	lsls	r7, r3
 8021138:	4b65      	ldr	r3, [pc, #404]	@ (80212d0 <_dtoa_r+0x390>)
 802113a:	0038      	movs	r0, r7
 802113c:	18f3      	adds	r3, r6, r3
 802113e:	40dc      	lsrs	r4, r3
 8021140:	4320      	orrs	r0, r4
 8021142:	f7e2 f96b 	bl	800341c <__aeabi_ui2d>
 8021146:	2201      	movs	r2, #1
 8021148:	4b62      	ldr	r3, [pc, #392]	@ (80212d4 <_dtoa_r+0x394>)
 802114a:	1e77      	subs	r7, r6, #1
 802114c:	18cb      	adds	r3, r1, r3
 802114e:	9218      	str	r2, [sp, #96]	@ 0x60
 8021150:	e776      	b.n	8021040 <_dtoa_r+0x100>
 8021152:	2320      	movs	r3, #32
 8021154:	0020      	movs	r0, r4
 8021156:	1a9b      	subs	r3, r3, r2
 8021158:	4098      	lsls	r0, r3
 802115a:	e7f2      	b.n	8021142 <_dtoa_r+0x202>
 802115c:	9015      	str	r0, [sp, #84]	@ 0x54
 802115e:	e7ba      	b.n	80210d6 <_dtoa_r+0x196>
 8021160:	920d      	str	r2, [sp, #52]	@ 0x34
 8021162:	e7c3      	b.n	80210ec <_dtoa_r+0x1ac>
 8021164:	9b06      	ldr	r3, [sp, #24]
 8021166:	9a04      	ldr	r2, [sp, #16]
 8021168:	1a9b      	subs	r3, r3, r2
 802116a:	9306      	str	r3, [sp, #24]
 802116c:	4253      	negs	r3, r2
 802116e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021170:	2300      	movs	r3, #0
 8021172:	9314      	str	r3, [sp, #80]	@ 0x50
 8021174:	e7c5      	b.n	8021102 <_dtoa_r+0x1c2>
 8021176:	2300      	movs	r3, #0
 8021178:	9310      	str	r3, [sp, #64]	@ 0x40
 802117a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802117c:	930e      	str	r3, [sp, #56]	@ 0x38
 802117e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021180:	2b00      	cmp	r3, #0
 8021182:	dc13      	bgt.n	80211ac <_dtoa_r+0x26c>
 8021184:	2301      	movs	r3, #1
 8021186:	001a      	movs	r2, r3
 8021188:	930e      	str	r3, [sp, #56]	@ 0x38
 802118a:	9309      	str	r3, [sp, #36]	@ 0x24
 802118c:	9223      	str	r2, [sp, #140]	@ 0x8c
 802118e:	e00d      	b.n	80211ac <_dtoa_r+0x26c>
 8021190:	2301      	movs	r3, #1
 8021192:	e7f1      	b.n	8021178 <_dtoa_r+0x238>
 8021194:	2300      	movs	r3, #0
 8021196:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8021198:	9310      	str	r3, [sp, #64]	@ 0x40
 802119a:	4694      	mov	ip, r2
 802119c:	9b04      	ldr	r3, [sp, #16]
 802119e:	4463      	add	r3, ip
 80211a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80211a2:	3301      	adds	r3, #1
 80211a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80211a6:	2b00      	cmp	r3, #0
 80211a8:	dc00      	bgt.n	80211ac <_dtoa_r+0x26c>
 80211aa:	2301      	movs	r3, #1
 80211ac:	9a03      	ldr	r2, [sp, #12]
 80211ae:	2100      	movs	r1, #0
 80211b0:	69d0      	ldr	r0, [r2, #28]
 80211b2:	2204      	movs	r2, #4
 80211b4:	0015      	movs	r5, r2
 80211b6:	3514      	adds	r5, #20
 80211b8:	429d      	cmp	r5, r3
 80211ba:	d91b      	bls.n	80211f4 <_dtoa_r+0x2b4>
 80211bc:	6041      	str	r1, [r0, #4]
 80211be:	9803      	ldr	r0, [sp, #12]
 80211c0:	f001 f924 	bl	802240c <_Balloc>
 80211c4:	9008      	str	r0, [sp, #32]
 80211c6:	2800      	cmp	r0, #0
 80211c8:	d117      	bne.n	80211fa <_dtoa_r+0x2ba>
 80211ca:	21b0      	movs	r1, #176	@ 0xb0
 80211cc:	4b42      	ldr	r3, [pc, #264]	@ (80212d8 <_dtoa_r+0x398>)
 80211ce:	482e      	ldr	r0, [pc, #184]	@ (8021288 <_dtoa_r+0x348>)
 80211d0:	9a08      	ldr	r2, [sp, #32]
 80211d2:	31ff      	adds	r1, #255	@ 0xff
 80211d4:	e6c9      	b.n	8020f6a <_dtoa_r+0x2a>
 80211d6:	2301      	movs	r3, #1
 80211d8:	e7dd      	b.n	8021196 <_dtoa_r+0x256>
 80211da:	2300      	movs	r3, #0
 80211dc:	9410      	str	r4, [sp, #64]	@ 0x40
 80211de:	9322      	str	r3, [sp, #136]	@ 0x88
 80211e0:	3b01      	subs	r3, #1
 80211e2:	930e      	str	r3, [sp, #56]	@ 0x38
 80211e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80211e6:	2200      	movs	r2, #0
 80211e8:	3313      	adds	r3, #19
 80211ea:	e7cf      	b.n	802118c <_dtoa_r+0x24c>
 80211ec:	2301      	movs	r3, #1
 80211ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80211f0:	3b02      	subs	r3, #2
 80211f2:	e7f6      	b.n	80211e2 <_dtoa_r+0x2a2>
 80211f4:	3101      	adds	r1, #1
 80211f6:	0052      	lsls	r2, r2, #1
 80211f8:	e7dc      	b.n	80211b4 <_dtoa_r+0x274>
 80211fa:	9b03      	ldr	r3, [sp, #12]
 80211fc:	9a08      	ldr	r2, [sp, #32]
 80211fe:	69db      	ldr	r3, [r3, #28]
 8021200:	601a      	str	r2, [r3, #0]
 8021202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021204:	2b0e      	cmp	r3, #14
 8021206:	d900      	bls.n	802120a <_dtoa_r+0x2ca>
 8021208:	e0d9      	b.n	80213be <_dtoa_r+0x47e>
 802120a:	2c00      	cmp	r4, #0
 802120c:	d100      	bne.n	8021210 <_dtoa_r+0x2d0>
 802120e:	e0d6      	b.n	80213be <_dtoa_r+0x47e>
 8021210:	9b04      	ldr	r3, [sp, #16]
 8021212:	2b00      	cmp	r3, #0
 8021214:	dd64      	ble.n	80212e0 <_dtoa_r+0x3a0>
 8021216:	210f      	movs	r1, #15
 8021218:	9a04      	ldr	r2, [sp, #16]
 802121a:	4b2b      	ldr	r3, [pc, #172]	@ (80212c8 <_dtoa_r+0x388>)
 802121c:	400a      	ands	r2, r1
 802121e:	00d2      	lsls	r2, r2, #3
 8021220:	189b      	adds	r3, r3, r2
 8021222:	681e      	ldr	r6, [r3, #0]
 8021224:	685f      	ldr	r7, [r3, #4]
 8021226:	9b04      	ldr	r3, [sp, #16]
 8021228:	2402      	movs	r4, #2
 802122a:	111d      	asrs	r5, r3, #4
 802122c:	05db      	lsls	r3, r3, #23
 802122e:	d50a      	bpl.n	8021246 <_dtoa_r+0x306>
 8021230:	4b2a      	ldr	r3, [pc, #168]	@ (80212dc <_dtoa_r+0x39c>)
 8021232:	400d      	ands	r5, r1
 8021234:	6a1a      	ldr	r2, [r3, #32]
 8021236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021238:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802123a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802123c:	f7e0 fdba 	bl	8001db4 <__aeabi_ddiv>
 8021240:	900a      	str	r0, [sp, #40]	@ 0x28
 8021242:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021244:	3401      	adds	r4, #1
 8021246:	4b25      	ldr	r3, [pc, #148]	@ (80212dc <_dtoa_r+0x39c>)
 8021248:	930c      	str	r3, [sp, #48]	@ 0x30
 802124a:	2d00      	cmp	r5, #0
 802124c:	d108      	bne.n	8021260 <_dtoa_r+0x320>
 802124e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021252:	0032      	movs	r2, r6
 8021254:	003b      	movs	r3, r7
 8021256:	f7e0 fdad 	bl	8001db4 <__aeabi_ddiv>
 802125a:	900a      	str	r0, [sp, #40]	@ 0x28
 802125c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802125e:	e05a      	b.n	8021316 <_dtoa_r+0x3d6>
 8021260:	2301      	movs	r3, #1
 8021262:	421d      	tst	r5, r3
 8021264:	d009      	beq.n	802127a <_dtoa_r+0x33a>
 8021266:	18e4      	adds	r4, r4, r3
 8021268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802126a:	0030      	movs	r0, r6
 802126c:	681a      	ldr	r2, [r3, #0]
 802126e:	685b      	ldr	r3, [r3, #4]
 8021270:	0039      	movs	r1, r7
 8021272:	f7e1 f9e3 	bl	800263c <__aeabi_dmul>
 8021276:	0006      	movs	r6, r0
 8021278:	000f      	movs	r7, r1
 802127a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802127c:	106d      	asrs	r5, r5, #1
 802127e:	3308      	adds	r3, #8
 8021280:	e7e2      	b.n	8021248 <_dtoa_r+0x308>
 8021282:	46c0      	nop			@ (mov r8, r8)
 8021284:	08026e02 	.word	0x08026e02
 8021288:	08026e19 	.word	0x08026e19
 802128c:	7ff00000 	.word	0x7ff00000
 8021290:	0000270f 	.word	0x0000270f
 8021294:	08026dfe 	.word	0x08026dfe
 8021298:	08026e01 	.word	0x08026e01
 802129c:	08026dca 	.word	0x08026dca
 80212a0:	08026dc9 	.word	0x08026dc9
 80212a4:	3ff00000 	.word	0x3ff00000
 80212a8:	fffffc01 	.word	0xfffffc01
 80212ac:	3ff80000 	.word	0x3ff80000
 80212b0:	636f4361 	.word	0x636f4361
 80212b4:	3fd287a7 	.word	0x3fd287a7
 80212b8:	8b60c8b3 	.word	0x8b60c8b3
 80212bc:	3fc68a28 	.word	0x3fc68a28
 80212c0:	509f79fb 	.word	0x509f79fb
 80212c4:	3fd34413 	.word	0x3fd34413
 80212c8:	08026f70 	.word	0x08026f70
 80212cc:	00000432 	.word	0x00000432
 80212d0:	00000412 	.word	0x00000412
 80212d4:	fe100000 	.word	0xfe100000
 80212d8:	08026e71 	.word	0x08026e71
 80212dc:	08026f48 	.word	0x08026f48
 80212e0:	9b04      	ldr	r3, [sp, #16]
 80212e2:	2402      	movs	r4, #2
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d016      	beq.n	8021316 <_dtoa_r+0x3d6>
 80212e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80212ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80212ec:	220f      	movs	r2, #15
 80212ee:	425d      	negs	r5, r3
 80212f0:	402a      	ands	r2, r5
 80212f2:	4bd7      	ldr	r3, [pc, #860]	@ (8021650 <_dtoa_r+0x710>)
 80212f4:	00d2      	lsls	r2, r2, #3
 80212f6:	189b      	adds	r3, r3, r2
 80212f8:	681a      	ldr	r2, [r3, #0]
 80212fa:	685b      	ldr	r3, [r3, #4]
 80212fc:	f7e1 f99e 	bl	800263c <__aeabi_dmul>
 8021300:	2701      	movs	r7, #1
 8021302:	2300      	movs	r3, #0
 8021304:	900a      	str	r0, [sp, #40]	@ 0x28
 8021306:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021308:	4ed2      	ldr	r6, [pc, #840]	@ (8021654 <_dtoa_r+0x714>)
 802130a:	112d      	asrs	r5, r5, #4
 802130c:	2d00      	cmp	r5, #0
 802130e:	d000      	beq.n	8021312 <_dtoa_r+0x3d2>
 8021310:	e0ba      	b.n	8021488 <_dtoa_r+0x548>
 8021312:	2b00      	cmp	r3, #0
 8021314:	d1a1      	bne.n	802125a <_dtoa_r+0x31a>
 8021316:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8021318:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802131a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802131c:	2b00      	cmp	r3, #0
 802131e:	d100      	bne.n	8021322 <_dtoa_r+0x3e2>
 8021320:	e0bd      	b.n	802149e <_dtoa_r+0x55e>
 8021322:	2200      	movs	r2, #0
 8021324:	0030      	movs	r0, r6
 8021326:	0039      	movs	r1, r7
 8021328:	4bcb      	ldr	r3, [pc, #812]	@ (8021658 <_dtoa_r+0x718>)
 802132a:	f7df f8c7 	bl	80004bc <__aeabi_dcmplt>
 802132e:	2800      	cmp	r0, #0
 8021330:	d100      	bne.n	8021334 <_dtoa_r+0x3f4>
 8021332:	e0b4      	b.n	802149e <_dtoa_r+0x55e>
 8021334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021336:	2b00      	cmp	r3, #0
 8021338:	d100      	bne.n	802133c <_dtoa_r+0x3fc>
 802133a:	e0b0      	b.n	802149e <_dtoa_r+0x55e>
 802133c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802133e:	2b00      	cmp	r3, #0
 8021340:	dd39      	ble.n	80213b6 <_dtoa_r+0x476>
 8021342:	9b04      	ldr	r3, [sp, #16]
 8021344:	2200      	movs	r2, #0
 8021346:	3b01      	subs	r3, #1
 8021348:	930c      	str	r3, [sp, #48]	@ 0x30
 802134a:	0030      	movs	r0, r6
 802134c:	4bc3      	ldr	r3, [pc, #780]	@ (802165c <_dtoa_r+0x71c>)
 802134e:	0039      	movs	r1, r7
 8021350:	f7e1 f974 	bl	800263c <__aeabi_dmul>
 8021354:	900a      	str	r0, [sp, #40]	@ 0x28
 8021356:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802135a:	3401      	adds	r4, #1
 802135c:	0020      	movs	r0, r4
 802135e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021360:	f7e2 f82e 	bl	80033c0 <__aeabi_i2d>
 8021364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021368:	f7e1 f968 	bl	800263c <__aeabi_dmul>
 802136c:	4bbc      	ldr	r3, [pc, #752]	@ (8021660 <_dtoa_r+0x720>)
 802136e:	2200      	movs	r2, #0
 8021370:	f7e0 f9bc 	bl	80016ec <__aeabi_dadd>
 8021374:	4bbb      	ldr	r3, [pc, #748]	@ (8021664 <_dtoa_r+0x724>)
 8021376:	0006      	movs	r6, r0
 8021378:	18cf      	adds	r7, r1, r3
 802137a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802137c:	2b00      	cmp	r3, #0
 802137e:	d000      	beq.n	8021382 <_dtoa_r+0x442>
 8021380:	e091      	b.n	80214a6 <_dtoa_r+0x566>
 8021382:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021384:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021386:	2200      	movs	r2, #0
 8021388:	4bb7      	ldr	r3, [pc, #732]	@ (8021668 <_dtoa_r+0x728>)
 802138a:	f7e1 fc1f 	bl	8002bcc <__aeabi_dsub>
 802138e:	0032      	movs	r2, r6
 8021390:	003b      	movs	r3, r7
 8021392:	0004      	movs	r4, r0
 8021394:	000d      	movs	r5, r1
 8021396:	f7df f8a5 	bl	80004e4 <__aeabi_dcmpgt>
 802139a:	2800      	cmp	r0, #0
 802139c:	d000      	beq.n	80213a0 <_dtoa_r+0x460>
 802139e:	e29d      	b.n	80218dc <_dtoa_r+0x99c>
 80213a0:	2180      	movs	r1, #128	@ 0x80
 80213a2:	0609      	lsls	r1, r1, #24
 80213a4:	187b      	adds	r3, r7, r1
 80213a6:	0032      	movs	r2, r6
 80213a8:	0020      	movs	r0, r4
 80213aa:	0029      	movs	r1, r5
 80213ac:	f7df f886 	bl	80004bc <__aeabi_dcmplt>
 80213b0:	2800      	cmp	r0, #0
 80213b2:	d000      	beq.n	80213b6 <_dtoa_r+0x476>
 80213b4:	e130      	b.n	8021618 <_dtoa_r+0x6d8>
 80213b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80213b8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80213ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80213bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80213be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	da00      	bge.n	80213c6 <_dtoa_r+0x486>
 80213c4:	e177      	b.n	80216b6 <_dtoa_r+0x776>
 80213c6:	9a04      	ldr	r2, [sp, #16]
 80213c8:	2a0e      	cmp	r2, #14
 80213ca:	dd00      	ble.n	80213ce <_dtoa_r+0x48e>
 80213cc:	e173      	b.n	80216b6 <_dtoa_r+0x776>
 80213ce:	4ba0      	ldr	r3, [pc, #640]	@ (8021650 <_dtoa_r+0x710>)
 80213d0:	00d2      	lsls	r2, r2, #3
 80213d2:	189b      	adds	r3, r3, r2
 80213d4:	685c      	ldr	r4, [r3, #4]
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	9306      	str	r3, [sp, #24]
 80213da:	9407      	str	r4, [sp, #28]
 80213dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80213de:	2b00      	cmp	r3, #0
 80213e0:	da03      	bge.n	80213ea <_dtoa_r+0x4aa>
 80213e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	dc00      	bgt.n	80213ea <_dtoa_r+0x4aa>
 80213e8:	e106      	b.n	80215f8 <_dtoa_r+0x6b8>
 80213ea:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80213ec:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80213ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213f0:	9d08      	ldr	r5, [sp, #32]
 80213f2:	3b01      	subs	r3, #1
 80213f4:	195b      	adds	r3, r3, r5
 80213f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80213f8:	9a06      	ldr	r2, [sp, #24]
 80213fa:	9b07      	ldr	r3, [sp, #28]
 80213fc:	0030      	movs	r0, r6
 80213fe:	0039      	movs	r1, r7
 8021400:	f7e0 fcd8 	bl	8001db4 <__aeabi_ddiv>
 8021404:	f7e1 ffa0 	bl	8003348 <__aeabi_d2iz>
 8021408:	9009      	str	r0, [sp, #36]	@ 0x24
 802140a:	f7e1 ffd9 	bl	80033c0 <__aeabi_i2d>
 802140e:	9a06      	ldr	r2, [sp, #24]
 8021410:	9b07      	ldr	r3, [sp, #28]
 8021412:	f7e1 f913 	bl	800263c <__aeabi_dmul>
 8021416:	0002      	movs	r2, r0
 8021418:	000b      	movs	r3, r1
 802141a:	0030      	movs	r0, r6
 802141c:	0039      	movs	r1, r7
 802141e:	f7e1 fbd5 	bl	8002bcc <__aeabi_dsub>
 8021422:	002b      	movs	r3, r5
 8021424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021426:	3501      	adds	r5, #1
 8021428:	3230      	adds	r2, #48	@ 0x30
 802142a:	701a      	strb	r2, [r3, #0]
 802142c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802142e:	002c      	movs	r4, r5
 8021430:	429a      	cmp	r2, r3
 8021432:	d000      	beq.n	8021436 <_dtoa_r+0x4f6>
 8021434:	e131      	b.n	802169a <_dtoa_r+0x75a>
 8021436:	0002      	movs	r2, r0
 8021438:	000b      	movs	r3, r1
 802143a:	f7e0 f957 	bl	80016ec <__aeabi_dadd>
 802143e:	9a06      	ldr	r2, [sp, #24]
 8021440:	9b07      	ldr	r3, [sp, #28]
 8021442:	0006      	movs	r6, r0
 8021444:	000f      	movs	r7, r1
 8021446:	f7df f84d 	bl	80004e4 <__aeabi_dcmpgt>
 802144a:	2800      	cmp	r0, #0
 802144c:	d000      	beq.n	8021450 <_dtoa_r+0x510>
 802144e:	e10f      	b.n	8021670 <_dtoa_r+0x730>
 8021450:	9a06      	ldr	r2, [sp, #24]
 8021452:	9b07      	ldr	r3, [sp, #28]
 8021454:	0030      	movs	r0, r6
 8021456:	0039      	movs	r1, r7
 8021458:	f7df f82a 	bl	80004b0 <__aeabi_dcmpeq>
 802145c:	2800      	cmp	r0, #0
 802145e:	d003      	beq.n	8021468 <_dtoa_r+0x528>
 8021460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021462:	07dd      	lsls	r5, r3, #31
 8021464:	d500      	bpl.n	8021468 <_dtoa_r+0x528>
 8021466:	e103      	b.n	8021670 <_dtoa_r+0x730>
 8021468:	9905      	ldr	r1, [sp, #20]
 802146a:	9803      	ldr	r0, [sp, #12]
 802146c:	f001 f812 	bl	8022494 <_Bfree>
 8021470:	2300      	movs	r3, #0
 8021472:	7023      	strb	r3, [r4, #0]
 8021474:	9b04      	ldr	r3, [sp, #16]
 8021476:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8021478:	3301      	adds	r3, #1
 802147a:	6013      	str	r3, [r2, #0]
 802147c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802147e:	2b00      	cmp	r3, #0
 8021480:	d100      	bne.n	8021484 <_dtoa_r+0x544>
 8021482:	e5a7      	b.n	8020fd4 <_dtoa_r+0x94>
 8021484:	601c      	str	r4, [r3, #0]
 8021486:	e5a5      	b.n	8020fd4 <_dtoa_r+0x94>
 8021488:	423d      	tst	r5, r7
 802148a:	d005      	beq.n	8021498 <_dtoa_r+0x558>
 802148c:	6832      	ldr	r2, [r6, #0]
 802148e:	6873      	ldr	r3, [r6, #4]
 8021490:	f7e1 f8d4 	bl	800263c <__aeabi_dmul>
 8021494:	003b      	movs	r3, r7
 8021496:	3401      	adds	r4, #1
 8021498:	106d      	asrs	r5, r5, #1
 802149a:	3608      	adds	r6, #8
 802149c:	e736      	b.n	802130c <_dtoa_r+0x3cc>
 802149e:	9b04      	ldr	r3, [sp, #16]
 80214a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80214a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214a4:	e75a      	b.n	802135c <_dtoa_r+0x41c>
 80214a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80214a8:	4b69      	ldr	r3, [pc, #420]	@ (8021650 <_dtoa_r+0x710>)
 80214aa:	3a01      	subs	r2, #1
 80214ac:	00d2      	lsls	r2, r2, #3
 80214ae:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80214b0:	189b      	adds	r3, r3, r2
 80214b2:	681a      	ldr	r2, [r3, #0]
 80214b4:	685b      	ldr	r3, [r3, #4]
 80214b6:	2900      	cmp	r1, #0
 80214b8:	d04c      	beq.n	8021554 <_dtoa_r+0x614>
 80214ba:	2000      	movs	r0, #0
 80214bc:	496b      	ldr	r1, [pc, #428]	@ (802166c <_dtoa_r+0x72c>)
 80214be:	f7e0 fc79 	bl	8001db4 <__aeabi_ddiv>
 80214c2:	0032      	movs	r2, r6
 80214c4:	003b      	movs	r3, r7
 80214c6:	f7e1 fb81 	bl	8002bcc <__aeabi_dsub>
 80214ca:	9a08      	ldr	r2, [sp, #32]
 80214cc:	0006      	movs	r6, r0
 80214ce:	4694      	mov	ip, r2
 80214d0:	000f      	movs	r7, r1
 80214d2:	9b08      	ldr	r3, [sp, #32]
 80214d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80214d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80214d8:	4463      	add	r3, ip
 80214da:	9311      	str	r3, [sp, #68]	@ 0x44
 80214dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80214de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80214e0:	f7e1 ff32 	bl	8003348 <__aeabi_d2iz>
 80214e4:	0005      	movs	r5, r0
 80214e6:	f7e1 ff6b 	bl	80033c0 <__aeabi_i2d>
 80214ea:	0002      	movs	r2, r0
 80214ec:	000b      	movs	r3, r1
 80214ee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80214f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80214f2:	f7e1 fb6b 	bl	8002bcc <__aeabi_dsub>
 80214f6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80214f8:	3530      	adds	r5, #48	@ 0x30
 80214fa:	1c5c      	adds	r4, r3, #1
 80214fc:	701d      	strb	r5, [r3, #0]
 80214fe:	0032      	movs	r2, r6
 8021500:	003b      	movs	r3, r7
 8021502:	900a      	str	r0, [sp, #40]	@ 0x28
 8021504:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021506:	f7de ffd9 	bl	80004bc <__aeabi_dcmplt>
 802150a:	2800      	cmp	r0, #0
 802150c:	d16a      	bne.n	80215e4 <_dtoa_r+0x6a4>
 802150e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021510:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021512:	2000      	movs	r0, #0
 8021514:	4950      	ldr	r1, [pc, #320]	@ (8021658 <_dtoa_r+0x718>)
 8021516:	f7e1 fb59 	bl	8002bcc <__aeabi_dsub>
 802151a:	0032      	movs	r2, r6
 802151c:	003b      	movs	r3, r7
 802151e:	f7de ffcd 	bl	80004bc <__aeabi_dcmplt>
 8021522:	2800      	cmp	r0, #0
 8021524:	d000      	beq.n	8021528 <_dtoa_r+0x5e8>
 8021526:	e0a5      	b.n	8021674 <_dtoa_r+0x734>
 8021528:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802152a:	42a3      	cmp	r3, r4
 802152c:	d100      	bne.n	8021530 <_dtoa_r+0x5f0>
 802152e:	e742      	b.n	80213b6 <_dtoa_r+0x476>
 8021530:	2200      	movs	r2, #0
 8021532:	0030      	movs	r0, r6
 8021534:	0039      	movs	r1, r7
 8021536:	4b49      	ldr	r3, [pc, #292]	@ (802165c <_dtoa_r+0x71c>)
 8021538:	f7e1 f880 	bl	800263c <__aeabi_dmul>
 802153c:	2200      	movs	r2, #0
 802153e:	0006      	movs	r6, r0
 8021540:	000f      	movs	r7, r1
 8021542:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021544:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021546:	4b45      	ldr	r3, [pc, #276]	@ (802165c <_dtoa_r+0x71c>)
 8021548:	f7e1 f878 	bl	800263c <__aeabi_dmul>
 802154c:	9416      	str	r4, [sp, #88]	@ 0x58
 802154e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021550:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021552:	e7c3      	b.n	80214dc <_dtoa_r+0x59c>
 8021554:	0030      	movs	r0, r6
 8021556:	0039      	movs	r1, r7
 8021558:	f7e1 f870 	bl	800263c <__aeabi_dmul>
 802155c:	9d08      	ldr	r5, [sp, #32]
 802155e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021560:	002b      	movs	r3, r5
 8021562:	4694      	mov	ip, r2
 8021564:	9016      	str	r0, [sp, #88]	@ 0x58
 8021566:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021568:	4463      	add	r3, ip
 802156a:	9319      	str	r3, [sp, #100]	@ 0x64
 802156c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802156e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021570:	f7e1 feea 	bl	8003348 <__aeabi_d2iz>
 8021574:	0004      	movs	r4, r0
 8021576:	f7e1 ff23 	bl	80033c0 <__aeabi_i2d>
 802157a:	000b      	movs	r3, r1
 802157c:	0002      	movs	r2, r0
 802157e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8021580:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021582:	f7e1 fb23 	bl	8002bcc <__aeabi_dsub>
 8021586:	3430      	adds	r4, #48	@ 0x30
 8021588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802158a:	702c      	strb	r4, [r5, #0]
 802158c:	3501      	adds	r5, #1
 802158e:	0006      	movs	r6, r0
 8021590:	000f      	movs	r7, r1
 8021592:	42ab      	cmp	r3, r5
 8021594:	d129      	bne.n	80215ea <_dtoa_r+0x6aa>
 8021596:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021598:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802159a:	9b08      	ldr	r3, [sp, #32]
 802159c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802159e:	469c      	mov	ip, r3
 80215a0:	2200      	movs	r2, #0
 80215a2:	4b32      	ldr	r3, [pc, #200]	@ (802166c <_dtoa_r+0x72c>)
 80215a4:	4464      	add	r4, ip
 80215a6:	f7e0 f8a1 	bl	80016ec <__aeabi_dadd>
 80215aa:	0002      	movs	r2, r0
 80215ac:	000b      	movs	r3, r1
 80215ae:	0030      	movs	r0, r6
 80215b0:	0039      	movs	r1, r7
 80215b2:	f7de ff97 	bl	80004e4 <__aeabi_dcmpgt>
 80215b6:	2800      	cmp	r0, #0
 80215b8:	d15c      	bne.n	8021674 <_dtoa_r+0x734>
 80215ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80215bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80215be:	2000      	movs	r0, #0
 80215c0:	492a      	ldr	r1, [pc, #168]	@ (802166c <_dtoa_r+0x72c>)
 80215c2:	f7e1 fb03 	bl	8002bcc <__aeabi_dsub>
 80215c6:	0002      	movs	r2, r0
 80215c8:	000b      	movs	r3, r1
 80215ca:	0030      	movs	r0, r6
 80215cc:	0039      	movs	r1, r7
 80215ce:	f7de ff75 	bl	80004bc <__aeabi_dcmplt>
 80215d2:	2800      	cmp	r0, #0
 80215d4:	d100      	bne.n	80215d8 <_dtoa_r+0x698>
 80215d6:	e6ee      	b.n	80213b6 <_dtoa_r+0x476>
 80215d8:	0023      	movs	r3, r4
 80215da:	3c01      	subs	r4, #1
 80215dc:	7822      	ldrb	r2, [r4, #0]
 80215de:	2a30      	cmp	r2, #48	@ 0x30
 80215e0:	d0fa      	beq.n	80215d8 <_dtoa_r+0x698>
 80215e2:	001c      	movs	r4, r3
 80215e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80215e6:	9304      	str	r3, [sp, #16]
 80215e8:	e73e      	b.n	8021468 <_dtoa_r+0x528>
 80215ea:	2200      	movs	r2, #0
 80215ec:	4b1b      	ldr	r3, [pc, #108]	@ (802165c <_dtoa_r+0x71c>)
 80215ee:	f7e1 f825 	bl	800263c <__aeabi_dmul>
 80215f2:	900a      	str	r0, [sp, #40]	@ 0x28
 80215f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80215f6:	e7b9      	b.n	802156c <_dtoa_r+0x62c>
 80215f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d10c      	bne.n	8021618 <_dtoa_r+0x6d8>
 80215fe:	9806      	ldr	r0, [sp, #24]
 8021600:	9907      	ldr	r1, [sp, #28]
 8021602:	2200      	movs	r2, #0
 8021604:	4b18      	ldr	r3, [pc, #96]	@ (8021668 <_dtoa_r+0x728>)
 8021606:	f7e1 f819 	bl	800263c <__aeabi_dmul>
 802160a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802160c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802160e:	f7de ff73 	bl	80004f8 <__aeabi_dcmpge>
 8021612:	2800      	cmp	r0, #0
 8021614:	d100      	bne.n	8021618 <_dtoa_r+0x6d8>
 8021616:	e164      	b.n	80218e2 <_dtoa_r+0x9a2>
 8021618:	2600      	movs	r6, #0
 802161a:	0037      	movs	r7, r6
 802161c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802161e:	9c08      	ldr	r4, [sp, #32]
 8021620:	43db      	mvns	r3, r3
 8021622:	930c      	str	r3, [sp, #48]	@ 0x30
 8021624:	2300      	movs	r3, #0
 8021626:	9304      	str	r3, [sp, #16]
 8021628:	0031      	movs	r1, r6
 802162a:	9803      	ldr	r0, [sp, #12]
 802162c:	f000 ff32 	bl	8022494 <_Bfree>
 8021630:	2f00      	cmp	r7, #0
 8021632:	d0d7      	beq.n	80215e4 <_dtoa_r+0x6a4>
 8021634:	9b04      	ldr	r3, [sp, #16]
 8021636:	2b00      	cmp	r3, #0
 8021638:	d005      	beq.n	8021646 <_dtoa_r+0x706>
 802163a:	42bb      	cmp	r3, r7
 802163c:	d003      	beq.n	8021646 <_dtoa_r+0x706>
 802163e:	0019      	movs	r1, r3
 8021640:	9803      	ldr	r0, [sp, #12]
 8021642:	f000 ff27 	bl	8022494 <_Bfree>
 8021646:	0039      	movs	r1, r7
 8021648:	9803      	ldr	r0, [sp, #12]
 802164a:	f000 ff23 	bl	8022494 <_Bfree>
 802164e:	e7c9      	b.n	80215e4 <_dtoa_r+0x6a4>
 8021650:	08026f70 	.word	0x08026f70
 8021654:	08026f48 	.word	0x08026f48
 8021658:	3ff00000 	.word	0x3ff00000
 802165c:	40240000 	.word	0x40240000
 8021660:	401c0000 	.word	0x401c0000
 8021664:	fcc00000 	.word	0xfcc00000
 8021668:	40140000 	.word	0x40140000
 802166c:	3fe00000 	.word	0x3fe00000
 8021670:	9b04      	ldr	r3, [sp, #16]
 8021672:	930c      	str	r3, [sp, #48]	@ 0x30
 8021674:	0023      	movs	r3, r4
 8021676:	001c      	movs	r4, r3
 8021678:	3b01      	subs	r3, #1
 802167a:	781a      	ldrb	r2, [r3, #0]
 802167c:	2a39      	cmp	r2, #57	@ 0x39
 802167e:	d108      	bne.n	8021692 <_dtoa_r+0x752>
 8021680:	9a08      	ldr	r2, [sp, #32]
 8021682:	429a      	cmp	r2, r3
 8021684:	d1f7      	bne.n	8021676 <_dtoa_r+0x736>
 8021686:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021688:	9908      	ldr	r1, [sp, #32]
 802168a:	3201      	adds	r2, #1
 802168c:	920c      	str	r2, [sp, #48]	@ 0x30
 802168e:	2230      	movs	r2, #48	@ 0x30
 8021690:	700a      	strb	r2, [r1, #0]
 8021692:	781a      	ldrb	r2, [r3, #0]
 8021694:	3201      	adds	r2, #1
 8021696:	701a      	strb	r2, [r3, #0]
 8021698:	e7a4      	b.n	80215e4 <_dtoa_r+0x6a4>
 802169a:	2200      	movs	r2, #0
 802169c:	4bc6      	ldr	r3, [pc, #792]	@ (80219b8 <_dtoa_r+0xa78>)
 802169e:	f7e0 ffcd 	bl	800263c <__aeabi_dmul>
 80216a2:	2200      	movs	r2, #0
 80216a4:	2300      	movs	r3, #0
 80216a6:	0006      	movs	r6, r0
 80216a8:	000f      	movs	r7, r1
 80216aa:	f7de ff01 	bl	80004b0 <__aeabi_dcmpeq>
 80216ae:	2800      	cmp	r0, #0
 80216b0:	d100      	bne.n	80216b4 <_dtoa_r+0x774>
 80216b2:	e6a1      	b.n	80213f8 <_dtoa_r+0x4b8>
 80216b4:	e6d8      	b.n	8021468 <_dtoa_r+0x528>
 80216b6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80216b8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80216ba:	9c06      	ldr	r4, [sp, #24]
 80216bc:	2f00      	cmp	r7, #0
 80216be:	d014      	beq.n	80216ea <_dtoa_r+0x7aa>
 80216c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80216c2:	2a01      	cmp	r2, #1
 80216c4:	dd00      	ble.n	80216c8 <_dtoa_r+0x788>
 80216c6:	e0c8      	b.n	802185a <_dtoa_r+0x91a>
 80216c8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80216ca:	2a00      	cmp	r2, #0
 80216cc:	d100      	bne.n	80216d0 <_dtoa_r+0x790>
 80216ce:	e0be      	b.n	802184e <_dtoa_r+0x90e>
 80216d0:	4aba      	ldr	r2, [pc, #744]	@ (80219bc <_dtoa_r+0xa7c>)
 80216d2:	189b      	adds	r3, r3, r2
 80216d4:	9a06      	ldr	r2, [sp, #24]
 80216d6:	2101      	movs	r1, #1
 80216d8:	18d2      	adds	r2, r2, r3
 80216da:	9206      	str	r2, [sp, #24]
 80216dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80216de:	9803      	ldr	r0, [sp, #12]
 80216e0:	18d3      	adds	r3, r2, r3
 80216e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80216e4:	f000 ffda 	bl	802269c <__i2b>
 80216e8:	0007      	movs	r7, r0
 80216ea:	2c00      	cmp	r4, #0
 80216ec:	d00e      	beq.n	802170c <_dtoa_r+0x7cc>
 80216ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	dd0b      	ble.n	802170c <_dtoa_r+0x7cc>
 80216f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80216f6:	0023      	movs	r3, r4
 80216f8:	4294      	cmp	r4, r2
 80216fa:	dd00      	ble.n	80216fe <_dtoa_r+0x7be>
 80216fc:	0013      	movs	r3, r2
 80216fe:	9a06      	ldr	r2, [sp, #24]
 8021700:	1ae4      	subs	r4, r4, r3
 8021702:	1ad2      	subs	r2, r2, r3
 8021704:	9206      	str	r2, [sp, #24]
 8021706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021708:	1ad3      	subs	r3, r2, r3
 802170a:	930d      	str	r3, [sp, #52]	@ 0x34
 802170c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802170e:	2b00      	cmp	r3, #0
 8021710:	d01f      	beq.n	8021752 <_dtoa_r+0x812>
 8021712:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021714:	2b00      	cmp	r3, #0
 8021716:	d100      	bne.n	802171a <_dtoa_r+0x7da>
 8021718:	e0b5      	b.n	8021886 <_dtoa_r+0x946>
 802171a:	2d00      	cmp	r5, #0
 802171c:	d010      	beq.n	8021740 <_dtoa_r+0x800>
 802171e:	0039      	movs	r1, r7
 8021720:	002a      	movs	r2, r5
 8021722:	9803      	ldr	r0, [sp, #12]
 8021724:	f001 f884 	bl	8022830 <__pow5mult>
 8021728:	9a05      	ldr	r2, [sp, #20]
 802172a:	0001      	movs	r1, r0
 802172c:	0007      	movs	r7, r0
 802172e:	9803      	ldr	r0, [sp, #12]
 8021730:	f000 ffcc 	bl	80226cc <__multiply>
 8021734:	0006      	movs	r6, r0
 8021736:	9905      	ldr	r1, [sp, #20]
 8021738:	9803      	ldr	r0, [sp, #12]
 802173a:	f000 feab 	bl	8022494 <_Bfree>
 802173e:	9605      	str	r6, [sp, #20]
 8021740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021742:	1b5a      	subs	r2, r3, r5
 8021744:	42ab      	cmp	r3, r5
 8021746:	d004      	beq.n	8021752 <_dtoa_r+0x812>
 8021748:	9905      	ldr	r1, [sp, #20]
 802174a:	9803      	ldr	r0, [sp, #12]
 802174c:	f001 f870 	bl	8022830 <__pow5mult>
 8021750:	9005      	str	r0, [sp, #20]
 8021752:	2101      	movs	r1, #1
 8021754:	9803      	ldr	r0, [sp, #12]
 8021756:	f000 ffa1 	bl	802269c <__i2b>
 802175a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802175c:	0006      	movs	r6, r0
 802175e:	2b00      	cmp	r3, #0
 8021760:	d100      	bne.n	8021764 <_dtoa_r+0x824>
 8021762:	e1bc      	b.n	8021ade <_dtoa_r+0xb9e>
 8021764:	001a      	movs	r2, r3
 8021766:	0001      	movs	r1, r0
 8021768:	9803      	ldr	r0, [sp, #12]
 802176a:	f001 f861 	bl	8022830 <__pow5mult>
 802176e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021770:	0006      	movs	r6, r0
 8021772:	2500      	movs	r5, #0
 8021774:	2b01      	cmp	r3, #1
 8021776:	dc16      	bgt.n	80217a6 <_dtoa_r+0x866>
 8021778:	2500      	movs	r5, #0
 802177a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802177c:	42ab      	cmp	r3, r5
 802177e:	d10e      	bne.n	802179e <_dtoa_r+0x85e>
 8021780:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021782:	031b      	lsls	r3, r3, #12
 8021784:	42ab      	cmp	r3, r5
 8021786:	d10a      	bne.n	802179e <_dtoa_r+0x85e>
 8021788:	4b8d      	ldr	r3, [pc, #564]	@ (80219c0 <_dtoa_r+0xa80>)
 802178a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802178c:	4213      	tst	r3, r2
 802178e:	d006      	beq.n	802179e <_dtoa_r+0x85e>
 8021790:	9b06      	ldr	r3, [sp, #24]
 8021792:	3501      	adds	r5, #1
 8021794:	3301      	adds	r3, #1
 8021796:	9306      	str	r3, [sp, #24]
 8021798:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802179a:	3301      	adds	r3, #1
 802179c:	930d      	str	r3, [sp, #52]	@ 0x34
 802179e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80217a0:	2001      	movs	r0, #1
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d008      	beq.n	80217b8 <_dtoa_r+0x878>
 80217a6:	6933      	ldr	r3, [r6, #16]
 80217a8:	3303      	adds	r3, #3
 80217aa:	009b      	lsls	r3, r3, #2
 80217ac:	18f3      	adds	r3, r6, r3
 80217ae:	6858      	ldr	r0, [r3, #4]
 80217b0:	f000 ff24 	bl	80225fc <__hi0bits>
 80217b4:	2320      	movs	r3, #32
 80217b6:	1a18      	subs	r0, r3, r0
 80217b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80217ba:	1818      	adds	r0, r3, r0
 80217bc:	0002      	movs	r2, r0
 80217be:	231f      	movs	r3, #31
 80217c0:	401a      	ands	r2, r3
 80217c2:	4218      	tst	r0, r3
 80217c4:	d065      	beq.n	8021892 <_dtoa_r+0x952>
 80217c6:	3301      	adds	r3, #1
 80217c8:	1a9b      	subs	r3, r3, r2
 80217ca:	2b04      	cmp	r3, #4
 80217cc:	dd5d      	ble.n	802188a <_dtoa_r+0x94a>
 80217ce:	231c      	movs	r3, #28
 80217d0:	1a9b      	subs	r3, r3, r2
 80217d2:	9a06      	ldr	r2, [sp, #24]
 80217d4:	18e4      	adds	r4, r4, r3
 80217d6:	18d2      	adds	r2, r2, r3
 80217d8:	9206      	str	r2, [sp, #24]
 80217da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80217dc:	18d3      	adds	r3, r2, r3
 80217de:	930d      	str	r3, [sp, #52]	@ 0x34
 80217e0:	9b06      	ldr	r3, [sp, #24]
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	dd05      	ble.n	80217f2 <_dtoa_r+0x8b2>
 80217e6:	001a      	movs	r2, r3
 80217e8:	9905      	ldr	r1, [sp, #20]
 80217ea:	9803      	ldr	r0, [sp, #12]
 80217ec:	f001 f87c 	bl	80228e8 <__lshift>
 80217f0:	9005      	str	r0, [sp, #20]
 80217f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	dd05      	ble.n	8021804 <_dtoa_r+0x8c4>
 80217f8:	0031      	movs	r1, r6
 80217fa:	001a      	movs	r2, r3
 80217fc:	9803      	ldr	r0, [sp, #12]
 80217fe:	f001 f873 	bl	80228e8 <__lshift>
 8021802:	0006      	movs	r6, r0
 8021804:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021806:	2b00      	cmp	r3, #0
 8021808:	d045      	beq.n	8021896 <_dtoa_r+0x956>
 802180a:	0031      	movs	r1, r6
 802180c:	9805      	ldr	r0, [sp, #20]
 802180e:	f001 f8d7 	bl	80229c0 <__mcmp>
 8021812:	2800      	cmp	r0, #0
 8021814:	da3f      	bge.n	8021896 <_dtoa_r+0x956>
 8021816:	9b04      	ldr	r3, [sp, #16]
 8021818:	220a      	movs	r2, #10
 802181a:	3b01      	subs	r3, #1
 802181c:	930c      	str	r3, [sp, #48]	@ 0x30
 802181e:	9905      	ldr	r1, [sp, #20]
 8021820:	2300      	movs	r3, #0
 8021822:	9803      	ldr	r0, [sp, #12]
 8021824:	f000 fe5a 	bl	80224dc <__multadd>
 8021828:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802182a:	9005      	str	r0, [sp, #20]
 802182c:	2b00      	cmp	r3, #0
 802182e:	d100      	bne.n	8021832 <_dtoa_r+0x8f2>
 8021830:	e15c      	b.n	8021aec <_dtoa_r+0xbac>
 8021832:	2300      	movs	r3, #0
 8021834:	0039      	movs	r1, r7
 8021836:	220a      	movs	r2, #10
 8021838:	9803      	ldr	r0, [sp, #12]
 802183a:	f000 fe4f 	bl	80224dc <__multadd>
 802183e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021840:	0007      	movs	r7, r0
 8021842:	2b00      	cmp	r3, #0
 8021844:	dc55      	bgt.n	80218f2 <_dtoa_r+0x9b2>
 8021846:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021848:	2b02      	cmp	r3, #2
 802184a:	dc2d      	bgt.n	80218a8 <_dtoa_r+0x968>
 802184c:	e051      	b.n	80218f2 <_dtoa_r+0x9b2>
 802184e:	2336      	movs	r3, #54	@ 0x36
 8021850:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021852:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021854:	9c06      	ldr	r4, [sp, #24]
 8021856:	1a9b      	subs	r3, r3, r2
 8021858:	e73c      	b.n	80216d4 <_dtoa_r+0x794>
 802185a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802185c:	1e5d      	subs	r5, r3, #1
 802185e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021860:	42ab      	cmp	r3, r5
 8021862:	db08      	blt.n	8021876 <_dtoa_r+0x936>
 8021864:	1b5d      	subs	r5, r3, r5
 8021866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021868:	9c06      	ldr	r4, [sp, #24]
 802186a:	2b00      	cmp	r3, #0
 802186c:	db00      	blt.n	8021870 <_dtoa_r+0x930>
 802186e:	e731      	b.n	80216d4 <_dtoa_r+0x794>
 8021870:	1ae4      	subs	r4, r4, r3
 8021872:	2300      	movs	r3, #0
 8021874:	e72e      	b.n	80216d4 <_dtoa_r+0x794>
 8021876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021878:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802187a:	1aeb      	subs	r3, r5, r3
 802187c:	18d3      	adds	r3, r2, r3
 802187e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8021880:	9314      	str	r3, [sp, #80]	@ 0x50
 8021882:	2500      	movs	r5, #0
 8021884:	e7ef      	b.n	8021866 <_dtoa_r+0x926>
 8021886:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021888:	e75e      	b.n	8021748 <_dtoa_r+0x808>
 802188a:	2b04      	cmp	r3, #4
 802188c:	d0a8      	beq.n	80217e0 <_dtoa_r+0x8a0>
 802188e:	331c      	adds	r3, #28
 8021890:	e79f      	b.n	80217d2 <_dtoa_r+0x892>
 8021892:	0013      	movs	r3, r2
 8021894:	e7fb      	b.n	802188e <_dtoa_r+0x94e>
 8021896:	9b04      	ldr	r3, [sp, #16]
 8021898:	930c      	str	r3, [sp, #48]	@ 0x30
 802189a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802189c:	930e      	str	r3, [sp, #56]	@ 0x38
 802189e:	2b00      	cmp	r3, #0
 80218a0:	dc23      	bgt.n	80218ea <_dtoa_r+0x9aa>
 80218a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80218a4:	2b02      	cmp	r3, #2
 80218a6:	dd20      	ble.n	80218ea <_dtoa_r+0x9aa>
 80218a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d000      	beq.n	80218b0 <_dtoa_r+0x970>
 80218ae:	e6b5      	b.n	802161c <_dtoa_r+0x6dc>
 80218b0:	0031      	movs	r1, r6
 80218b2:	2205      	movs	r2, #5
 80218b4:	9803      	ldr	r0, [sp, #12]
 80218b6:	f000 fe11 	bl	80224dc <__multadd>
 80218ba:	0006      	movs	r6, r0
 80218bc:	0001      	movs	r1, r0
 80218be:	9805      	ldr	r0, [sp, #20]
 80218c0:	f001 f87e 	bl	80229c0 <__mcmp>
 80218c4:	2800      	cmp	r0, #0
 80218c6:	dc00      	bgt.n	80218ca <_dtoa_r+0x98a>
 80218c8:	e6a8      	b.n	802161c <_dtoa_r+0x6dc>
 80218ca:	9b08      	ldr	r3, [sp, #32]
 80218cc:	9a08      	ldr	r2, [sp, #32]
 80218ce:	1c5c      	adds	r4, r3, #1
 80218d0:	2331      	movs	r3, #49	@ 0x31
 80218d2:	7013      	strb	r3, [r2, #0]
 80218d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80218d6:	3301      	adds	r3, #1
 80218d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80218da:	e6a3      	b.n	8021624 <_dtoa_r+0x6e4>
 80218dc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80218de:	0037      	movs	r7, r6
 80218e0:	e7f3      	b.n	80218ca <_dtoa_r+0x98a>
 80218e2:	9b04      	ldr	r3, [sp, #16]
 80218e4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80218e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80218e8:	e7f9      	b.n	80218de <_dtoa_r+0x99e>
 80218ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d100      	bne.n	80218f2 <_dtoa_r+0x9b2>
 80218f0:	e100      	b.n	8021af4 <_dtoa_r+0xbb4>
 80218f2:	2c00      	cmp	r4, #0
 80218f4:	dd05      	ble.n	8021902 <_dtoa_r+0x9c2>
 80218f6:	0039      	movs	r1, r7
 80218f8:	0022      	movs	r2, r4
 80218fa:	9803      	ldr	r0, [sp, #12]
 80218fc:	f000 fff4 	bl	80228e8 <__lshift>
 8021900:	0007      	movs	r7, r0
 8021902:	0038      	movs	r0, r7
 8021904:	2d00      	cmp	r5, #0
 8021906:	d018      	beq.n	802193a <_dtoa_r+0x9fa>
 8021908:	6879      	ldr	r1, [r7, #4]
 802190a:	9803      	ldr	r0, [sp, #12]
 802190c:	f000 fd7e 	bl	802240c <_Balloc>
 8021910:	1e04      	subs	r4, r0, #0
 8021912:	d105      	bne.n	8021920 <_dtoa_r+0x9e0>
 8021914:	0022      	movs	r2, r4
 8021916:	4b2b      	ldr	r3, [pc, #172]	@ (80219c4 <_dtoa_r+0xa84>)
 8021918:	482b      	ldr	r0, [pc, #172]	@ (80219c8 <_dtoa_r+0xa88>)
 802191a:	492c      	ldr	r1, [pc, #176]	@ (80219cc <_dtoa_r+0xa8c>)
 802191c:	f7ff fb25 	bl	8020f6a <_dtoa_r+0x2a>
 8021920:	0039      	movs	r1, r7
 8021922:	693a      	ldr	r2, [r7, #16]
 8021924:	310c      	adds	r1, #12
 8021926:	3202      	adds	r2, #2
 8021928:	0092      	lsls	r2, r2, #2
 802192a:	300c      	adds	r0, #12
 802192c:	f7ff fa6a 	bl	8020e04 <memcpy>
 8021930:	2201      	movs	r2, #1
 8021932:	0021      	movs	r1, r4
 8021934:	9803      	ldr	r0, [sp, #12]
 8021936:	f000 ffd7 	bl	80228e8 <__lshift>
 802193a:	9b08      	ldr	r3, [sp, #32]
 802193c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802193e:	9306      	str	r3, [sp, #24]
 8021940:	3b01      	subs	r3, #1
 8021942:	189b      	adds	r3, r3, r2
 8021944:	2201      	movs	r2, #1
 8021946:	9704      	str	r7, [sp, #16]
 8021948:	0007      	movs	r7, r0
 802194a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802194c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802194e:	4013      	ands	r3, r2
 8021950:	930e      	str	r3, [sp, #56]	@ 0x38
 8021952:	0031      	movs	r1, r6
 8021954:	9805      	ldr	r0, [sp, #20]
 8021956:	f7ff fa65 	bl	8020e24 <quorem>
 802195a:	9904      	ldr	r1, [sp, #16]
 802195c:	0005      	movs	r5, r0
 802195e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021960:	9805      	ldr	r0, [sp, #20]
 8021962:	f001 f82d 	bl	80229c0 <__mcmp>
 8021966:	003a      	movs	r2, r7
 8021968:	900d      	str	r0, [sp, #52]	@ 0x34
 802196a:	0031      	movs	r1, r6
 802196c:	9803      	ldr	r0, [sp, #12]
 802196e:	f001 f843 	bl	80229f8 <__mdiff>
 8021972:	2201      	movs	r2, #1
 8021974:	68c3      	ldr	r3, [r0, #12]
 8021976:	0004      	movs	r4, r0
 8021978:	3530      	adds	r5, #48	@ 0x30
 802197a:	9209      	str	r2, [sp, #36]	@ 0x24
 802197c:	2b00      	cmp	r3, #0
 802197e:	d104      	bne.n	802198a <_dtoa_r+0xa4a>
 8021980:	0001      	movs	r1, r0
 8021982:	9805      	ldr	r0, [sp, #20]
 8021984:	f001 f81c 	bl	80229c0 <__mcmp>
 8021988:	9009      	str	r0, [sp, #36]	@ 0x24
 802198a:	0021      	movs	r1, r4
 802198c:	9803      	ldr	r0, [sp, #12]
 802198e:	f000 fd81 	bl	8022494 <_Bfree>
 8021992:	9b06      	ldr	r3, [sp, #24]
 8021994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021996:	1c5c      	adds	r4, r3, #1
 8021998:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802199a:	4313      	orrs	r3, r2
 802199c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802199e:	4313      	orrs	r3, r2
 80219a0:	d116      	bne.n	80219d0 <_dtoa_r+0xa90>
 80219a2:	2d39      	cmp	r5, #57	@ 0x39
 80219a4:	d02f      	beq.n	8021a06 <_dtoa_r+0xac6>
 80219a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80219a8:	2b00      	cmp	r3, #0
 80219aa:	dd01      	ble.n	80219b0 <_dtoa_r+0xa70>
 80219ac:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80219ae:	3531      	adds	r5, #49	@ 0x31
 80219b0:	9b06      	ldr	r3, [sp, #24]
 80219b2:	701d      	strb	r5, [r3, #0]
 80219b4:	e638      	b.n	8021628 <_dtoa_r+0x6e8>
 80219b6:	46c0      	nop			@ (mov r8, r8)
 80219b8:	40240000 	.word	0x40240000
 80219bc:	00000433 	.word	0x00000433
 80219c0:	7ff00000 	.word	0x7ff00000
 80219c4:	08026e71 	.word	0x08026e71
 80219c8:	08026e19 	.word	0x08026e19
 80219cc:	000002ef 	.word	0x000002ef
 80219d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	db04      	blt.n	80219e0 <_dtoa_r+0xaa0>
 80219d6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80219d8:	4313      	orrs	r3, r2
 80219da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80219dc:	4313      	orrs	r3, r2
 80219de:	d11e      	bne.n	8021a1e <_dtoa_r+0xade>
 80219e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	dde4      	ble.n	80219b0 <_dtoa_r+0xa70>
 80219e6:	9905      	ldr	r1, [sp, #20]
 80219e8:	2201      	movs	r2, #1
 80219ea:	9803      	ldr	r0, [sp, #12]
 80219ec:	f000 ff7c 	bl	80228e8 <__lshift>
 80219f0:	0031      	movs	r1, r6
 80219f2:	9005      	str	r0, [sp, #20]
 80219f4:	f000 ffe4 	bl	80229c0 <__mcmp>
 80219f8:	2800      	cmp	r0, #0
 80219fa:	dc02      	bgt.n	8021a02 <_dtoa_r+0xac2>
 80219fc:	d1d8      	bne.n	80219b0 <_dtoa_r+0xa70>
 80219fe:	07eb      	lsls	r3, r5, #31
 8021a00:	d5d6      	bpl.n	80219b0 <_dtoa_r+0xa70>
 8021a02:	2d39      	cmp	r5, #57	@ 0x39
 8021a04:	d1d2      	bne.n	80219ac <_dtoa_r+0xa6c>
 8021a06:	2339      	movs	r3, #57	@ 0x39
 8021a08:	9a06      	ldr	r2, [sp, #24]
 8021a0a:	7013      	strb	r3, [r2, #0]
 8021a0c:	0023      	movs	r3, r4
 8021a0e:	001c      	movs	r4, r3
 8021a10:	3b01      	subs	r3, #1
 8021a12:	781a      	ldrb	r2, [r3, #0]
 8021a14:	2a39      	cmp	r2, #57	@ 0x39
 8021a16:	d04f      	beq.n	8021ab8 <_dtoa_r+0xb78>
 8021a18:	3201      	adds	r2, #1
 8021a1a:	701a      	strb	r2, [r3, #0]
 8021a1c:	e604      	b.n	8021628 <_dtoa_r+0x6e8>
 8021a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	dd03      	ble.n	8021a2c <_dtoa_r+0xaec>
 8021a24:	2d39      	cmp	r5, #57	@ 0x39
 8021a26:	d0ee      	beq.n	8021a06 <_dtoa_r+0xac6>
 8021a28:	3501      	adds	r5, #1
 8021a2a:	e7c1      	b.n	80219b0 <_dtoa_r+0xa70>
 8021a2c:	9b06      	ldr	r3, [sp, #24]
 8021a2e:	9a06      	ldr	r2, [sp, #24]
 8021a30:	701d      	strb	r5, [r3, #0]
 8021a32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a34:	4293      	cmp	r3, r2
 8021a36:	d02a      	beq.n	8021a8e <_dtoa_r+0xb4e>
 8021a38:	2300      	movs	r3, #0
 8021a3a:	220a      	movs	r2, #10
 8021a3c:	9905      	ldr	r1, [sp, #20]
 8021a3e:	9803      	ldr	r0, [sp, #12]
 8021a40:	f000 fd4c 	bl	80224dc <__multadd>
 8021a44:	9b04      	ldr	r3, [sp, #16]
 8021a46:	9005      	str	r0, [sp, #20]
 8021a48:	42bb      	cmp	r3, r7
 8021a4a:	d109      	bne.n	8021a60 <_dtoa_r+0xb20>
 8021a4c:	2300      	movs	r3, #0
 8021a4e:	220a      	movs	r2, #10
 8021a50:	9904      	ldr	r1, [sp, #16]
 8021a52:	9803      	ldr	r0, [sp, #12]
 8021a54:	f000 fd42 	bl	80224dc <__multadd>
 8021a58:	9004      	str	r0, [sp, #16]
 8021a5a:	0007      	movs	r7, r0
 8021a5c:	9406      	str	r4, [sp, #24]
 8021a5e:	e778      	b.n	8021952 <_dtoa_r+0xa12>
 8021a60:	9904      	ldr	r1, [sp, #16]
 8021a62:	2300      	movs	r3, #0
 8021a64:	220a      	movs	r2, #10
 8021a66:	9803      	ldr	r0, [sp, #12]
 8021a68:	f000 fd38 	bl	80224dc <__multadd>
 8021a6c:	2300      	movs	r3, #0
 8021a6e:	9004      	str	r0, [sp, #16]
 8021a70:	220a      	movs	r2, #10
 8021a72:	0039      	movs	r1, r7
 8021a74:	9803      	ldr	r0, [sp, #12]
 8021a76:	f000 fd31 	bl	80224dc <__multadd>
 8021a7a:	e7ee      	b.n	8021a5a <_dtoa_r+0xb1a>
 8021a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a7e:	2401      	movs	r4, #1
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	dd00      	ble.n	8021a86 <_dtoa_r+0xb46>
 8021a84:	001c      	movs	r4, r3
 8021a86:	9b08      	ldr	r3, [sp, #32]
 8021a88:	191c      	adds	r4, r3, r4
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	9304      	str	r3, [sp, #16]
 8021a8e:	9905      	ldr	r1, [sp, #20]
 8021a90:	2201      	movs	r2, #1
 8021a92:	9803      	ldr	r0, [sp, #12]
 8021a94:	f000 ff28 	bl	80228e8 <__lshift>
 8021a98:	0031      	movs	r1, r6
 8021a9a:	9005      	str	r0, [sp, #20]
 8021a9c:	f000 ff90 	bl	80229c0 <__mcmp>
 8021aa0:	2800      	cmp	r0, #0
 8021aa2:	dcb3      	bgt.n	8021a0c <_dtoa_r+0xacc>
 8021aa4:	d101      	bne.n	8021aaa <_dtoa_r+0xb6a>
 8021aa6:	07ed      	lsls	r5, r5, #31
 8021aa8:	d4b0      	bmi.n	8021a0c <_dtoa_r+0xacc>
 8021aaa:	0023      	movs	r3, r4
 8021aac:	001c      	movs	r4, r3
 8021aae:	3b01      	subs	r3, #1
 8021ab0:	781a      	ldrb	r2, [r3, #0]
 8021ab2:	2a30      	cmp	r2, #48	@ 0x30
 8021ab4:	d0fa      	beq.n	8021aac <_dtoa_r+0xb6c>
 8021ab6:	e5b7      	b.n	8021628 <_dtoa_r+0x6e8>
 8021ab8:	9a08      	ldr	r2, [sp, #32]
 8021aba:	429a      	cmp	r2, r3
 8021abc:	d1a7      	bne.n	8021a0e <_dtoa_r+0xace>
 8021abe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ac0:	3301      	adds	r3, #1
 8021ac2:	930c      	str	r3, [sp, #48]	@ 0x30
 8021ac4:	2331      	movs	r3, #49	@ 0x31
 8021ac6:	7013      	strb	r3, [r2, #0]
 8021ac8:	e5ae      	b.n	8021628 <_dtoa_r+0x6e8>
 8021aca:	4b15      	ldr	r3, [pc, #84]	@ (8021b20 <_dtoa_r+0xbe0>)
 8021acc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8021ace:	9308      	str	r3, [sp, #32]
 8021ad0:	4b14      	ldr	r3, [pc, #80]	@ (8021b24 <_dtoa_r+0xbe4>)
 8021ad2:	2a00      	cmp	r2, #0
 8021ad4:	d001      	beq.n	8021ada <_dtoa_r+0xb9a>
 8021ad6:	f7ff fa7b 	bl	8020fd0 <_dtoa_r+0x90>
 8021ada:	f7ff fa7b 	bl	8020fd4 <_dtoa_r+0x94>
 8021ade:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021ae0:	2b01      	cmp	r3, #1
 8021ae2:	dc00      	bgt.n	8021ae6 <_dtoa_r+0xba6>
 8021ae4:	e648      	b.n	8021778 <_dtoa_r+0x838>
 8021ae6:	2001      	movs	r0, #1
 8021ae8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8021aea:	e665      	b.n	80217b8 <_dtoa_r+0x878>
 8021aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	dc00      	bgt.n	8021af4 <_dtoa_r+0xbb4>
 8021af2:	e6d6      	b.n	80218a2 <_dtoa_r+0x962>
 8021af4:	2400      	movs	r4, #0
 8021af6:	0031      	movs	r1, r6
 8021af8:	9805      	ldr	r0, [sp, #20]
 8021afa:	f7ff f993 	bl	8020e24 <quorem>
 8021afe:	9b08      	ldr	r3, [sp, #32]
 8021b00:	3030      	adds	r0, #48	@ 0x30
 8021b02:	5518      	strb	r0, [r3, r4]
 8021b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021b06:	3401      	adds	r4, #1
 8021b08:	0005      	movs	r5, r0
 8021b0a:	429c      	cmp	r4, r3
 8021b0c:	dab6      	bge.n	8021a7c <_dtoa_r+0xb3c>
 8021b0e:	2300      	movs	r3, #0
 8021b10:	220a      	movs	r2, #10
 8021b12:	9905      	ldr	r1, [sp, #20]
 8021b14:	9803      	ldr	r0, [sp, #12]
 8021b16:	f000 fce1 	bl	80224dc <__multadd>
 8021b1a:	9005      	str	r0, [sp, #20]
 8021b1c:	e7eb      	b.n	8021af6 <_dtoa_r+0xbb6>
 8021b1e:	46c0      	nop			@ (mov r8, r8)
 8021b20:	08026df5 	.word	0x08026df5
 8021b24:	08026dfd 	.word	0x08026dfd

08021b28 <_free_r>:
 8021b28:	b570      	push	{r4, r5, r6, lr}
 8021b2a:	0005      	movs	r5, r0
 8021b2c:	1e0c      	subs	r4, r1, #0
 8021b2e:	d010      	beq.n	8021b52 <_free_r+0x2a>
 8021b30:	3c04      	subs	r4, #4
 8021b32:	6823      	ldr	r3, [r4, #0]
 8021b34:	2b00      	cmp	r3, #0
 8021b36:	da00      	bge.n	8021b3a <_free_r+0x12>
 8021b38:	18e4      	adds	r4, r4, r3
 8021b3a:	0028      	movs	r0, r5
 8021b3c:	f000 fc56 	bl	80223ec <__malloc_lock>
 8021b40:	4a1d      	ldr	r2, [pc, #116]	@ (8021bb8 <_free_r+0x90>)
 8021b42:	6813      	ldr	r3, [r2, #0]
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	d105      	bne.n	8021b54 <_free_r+0x2c>
 8021b48:	6063      	str	r3, [r4, #4]
 8021b4a:	6014      	str	r4, [r2, #0]
 8021b4c:	0028      	movs	r0, r5
 8021b4e:	f000 fc55 	bl	80223fc <__malloc_unlock>
 8021b52:	bd70      	pop	{r4, r5, r6, pc}
 8021b54:	42a3      	cmp	r3, r4
 8021b56:	d908      	bls.n	8021b6a <_free_r+0x42>
 8021b58:	6820      	ldr	r0, [r4, #0]
 8021b5a:	1821      	adds	r1, r4, r0
 8021b5c:	428b      	cmp	r3, r1
 8021b5e:	d1f3      	bne.n	8021b48 <_free_r+0x20>
 8021b60:	6819      	ldr	r1, [r3, #0]
 8021b62:	685b      	ldr	r3, [r3, #4]
 8021b64:	1809      	adds	r1, r1, r0
 8021b66:	6021      	str	r1, [r4, #0]
 8021b68:	e7ee      	b.n	8021b48 <_free_r+0x20>
 8021b6a:	001a      	movs	r2, r3
 8021b6c:	685b      	ldr	r3, [r3, #4]
 8021b6e:	2b00      	cmp	r3, #0
 8021b70:	d001      	beq.n	8021b76 <_free_r+0x4e>
 8021b72:	42a3      	cmp	r3, r4
 8021b74:	d9f9      	bls.n	8021b6a <_free_r+0x42>
 8021b76:	6811      	ldr	r1, [r2, #0]
 8021b78:	1850      	adds	r0, r2, r1
 8021b7a:	42a0      	cmp	r0, r4
 8021b7c:	d10b      	bne.n	8021b96 <_free_r+0x6e>
 8021b7e:	6820      	ldr	r0, [r4, #0]
 8021b80:	1809      	adds	r1, r1, r0
 8021b82:	1850      	adds	r0, r2, r1
 8021b84:	6011      	str	r1, [r2, #0]
 8021b86:	4283      	cmp	r3, r0
 8021b88:	d1e0      	bne.n	8021b4c <_free_r+0x24>
 8021b8a:	6818      	ldr	r0, [r3, #0]
 8021b8c:	685b      	ldr	r3, [r3, #4]
 8021b8e:	1841      	adds	r1, r0, r1
 8021b90:	6011      	str	r1, [r2, #0]
 8021b92:	6053      	str	r3, [r2, #4]
 8021b94:	e7da      	b.n	8021b4c <_free_r+0x24>
 8021b96:	42a0      	cmp	r0, r4
 8021b98:	d902      	bls.n	8021ba0 <_free_r+0x78>
 8021b9a:	230c      	movs	r3, #12
 8021b9c:	602b      	str	r3, [r5, #0]
 8021b9e:	e7d5      	b.n	8021b4c <_free_r+0x24>
 8021ba0:	6820      	ldr	r0, [r4, #0]
 8021ba2:	1821      	adds	r1, r4, r0
 8021ba4:	428b      	cmp	r3, r1
 8021ba6:	d103      	bne.n	8021bb0 <_free_r+0x88>
 8021ba8:	6819      	ldr	r1, [r3, #0]
 8021baa:	685b      	ldr	r3, [r3, #4]
 8021bac:	1809      	adds	r1, r1, r0
 8021bae:	6021      	str	r1, [r4, #0]
 8021bb0:	6063      	str	r3, [r4, #4]
 8021bb2:	6054      	str	r4, [r2, #4]
 8021bb4:	e7ca      	b.n	8021b4c <_free_r+0x24>
 8021bb6:	46c0      	nop			@ (mov r8, r8)
 8021bb8:	200034b8 	.word	0x200034b8

08021bbc <rshift>:
 8021bbc:	0002      	movs	r2, r0
 8021bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bc0:	6904      	ldr	r4, [r0, #16]
 8021bc2:	b085      	sub	sp, #20
 8021bc4:	3214      	adds	r2, #20
 8021bc6:	114b      	asrs	r3, r1, #5
 8021bc8:	0016      	movs	r6, r2
 8021bca:	9302      	str	r3, [sp, #8]
 8021bcc:	429c      	cmp	r4, r3
 8021bce:	dd31      	ble.n	8021c34 <rshift+0x78>
 8021bd0:	261f      	movs	r6, #31
 8021bd2:	000f      	movs	r7, r1
 8021bd4:	009b      	lsls	r3, r3, #2
 8021bd6:	00a5      	lsls	r5, r4, #2
 8021bd8:	18d3      	adds	r3, r2, r3
 8021bda:	4037      	ands	r7, r6
 8021bdc:	1955      	adds	r5, r2, r5
 8021bde:	9300      	str	r3, [sp, #0]
 8021be0:	9701      	str	r7, [sp, #4]
 8021be2:	4231      	tst	r1, r6
 8021be4:	d10d      	bne.n	8021c02 <rshift+0x46>
 8021be6:	0016      	movs	r6, r2
 8021be8:	0019      	movs	r1, r3
 8021bea:	428d      	cmp	r5, r1
 8021bec:	d836      	bhi.n	8021c5c <rshift+0xa0>
 8021bee:	9b00      	ldr	r3, [sp, #0]
 8021bf0:	2600      	movs	r6, #0
 8021bf2:	3b03      	subs	r3, #3
 8021bf4:	429d      	cmp	r5, r3
 8021bf6:	d302      	bcc.n	8021bfe <rshift+0x42>
 8021bf8:	9b02      	ldr	r3, [sp, #8]
 8021bfa:	1ae4      	subs	r4, r4, r3
 8021bfc:	00a6      	lsls	r6, r4, #2
 8021bfe:	1996      	adds	r6, r2, r6
 8021c00:	e018      	b.n	8021c34 <rshift+0x78>
 8021c02:	2120      	movs	r1, #32
 8021c04:	9e01      	ldr	r6, [sp, #4]
 8021c06:	9f01      	ldr	r7, [sp, #4]
 8021c08:	1b89      	subs	r1, r1, r6
 8021c0a:	9e00      	ldr	r6, [sp, #0]
 8021c0c:	9103      	str	r1, [sp, #12]
 8021c0e:	ce02      	ldmia	r6!, {r1}
 8021c10:	4694      	mov	ip, r2
 8021c12:	40f9      	lsrs	r1, r7
 8021c14:	42b5      	cmp	r5, r6
 8021c16:	d816      	bhi.n	8021c46 <rshift+0x8a>
 8021c18:	9b00      	ldr	r3, [sp, #0]
 8021c1a:	2600      	movs	r6, #0
 8021c1c:	3301      	adds	r3, #1
 8021c1e:	429d      	cmp	r5, r3
 8021c20:	d303      	bcc.n	8021c2a <rshift+0x6e>
 8021c22:	9b02      	ldr	r3, [sp, #8]
 8021c24:	1ae4      	subs	r4, r4, r3
 8021c26:	00a6      	lsls	r6, r4, #2
 8021c28:	3e04      	subs	r6, #4
 8021c2a:	1996      	adds	r6, r2, r6
 8021c2c:	6031      	str	r1, [r6, #0]
 8021c2e:	2900      	cmp	r1, #0
 8021c30:	d000      	beq.n	8021c34 <rshift+0x78>
 8021c32:	3604      	adds	r6, #4
 8021c34:	1ab1      	subs	r1, r6, r2
 8021c36:	1089      	asrs	r1, r1, #2
 8021c38:	6101      	str	r1, [r0, #16]
 8021c3a:	4296      	cmp	r6, r2
 8021c3c:	d101      	bne.n	8021c42 <rshift+0x86>
 8021c3e:	2300      	movs	r3, #0
 8021c40:	6143      	str	r3, [r0, #20]
 8021c42:	b005      	add	sp, #20
 8021c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c46:	6837      	ldr	r7, [r6, #0]
 8021c48:	9b03      	ldr	r3, [sp, #12]
 8021c4a:	409f      	lsls	r7, r3
 8021c4c:	430f      	orrs	r7, r1
 8021c4e:	4661      	mov	r1, ip
 8021c50:	c180      	stmia	r1!, {r7}
 8021c52:	468c      	mov	ip, r1
 8021c54:	9b01      	ldr	r3, [sp, #4]
 8021c56:	ce02      	ldmia	r6!, {r1}
 8021c58:	40d9      	lsrs	r1, r3
 8021c5a:	e7db      	b.n	8021c14 <rshift+0x58>
 8021c5c:	c980      	ldmia	r1!, {r7}
 8021c5e:	c680      	stmia	r6!, {r7}
 8021c60:	e7c3      	b.n	8021bea <rshift+0x2e>

08021c62 <__hexdig_fun>:
 8021c62:	0002      	movs	r2, r0
 8021c64:	3a30      	subs	r2, #48	@ 0x30
 8021c66:	0003      	movs	r3, r0
 8021c68:	2a09      	cmp	r2, #9
 8021c6a:	d802      	bhi.n	8021c72 <__hexdig_fun+0x10>
 8021c6c:	3b20      	subs	r3, #32
 8021c6e:	b2d8      	uxtb	r0, r3
 8021c70:	4770      	bx	lr
 8021c72:	0002      	movs	r2, r0
 8021c74:	3a61      	subs	r2, #97	@ 0x61
 8021c76:	2a05      	cmp	r2, #5
 8021c78:	d801      	bhi.n	8021c7e <__hexdig_fun+0x1c>
 8021c7a:	3b47      	subs	r3, #71	@ 0x47
 8021c7c:	e7f7      	b.n	8021c6e <__hexdig_fun+0xc>
 8021c7e:	001a      	movs	r2, r3
 8021c80:	3a41      	subs	r2, #65	@ 0x41
 8021c82:	2000      	movs	r0, #0
 8021c84:	2a05      	cmp	r2, #5
 8021c86:	d8f3      	bhi.n	8021c70 <__hexdig_fun+0xe>
 8021c88:	3b27      	subs	r3, #39	@ 0x27
 8021c8a:	e7f0      	b.n	8021c6e <__hexdig_fun+0xc>

08021c8c <__gethex>:
 8021c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c8e:	b089      	sub	sp, #36	@ 0x24
 8021c90:	9307      	str	r3, [sp, #28]
 8021c92:	680b      	ldr	r3, [r1, #0]
 8021c94:	9201      	str	r2, [sp, #4]
 8021c96:	9003      	str	r0, [sp, #12]
 8021c98:	9106      	str	r1, [sp, #24]
 8021c9a:	1c9a      	adds	r2, r3, #2
 8021c9c:	0011      	movs	r1, r2
 8021c9e:	3201      	adds	r2, #1
 8021ca0:	1e50      	subs	r0, r2, #1
 8021ca2:	7800      	ldrb	r0, [r0, #0]
 8021ca4:	2830      	cmp	r0, #48	@ 0x30
 8021ca6:	d0f9      	beq.n	8021c9c <__gethex+0x10>
 8021ca8:	1acb      	subs	r3, r1, r3
 8021caa:	3b02      	subs	r3, #2
 8021cac:	9305      	str	r3, [sp, #20]
 8021cae:	9100      	str	r1, [sp, #0]
 8021cb0:	f7ff ffd7 	bl	8021c62 <__hexdig_fun>
 8021cb4:	2300      	movs	r3, #0
 8021cb6:	001d      	movs	r5, r3
 8021cb8:	9302      	str	r3, [sp, #8]
 8021cba:	4298      	cmp	r0, r3
 8021cbc:	d11e      	bne.n	8021cfc <__gethex+0x70>
 8021cbe:	2201      	movs	r2, #1
 8021cc0:	49a6      	ldr	r1, [pc, #664]	@ (8021f5c <__gethex+0x2d0>)
 8021cc2:	9800      	ldr	r0, [sp, #0]
 8021cc4:	f7fe ffd8 	bl	8020c78 <strncmp>
 8021cc8:	0007      	movs	r7, r0
 8021cca:	42a8      	cmp	r0, r5
 8021ccc:	d000      	beq.n	8021cd0 <__gethex+0x44>
 8021cce:	e06a      	b.n	8021da6 <__gethex+0x11a>
 8021cd0:	9b00      	ldr	r3, [sp, #0]
 8021cd2:	7858      	ldrb	r0, [r3, #1]
 8021cd4:	1c5c      	adds	r4, r3, #1
 8021cd6:	f7ff ffc4 	bl	8021c62 <__hexdig_fun>
 8021cda:	2301      	movs	r3, #1
 8021cdc:	9302      	str	r3, [sp, #8]
 8021cde:	42a8      	cmp	r0, r5
 8021ce0:	d02f      	beq.n	8021d42 <__gethex+0xb6>
 8021ce2:	9400      	str	r4, [sp, #0]
 8021ce4:	9b00      	ldr	r3, [sp, #0]
 8021ce6:	7818      	ldrb	r0, [r3, #0]
 8021ce8:	2830      	cmp	r0, #48	@ 0x30
 8021cea:	d009      	beq.n	8021d00 <__gethex+0x74>
 8021cec:	f7ff ffb9 	bl	8021c62 <__hexdig_fun>
 8021cf0:	4242      	negs	r2, r0
 8021cf2:	4142      	adcs	r2, r0
 8021cf4:	2301      	movs	r3, #1
 8021cf6:	0025      	movs	r5, r4
 8021cf8:	9202      	str	r2, [sp, #8]
 8021cfa:	9305      	str	r3, [sp, #20]
 8021cfc:	9c00      	ldr	r4, [sp, #0]
 8021cfe:	e004      	b.n	8021d0a <__gethex+0x7e>
 8021d00:	9b00      	ldr	r3, [sp, #0]
 8021d02:	3301      	adds	r3, #1
 8021d04:	9300      	str	r3, [sp, #0]
 8021d06:	e7ed      	b.n	8021ce4 <__gethex+0x58>
 8021d08:	3401      	adds	r4, #1
 8021d0a:	7820      	ldrb	r0, [r4, #0]
 8021d0c:	f7ff ffa9 	bl	8021c62 <__hexdig_fun>
 8021d10:	1e07      	subs	r7, r0, #0
 8021d12:	d1f9      	bne.n	8021d08 <__gethex+0x7c>
 8021d14:	2201      	movs	r2, #1
 8021d16:	0020      	movs	r0, r4
 8021d18:	4990      	ldr	r1, [pc, #576]	@ (8021f5c <__gethex+0x2d0>)
 8021d1a:	f7fe ffad 	bl	8020c78 <strncmp>
 8021d1e:	2800      	cmp	r0, #0
 8021d20:	d10d      	bne.n	8021d3e <__gethex+0xb2>
 8021d22:	2d00      	cmp	r5, #0
 8021d24:	d106      	bne.n	8021d34 <__gethex+0xa8>
 8021d26:	3401      	adds	r4, #1
 8021d28:	0025      	movs	r5, r4
 8021d2a:	7820      	ldrb	r0, [r4, #0]
 8021d2c:	f7ff ff99 	bl	8021c62 <__hexdig_fun>
 8021d30:	2800      	cmp	r0, #0
 8021d32:	d102      	bne.n	8021d3a <__gethex+0xae>
 8021d34:	1b2d      	subs	r5, r5, r4
 8021d36:	00af      	lsls	r7, r5, #2
 8021d38:	e003      	b.n	8021d42 <__gethex+0xb6>
 8021d3a:	3401      	adds	r4, #1
 8021d3c:	e7f5      	b.n	8021d2a <__gethex+0x9e>
 8021d3e:	2d00      	cmp	r5, #0
 8021d40:	d1f8      	bne.n	8021d34 <__gethex+0xa8>
 8021d42:	2220      	movs	r2, #32
 8021d44:	7823      	ldrb	r3, [r4, #0]
 8021d46:	0026      	movs	r6, r4
 8021d48:	4393      	bics	r3, r2
 8021d4a:	2b50      	cmp	r3, #80	@ 0x50
 8021d4c:	d11d      	bne.n	8021d8a <__gethex+0xfe>
 8021d4e:	7863      	ldrb	r3, [r4, #1]
 8021d50:	2b2b      	cmp	r3, #43	@ 0x2b
 8021d52:	d02d      	beq.n	8021db0 <__gethex+0x124>
 8021d54:	2b2d      	cmp	r3, #45	@ 0x2d
 8021d56:	d02f      	beq.n	8021db8 <__gethex+0x12c>
 8021d58:	2300      	movs	r3, #0
 8021d5a:	1c66      	adds	r6, r4, #1
 8021d5c:	9304      	str	r3, [sp, #16]
 8021d5e:	7830      	ldrb	r0, [r6, #0]
 8021d60:	f7ff ff7f 	bl	8021c62 <__hexdig_fun>
 8021d64:	1e43      	subs	r3, r0, #1
 8021d66:	b2db      	uxtb	r3, r3
 8021d68:	0005      	movs	r5, r0
 8021d6a:	2b18      	cmp	r3, #24
 8021d6c:	d82a      	bhi.n	8021dc4 <__gethex+0x138>
 8021d6e:	7870      	ldrb	r0, [r6, #1]
 8021d70:	f7ff ff77 	bl	8021c62 <__hexdig_fun>
 8021d74:	1e43      	subs	r3, r0, #1
 8021d76:	b2db      	uxtb	r3, r3
 8021d78:	3601      	adds	r6, #1
 8021d7a:	3d10      	subs	r5, #16
 8021d7c:	2b18      	cmp	r3, #24
 8021d7e:	d91d      	bls.n	8021dbc <__gethex+0x130>
 8021d80:	9b04      	ldr	r3, [sp, #16]
 8021d82:	2b00      	cmp	r3, #0
 8021d84:	d000      	beq.n	8021d88 <__gethex+0xfc>
 8021d86:	426d      	negs	r5, r5
 8021d88:	197f      	adds	r7, r7, r5
 8021d8a:	9b06      	ldr	r3, [sp, #24]
 8021d8c:	601e      	str	r6, [r3, #0]
 8021d8e:	9b02      	ldr	r3, [sp, #8]
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	d019      	beq.n	8021dc8 <__gethex+0x13c>
 8021d94:	9b05      	ldr	r3, [sp, #20]
 8021d96:	2606      	movs	r6, #6
 8021d98:	425a      	negs	r2, r3
 8021d9a:	4153      	adcs	r3, r2
 8021d9c:	425b      	negs	r3, r3
 8021d9e:	401e      	ands	r6, r3
 8021da0:	0030      	movs	r0, r6
 8021da2:	b009      	add	sp, #36	@ 0x24
 8021da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021da6:	2301      	movs	r3, #1
 8021da8:	2700      	movs	r7, #0
 8021daa:	9c00      	ldr	r4, [sp, #0]
 8021dac:	9302      	str	r3, [sp, #8]
 8021dae:	e7c8      	b.n	8021d42 <__gethex+0xb6>
 8021db0:	2300      	movs	r3, #0
 8021db2:	9304      	str	r3, [sp, #16]
 8021db4:	1ca6      	adds	r6, r4, #2
 8021db6:	e7d2      	b.n	8021d5e <__gethex+0xd2>
 8021db8:	2301      	movs	r3, #1
 8021dba:	e7fa      	b.n	8021db2 <__gethex+0x126>
 8021dbc:	230a      	movs	r3, #10
 8021dbe:	435d      	muls	r5, r3
 8021dc0:	182d      	adds	r5, r5, r0
 8021dc2:	e7d4      	b.n	8021d6e <__gethex+0xe2>
 8021dc4:	0026      	movs	r6, r4
 8021dc6:	e7e0      	b.n	8021d8a <__gethex+0xfe>
 8021dc8:	9b00      	ldr	r3, [sp, #0]
 8021dca:	9902      	ldr	r1, [sp, #8]
 8021dcc:	1ae3      	subs	r3, r4, r3
 8021dce:	3b01      	subs	r3, #1
 8021dd0:	2b07      	cmp	r3, #7
 8021dd2:	dc0a      	bgt.n	8021dea <__gethex+0x15e>
 8021dd4:	9803      	ldr	r0, [sp, #12]
 8021dd6:	f000 fb19 	bl	802240c <_Balloc>
 8021dda:	1e05      	subs	r5, r0, #0
 8021ddc:	d108      	bne.n	8021df0 <__gethex+0x164>
 8021dde:	002a      	movs	r2, r5
 8021de0:	21e4      	movs	r1, #228	@ 0xe4
 8021de2:	4b5f      	ldr	r3, [pc, #380]	@ (8021f60 <__gethex+0x2d4>)
 8021de4:	485f      	ldr	r0, [pc, #380]	@ (8021f64 <__gethex+0x2d8>)
 8021de6:	f001 fbf1 	bl	80235cc <__assert_func>
 8021dea:	3101      	adds	r1, #1
 8021dec:	105b      	asrs	r3, r3, #1
 8021dee:	e7ef      	b.n	8021dd0 <__gethex+0x144>
 8021df0:	0003      	movs	r3, r0
 8021df2:	3314      	adds	r3, #20
 8021df4:	9302      	str	r3, [sp, #8]
 8021df6:	9305      	str	r3, [sp, #20]
 8021df8:	2300      	movs	r3, #0
 8021dfa:	001e      	movs	r6, r3
 8021dfc:	9304      	str	r3, [sp, #16]
 8021dfe:	9b00      	ldr	r3, [sp, #0]
 8021e00:	42a3      	cmp	r3, r4
 8021e02:	d338      	bcc.n	8021e76 <__gethex+0x1ea>
 8021e04:	9c05      	ldr	r4, [sp, #20]
 8021e06:	9b02      	ldr	r3, [sp, #8]
 8021e08:	c440      	stmia	r4!, {r6}
 8021e0a:	1ae4      	subs	r4, r4, r3
 8021e0c:	10a4      	asrs	r4, r4, #2
 8021e0e:	0030      	movs	r0, r6
 8021e10:	612c      	str	r4, [r5, #16]
 8021e12:	f000 fbf3 	bl	80225fc <__hi0bits>
 8021e16:	9b01      	ldr	r3, [sp, #4]
 8021e18:	0164      	lsls	r4, r4, #5
 8021e1a:	681b      	ldr	r3, [r3, #0]
 8021e1c:	1a26      	subs	r6, r4, r0
 8021e1e:	9300      	str	r3, [sp, #0]
 8021e20:	429e      	cmp	r6, r3
 8021e22:	dd52      	ble.n	8021eca <__gethex+0x23e>
 8021e24:	1af6      	subs	r6, r6, r3
 8021e26:	0031      	movs	r1, r6
 8021e28:	0028      	movs	r0, r5
 8021e2a:	f000 ff96 	bl	8022d5a <__any_on>
 8021e2e:	1e04      	subs	r4, r0, #0
 8021e30:	d00f      	beq.n	8021e52 <__gethex+0x1c6>
 8021e32:	2401      	movs	r4, #1
 8021e34:	231f      	movs	r3, #31
 8021e36:	0020      	movs	r0, r4
 8021e38:	1e72      	subs	r2, r6, #1
 8021e3a:	4013      	ands	r3, r2
 8021e3c:	4098      	lsls	r0, r3
 8021e3e:	0003      	movs	r3, r0
 8021e40:	1151      	asrs	r1, r2, #5
 8021e42:	9802      	ldr	r0, [sp, #8]
 8021e44:	0089      	lsls	r1, r1, #2
 8021e46:	5809      	ldr	r1, [r1, r0]
 8021e48:	4219      	tst	r1, r3
 8021e4a:	d002      	beq.n	8021e52 <__gethex+0x1c6>
 8021e4c:	42a2      	cmp	r2, r4
 8021e4e:	dc34      	bgt.n	8021eba <__gethex+0x22e>
 8021e50:	2402      	movs	r4, #2
 8021e52:	0031      	movs	r1, r6
 8021e54:	0028      	movs	r0, r5
 8021e56:	f7ff feb1 	bl	8021bbc <rshift>
 8021e5a:	19bf      	adds	r7, r7, r6
 8021e5c:	9b01      	ldr	r3, [sp, #4]
 8021e5e:	689b      	ldr	r3, [r3, #8]
 8021e60:	42bb      	cmp	r3, r7
 8021e62:	da42      	bge.n	8021eea <__gethex+0x25e>
 8021e64:	0029      	movs	r1, r5
 8021e66:	9803      	ldr	r0, [sp, #12]
 8021e68:	f000 fb14 	bl	8022494 <_Bfree>
 8021e6c:	2300      	movs	r3, #0
 8021e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021e70:	26a3      	movs	r6, #163	@ 0xa3
 8021e72:	6013      	str	r3, [r2, #0]
 8021e74:	e794      	b.n	8021da0 <__gethex+0x114>
 8021e76:	3c01      	subs	r4, #1
 8021e78:	7823      	ldrb	r3, [r4, #0]
 8021e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8021e7c:	d012      	beq.n	8021ea4 <__gethex+0x218>
 8021e7e:	9b04      	ldr	r3, [sp, #16]
 8021e80:	2b20      	cmp	r3, #32
 8021e82:	d104      	bne.n	8021e8e <__gethex+0x202>
 8021e84:	9b05      	ldr	r3, [sp, #20]
 8021e86:	c340      	stmia	r3!, {r6}
 8021e88:	2600      	movs	r6, #0
 8021e8a:	9305      	str	r3, [sp, #20]
 8021e8c:	9604      	str	r6, [sp, #16]
 8021e8e:	7820      	ldrb	r0, [r4, #0]
 8021e90:	f7ff fee7 	bl	8021c62 <__hexdig_fun>
 8021e94:	230f      	movs	r3, #15
 8021e96:	4018      	ands	r0, r3
 8021e98:	9b04      	ldr	r3, [sp, #16]
 8021e9a:	4098      	lsls	r0, r3
 8021e9c:	3304      	adds	r3, #4
 8021e9e:	4306      	orrs	r6, r0
 8021ea0:	9304      	str	r3, [sp, #16]
 8021ea2:	e7ac      	b.n	8021dfe <__gethex+0x172>
 8021ea4:	9b00      	ldr	r3, [sp, #0]
 8021ea6:	42a3      	cmp	r3, r4
 8021ea8:	d8e9      	bhi.n	8021e7e <__gethex+0x1f2>
 8021eaa:	2201      	movs	r2, #1
 8021eac:	0020      	movs	r0, r4
 8021eae:	492b      	ldr	r1, [pc, #172]	@ (8021f5c <__gethex+0x2d0>)
 8021eb0:	f7fe fee2 	bl	8020c78 <strncmp>
 8021eb4:	2800      	cmp	r0, #0
 8021eb6:	d1e2      	bne.n	8021e7e <__gethex+0x1f2>
 8021eb8:	e7a1      	b.n	8021dfe <__gethex+0x172>
 8021eba:	0028      	movs	r0, r5
 8021ebc:	1eb1      	subs	r1, r6, #2
 8021ebe:	f000 ff4c 	bl	8022d5a <__any_on>
 8021ec2:	2800      	cmp	r0, #0
 8021ec4:	d0c4      	beq.n	8021e50 <__gethex+0x1c4>
 8021ec6:	2403      	movs	r4, #3
 8021ec8:	e7c3      	b.n	8021e52 <__gethex+0x1c6>
 8021eca:	9b00      	ldr	r3, [sp, #0]
 8021ecc:	2400      	movs	r4, #0
 8021ece:	429e      	cmp	r6, r3
 8021ed0:	dac4      	bge.n	8021e5c <__gethex+0x1d0>
 8021ed2:	1b9e      	subs	r6, r3, r6
 8021ed4:	0029      	movs	r1, r5
 8021ed6:	0032      	movs	r2, r6
 8021ed8:	9803      	ldr	r0, [sp, #12]
 8021eda:	f000 fd05 	bl	80228e8 <__lshift>
 8021ede:	0003      	movs	r3, r0
 8021ee0:	3314      	adds	r3, #20
 8021ee2:	0005      	movs	r5, r0
 8021ee4:	1bbf      	subs	r7, r7, r6
 8021ee6:	9302      	str	r3, [sp, #8]
 8021ee8:	e7b8      	b.n	8021e5c <__gethex+0x1d0>
 8021eea:	9b01      	ldr	r3, [sp, #4]
 8021eec:	685e      	ldr	r6, [r3, #4]
 8021eee:	42be      	cmp	r6, r7
 8021ef0:	dd6f      	ble.n	8021fd2 <__gethex+0x346>
 8021ef2:	9b00      	ldr	r3, [sp, #0]
 8021ef4:	1bf6      	subs	r6, r6, r7
 8021ef6:	42b3      	cmp	r3, r6
 8021ef8:	dc36      	bgt.n	8021f68 <__gethex+0x2dc>
 8021efa:	9b01      	ldr	r3, [sp, #4]
 8021efc:	68db      	ldr	r3, [r3, #12]
 8021efe:	2b02      	cmp	r3, #2
 8021f00:	d024      	beq.n	8021f4c <__gethex+0x2c0>
 8021f02:	2b03      	cmp	r3, #3
 8021f04:	d026      	beq.n	8021f54 <__gethex+0x2c8>
 8021f06:	2b01      	cmp	r3, #1
 8021f08:	d117      	bne.n	8021f3a <__gethex+0x2ae>
 8021f0a:	9b00      	ldr	r3, [sp, #0]
 8021f0c:	42b3      	cmp	r3, r6
 8021f0e:	d114      	bne.n	8021f3a <__gethex+0x2ae>
 8021f10:	2b01      	cmp	r3, #1
 8021f12:	d10b      	bne.n	8021f2c <__gethex+0x2a0>
 8021f14:	9b01      	ldr	r3, [sp, #4]
 8021f16:	9a07      	ldr	r2, [sp, #28]
 8021f18:	685b      	ldr	r3, [r3, #4]
 8021f1a:	2662      	movs	r6, #98	@ 0x62
 8021f1c:	6013      	str	r3, [r2, #0]
 8021f1e:	2301      	movs	r3, #1
 8021f20:	9a02      	ldr	r2, [sp, #8]
 8021f22:	612b      	str	r3, [r5, #16]
 8021f24:	6013      	str	r3, [r2, #0]
 8021f26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021f28:	601d      	str	r5, [r3, #0]
 8021f2a:	e739      	b.n	8021da0 <__gethex+0x114>
 8021f2c:	9900      	ldr	r1, [sp, #0]
 8021f2e:	0028      	movs	r0, r5
 8021f30:	3901      	subs	r1, #1
 8021f32:	f000 ff12 	bl	8022d5a <__any_on>
 8021f36:	2800      	cmp	r0, #0
 8021f38:	d1ec      	bne.n	8021f14 <__gethex+0x288>
 8021f3a:	0029      	movs	r1, r5
 8021f3c:	9803      	ldr	r0, [sp, #12]
 8021f3e:	f000 faa9 	bl	8022494 <_Bfree>
 8021f42:	2300      	movs	r3, #0
 8021f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021f46:	2650      	movs	r6, #80	@ 0x50
 8021f48:	6013      	str	r3, [r2, #0]
 8021f4a:	e729      	b.n	8021da0 <__gethex+0x114>
 8021f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d1f3      	bne.n	8021f3a <__gethex+0x2ae>
 8021f52:	e7df      	b.n	8021f14 <__gethex+0x288>
 8021f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d1dc      	bne.n	8021f14 <__gethex+0x288>
 8021f5a:	e7ee      	b.n	8021f3a <__gethex+0x2ae>
 8021f5c:	08026c64 	.word	0x08026c64
 8021f60:	08026e71 	.word	0x08026e71
 8021f64:	08026e82 	.word	0x08026e82
 8021f68:	1e77      	subs	r7, r6, #1
 8021f6a:	2c00      	cmp	r4, #0
 8021f6c:	d12f      	bne.n	8021fce <__gethex+0x342>
 8021f6e:	2f00      	cmp	r7, #0
 8021f70:	d004      	beq.n	8021f7c <__gethex+0x2f0>
 8021f72:	0039      	movs	r1, r7
 8021f74:	0028      	movs	r0, r5
 8021f76:	f000 fef0 	bl	8022d5a <__any_on>
 8021f7a:	0004      	movs	r4, r0
 8021f7c:	231f      	movs	r3, #31
 8021f7e:	117a      	asrs	r2, r7, #5
 8021f80:	401f      	ands	r7, r3
 8021f82:	3b1e      	subs	r3, #30
 8021f84:	40bb      	lsls	r3, r7
 8021f86:	9902      	ldr	r1, [sp, #8]
 8021f88:	0092      	lsls	r2, r2, #2
 8021f8a:	5852      	ldr	r2, [r2, r1]
 8021f8c:	421a      	tst	r2, r3
 8021f8e:	d001      	beq.n	8021f94 <__gethex+0x308>
 8021f90:	2302      	movs	r3, #2
 8021f92:	431c      	orrs	r4, r3
 8021f94:	9b00      	ldr	r3, [sp, #0]
 8021f96:	0031      	movs	r1, r6
 8021f98:	1b9b      	subs	r3, r3, r6
 8021f9a:	2602      	movs	r6, #2
 8021f9c:	0028      	movs	r0, r5
 8021f9e:	9300      	str	r3, [sp, #0]
 8021fa0:	f7ff fe0c 	bl	8021bbc <rshift>
 8021fa4:	9b01      	ldr	r3, [sp, #4]
 8021fa6:	685f      	ldr	r7, [r3, #4]
 8021fa8:	2c00      	cmp	r4, #0
 8021faa:	d03f      	beq.n	802202c <__gethex+0x3a0>
 8021fac:	9b01      	ldr	r3, [sp, #4]
 8021fae:	68db      	ldr	r3, [r3, #12]
 8021fb0:	2b02      	cmp	r3, #2
 8021fb2:	d010      	beq.n	8021fd6 <__gethex+0x34a>
 8021fb4:	2b03      	cmp	r3, #3
 8021fb6:	d012      	beq.n	8021fde <__gethex+0x352>
 8021fb8:	2b01      	cmp	r3, #1
 8021fba:	d106      	bne.n	8021fca <__gethex+0x33e>
 8021fbc:	07a2      	lsls	r2, r4, #30
 8021fbe:	d504      	bpl.n	8021fca <__gethex+0x33e>
 8021fc0:	9a02      	ldr	r2, [sp, #8]
 8021fc2:	6812      	ldr	r2, [r2, #0]
 8021fc4:	4314      	orrs	r4, r2
 8021fc6:	421c      	tst	r4, r3
 8021fc8:	d10c      	bne.n	8021fe4 <__gethex+0x358>
 8021fca:	2310      	movs	r3, #16
 8021fcc:	e02d      	b.n	802202a <__gethex+0x39e>
 8021fce:	2401      	movs	r4, #1
 8021fd0:	e7d4      	b.n	8021f7c <__gethex+0x2f0>
 8021fd2:	2601      	movs	r6, #1
 8021fd4:	e7e8      	b.n	8021fa8 <__gethex+0x31c>
 8021fd6:	2301      	movs	r3, #1
 8021fd8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021fda:	1a9b      	subs	r3, r3, r2
 8021fdc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	d0f2      	beq.n	8021fca <__gethex+0x33e>
 8021fe4:	692b      	ldr	r3, [r5, #16]
 8021fe6:	2000      	movs	r0, #0
 8021fe8:	9302      	str	r3, [sp, #8]
 8021fea:	009b      	lsls	r3, r3, #2
 8021fec:	9304      	str	r3, [sp, #16]
 8021fee:	002b      	movs	r3, r5
 8021ff0:	9a04      	ldr	r2, [sp, #16]
 8021ff2:	3314      	adds	r3, #20
 8021ff4:	1899      	adds	r1, r3, r2
 8021ff6:	681a      	ldr	r2, [r3, #0]
 8021ff8:	1c54      	adds	r4, r2, #1
 8021ffa:	d01c      	beq.n	8022036 <__gethex+0x3aa>
 8021ffc:	3201      	adds	r2, #1
 8021ffe:	601a      	str	r2, [r3, #0]
 8022000:	002b      	movs	r3, r5
 8022002:	3314      	adds	r3, #20
 8022004:	2e02      	cmp	r6, #2
 8022006:	d13f      	bne.n	8022088 <__gethex+0x3fc>
 8022008:	9a01      	ldr	r2, [sp, #4]
 802200a:	9900      	ldr	r1, [sp, #0]
 802200c:	6812      	ldr	r2, [r2, #0]
 802200e:	3a01      	subs	r2, #1
 8022010:	428a      	cmp	r2, r1
 8022012:	d109      	bne.n	8022028 <__gethex+0x39c>
 8022014:	000a      	movs	r2, r1
 8022016:	201f      	movs	r0, #31
 8022018:	4010      	ands	r0, r2
 802201a:	2201      	movs	r2, #1
 802201c:	4082      	lsls	r2, r0
 802201e:	1149      	asrs	r1, r1, #5
 8022020:	0089      	lsls	r1, r1, #2
 8022022:	58cb      	ldr	r3, [r1, r3]
 8022024:	4213      	tst	r3, r2
 8022026:	d13d      	bne.n	80220a4 <__gethex+0x418>
 8022028:	2320      	movs	r3, #32
 802202a:	431e      	orrs	r6, r3
 802202c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802202e:	601d      	str	r5, [r3, #0]
 8022030:	9b07      	ldr	r3, [sp, #28]
 8022032:	601f      	str	r7, [r3, #0]
 8022034:	e6b4      	b.n	8021da0 <__gethex+0x114>
 8022036:	c301      	stmia	r3!, {r0}
 8022038:	4299      	cmp	r1, r3
 802203a:	d8dc      	bhi.n	8021ff6 <__gethex+0x36a>
 802203c:	68ab      	ldr	r3, [r5, #8]
 802203e:	9a02      	ldr	r2, [sp, #8]
 8022040:	429a      	cmp	r2, r3
 8022042:	db18      	blt.n	8022076 <__gethex+0x3ea>
 8022044:	6869      	ldr	r1, [r5, #4]
 8022046:	9803      	ldr	r0, [sp, #12]
 8022048:	3101      	adds	r1, #1
 802204a:	f000 f9df 	bl	802240c <_Balloc>
 802204e:	1e04      	subs	r4, r0, #0
 8022050:	d104      	bne.n	802205c <__gethex+0x3d0>
 8022052:	0022      	movs	r2, r4
 8022054:	2184      	movs	r1, #132	@ 0x84
 8022056:	4b1d      	ldr	r3, [pc, #116]	@ (80220cc <__gethex+0x440>)
 8022058:	481d      	ldr	r0, [pc, #116]	@ (80220d0 <__gethex+0x444>)
 802205a:	e6c4      	b.n	8021de6 <__gethex+0x15a>
 802205c:	0029      	movs	r1, r5
 802205e:	692a      	ldr	r2, [r5, #16]
 8022060:	310c      	adds	r1, #12
 8022062:	3202      	adds	r2, #2
 8022064:	0092      	lsls	r2, r2, #2
 8022066:	300c      	adds	r0, #12
 8022068:	f7fe fecc 	bl	8020e04 <memcpy>
 802206c:	0029      	movs	r1, r5
 802206e:	9803      	ldr	r0, [sp, #12]
 8022070:	f000 fa10 	bl	8022494 <_Bfree>
 8022074:	0025      	movs	r5, r4
 8022076:	692b      	ldr	r3, [r5, #16]
 8022078:	1c5a      	adds	r2, r3, #1
 802207a:	612a      	str	r2, [r5, #16]
 802207c:	2201      	movs	r2, #1
 802207e:	3304      	adds	r3, #4
 8022080:	009b      	lsls	r3, r3, #2
 8022082:	18eb      	adds	r3, r5, r3
 8022084:	605a      	str	r2, [r3, #4]
 8022086:	e7bb      	b.n	8022000 <__gethex+0x374>
 8022088:	692a      	ldr	r2, [r5, #16]
 802208a:	9902      	ldr	r1, [sp, #8]
 802208c:	428a      	cmp	r2, r1
 802208e:	dd0b      	ble.n	80220a8 <__gethex+0x41c>
 8022090:	2101      	movs	r1, #1
 8022092:	0028      	movs	r0, r5
 8022094:	f7ff fd92 	bl	8021bbc <rshift>
 8022098:	9b01      	ldr	r3, [sp, #4]
 802209a:	3701      	adds	r7, #1
 802209c:	689b      	ldr	r3, [r3, #8]
 802209e:	42bb      	cmp	r3, r7
 80220a0:	da00      	bge.n	80220a4 <__gethex+0x418>
 80220a2:	e6df      	b.n	8021e64 <__gethex+0x1d8>
 80220a4:	2601      	movs	r6, #1
 80220a6:	e7bf      	b.n	8022028 <__gethex+0x39c>
 80220a8:	221f      	movs	r2, #31
 80220aa:	9c00      	ldr	r4, [sp, #0]
 80220ac:	9900      	ldr	r1, [sp, #0]
 80220ae:	4014      	ands	r4, r2
 80220b0:	4211      	tst	r1, r2
 80220b2:	d0f7      	beq.n	80220a4 <__gethex+0x418>
 80220b4:	9a04      	ldr	r2, [sp, #16]
 80220b6:	189b      	adds	r3, r3, r2
 80220b8:	3b04      	subs	r3, #4
 80220ba:	6818      	ldr	r0, [r3, #0]
 80220bc:	f000 fa9e 	bl	80225fc <__hi0bits>
 80220c0:	2320      	movs	r3, #32
 80220c2:	1b1b      	subs	r3, r3, r4
 80220c4:	4298      	cmp	r0, r3
 80220c6:	dbe3      	blt.n	8022090 <__gethex+0x404>
 80220c8:	e7ec      	b.n	80220a4 <__gethex+0x418>
 80220ca:	46c0      	nop			@ (mov r8, r8)
 80220cc:	08026e71 	.word	0x08026e71
 80220d0:	08026e82 	.word	0x08026e82

080220d4 <L_shift>:
 80220d4:	2308      	movs	r3, #8
 80220d6:	b570      	push	{r4, r5, r6, lr}
 80220d8:	2520      	movs	r5, #32
 80220da:	1a9a      	subs	r2, r3, r2
 80220dc:	0092      	lsls	r2, r2, #2
 80220de:	1aad      	subs	r5, r5, r2
 80220e0:	6843      	ldr	r3, [r0, #4]
 80220e2:	6804      	ldr	r4, [r0, #0]
 80220e4:	001e      	movs	r6, r3
 80220e6:	40ae      	lsls	r6, r5
 80220e8:	40d3      	lsrs	r3, r2
 80220ea:	4334      	orrs	r4, r6
 80220ec:	6004      	str	r4, [r0, #0]
 80220ee:	6043      	str	r3, [r0, #4]
 80220f0:	3004      	adds	r0, #4
 80220f2:	4288      	cmp	r0, r1
 80220f4:	d3f4      	bcc.n	80220e0 <L_shift+0xc>
 80220f6:	bd70      	pop	{r4, r5, r6, pc}

080220f8 <__match>:
 80220f8:	b530      	push	{r4, r5, lr}
 80220fa:	6803      	ldr	r3, [r0, #0]
 80220fc:	780c      	ldrb	r4, [r1, #0]
 80220fe:	3301      	adds	r3, #1
 8022100:	2c00      	cmp	r4, #0
 8022102:	d102      	bne.n	802210a <__match+0x12>
 8022104:	6003      	str	r3, [r0, #0]
 8022106:	2001      	movs	r0, #1
 8022108:	bd30      	pop	{r4, r5, pc}
 802210a:	781a      	ldrb	r2, [r3, #0]
 802210c:	0015      	movs	r5, r2
 802210e:	3d41      	subs	r5, #65	@ 0x41
 8022110:	2d19      	cmp	r5, #25
 8022112:	d800      	bhi.n	8022116 <__match+0x1e>
 8022114:	3220      	adds	r2, #32
 8022116:	3101      	adds	r1, #1
 8022118:	42a2      	cmp	r2, r4
 802211a:	d0ef      	beq.n	80220fc <__match+0x4>
 802211c:	2000      	movs	r0, #0
 802211e:	e7f3      	b.n	8022108 <__match+0x10>

08022120 <__hexnan>:
 8022120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022122:	680b      	ldr	r3, [r1, #0]
 8022124:	b08b      	sub	sp, #44	@ 0x2c
 8022126:	9201      	str	r2, [sp, #4]
 8022128:	9901      	ldr	r1, [sp, #4]
 802212a:	115a      	asrs	r2, r3, #5
 802212c:	0092      	lsls	r2, r2, #2
 802212e:	188a      	adds	r2, r1, r2
 8022130:	9202      	str	r2, [sp, #8]
 8022132:	0019      	movs	r1, r3
 8022134:	221f      	movs	r2, #31
 8022136:	4011      	ands	r1, r2
 8022138:	9008      	str	r0, [sp, #32]
 802213a:	9106      	str	r1, [sp, #24]
 802213c:	4213      	tst	r3, r2
 802213e:	d002      	beq.n	8022146 <__hexnan+0x26>
 8022140:	9b02      	ldr	r3, [sp, #8]
 8022142:	3304      	adds	r3, #4
 8022144:	9302      	str	r3, [sp, #8]
 8022146:	9b02      	ldr	r3, [sp, #8]
 8022148:	2500      	movs	r5, #0
 802214a:	1f1f      	subs	r7, r3, #4
 802214c:	003e      	movs	r6, r7
 802214e:	003c      	movs	r4, r7
 8022150:	9b08      	ldr	r3, [sp, #32]
 8022152:	603d      	str	r5, [r7, #0]
 8022154:	681b      	ldr	r3, [r3, #0]
 8022156:	9507      	str	r5, [sp, #28]
 8022158:	9305      	str	r3, [sp, #20]
 802215a:	9503      	str	r5, [sp, #12]
 802215c:	9b05      	ldr	r3, [sp, #20]
 802215e:	3301      	adds	r3, #1
 8022160:	9309      	str	r3, [sp, #36]	@ 0x24
 8022162:	9b05      	ldr	r3, [sp, #20]
 8022164:	785b      	ldrb	r3, [r3, #1]
 8022166:	9304      	str	r3, [sp, #16]
 8022168:	2b00      	cmp	r3, #0
 802216a:	d028      	beq.n	80221be <__hexnan+0x9e>
 802216c:	9804      	ldr	r0, [sp, #16]
 802216e:	f7ff fd78 	bl	8021c62 <__hexdig_fun>
 8022172:	2800      	cmp	r0, #0
 8022174:	d155      	bne.n	8022222 <__hexnan+0x102>
 8022176:	9b04      	ldr	r3, [sp, #16]
 8022178:	2b20      	cmp	r3, #32
 802217a:	d819      	bhi.n	80221b0 <__hexnan+0x90>
 802217c:	9b03      	ldr	r3, [sp, #12]
 802217e:	9a07      	ldr	r2, [sp, #28]
 8022180:	4293      	cmp	r3, r2
 8022182:	dd12      	ble.n	80221aa <__hexnan+0x8a>
 8022184:	42b4      	cmp	r4, r6
 8022186:	d206      	bcs.n	8022196 <__hexnan+0x76>
 8022188:	2d07      	cmp	r5, #7
 802218a:	dc04      	bgt.n	8022196 <__hexnan+0x76>
 802218c:	002a      	movs	r2, r5
 802218e:	0031      	movs	r1, r6
 8022190:	0020      	movs	r0, r4
 8022192:	f7ff ff9f 	bl	80220d4 <L_shift>
 8022196:	9b01      	ldr	r3, [sp, #4]
 8022198:	2508      	movs	r5, #8
 802219a:	429c      	cmp	r4, r3
 802219c:	d905      	bls.n	80221aa <__hexnan+0x8a>
 802219e:	1f26      	subs	r6, r4, #4
 80221a0:	2500      	movs	r5, #0
 80221a2:	0034      	movs	r4, r6
 80221a4:	9b03      	ldr	r3, [sp, #12]
 80221a6:	6035      	str	r5, [r6, #0]
 80221a8:	9307      	str	r3, [sp, #28]
 80221aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80221ac:	9305      	str	r3, [sp, #20]
 80221ae:	e7d5      	b.n	802215c <__hexnan+0x3c>
 80221b0:	9b04      	ldr	r3, [sp, #16]
 80221b2:	2b29      	cmp	r3, #41	@ 0x29
 80221b4:	d15a      	bne.n	802226c <__hexnan+0x14c>
 80221b6:	9b05      	ldr	r3, [sp, #20]
 80221b8:	9a08      	ldr	r2, [sp, #32]
 80221ba:	3302      	adds	r3, #2
 80221bc:	6013      	str	r3, [r2, #0]
 80221be:	9b03      	ldr	r3, [sp, #12]
 80221c0:	2b00      	cmp	r3, #0
 80221c2:	d053      	beq.n	802226c <__hexnan+0x14c>
 80221c4:	42b4      	cmp	r4, r6
 80221c6:	d206      	bcs.n	80221d6 <__hexnan+0xb6>
 80221c8:	2d07      	cmp	r5, #7
 80221ca:	dc04      	bgt.n	80221d6 <__hexnan+0xb6>
 80221cc:	002a      	movs	r2, r5
 80221ce:	0031      	movs	r1, r6
 80221d0:	0020      	movs	r0, r4
 80221d2:	f7ff ff7f 	bl	80220d4 <L_shift>
 80221d6:	9b01      	ldr	r3, [sp, #4]
 80221d8:	429c      	cmp	r4, r3
 80221da:	d936      	bls.n	802224a <__hexnan+0x12a>
 80221dc:	001a      	movs	r2, r3
 80221de:	0023      	movs	r3, r4
 80221e0:	cb02      	ldmia	r3!, {r1}
 80221e2:	c202      	stmia	r2!, {r1}
 80221e4:	429f      	cmp	r7, r3
 80221e6:	d2fb      	bcs.n	80221e0 <__hexnan+0xc0>
 80221e8:	9b02      	ldr	r3, [sp, #8]
 80221ea:	1c61      	adds	r1, r4, #1
 80221ec:	1eda      	subs	r2, r3, #3
 80221ee:	2304      	movs	r3, #4
 80221f0:	4291      	cmp	r1, r2
 80221f2:	d805      	bhi.n	8022200 <__hexnan+0xe0>
 80221f4:	9b02      	ldr	r3, [sp, #8]
 80221f6:	3b04      	subs	r3, #4
 80221f8:	1b1b      	subs	r3, r3, r4
 80221fa:	089b      	lsrs	r3, r3, #2
 80221fc:	3301      	adds	r3, #1
 80221fe:	009b      	lsls	r3, r3, #2
 8022200:	9a01      	ldr	r2, [sp, #4]
 8022202:	18d3      	adds	r3, r2, r3
 8022204:	2200      	movs	r2, #0
 8022206:	c304      	stmia	r3!, {r2}
 8022208:	429f      	cmp	r7, r3
 802220a:	d2fc      	bcs.n	8022206 <__hexnan+0xe6>
 802220c:	683b      	ldr	r3, [r7, #0]
 802220e:	2b00      	cmp	r3, #0
 8022210:	d104      	bne.n	802221c <__hexnan+0xfc>
 8022212:	9b01      	ldr	r3, [sp, #4]
 8022214:	429f      	cmp	r7, r3
 8022216:	d127      	bne.n	8022268 <__hexnan+0x148>
 8022218:	2301      	movs	r3, #1
 802221a:	603b      	str	r3, [r7, #0]
 802221c:	2005      	movs	r0, #5
 802221e:	b00b      	add	sp, #44	@ 0x2c
 8022220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022222:	9b03      	ldr	r3, [sp, #12]
 8022224:	3501      	adds	r5, #1
 8022226:	3301      	adds	r3, #1
 8022228:	9303      	str	r3, [sp, #12]
 802222a:	2d08      	cmp	r5, #8
 802222c:	dd06      	ble.n	802223c <__hexnan+0x11c>
 802222e:	9b01      	ldr	r3, [sp, #4]
 8022230:	429c      	cmp	r4, r3
 8022232:	d9ba      	bls.n	80221aa <__hexnan+0x8a>
 8022234:	2300      	movs	r3, #0
 8022236:	2501      	movs	r5, #1
 8022238:	3c04      	subs	r4, #4
 802223a:	6023      	str	r3, [r4, #0]
 802223c:	220f      	movs	r2, #15
 802223e:	6823      	ldr	r3, [r4, #0]
 8022240:	4010      	ands	r0, r2
 8022242:	011b      	lsls	r3, r3, #4
 8022244:	4303      	orrs	r3, r0
 8022246:	6023      	str	r3, [r4, #0]
 8022248:	e7af      	b.n	80221aa <__hexnan+0x8a>
 802224a:	9b06      	ldr	r3, [sp, #24]
 802224c:	2b00      	cmp	r3, #0
 802224e:	d0dd      	beq.n	802220c <__hexnan+0xec>
 8022250:	2320      	movs	r3, #32
 8022252:	9a06      	ldr	r2, [sp, #24]
 8022254:	9902      	ldr	r1, [sp, #8]
 8022256:	1a9b      	subs	r3, r3, r2
 8022258:	2201      	movs	r2, #1
 802225a:	4252      	negs	r2, r2
 802225c:	40da      	lsrs	r2, r3
 802225e:	3904      	subs	r1, #4
 8022260:	680b      	ldr	r3, [r1, #0]
 8022262:	4013      	ands	r3, r2
 8022264:	600b      	str	r3, [r1, #0]
 8022266:	e7d1      	b.n	802220c <__hexnan+0xec>
 8022268:	3f04      	subs	r7, #4
 802226a:	e7cf      	b.n	802220c <__hexnan+0xec>
 802226c:	2004      	movs	r0, #4
 802226e:	e7d6      	b.n	802221e <__hexnan+0xfe>

08022270 <malloc>:
 8022270:	b510      	push	{r4, lr}
 8022272:	4b03      	ldr	r3, [pc, #12]	@ (8022280 <malloc+0x10>)
 8022274:	0001      	movs	r1, r0
 8022276:	6818      	ldr	r0, [r3, #0]
 8022278:	f000 f826 	bl	80222c8 <_malloc_r>
 802227c:	bd10      	pop	{r4, pc}
 802227e:	46c0      	nop			@ (mov r8, r8)
 8022280:	200003d0 	.word	0x200003d0

08022284 <sbrk_aligned>:
 8022284:	b570      	push	{r4, r5, r6, lr}
 8022286:	4e0f      	ldr	r6, [pc, #60]	@ (80222c4 <sbrk_aligned+0x40>)
 8022288:	000d      	movs	r5, r1
 802228a:	6831      	ldr	r1, [r6, #0]
 802228c:	0004      	movs	r4, r0
 802228e:	2900      	cmp	r1, #0
 8022290:	d102      	bne.n	8022298 <sbrk_aligned+0x14>
 8022292:	f001 f989 	bl	80235a8 <_sbrk_r>
 8022296:	6030      	str	r0, [r6, #0]
 8022298:	0029      	movs	r1, r5
 802229a:	0020      	movs	r0, r4
 802229c:	f001 f984 	bl	80235a8 <_sbrk_r>
 80222a0:	1c43      	adds	r3, r0, #1
 80222a2:	d103      	bne.n	80222ac <sbrk_aligned+0x28>
 80222a4:	2501      	movs	r5, #1
 80222a6:	426d      	negs	r5, r5
 80222a8:	0028      	movs	r0, r5
 80222aa:	bd70      	pop	{r4, r5, r6, pc}
 80222ac:	2303      	movs	r3, #3
 80222ae:	1cc5      	adds	r5, r0, #3
 80222b0:	439d      	bics	r5, r3
 80222b2:	42a8      	cmp	r0, r5
 80222b4:	d0f8      	beq.n	80222a8 <sbrk_aligned+0x24>
 80222b6:	1a29      	subs	r1, r5, r0
 80222b8:	0020      	movs	r0, r4
 80222ba:	f001 f975 	bl	80235a8 <_sbrk_r>
 80222be:	3001      	adds	r0, #1
 80222c0:	d1f2      	bne.n	80222a8 <sbrk_aligned+0x24>
 80222c2:	e7ef      	b.n	80222a4 <sbrk_aligned+0x20>
 80222c4:	200034b4 	.word	0x200034b4

080222c8 <_malloc_r>:
 80222c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80222ca:	2203      	movs	r2, #3
 80222cc:	1ccb      	adds	r3, r1, #3
 80222ce:	4393      	bics	r3, r2
 80222d0:	3308      	adds	r3, #8
 80222d2:	0005      	movs	r5, r0
 80222d4:	001f      	movs	r7, r3
 80222d6:	2b0c      	cmp	r3, #12
 80222d8:	d234      	bcs.n	8022344 <_malloc_r+0x7c>
 80222da:	270c      	movs	r7, #12
 80222dc:	42b9      	cmp	r1, r7
 80222de:	d833      	bhi.n	8022348 <_malloc_r+0x80>
 80222e0:	0028      	movs	r0, r5
 80222e2:	f000 f883 	bl	80223ec <__malloc_lock>
 80222e6:	4e37      	ldr	r6, [pc, #220]	@ (80223c4 <_malloc_r+0xfc>)
 80222e8:	6833      	ldr	r3, [r6, #0]
 80222ea:	001c      	movs	r4, r3
 80222ec:	2c00      	cmp	r4, #0
 80222ee:	d12f      	bne.n	8022350 <_malloc_r+0x88>
 80222f0:	0039      	movs	r1, r7
 80222f2:	0028      	movs	r0, r5
 80222f4:	f7ff ffc6 	bl	8022284 <sbrk_aligned>
 80222f8:	0004      	movs	r4, r0
 80222fa:	1c43      	adds	r3, r0, #1
 80222fc:	d15f      	bne.n	80223be <_malloc_r+0xf6>
 80222fe:	6834      	ldr	r4, [r6, #0]
 8022300:	9400      	str	r4, [sp, #0]
 8022302:	9b00      	ldr	r3, [sp, #0]
 8022304:	2b00      	cmp	r3, #0
 8022306:	d14a      	bne.n	802239e <_malloc_r+0xd6>
 8022308:	2c00      	cmp	r4, #0
 802230a:	d052      	beq.n	80223b2 <_malloc_r+0xea>
 802230c:	6823      	ldr	r3, [r4, #0]
 802230e:	0028      	movs	r0, r5
 8022310:	18e3      	adds	r3, r4, r3
 8022312:	9900      	ldr	r1, [sp, #0]
 8022314:	9301      	str	r3, [sp, #4]
 8022316:	f001 f947 	bl	80235a8 <_sbrk_r>
 802231a:	9b01      	ldr	r3, [sp, #4]
 802231c:	4283      	cmp	r3, r0
 802231e:	d148      	bne.n	80223b2 <_malloc_r+0xea>
 8022320:	6823      	ldr	r3, [r4, #0]
 8022322:	0028      	movs	r0, r5
 8022324:	1aff      	subs	r7, r7, r3
 8022326:	0039      	movs	r1, r7
 8022328:	f7ff ffac 	bl	8022284 <sbrk_aligned>
 802232c:	3001      	adds	r0, #1
 802232e:	d040      	beq.n	80223b2 <_malloc_r+0xea>
 8022330:	6823      	ldr	r3, [r4, #0]
 8022332:	19db      	adds	r3, r3, r7
 8022334:	6023      	str	r3, [r4, #0]
 8022336:	6833      	ldr	r3, [r6, #0]
 8022338:	685a      	ldr	r2, [r3, #4]
 802233a:	2a00      	cmp	r2, #0
 802233c:	d133      	bne.n	80223a6 <_malloc_r+0xde>
 802233e:	9b00      	ldr	r3, [sp, #0]
 8022340:	6033      	str	r3, [r6, #0]
 8022342:	e019      	b.n	8022378 <_malloc_r+0xb0>
 8022344:	2b00      	cmp	r3, #0
 8022346:	dac9      	bge.n	80222dc <_malloc_r+0x14>
 8022348:	230c      	movs	r3, #12
 802234a:	602b      	str	r3, [r5, #0]
 802234c:	2000      	movs	r0, #0
 802234e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022350:	6821      	ldr	r1, [r4, #0]
 8022352:	1bc9      	subs	r1, r1, r7
 8022354:	d420      	bmi.n	8022398 <_malloc_r+0xd0>
 8022356:	290b      	cmp	r1, #11
 8022358:	d90a      	bls.n	8022370 <_malloc_r+0xa8>
 802235a:	19e2      	adds	r2, r4, r7
 802235c:	6027      	str	r7, [r4, #0]
 802235e:	42a3      	cmp	r3, r4
 8022360:	d104      	bne.n	802236c <_malloc_r+0xa4>
 8022362:	6032      	str	r2, [r6, #0]
 8022364:	6863      	ldr	r3, [r4, #4]
 8022366:	6011      	str	r1, [r2, #0]
 8022368:	6053      	str	r3, [r2, #4]
 802236a:	e005      	b.n	8022378 <_malloc_r+0xb0>
 802236c:	605a      	str	r2, [r3, #4]
 802236e:	e7f9      	b.n	8022364 <_malloc_r+0x9c>
 8022370:	6862      	ldr	r2, [r4, #4]
 8022372:	42a3      	cmp	r3, r4
 8022374:	d10e      	bne.n	8022394 <_malloc_r+0xcc>
 8022376:	6032      	str	r2, [r6, #0]
 8022378:	0028      	movs	r0, r5
 802237a:	f000 f83f 	bl	80223fc <__malloc_unlock>
 802237e:	0020      	movs	r0, r4
 8022380:	2207      	movs	r2, #7
 8022382:	300b      	adds	r0, #11
 8022384:	1d23      	adds	r3, r4, #4
 8022386:	4390      	bics	r0, r2
 8022388:	1ac2      	subs	r2, r0, r3
 802238a:	4298      	cmp	r0, r3
 802238c:	d0df      	beq.n	802234e <_malloc_r+0x86>
 802238e:	1a1b      	subs	r3, r3, r0
 8022390:	50a3      	str	r3, [r4, r2]
 8022392:	e7dc      	b.n	802234e <_malloc_r+0x86>
 8022394:	605a      	str	r2, [r3, #4]
 8022396:	e7ef      	b.n	8022378 <_malloc_r+0xb0>
 8022398:	0023      	movs	r3, r4
 802239a:	6864      	ldr	r4, [r4, #4]
 802239c:	e7a6      	b.n	80222ec <_malloc_r+0x24>
 802239e:	9c00      	ldr	r4, [sp, #0]
 80223a0:	6863      	ldr	r3, [r4, #4]
 80223a2:	9300      	str	r3, [sp, #0]
 80223a4:	e7ad      	b.n	8022302 <_malloc_r+0x3a>
 80223a6:	001a      	movs	r2, r3
 80223a8:	685b      	ldr	r3, [r3, #4]
 80223aa:	42a3      	cmp	r3, r4
 80223ac:	d1fb      	bne.n	80223a6 <_malloc_r+0xde>
 80223ae:	2300      	movs	r3, #0
 80223b0:	e7da      	b.n	8022368 <_malloc_r+0xa0>
 80223b2:	230c      	movs	r3, #12
 80223b4:	0028      	movs	r0, r5
 80223b6:	602b      	str	r3, [r5, #0]
 80223b8:	f000 f820 	bl	80223fc <__malloc_unlock>
 80223bc:	e7c6      	b.n	802234c <_malloc_r+0x84>
 80223be:	6007      	str	r7, [r0, #0]
 80223c0:	e7da      	b.n	8022378 <_malloc_r+0xb0>
 80223c2:	46c0      	nop			@ (mov r8, r8)
 80223c4:	200034b8 	.word	0x200034b8

080223c8 <__ascii_mbtowc>:
 80223c8:	b082      	sub	sp, #8
 80223ca:	2900      	cmp	r1, #0
 80223cc:	d100      	bne.n	80223d0 <__ascii_mbtowc+0x8>
 80223ce:	a901      	add	r1, sp, #4
 80223d0:	1e10      	subs	r0, r2, #0
 80223d2:	d006      	beq.n	80223e2 <__ascii_mbtowc+0x1a>
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d006      	beq.n	80223e6 <__ascii_mbtowc+0x1e>
 80223d8:	7813      	ldrb	r3, [r2, #0]
 80223da:	600b      	str	r3, [r1, #0]
 80223dc:	7810      	ldrb	r0, [r2, #0]
 80223de:	1e43      	subs	r3, r0, #1
 80223e0:	4198      	sbcs	r0, r3
 80223e2:	b002      	add	sp, #8
 80223e4:	4770      	bx	lr
 80223e6:	2002      	movs	r0, #2
 80223e8:	4240      	negs	r0, r0
 80223ea:	e7fa      	b.n	80223e2 <__ascii_mbtowc+0x1a>

080223ec <__malloc_lock>:
 80223ec:	b510      	push	{r4, lr}
 80223ee:	4802      	ldr	r0, [pc, #8]	@ (80223f8 <__malloc_lock+0xc>)
 80223f0:	f7fe fcfb 	bl	8020dea <__retarget_lock_acquire_recursive>
 80223f4:	bd10      	pop	{r4, pc}
 80223f6:	46c0      	nop			@ (mov r8, r8)
 80223f8:	200034b0 	.word	0x200034b0

080223fc <__malloc_unlock>:
 80223fc:	b510      	push	{r4, lr}
 80223fe:	4802      	ldr	r0, [pc, #8]	@ (8022408 <__malloc_unlock+0xc>)
 8022400:	f7fe fcf4 	bl	8020dec <__retarget_lock_release_recursive>
 8022404:	bd10      	pop	{r4, pc}
 8022406:	46c0      	nop			@ (mov r8, r8)
 8022408:	200034b0 	.word	0x200034b0

0802240c <_Balloc>:
 802240c:	b570      	push	{r4, r5, r6, lr}
 802240e:	69c5      	ldr	r5, [r0, #28]
 8022410:	0006      	movs	r6, r0
 8022412:	000c      	movs	r4, r1
 8022414:	2d00      	cmp	r5, #0
 8022416:	d10e      	bne.n	8022436 <_Balloc+0x2a>
 8022418:	2010      	movs	r0, #16
 802241a:	f7ff ff29 	bl	8022270 <malloc>
 802241e:	1e02      	subs	r2, r0, #0
 8022420:	61f0      	str	r0, [r6, #28]
 8022422:	d104      	bne.n	802242e <_Balloc+0x22>
 8022424:	216b      	movs	r1, #107	@ 0x6b
 8022426:	4b19      	ldr	r3, [pc, #100]	@ (802248c <_Balloc+0x80>)
 8022428:	4819      	ldr	r0, [pc, #100]	@ (8022490 <_Balloc+0x84>)
 802242a:	f001 f8cf 	bl	80235cc <__assert_func>
 802242e:	6045      	str	r5, [r0, #4]
 8022430:	6085      	str	r5, [r0, #8]
 8022432:	6005      	str	r5, [r0, #0]
 8022434:	60c5      	str	r5, [r0, #12]
 8022436:	69f5      	ldr	r5, [r6, #28]
 8022438:	68eb      	ldr	r3, [r5, #12]
 802243a:	2b00      	cmp	r3, #0
 802243c:	d013      	beq.n	8022466 <_Balloc+0x5a>
 802243e:	69f3      	ldr	r3, [r6, #28]
 8022440:	00a2      	lsls	r2, r4, #2
 8022442:	68db      	ldr	r3, [r3, #12]
 8022444:	189b      	adds	r3, r3, r2
 8022446:	6818      	ldr	r0, [r3, #0]
 8022448:	2800      	cmp	r0, #0
 802244a:	d118      	bne.n	802247e <_Balloc+0x72>
 802244c:	2101      	movs	r1, #1
 802244e:	000d      	movs	r5, r1
 8022450:	40a5      	lsls	r5, r4
 8022452:	1d6a      	adds	r2, r5, #5
 8022454:	0030      	movs	r0, r6
 8022456:	0092      	lsls	r2, r2, #2
 8022458:	f001 f8d6 	bl	8023608 <_calloc_r>
 802245c:	2800      	cmp	r0, #0
 802245e:	d00c      	beq.n	802247a <_Balloc+0x6e>
 8022460:	6044      	str	r4, [r0, #4]
 8022462:	6085      	str	r5, [r0, #8]
 8022464:	e00d      	b.n	8022482 <_Balloc+0x76>
 8022466:	2221      	movs	r2, #33	@ 0x21
 8022468:	2104      	movs	r1, #4
 802246a:	0030      	movs	r0, r6
 802246c:	f001 f8cc 	bl	8023608 <_calloc_r>
 8022470:	69f3      	ldr	r3, [r6, #28]
 8022472:	60e8      	str	r0, [r5, #12]
 8022474:	68db      	ldr	r3, [r3, #12]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d1e1      	bne.n	802243e <_Balloc+0x32>
 802247a:	2000      	movs	r0, #0
 802247c:	bd70      	pop	{r4, r5, r6, pc}
 802247e:	6802      	ldr	r2, [r0, #0]
 8022480:	601a      	str	r2, [r3, #0]
 8022482:	2300      	movs	r3, #0
 8022484:	6103      	str	r3, [r0, #16]
 8022486:	60c3      	str	r3, [r0, #12]
 8022488:	e7f8      	b.n	802247c <_Balloc+0x70>
 802248a:	46c0      	nop			@ (mov r8, r8)
 802248c:	08026e02 	.word	0x08026e02
 8022490:	08026ee2 	.word	0x08026ee2

08022494 <_Bfree>:
 8022494:	b570      	push	{r4, r5, r6, lr}
 8022496:	69c6      	ldr	r6, [r0, #28]
 8022498:	0005      	movs	r5, r0
 802249a:	000c      	movs	r4, r1
 802249c:	2e00      	cmp	r6, #0
 802249e:	d10e      	bne.n	80224be <_Bfree+0x2a>
 80224a0:	2010      	movs	r0, #16
 80224a2:	f7ff fee5 	bl	8022270 <malloc>
 80224a6:	1e02      	subs	r2, r0, #0
 80224a8:	61e8      	str	r0, [r5, #28]
 80224aa:	d104      	bne.n	80224b6 <_Bfree+0x22>
 80224ac:	218f      	movs	r1, #143	@ 0x8f
 80224ae:	4b09      	ldr	r3, [pc, #36]	@ (80224d4 <_Bfree+0x40>)
 80224b0:	4809      	ldr	r0, [pc, #36]	@ (80224d8 <_Bfree+0x44>)
 80224b2:	f001 f88b 	bl	80235cc <__assert_func>
 80224b6:	6046      	str	r6, [r0, #4]
 80224b8:	6086      	str	r6, [r0, #8]
 80224ba:	6006      	str	r6, [r0, #0]
 80224bc:	60c6      	str	r6, [r0, #12]
 80224be:	2c00      	cmp	r4, #0
 80224c0:	d007      	beq.n	80224d2 <_Bfree+0x3e>
 80224c2:	69eb      	ldr	r3, [r5, #28]
 80224c4:	6862      	ldr	r2, [r4, #4]
 80224c6:	68db      	ldr	r3, [r3, #12]
 80224c8:	0092      	lsls	r2, r2, #2
 80224ca:	189b      	adds	r3, r3, r2
 80224cc:	681a      	ldr	r2, [r3, #0]
 80224ce:	6022      	str	r2, [r4, #0]
 80224d0:	601c      	str	r4, [r3, #0]
 80224d2:	bd70      	pop	{r4, r5, r6, pc}
 80224d4:	08026e02 	.word	0x08026e02
 80224d8:	08026ee2 	.word	0x08026ee2

080224dc <__multadd>:
 80224dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80224de:	000f      	movs	r7, r1
 80224e0:	9001      	str	r0, [sp, #4]
 80224e2:	000c      	movs	r4, r1
 80224e4:	001e      	movs	r6, r3
 80224e6:	2000      	movs	r0, #0
 80224e8:	690d      	ldr	r5, [r1, #16]
 80224ea:	3714      	adds	r7, #20
 80224ec:	683b      	ldr	r3, [r7, #0]
 80224ee:	3001      	adds	r0, #1
 80224f0:	b299      	uxth	r1, r3
 80224f2:	4351      	muls	r1, r2
 80224f4:	0c1b      	lsrs	r3, r3, #16
 80224f6:	4353      	muls	r3, r2
 80224f8:	1989      	adds	r1, r1, r6
 80224fa:	0c0e      	lsrs	r6, r1, #16
 80224fc:	199b      	adds	r3, r3, r6
 80224fe:	0c1e      	lsrs	r6, r3, #16
 8022500:	b289      	uxth	r1, r1
 8022502:	041b      	lsls	r3, r3, #16
 8022504:	185b      	adds	r3, r3, r1
 8022506:	c708      	stmia	r7!, {r3}
 8022508:	4285      	cmp	r5, r0
 802250a:	dcef      	bgt.n	80224ec <__multadd+0x10>
 802250c:	2e00      	cmp	r6, #0
 802250e:	d022      	beq.n	8022556 <__multadd+0x7a>
 8022510:	68a3      	ldr	r3, [r4, #8]
 8022512:	42ab      	cmp	r3, r5
 8022514:	dc19      	bgt.n	802254a <__multadd+0x6e>
 8022516:	6861      	ldr	r1, [r4, #4]
 8022518:	9801      	ldr	r0, [sp, #4]
 802251a:	3101      	adds	r1, #1
 802251c:	f7ff ff76 	bl	802240c <_Balloc>
 8022520:	1e07      	subs	r7, r0, #0
 8022522:	d105      	bne.n	8022530 <__multadd+0x54>
 8022524:	003a      	movs	r2, r7
 8022526:	21ba      	movs	r1, #186	@ 0xba
 8022528:	4b0c      	ldr	r3, [pc, #48]	@ (802255c <__multadd+0x80>)
 802252a:	480d      	ldr	r0, [pc, #52]	@ (8022560 <__multadd+0x84>)
 802252c:	f001 f84e 	bl	80235cc <__assert_func>
 8022530:	0021      	movs	r1, r4
 8022532:	6922      	ldr	r2, [r4, #16]
 8022534:	310c      	adds	r1, #12
 8022536:	3202      	adds	r2, #2
 8022538:	0092      	lsls	r2, r2, #2
 802253a:	300c      	adds	r0, #12
 802253c:	f7fe fc62 	bl	8020e04 <memcpy>
 8022540:	0021      	movs	r1, r4
 8022542:	9801      	ldr	r0, [sp, #4]
 8022544:	f7ff ffa6 	bl	8022494 <_Bfree>
 8022548:	003c      	movs	r4, r7
 802254a:	1d2b      	adds	r3, r5, #4
 802254c:	009b      	lsls	r3, r3, #2
 802254e:	18e3      	adds	r3, r4, r3
 8022550:	3501      	adds	r5, #1
 8022552:	605e      	str	r6, [r3, #4]
 8022554:	6125      	str	r5, [r4, #16]
 8022556:	0020      	movs	r0, r4
 8022558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802255a:	46c0      	nop			@ (mov r8, r8)
 802255c:	08026e71 	.word	0x08026e71
 8022560:	08026ee2 	.word	0x08026ee2

08022564 <__s2b>:
 8022564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022566:	0007      	movs	r7, r0
 8022568:	0018      	movs	r0, r3
 802256a:	000c      	movs	r4, r1
 802256c:	3008      	adds	r0, #8
 802256e:	2109      	movs	r1, #9
 8022570:	9301      	str	r3, [sp, #4]
 8022572:	0015      	movs	r5, r2
 8022574:	f7dd fea0 	bl	80002b8 <__divsi3>
 8022578:	2301      	movs	r3, #1
 802257a:	2100      	movs	r1, #0
 802257c:	4283      	cmp	r3, r0
 802257e:	db0a      	blt.n	8022596 <__s2b+0x32>
 8022580:	0038      	movs	r0, r7
 8022582:	f7ff ff43 	bl	802240c <_Balloc>
 8022586:	1e01      	subs	r1, r0, #0
 8022588:	d108      	bne.n	802259c <__s2b+0x38>
 802258a:	000a      	movs	r2, r1
 802258c:	4b19      	ldr	r3, [pc, #100]	@ (80225f4 <__s2b+0x90>)
 802258e:	481a      	ldr	r0, [pc, #104]	@ (80225f8 <__s2b+0x94>)
 8022590:	31d3      	adds	r1, #211	@ 0xd3
 8022592:	f001 f81b 	bl	80235cc <__assert_func>
 8022596:	005b      	lsls	r3, r3, #1
 8022598:	3101      	adds	r1, #1
 802259a:	e7ef      	b.n	802257c <__s2b+0x18>
 802259c:	9b08      	ldr	r3, [sp, #32]
 802259e:	6143      	str	r3, [r0, #20]
 80225a0:	2301      	movs	r3, #1
 80225a2:	6103      	str	r3, [r0, #16]
 80225a4:	2d09      	cmp	r5, #9
 80225a6:	dd18      	ble.n	80225da <__s2b+0x76>
 80225a8:	0023      	movs	r3, r4
 80225aa:	3309      	adds	r3, #9
 80225ac:	001e      	movs	r6, r3
 80225ae:	9300      	str	r3, [sp, #0]
 80225b0:	1964      	adds	r4, r4, r5
 80225b2:	7833      	ldrb	r3, [r6, #0]
 80225b4:	220a      	movs	r2, #10
 80225b6:	0038      	movs	r0, r7
 80225b8:	3b30      	subs	r3, #48	@ 0x30
 80225ba:	f7ff ff8f 	bl	80224dc <__multadd>
 80225be:	3601      	adds	r6, #1
 80225c0:	0001      	movs	r1, r0
 80225c2:	42a6      	cmp	r6, r4
 80225c4:	d1f5      	bne.n	80225b2 <__s2b+0x4e>
 80225c6:	002c      	movs	r4, r5
 80225c8:	9b00      	ldr	r3, [sp, #0]
 80225ca:	3c08      	subs	r4, #8
 80225cc:	191c      	adds	r4, r3, r4
 80225ce:	002e      	movs	r6, r5
 80225d0:	9b01      	ldr	r3, [sp, #4]
 80225d2:	429e      	cmp	r6, r3
 80225d4:	db04      	blt.n	80225e0 <__s2b+0x7c>
 80225d6:	0008      	movs	r0, r1
 80225d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80225da:	2509      	movs	r5, #9
 80225dc:	340a      	adds	r4, #10
 80225de:	e7f6      	b.n	80225ce <__s2b+0x6a>
 80225e0:	1b63      	subs	r3, r4, r5
 80225e2:	5d9b      	ldrb	r3, [r3, r6]
 80225e4:	220a      	movs	r2, #10
 80225e6:	0038      	movs	r0, r7
 80225e8:	3b30      	subs	r3, #48	@ 0x30
 80225ea:	f7ff ff77 	bl	80224dc <__multadd>
 80225ee:	3601      	adds	r6, #1
 80225f0:	0001      	movs	r1, r0
 80225f2:	e7ed      	b.n	80225d0 <__s2b+0x6c>
 80225f4:	08026e71 	.word	0x08026e71
 80225f8:	08026ee2 	.word	0x08026ee2

080225fc <__hi0bits>:
 80225fc:	2280      	movs	r2, #128	@ 0x80
 80225fe:	0003      	movs	r3, r0
 8022600:	0252      	lsls	r2, r2, #9
 8022602:	2000      	movs	r0, #0
 8022604:	4293      	cmp	r3, r2
 8022606:	d201      	bcs.n	802260c <__hi0bits+0x10>
 8022608:	041b      	lsls	r3, r3, #16
 802260a:	3010      	adds	r0, #16
 802260c:	2280      	movs	r2, #128	@ 0x80
 802260e:	0452      	lsls	r2, r2, #17
 8022610:	4293      	cmp	r3, r2
 8022612:	d201      	bcs.n	8022618 <__hi0bits+0x1c>
 8022614:	3008      	adds	r0, #8
 8022616:	021b      	lsls	r3, r3, #8
 8022618:	2280      	movs	r2, #128	@ 0x80
 802261a:	0552      	lsls	r2, r2, #21
 802261c:	4293      	cmp	r3, r2
 802261e:	d201      	bcs.n	8022624 <__hi0bits+0x28>
 8022620:	3004      	adds	r0, #4
 8022622:	011b      	lsls	r3, r3, #4
 8022624:	2280      	movs	r2, #128	@ 0x80
 8022626:	05d2      	lsls	r2, r2, #23
 8022628:	4293      	cmp	r3, r2
 802262a:	d201      	bcs.n	8022630 <__hi0bits+0x34>
 802262c:	3002      	adds	r0, #2
 802262e:	009b      	lsls	r3, r3, #2
 8022630:	2b00      	cmp	r3, #0
 8022632:	db03      	blt.n	802263c <__hi0bits+0x40>
 8022634:	3001      	adds	r0, #1
 8022636:	4213      	tst	r3, r2
 8022638:	d100      	bne.n	802263c <__hi0bits+0x40>
 802263a:	2020      	movs	r0, #32
 802263c:	4770      	bx	lr

0802263e <__lo0bits>:
 802263e:	6803      	ldr	r3, [r0, #0]
 8022640:	0001      	movs	r1, r0
 8022642:	2207      	movs	r2, #7
 8022644:	0018      	movs	r0, r3
 8022646:	4010      	ands	r0, r2
 8022648:	4213      	tst	r3, r2
 802264a:	d00d      	beq.n	8022668 <__lo0bits+0x2a>
 802264c:	3a06      	subs	r2, #6
 802264e:	2000      	movs	r0, #0
 8022650:	4213      	tst	r3, r2
 8022652:	d105      	bne.n	8022660 <__lo0bits+0x22>
 8022654:	3002      	adds	r0, #2
 8022656:	4203      	tst	r3, r0
 8022658:	d003      	beq.n	8022662 <__lo0bits+0x24>
 802265a:	40d3      	lsrs	r3, r2
 802265c:	0010      	movs	r0, r2
 802265e:	600b      	str	r3, [r1, #0]
 8022660:	4770      	bx	lr
 8022662:	089b      	lsrs	r3, r3, #2
 8022664:	600b      	str	r3, [r1, #0]
 8022666:	e7fb      	b.n	8022660 <__lo0bits+0x22>
 8022668:	b29a      	uxth	r2, r3
 802266a:	2a00      	cmp	r2, #0
 802266c:	d101      	bne.n	8022672 <__lo0bits+0x34>
 802266e:	2010      	movs	r0, #16
 8022670:	0c1b      	lsrs	r3, r3, #16
 8022672:	b2da      	uxtb	r2, r3
 8022674:	2a00      	cmp	r2, #0
 8022676:	d101      	bne.n	802267c <__lo0bits+0x3e>
 8022678:	3008      	adds	r0, #8
 802267a:	0a1b      	lsrs	r3, r3, #8
 802267c:	071a      	lsls	r2, r3, #28
 802267e:	d101      	bne.n	8022684 <__lo0bits+0x46>
 8022680:	3004      	adds	r0, #4
 8022682:	091b      	lsrs	r3, r3, #4
 8022684:	079a      	lsls	r2, r3, #30
 8022686:	d101      	bne.n	802268c <__lo0bits+0x4e>
 8022688:	3002      	adds	r0, #2
 802268a:	089b      	lsrs	r3, r3, #2
 802268c:	07da      	lsls	r2, r3, #31
 802268e:	d4e9      	bmi.n	8022664 <__lo0bits+0x26>
 8022690:	3001      	adds	r0, #1
 8022692:	085b      	lsrs	r3, r3, #1
 8022694:	d1e6      	bne.n	8022664 <__lo0bits+0x26>
 8022696:	2020      	movs	r0, #32
 8022698:	e7e2      	b.n	8022660 <__lo0bits+0x22>
	...

0802269c <__i2b>:
 802269c:	b510      	push	{r4, lr}
 802269e:	000c      	movs	r4, r1
 80226a0:	2101      	movs	r1, #1
 80226a2:	f7ff feb3 	bl	802240c <_Balloc>
 80226a6:	2800      	cmp	r0, #0
 80226a8:	d107      	bne.n	80226ba <__i2b+0x1e>
 80226aa:	2146      	movs	r1, #70	@ 0x46
 80226ac:	4c05      	ldr	r4, [pc, #20]	@ (80226c4 <__i2b+0x28>)
 80226ae:	0002      	movs	r2, r0
 80226b0:	4b05      	ldr	r3, [pc, #20]	@ (80226c8 <__i2b+0x2c>)
 80226b2:	0020      	movs	r0, r4
 80226b4:	31ff      	adds	r1, #255	@ 0xff
 80226b6:	f000 ff89 	bl	80235cc <__assert_func>
 80226ba:	2301      	movs	r3, #1
 80226bc:	6144      	str	r4, [r0, #20]
 80226be:	6103      	str	r3, [r0, #16]
 80226c0:	bd10      	pop	{r4, pc}
 80226c2:	46c0      	nop			@ (mov r8, r8)
 80226c4:	08026ee2 	.word	0x08026ee2
 80226c8:	08026e71 	.word	0x08026e71

080226cc <__multiply>:
 80226cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80226ce:	0014      	movs	r4, r2
 80226d0:	690a      	ldr	r2, [r1, #16]
 80226d2:	6923      	ldr	r3, [r4, #16]
 80226d4:	000d      	movs	r5, r1
 80226d6:	b08b      	sub	sp, #44	@ 0x2c
 80226d8:	429a      	cmp	r2, r3
 80226da:	db02      	blt.n	80226e2 <__multiply+0x16>
 80226dc:	0023      	movs	r3, r4
 80226de:	000c      	movs	r4, r1
 80226e0:	001d      	movs	r5, r3
 80226e2:	6927      	ldr	r7, [r4, #16]
 80226e4:	692e      	ldr	r6, [r5, #16]
 80226e6:	6861      	ldr	r1, [r4, #4]
 80226e8:	19bb      	adds	r3, r7, r6
 80226ea:	9303      	str	r3, [sp, #12]
 80226ec:	68a3      	ldr	r3, [r4, #8]
 80226ee:	19ba      	adds	r2, r7, r6
 80226f0:	4293      	cmp	r3, r2
 80226f2:	da00      	bge.n	80226f6 <__multiply+0x2a>
 80226f4:	3101      	adds	r1, #1
 80226f6:	f7ff fe89 	bl	802240c <_Balloc>
 80226fa:	9002      	str	r0, [sp, #8]
 80226fc:	2800      	cmp	r0, #0
 80226fe:	d106      	bne.n	802270e <__multiply+0x42>
 8022700:	21b1      	movs	r1, #177	@ 0xb1
 8022702:	4b49      	ldr	r3, [pc, #292]	@ (8022828 <__multiply+0x15c>)
 8022704:	4849      	ldr	r0, [pc, #292]	@ (802282c <__multiply+0x160>)
 8022706:	9a02      	ldr	r2, [sp, #8]
 8022708:	0049      	lsls	r1, r1, #1
 802270a:	f000 ff5f 	bl	80235cc <__assert_func>
 802270e:	9b02      	ldr	r3, [sp, #8]
 8022710:	2200      	movs	r2, #0
 8022712:	3314      	adds	r3, #20
 8022714:	469c      	mov	ip, r3
 8022716:	19bb      	adds	r3, r7, r6
 8022718:	009b      	lsls	r3, r3, #2
 802271a:	4463      	add	r3, ip
 802271c:	9304      	str	r3, [sp, #16]
 802271e:	4663      	mov	r3, ip
 8022720:	9904      	ldr	r1, [sp, #16]
 8022722:	428b      	cmp	r3, r1
 8022724:	d32a      	bcc.n	802277c <__multiply+0xb0>
 8022726:	0023      	movs	r3, r4
 8022728:	00bf      	lsls	r7, r7, #2
 802272a:	3314      	adds	r3, #20
 802272c:	3514      	adds	r5, #20
 802272e:	9308      	str	r3, [sp, #32]
 8022730:	00b6      	lsls	r6, r6, #2
 8022732:	19db      	adds	r3, r3, r7
 8022734:	9305      	str	r3, [sp, #20]
 8022736:	19ab      	adds	r3, r5, r6
 8022738:	9309      	str	r3, [sp, #36]	@ 0x24
 802273a:	2304      	movs	r3, #4
 802273c:	9306      	str	r3, [sp, #24]
 802273e:	0023      	movs	r3, r4
 8022740:	9a05      	ldr	r2, [sp, #20]
 8022742:	3315      	adds	r3, #21
 8022744:	9501      	str	r5, [sp, #4]
 8022746:	429a      	cmp	r2, r3
 8022748:	d305      	bcc.n	8022756 <__multiply+0x8a>
 802274a:	1b13      	subs	r3, r2, r4
 802274c:	3b15      	subs	r3, #21
 802274e:	089b      	lsrs	r3, r3, #2
 8022750:	3301      	adds	r3, #1
 8022752:	009b      	lsls	r3, r3, #2
 8022754:	9306      	str	r3, [sp, #24]
 8022756:	9b01      	ldr	r3, [sp, #4]
 8022758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802275a:	4293      	cmp	r3, r2
 802275c:	d310      	bcc.n	8022780 <__multiply+0xb4>
 802275e:	9b03      	ldr	r3, [sp, #12]
 8022760:	2b00      	cmp	r3, #0
 8022762:	dd05      	ble.n	8022770 <__multiply+0xa4>
 8022764:	9b04      	ldr	r3, [sp, #16]
 8022766:	3b04      	subs	r3, #4
 8022768:	9304      	str	r3, [sp, #16]
 802276a:	681b      	ldr	r3, [r3, #0]
 802276c:	2b00      	cmp	r3, #0
 802276e:	d056      	beq.n	802281e <__multiply+0x152>
 8022770:	9b02      	ldr	r3, [sp, #8]
 8022772:	9a03      	ldr	r2, [sp, #12]
 8022774:	0018      	movs	r0, r3
 8022776:	611a      	str	r2, [r3, #16]
 8022778:	b00b      	add	sp, #44	@ 0x2c
 802277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802277c:	c304      	stmia	r3!, {r2}
 802277e:	e7cf      	b.n	8022720 <__multiply+0x54>
 8022780:	9b01      	ldr	r3, [sp, #4]
 8022782:	6818      	ldr	r0, [r3, #0]
 8022784:	b280      	uxth	r0, r0
 8022786:	2800      	cmp	r0, #0
 8022788:	d01e      	beq.n	80227c8 <__multiply+0xfc>
 802278a:	4667      	mov	r7, ip
 802278c:	2500      	movs	r5, #0
 802278e:	9e08      	ldr	r6, [sp, #32]
 8022790:	ce02      	ldmia	r6!, {r1}
 8022792:	683b      	ldr	r3, [r7, #0]
 8022794:	9307      	str	r3, [sp, #28]
 8022796:	b28b      	uxth	r3, r1
 8022798:	4343      	muls	r3, r0
 802279a:	001a      	movs	r2, r3
 802279c:	466b      	mov	r3, sp
 802279e:	0c09      	lsrs	r1, r1, #16
 80227a0:	8b9b      	ldrh	r3, [r3, #28]
 80227a2:	4341      	muls	r1, r0
 80227a4:	18d3      	adds	r3, r2, r3
 80227a6:	9a07      	ldr	r2, [sp, #28]
 80227a8:	195b      	adds	r3, r3, r5
 80227aa:	0c12      	lsrs	r2, r2, #16
 80227ac:	1889      	adds	r1, r1, r2
 80227ae:	0c1a      	lsrs	r2, r3, #16
 80227b0:	188a      	adds	r2, r1, r2
 80227b2:	b29b      	uxth	r3, r3
 80227b4:	0c15      	lsrs	r5, r2, #16
 80227b6:	0412      	lsls	r2, r2, #16
 80227b8:	431a      	orrs	r2, r3
 80227ba:	9b05      	ldr	r3, [sp, #20]
 80227bc:	c704      	stmia	r7!, {r2}
 80227be:	42b3      	cmp	r3, r6
 80227c0:	d8e6      	bhi.n	8022790 <__multiply+0xc4>
 80227c2:	4663      	mov	r3, ip
 80227c4:	9a06      	ldr	r2, [sp, #24]
 80227c6:	509d      	str	r5, [r3, r2]
 80227c8:	9b01      	ldr	r3, [sp, #4]
 80227ca:	6818      	ldr	r0, [r3, #0]
 80227cc:	0c00      	lsrs	r0, r0, #16
 80227ce:	d020      	beq.n	8022812 <__multiply+0x146>
 80227d0:	4663      	mov	r3, ip
 80227d2:	0025      	movs	r5, r4
 80227d4:	4661      	mov	r1, ip
 80227d6:	2700      	movs	r7, #0
 80227d8:	681b      	ldr	r3, [r3, #0]
 80227da:	3514      	adds	r5, #20
 80227dc:	682a      	ldr	r2, [r5, #0]
 80227de:	680e      	ldr	r6, [r1, #0]
 80227e0:	b292      	uxth	r2, r2
 80227e2:	4342      	muls	r2, r0
 80227e4:	0c36      	lsrs	r6, r6, #16
 80227e6:	1992      	adds	r2, r2, r6
 80227e8:	19d2      	adds	r2, r2, r7
 80227ea:	0416      	lsls	r6, r2, #16
 80227ec:	b29b      	uxth	r3, r3
 80227ee:	431e      	orrs	r6, r3
 80227f0:	600e      	str	r6, [r1, #0]
 80227f2:	cd40      	ldmia	r5!, {r6}
 80227f4:	684b      	ldr	r3, [r1, #4]
 80227f6:	0c36      	lsrs	r6, r6, #16
 80227f8:	4346      	muls	r6, r0
 80227fa:	b29b      	uxth	r3, r3
 80227fc:	0c12      	lsrs	r2, r2, #16
 80227fe:	18f3      	adds	r3, r6, r3
 8022800:	189b      	adds	r3, r3, r2
 8022802:	9a05      	ldr	r2, [sp, #20]
 8022804:	0c1f      	lsrs	r7, r3, #16
 8022806:	3104      	adds	r1, #4
 8022808:	42aa      	cmp	r2, r5
 802280a:	d8e7      	bhi.n	80227dc <__multiply+0x110>
 802280c:	4662      	mov	r2, ip
 802280e:	9906      	ldr	r1, [sp, #24]
 8022810:	5053      	str	r3, [r2, r1]
 8022812:	9b01      	ldr	r3, [sp, #4]
 8022814:	3304      	adds	r3, #4
 8022816:	9301      	str	r3, [sp, #4]
 8022818:	2304      	movs	r3, #4
 802281a:	449c      	add	ip, r3
 802281c:	e79b      	b.n	8022756 <__multiply+0x8a>
 802281e:	9b03      	ldr	r3, [sp, #12]
 8022820:	3b01      	subs	r3, #1
 8022822:	9303      	str	r3, [sp, #12]
 8022824:	e79b      	b.n	802275e <__multiply+0x92>
 8022826:	46c0      	nop			@ (mov r8, r8)
 8022828:	08026e71 	.word	0x08026e71
 802282c:	08026ee2 	.word	0x08026ee2

08022830 <__pow5mult>:
 8022830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022832:	2303      	movs	r3, #3
 8022834:	0015      	movs	r5, r2
 8022836:	0007      	movs	r7, r0
 8022838:	000e      	movs	r6, r1
 802283a:	401a      	ands	r2, r3
 802283c:	421d      	tst	r5, r3
 802283e:	d008      	beq.n	8022852 <__pow5mult+0x22>
 8022840:	4925      	ldr	r1, [pc, #148]	@ (80228d8 <__pow5mult+0xa8>)
 8022842:	3a01      	subs	r2, #1
 8022844:	0092      	lsls	r2, r2, #2
 8022846:	5852      	ldr	r2, [r2, r1]
 8022848:	2300      	movs	r3, #0
 802284a:	0031      	movs	r1, r6
 802284c:	f7ff fe46 	bl	80224dc <__multadd>
 8022850:	0006      	movs	r6, r0
 8022852:	10ad      	asrs	r5, r5, #2
 8022854:	d03d      	beq.n	80228d2 <__pow5mult+0xa2>
 8022856:	69fc      	ldr	r4, [r7, #28]
 8022858:	2c00      	cmp	r4, #0
 802285a:	d10f      	bne.n	802287c <__pow5mult+0x4c>
 802285c:	2010      	movs	r0, #16
 802285e:	f7ff fd07 	bl	8022270 <malloc>
 8022862:	1e02      	subs	r2, r0, #0
 8022864:	61f8      	str	r0, [r7, #28]
 8022866:	d105      	bne.n	8022874 <__pow5mult+0x44>
 8022868:	21b4      	movs	r1, #180	@ 0xb4
 802286a:	4b1c      	ldr	r3, [pc, #112]	@ (80228dc <__pow5mult+0xac>)
 802286c:	481c      	ldr	r0, [pc, #112]	@ (80228e0 <__pow5mult+0xb0>)
 802286e:	31ff      	adds	r1, #255	@ 0xff
 8022870:	f000 feac 	bl	80235cc <__assert_func>
 8022874:	6044      	str	r4, [r0, #4]
 8022876:	6084      	str	r4, [r0, #8]
 8022878:	6004      	str	r4, [r0, #0]
 802287a:	60c4      	str	r4, [r0, #12]
 802287c:	69fb      	ldr	r3, [r7, #28]
 802287e:	689c      	ldr	r4, [r3, #8]
 8022880:	9301      	str	r3, [sp, #4]
 8022882:	2c00      	cmp	r4, #0
 8022884:	d108      	bne.n	8022898 <__pow5mult+0x68>
 8022886:	0038      	movs	r0, r7
 8022888:	4916      	ldr	r1, [pc, #88]	@ (80228e4 <__pow5mult+0xb4>)
 802288a:	f7ff ff07 	bl	802269c <__i2b>
 802288e:	9b01      	ldr	r3, [sp, #4]
 8022890:	0004      	movs	r4, r0
 8022892:	6098      	str	r0, [r3, #8]
 8022894:	2300      	movs	r3, #0
 8022896:	6003      	str	r3, [r0, #0]
 8022898:	2301      	movs	r3, #1
 802289a:	421d      	tst	r5, r3
 802289c:	d00a      	beq.n	80228b4 <__pow5mult+0x84>
 802289e:	0031      	movs	r1, r6
 80228a0:	0022      	movs	r2, r4
 80228a2:	0038      	movs	r0, r7
 80228a4:	f7ff ff12 	bl	80226cc <__multiply>
 80228a8:	0031      	movs	r1, r6
 80228aa:	9001      	str	r0, [sp, #4]
 80228ac:	0038      	movs	r0, r7
 80228ae:	f7ff fdf1 	bl	8022494 <_Bfree>
 80228b2:	9e01      	ldr	r6, [sp, #4]
 80228b4:	106d      	asrs	r5, r5, #1
 80228b6:	d00c      	beq.n	80228d2 <__pow5mult+0xa2>
 80228b8:	6820      	ldr	r0, [r4, #0]
 80228ba:	2800      	cmp	r0, #0
 80228bc:	d107      	bne.n	80228ce <__pow5mult+0x9e>
 80228be:	0022      	movs	r2, r4
 80228c0:	0021      	movs	r1, r4
 80228c2:	0038      	movs	r0, r7
 80228c4:	f7ff ff02 	bl	80226cc <__multiply>
 80228c8:	2300      	movs	r3, #0
 80228ca:	6020      	str	r0, [r4, #0]
 80228cc:	6003      	str	r3, [r0, #0]
 80228ce:	0004      	movs	r4, r0
 80228d0:	e7e2      	b.n	8022898 <__pow5mult+0x68>
 80228d2:	0030      	movs	r0, r6
 80228d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80228d6:	46c0      	nop			@ (mov r8, r8)
 80228d8:	08026f3c 	.word	0x08026f3c
 80228dc:	08026e02 	.word	0x08026e02
 80228e0:	08026ee2 	.word	0x08026ee2
 80228e4:	00000271 	.word	0x00000271

080228e8 <__lshift>:
 80228e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228ea:	000c      	movs	r4, r1
 80228ec:	0016      	movs	r6, r2
 80228ee:	6923      	ldr	r3, [r4, #16]
 80228f0:	1157      	asrs	r7, r2, #5
 80228f2:	b085      	sub	sp, #20
 80228f4:	18fb      	adds	r3, r7, r3
 80228f6:	9301      	str	r3, [sp, #4]
 80228f8:	3301      	adds	r3, #1
 80228fa:	9300      	str	r3, [sp, #0]
 80228fc:	6849      	ldr	r1, [r1, #4]
 80228fe:	68a3      	ldr	r3, [r4, #8]
 8022900:	9002      	str	r0, [sp, #8]
 8022902:	9a00      	ldr	r2, [sp, #0]
 8022904:	4293      	cmp	r3, r2
 8022906:	db10      	blt.n	802292a <__lshift+0x42>
 8022908:	9802      	ldr	r0, [sp, #8]
 802290a:	f7ff fd7f 	bl	802240c <_Balloc>
 802290e:	2300      	movs	r3, #0
 8022910:	0001      	movs	r1, r0
 8022912:	0005      	movs	r5, r0
 8022914:	001a      	movs	r2, r3
 8022916:	3114      	adds	r1, #20
 8022918:	4298      	cmp	r0, r3
 802291a:	d10c      	bne.n	8022936 <__lshift+0x4e>
 802291c:	21ef      	movs	r1, #239	@ 0xef
 802291e:	002a      	movs	r2, r5
 8022920:	4b25      	ldr	r3, [pc, #148]	@ (80229b8 <__lshift+0xd0>)
 8022922:	4826      	ldr	r0, [pc, #152]	@ (80229bc <__lshift+0xd4>)
 8022924:	0049      	lsls	r1, r1, #1
 8022926:	f000 fe51 	bl	80235cc <__assert_func>
 802292a:	3101      	adds	r1, #1
 802292c:	005b      	lsls	r3, r3, #1
 802292e:	e7e8      	b.n	8022902 <__lshift+0x1a>
 8022930:	0098      	lsls	r0, r3, #2
 8022932:	500a      	str	r2, [r1, r0]
 8022934:	3301      	adds	r3, #1
 8022936:	42bb      	cmp	r3, r7
 8022938:	dbfa      	blt.n	8022930 <__lshift+0x48>
 802293a:	43fb      	mvns	r3, r7
 802293c:	17db      	asrs	r3, r3, #31
 802293e:	401f      	ands	r7, r3
 8022940:	00bf      	lsls	r7, r7, #2
 8022942:	0023      	movs	r3, r4
 8022944:	201f      	movs	r0, #31
 8022946:	19c9      	adds	r1, r1, r7
 8022948:	0037      	movs	r7, r6
 802294a:	6922      	ldr	r2, [r4, #16]
 802294c:	3314      	adds	r3, #20
 802294e:	0092      	lsls	r2, r2, #2
 8022950:	189a      	adds	r2, r3, r2
 8022952:	4007      	ands	r7, r0
 8022954:	4206      	tst	r6, r0
 8022956:	d029      	beq.n	80229ac <__lshift+0xc4>
 8022958:	3001      	adds	r0, #1
 802295a:	1bc0      	subs	r0, r0, r7
 802295c:	9003      	str	r0, [sp, #12]
 802295e:	468c      	mov	ip, r1
 8022960:	2000      	movs	r0, #0
 8022962:	681e      	ldr	r6, [r3, #0]
 8022964:	40be      	lsls	r6, r7
 8022966:	4306      	orrs	r6, r0
 8022968:	4660      	mov	r0, ip
 802296a:	c040      	stmia	r0!, {r6}
 802296c:	4684      	mov	ip, r0
 802296e:	9e03      	ldr	r6, [sp, #12]
 8022970:	cb01      	ldmia	r3!, {r0}
 8022972:	40f0      	lsrs	r0, r6
 8022974:	429a      	cmp	r2, r3
 8022976:	d8f4      	bhi.n	8022962 <__lshift+0x7a>
 8022978:	0026      	movs	r6, r4
 802297a:	3615      	adds	r6, #21
 802297c:	2304      	movs	r3, #4
 802297e:	42b2      	cmp	r2, r6
 8022980:	d304      	bcc.n	802298c <__lshift+0xa4>
 8022982:	1b13      	subs	r3, r2, r4
 8022984:	3b15      	subs	r3, #21
 8022986:	089b      	lsrs	r3, r3, #2
 8022988:	3301      	adds	r3, #1
 802298a:	009b      	lsls	r3, r3, #2
 802298c:	50c8      	str	r0, [r1, r3]
 802298e:	2800      	cmp	r0, #0
 8022990:	d002      	beq.n	8022998 <__lshift+0xb0>
 8022992:	9b01      	ldr	r3, [sp, #4]
 8022994:	3302      	adds	r3, #2
 8022996:	9300      	str	r3, [sp, #0]
 8022998:	9b00      	ldr	r3, [sp, #0]
 802299a:	9802      	ldr	r0, [sp, #8]
 802299c:	3b01      	subs	r3, #1
 802299e:	0021      	movs	r1, r4
 80229a0:	612b      	str	r3, [r5, #16]
 80229a2:	f7ff fd77 	bl	8022494 <_Bfree>
 80229a6:	0028      	movs	r0, r5
 80229a8:	b005      	add	sp, #20
 80229aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229ac:	cb01      	ldmia	r3!, {r0}
 80229ae:	c101      	stmia	r1!, {r0}
 80229b0:	429a      	cmp	r2, r3
 80229b2:	d8fb      	bhi.n	80229ac <__lshift+0xc4>
 80229b4:	e7f0      	b.n	8022998 <__lshift+0xb0>
 80229b6:	46c0      	nop			@ (mov r8, r8)
 80229b8:	08026e71 	.word	0x08026e71
 80229bc:	08026ee2 	.word	0x08026ee2

080229c0 <__mcmp>:
 80229c0:	b530      	push	{r4, r5, lr}
 80229c2:	690b      	ldr	r3, [r1, #16]
 80229c4:	6904      	ldr	r4, [r0, #16]
 80229c6:	0002      	movs	r2, r0
 80229c8:	1ae0      	subs	r0, r4, r3
 80229ca:	429c      	cmp	r4, r3
 80229cc:	d10f      	bne.n	80229ee <__mcmp+0x2e>
 80229ce:	3214      	adds	r2, #20
 80229d0:	009b      	lsls	r3, r3, #2
 80229d2:	3114      	adds	r1, #20
 80229d4:	0014      	movs	r4, r2
 80229d6:	18c9      	adds	r1, r1, r3
 80229d8:	18d2      	adds	r2, r2, r3
 80229da:	3a04      	subs	r2, #4
 80229dc:	3904      	subs	r1, #4
 80229de:	6815      	ldr	r5, [r2, #0]
 80229e0:	680b      	ldr	r3, [r1, #0]
 80229e2:	429d      	cmp	r5, r3
 80229e4:	d004      	beq.n	80229f0 <__mcmp+0x30>
 80229e6:	2001      	movs	r0, #1
 80229e8:	429d      	cmp	r5, r3
 80229ea:	d200      	bcs.n	80229ee <__mcmp+0x2e>
 80229ec:	3802      	subs	r0, #2
 80229ee:	bd30      	pop	{r4, r5, pc}
 80229f0:	4294      	cmp	r4, r2
 80229f2:	d3f2      	bcc.n	80229da <__mcmp+0x1a>
 80229f4:	e7fb      	b.n	80229ee <__mcmp+0x2e>
	...

080229f8 <__mdiff>:
 80229f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229fa:	000c      	movs	r4, r1
 80229fc:	b087      	sub	sp, #28
 80229fe:	9000      	str	r0, [sp, #0]
 8022a00:	0011      	movs	r1, r2
 8022a02:	0020      	movs	r0, r4
 8022a04:	0017      	movs	r7, r2
 8022a06:	f7ff ffdb 	bl	80229c0 <__mcmp>
 8022a0a:	1e05      	subs	r5, r0, #0
 8022a0c:	d110      	bne.n	8022a30 <__mdiff+0x38>
 8022a0e:	0001      	movs	r1, r0
 8022a10:	9800      	ldr	r0, [sp, #0]
 8022a12:	f7ff fcfb 	bl	802240c <_Balloc>
 8022a16:	1e02      	subs	r2, r0, #0
 8022a18:	d104      	bne.n	8022a24 <__mdiff+0x2c>
 8022a1a:	4b40      	ldr	r3, [pc, #256]	@ (8022b1c <__mdiff+0x124>)
 8022a1c:	4840      	ldr	r0, [pc, #256]	@ (8022b20 <__mdiff+0x128>)
 8022a1e:	4941      	ldr	r1, [pc, #260]	@ (8022b24 <__mdiff+0x12c>)
 8022a20:	f000 fdd4 	bl	80235cc <__assert_func>
 8022a24:	2301      	movs	r3, #1
 8022a26:	6145      	str	r5, [r0, #20]
 8022a28:	6103      	str	r3, [r0, #16]
 8022a2a:	0010      	movs	r0, r2
 8022a2c:	b007      	add	sp, #28
 8022a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a30:	2600      	movs	r6, #0
 8022a32:	42b0      	cmp	r0, r6
 8022a34:	da03      	bge.n	8022a3e <__mdiff+0x46>
 8022a36:	0023      	movs	r3, r4
 8022a38:	003c      	movs	r4, r7
 8022a3a:	001f      	movs	r7, r3
 8022a3c:	3601      	adds	r6, #1
 8022a3e:	6861      	ldr	r1, [r4, #4]
 8022a40:	9800      	ldr	r0, [sp, #0]
 8022a42:	f7ff fce3 	bl	802240c <_Balloc>
 8022a46:	1e02      	subs	r2, r0, #0
 8022a48:	d103      	bne.n	8022a52 <__mdiff+0x5a>
 8022a4a:	4b34      	ldr	r3, [pc, #208]	@ (8022b1c <__mdiff+0x124>)
 8022a4c:	4834      	ldr	r0, [pc, #208]	@ (8022b20 <__mdiff+0x128>)
 8022a4e:	4936      	ldr	r1, [pc, #216]	@ (8022b28 <__mdiff+0x130>)
 8022a50:	e7e6      	b.n	8022a20 <__mdiff+0x28>
 8022a52:	6923      	ldr	r3, [r4, #16]
 8022a54:	3414      	adds	r4, #20
 8022a56:	9300      	str	r3, [sp, #0]
 8022a58:	009b      	lsls	r3, r3, #2
 8022a5a:	18e3      	adds	r3, r4, r3
 8022a5c:	0021      	movs	r1, r4
 8022a5e:	9401      	str	r4, [sp, #4]
 8022a60:	003c      	movs	r4, r7
 8022a62:	9302      	str	r3, [sp, #8]
 8022a64:	693b      	ldr	r3, [r7, #16]
 8022a66:	3414      	adds	r4, #20
 8022a68:	009b      	lsls	r3, r3, #2
 8022a6a:	18e3      	adds	r3, r4, r3
 8022a6c:	9303      	str	r3, [sp, #12]
 8022a6e:	0003      	movs	r3, r0
 8022a70:	60c6      	str	r6, [r0, #12]
 8022a72:	468c      	mov	ip, r1
 8022a74:	2000      	movs	r0, #0
 8022a76:	3314      	adds	r3, #20
 8022a78:	9304      	str	r3, [sp, #16]
 8022a7a:	9305      	str	r3, [sp, #20]
 8022a7c:	4663      	mov	r3, ip
 8022a7e:	cb20      	ldmia	r3!, {r5}
 8022a80:	b2a9      	uxth	r1, r5
 8022a82:	000e      	movs	r6, r1
 8022a84:	469c      	mov	ip, r3
 8022a86:	cc08      	ldmia	r4!, {r3}
 8022a88:	0c2d      	lsrs	r5, r5, #16
 8022a8a:	b299      	uxth	r1, r3
 8022a8c:	1a71      	subs	r1, r6, r1
 8022a8e:	1809      	adds	r1, r1, r0
 8022a90:	0c1b      	lsrs	r3, r3, #16
 8022a92:	1408      	asrs	r0, r1, #16
 8022a94:	1aeb      	subs	r3, r5, r3
 8022a96:	181b      	adds	r3, r3, r0
 8022a98:	1418      	asrs	r0, r3, #16
 8022a9a:	b289      	uxth	r1, r1
 8022a9c:	041b      	lsls	r3, r3, #16
 8022a9e:	4319      	orrs	r1, r3
 8022aa0:	9b05      	ldr	r3, [sp, #20]
 8022aa2:	c302      	stmia	r3!, {r1}
 8022aa4:	9305      	str	r3, [sp, #20]
 8022aa6:	9b03      	ldr	r3, [sp, #12]
 8022aa8:	42a3      	cmp	r3, r4
 8022aaa:	d8e7      	bhi.n	8022a7c <__mdiff+0x84>
 8022aac:	0039      	movs	r1, r7
 8022aae:	9c03      	ldr	r4, [sp, #12]
 8022ab0:	3115      	adds	r1, #21
 8022ab2:	2304      	movs	r3, #4
 8022ab4:	428c      	cmp	r4, r1
 8022ab6:	d304      	bcc.n	8022ac2 <__mdiff+0xca>
 8022ab8:	1be3      	subs	r3, r4, r7
 8022aba:	3b15      	subs	r3, #21
 8022abc:	089b      	lsrs	r3, r3, #2
 8022abe:	3301      	adds	r3, #1
 8022ac0:	009b      	lsls	r3, r3, #2
 8022ac2:	9901      	ldr	r1, [sp, #4]
 8022ac4:	18cd      	adds	r5, r1, r3
 8022ac6:	9904      	ldr	r1, [sp, #16]
 8022ac8:	002e      	movs	r6, r5
 8022aca:	18cb      	adds	r3, r1, r3
 8022acc:	001f      	movs	r7, r3
 8022ace:	9902      	ldr	r1, [sp, #8]
 8022ad0:	428e      	cmp	r6, r1
 8022ad2:	d311      	bcc.n	8022af8 <__mdiff+0x100>
 8022ad4:	9c02      	ldr	r4, [sp, #8]
 8022ad6:	1ee9      	subs	r1, r5, #3
 8022ad8:	2000      	movs	r0, #0
 8022ada:	428c      	cmp	r4, r1
 8022adc:	d304      	bcc.n	8022ae8 <__mdiff+0xf0>
 8022ade:	0021      	movs	r1, r4
 8022ae0:	3103      	adds	r1, #3
 8022ae2:	1b49      	subs	r1, r1, r5
 8022ae4:	0889      	lsrs	r1, r1, #2
 8022ae6:	0088      	lsls	r0, r1, #2
 8022ae8:	181b      	adds	r3, r3, r0
 8022aea:	3b04      	subs	r3, #4
 8022aec:	6819      	ldr	r1, [r3, #0]
 8022aee:	2900      	cmp	r1, #0
 8022af0:	d010      	beq.n	8022b14 <__mdiff+0x11c>
 8022af2:	9b00      	ldr	r3, [sp, #0]
 8022af4:	6113      	str	r3, [r2, #16]
 8022af6:	e798      	b.n	8022a2a <__mdiff+0x32>
 8022af8:	4684      	mov	ip, r0
 8022afa:	ce02      	ldmia	r6!, {r1}
 8022afc:	b288      	uxth	r0, r1
 8022afe:	4460      	add	r0, ip
 8022b00:	1400      	asrs	r0, r0, #16
 8022b02:	0c0c      	lsrs	r4, r1, #16
 8022b04:	1904      	adds	r4, r0, r4
 8022b06:	4461      	add	r1, ip
 8022b08:	1420      	asrs	r0, r4, #16
 8022b0a:	b289      	uxth	r1, r1
 8022b0c:	0424      	lsls	r4, r4, #16
 8022b0e:	4321      	orrs	r1, r4
 8022b10:	c702      	stmia	r7!, {r1}
 8022b12:	e7dc      	b.n	8022ace <__mdiff+0xd6>
 8022b14:	9900      	ldr	r1, [sp, #0]
 8022b16:	3901      	subs	r1, #1
 8022b18:	9100      	str	r1, [sp, #0]
 8022b1a:	e7e6      	b.n	8022aea <__mdiff+0xf2>
 8022b1c:	08026e71 	.word	0x08026e71
 8022b20:	08026ee2 	.word	0x08026ee2
 8022b24:	00000237 	.word	0x00000237
 8022b28:	00000245 	.word	0x00000245

08022b2c <__ulp>:
 8022b2c:	b510      	push	{r4, lr}
 8022b2e:	2400      	movs	r4, #0
 8022b30:	4b0c      	ldr	r3, [pc, #48]	@ (8022b64 <__ulp+0x38>)
 8022b32:	4a0d      	ldr	r2, [pc, #52]	@ (8022b68 <__ulp+0x3c>)
 8022b34:	400b      	ands	r3, r1
 8022b36:	189b      	adds	r3, r3, r2
 8022b38:	42a3      	cmp	r3, r4
 8022b3a:	dc06      	bgt.n	8022b4a <__ulp+0x1e>
 8022b3c:	425b      	negs	r3, r3
 8022b3e:	151a      	asrs	r2, r3, #20
 8022b40:	2a13      	cmp	r2, #19
 8022b42:	dc05      	bgt.n	8022b50 <__ulp+0x24>
 8022b44:	2380      	movs	r3, #128	@ 0x80
 8022b46:	031b      	lsls	r3, r3, #12
 8022b48:	4113      	asrs	r3, r2
 8022b4a:	0019      	movs	r1, r3
 8022b4c:	0020      	movs	r0, r4
 8022b4e:	bd10      	pop	{r4, pc}
 8022b50:	3a14      	subs	r2, #20
 8022b52:	2401      	movs	r4, #1
 8022b54:	2a1e      	cmp	r2, #30
 8022b56:	dc02      	bgt.n	8022b5e <__ulp+0x32>
 8022b58:	2480      	movs	r4, #128	@ 0x80
 8022b5a:	0624      	lsls	r4, r4, #24
 8022b5c:	40d4      	lsrs	r4, r2
 8022b5e:	2300      	movs	r3, #0
 8022b60:	e7f3      	b.n	8022b4a <__ulp+0x1e>
 8022b62:	46c0      	nop			@ (mov r8, r8)
 8022b64:	7ff00000 	.word	0x7ff00000
 8022b68:	fcc00000 	.word	0xfcc00000

08022b6c <__b2d>:
 8022b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022b6e:	0006      	movs	r6, r0
 8022b70:	6903      	ldr	r3, [r0, #16]
 8022b72:	3614      	adds	r6, #20
 8022b74:	009b      	lsls	r3, r3, #2
 8022b76:	18f3      	adds	r3, r6, r3
 8022b78:	1f1d      	subs	r5, r3, #4
 8022b7a:	682c      	ldr	r4, [r5, #0]
 8022b7c:	000f      	movs	r7, r1
 8022b7e:	0020      	movs	r0, r4
 8022b80:	9301      	str	r3, [sp, #4]
 8022b82:	f7ff fd3b 	bl	80225fc <__hi0bits>
 8022b86:	2220      	movs	r2, #32
 8022b88:	1a12      	subs	r2, r2, r0
 8022b8a:	603a      	str	r2, [r7, #0]
 8022b8c:	0003      	movs	r3, r0
 8022b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8022c00 <__b2d+0x94>)
 8022b90:	280a      	cmp	r0, #10
 8022b92:	dc15      	bgt.n	8022bc0 <__b2d+0x54>
 8022b94:	210b      	movs	r1, #11
 8022b96:	0027      	movs	r7, r4
 8022b98:	1a09      	subs	r1, r1, r0
 8022b9a:	40cf      	lsrs	r7, r1
 8022b9c:	433a      	orrs	r2, r7
 8022b9e:	468c      	mov	ip, r1
 8022ba0:	0011      	movs	r1, r2
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	42ae      	cmp	r6, r5
 8022ba6:	d202      	bcs.n	8022bae <__b2d+0x42>
 8022ba8:	9a01      	ldr	r2, [sp, #4]
 8022baa:	3a08      	subs	r2, #8
 8022bac:	6812      	ldr	r2, [r2, #0]
 8022bae:	3315      	adds	r3, #21
 8022bb0:	409c      	lsls	r4, r3
 8022bb2:	4663      	mov	r3, ip
 8022bb4:	0027      	movs	r7, r4
 8022bb6:	40da      	lsrs	r2, r3
 8022bb8:	4317      	orrs	r7, r2
 8022bba:	0038      	movs	r0, r7
 8022bbc:	b003      	add	sp, #12
 8022bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022bc0:	2700      	movs	r7, #0
 8022bc2:	42ae      	cmp	r6, r5
 8022bc4:	d202      	bcs.n	8022bcc <__b2d+0x60>
 8022bc6:	9d01      	ldr	r5, [sp, #4]
 8022bc8:	3d08      	subs	r5, #8
 8022bca:	682f      	ldr	r7, [r5, #0]
 8022bcc:	210b      	movs	r1, #11
 8022bce:	4249      	negs	r1, r1
 8022bd0:	468c      	mov	ip, r1
 8022bd2:	449c      	add	ip, r3
 8022bd4:	2b0b      	cmp	r3, #11
 8022bd6:	d010      	beq.n	8022bfa <__b2d+0x8e>
 8022bd8:	4661      	mov	r1, ip
 8022bda:	2320      	movs	r3, #32
 8022bdc:	408c      	lsls	r4, r1
 8022bde:	1a5b      	subs	r3, r3, r1
 8022be0:	0039      	movs	r1, r7
 8022be2:	40d9      	lsrs	r1, r3
 8022be4:	430c      	orrs	r4, r1
 8022be6:	4322      	orrs	r2, r4
 8022be8:	0011      	movs	r1, r2
 8022bea:	2200      	movs	r2, #0
 8022bec:	42b5      	cmp	r5, r6
 8022bee:	d901      	bls.n	8022bf4 <__b2d+0x88>
 8022bf0:	3d04      	subs	r5, #4
 8022bf2:	682a      	ldr	r2, [r5, #0]
 8022bf4:	4664      	mov	r4, ip
 8022bf6:	40a7      	lsls	r7, r4
 8022bf8:	e7dd      	b.n	8022bb6 <__b2d+0x4a>
 8022bfa:	4322      	orrs	r2, r4
 8022bfc:	0011      	movs	r1, r2
 8022bfe:	e7dc      	b.n	8022bba <__b2d+0x4e>
 8022c00:	3ff00000 	.word	0x3ff00000

08022c04 <__d2b>:
 8022c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022c06:	2101      	movs	r1, #1
 8022c08:	0016      	movs	r6, r2
 8022c0a:	001f      	movs	r7, r3
 8022c0c:	f7ff fbfe 	bl	802240c <_Balloc>
 8022c10:	1e04      	subs	r4, r0, #0
 8022c12:	d105      	bne.n	8022c20 <__d2b+0x1c>
 8022c14:	0022      	movs	r2, r4
 8022c16:	4b25      	ldr	r3, [pc, #148]	@ (8022cac <__d2b+0xa8>)
 8022c18:	4825      	ldr	r0, [pc, #148]	@ (8022cb0 <__d2b+0xac>)
 8022c1a:	4926      	ldr	r1, [pc, #152]	@ (8022cb4 <__d2b+0xb0>)
 8022c1c:	f000 fcd6 	bl	80235cc <__assert_func>
 8022c20:	033b      	lsls	r3, r7, #12
 8022c22:	007d      	lsls	r5, r7, #1
 8022c24:	0b1b      	lsrs	r3, r3, #12
 8022c26:	0d6d      	lsrs	r5, r5, #21
 8022c28:	d002      	beq.n	8022c30 <__d2b+0x2c>
 8022c2a:	2280      	movs	r2, #128	@ 0x80
 8022c2c:	0352      	lsls	r2, r2, #13
 8022c2e:	4313      	orrs	r3, r2
 8022c30:	9301      	str	r3, [sp, #4]
 8022c32:	2e00      	cmp	r6, #0
 8022c34:	d025      	beq.n	8022c82 <__d2b+0x7e>
 8022c36:	4668      	mov	r0, sp
 8022c38:	9600      	str	r6, [sp, #0]
 8022c3a:	f7ff fd00 	bl	802263e <__lo0bits>
 8022c3e:	9b01      	ldr	r3, [sp, #4]
 8022c40:	9900      	ldr	r1, [sp, #0]
 8022c42:	2800      	cmp	r0, #0
 8022c44:	d01b      	beq.n	8022c7e <__d2b+0x7a>
 8022c46:	2220      	movs	r2, #32
 8022c48:	001e      	movs	r6, r3
 8022c4a:	1a12      	subs	r2, r2, r0
 8022c4c:	4096      	lsls	r6, r2
 8022c4e:	0032      	movs	r2, r6
 8022c50:	40c3      	lsrs	r3, r0
 8022c52:	430a      	orrs	r2, r1
 8022c54:	6162      	str	r2, [r4, #20]
 8022c56:	9301      	str	r3, [sp, #4]
 8022c58:	9e01      	ldr	r6, [sp, #4]
 8022c5a:	61a6      	str	r6, [r4, #24]
 8022c5c:	1e73      	subs	r3, r6, #1
 8022c5e:	419e      	sbcs	r6, r3
 8022c60:	3601      	adds	r6, #1
 8022c62:	6126      	str	r6, [r4, #16]
 8022c64:	2d00      	cmp	r5, #0
 8022c66:	d014      	beq.n	8022c92 <__d2b+0x8e>
 8022c68:	2635      	movs	r6, #53	@ 0x35
 8022c6a:	4b13      	ldr	r3, [pc, #76]	@ (8022cb8 <__d2b+0xb4>)
 8022c6c:	18ed      	adds	r5, r5, r3
 8022c6e:	9b08      	ldr	r3, [sp, #32]
 8022c70:	182d      	adds	r5, r5, r0
 8022c72:	601d      	str	r5, [r3, #0]
 8022c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c76:	1a36      	subs	r6, r6, r0
 8022c78:	601e      	str	r6, [r3, #0]
 8022c7a:	0020      	movs	r0, r4
 8022c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022c7e:	6161      	str	r1, [r4, #20]
 8022c80:	e7ea      	b.n	8022c58 <__d2b+0x54>
 8022c82:	a801      	add	r0, sp, #4
 8022c84:	f7ff fcdb 	bl	802263e <__lo0bits>
 8022c88:	9b01      	ldr	r3, [sp, #4]
 8022c8a:	2601      	movs	r6, #1
 8022c8c:	6163      	str	r3, [r4, #20]
 8022c8e:	3020      	adds	r0, #32
 8022c90:	e7e7      	b.n	8022c62 <__d2b+0x5e>
 8022c92:	4b0a      	ldr	r3, [pc, #40]	@ (8022cbc <__d2b+0xb8>)
 8022c94:	18c0      	adds	r0, r0, r3
 8022c96:	9b08      	ldr	r3, [sp, #32]
 8022c98:	6018      	str	r0, [r3, #0]
 8022c9a:	4b09      	ldr	r3, [pc, #36]	@ (8022cc0 <__d2b+0xbc>)
 8022c9c:	18f3      	adds	r3, r6, r3
 8022c9e:	009b      	lsls	r3, r3, #2
 8022ca0:	18e3      	adds	r3, r4, r3
 8022ca2:	6958      	ldr	r0, [r3, #20]
 8022ca4:	f7ff fcaa 	bl	80225fc <__hi0bits>
 8022ca8:	0176      	lsls	r6, r6, #5
 8022caa:	e7e3      	b.n	8022c74 <__d2b+0x70>
 8022cac:	08026e71 	.word	0x08026e71
 8022cb0:	08026ee2 	.word	0x08026ee2
 8022cb4:	0000030f 	.word	0x0000030f
 8022cb8:	fffffbcd 	.word	0xfffffbcd
 8022cbc:	fffffbce 	.word	0xfffffbce
 8022cc0:	3fffffff 	.word	0x3fffffff

08022cc4 <__ratio>:
 8022cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cc6:	b087      	sub	sp, #28
 8022cc8:	000f      	movs	r7, r1
 8022cca:	a904      	add	r1, sp, #16
 8022ccc:	0006      	movs	r6, r0
 8022cce:	f7ff ff4d 	bl	8022b6c <__b2d>
 8022cd2:	9000      	str	r0, [sp, #0]
 8022cd4:	9101      	str	r1, [sp, #4]
 8022cd6:	9b00      	ldr	r3, [sp, #0]
 8022cd8:	9c01      	ldr	r4, [sp, #4]
 8022cda:	0038      	movs	r0, r7
 8022cdc:	a905      	add	r1, sp, #20
 8022cde:	9302      	str	r3, [sp, #8]
 8022ce0:	9403      	str	r4, [sp, #12]
 8022ce2:	f7ff ff43 	bl	8022b6c <__b2d>
 8022ce6:	000d      	movs	r5, r1
 8022ce8:	0002      	movs	r2, r0
 8022cea:	000b      	movs	r3, r1
 8022cec:	6930      	ldr	r0, [r6, #16]
 8022cee:	6939      	ldr	r1, [r7, #16]
 8022cf0:	9e04      	ldr	r6, [sp, #16]
 8022cf2:	1a40      	subs	r0, r0, r1
 8022cf4:	9905      	ldr	r1, [sp, #20]
 8022cf6:	0140      	lsls	r0, r0, #5
 8022cf8:	1a71      	subs	r1, r6, r1
 8022cfa:	1841      	adds	r1, r0, r1
 8022cfc:	0508      	lsls	r0, r1, #20
 8022cfe:	2900      	cmp	r1, #0
 8022d00:	dd08      	ble.n	8022d14 <__ratio+0x50>
 8022d02:	9901      	ldr	r1, [sp, #4]
 8022d04:	1841      	adds	r1, r0, r1
 8022d06:	9103      	str	r1, [sp, #12]
 8022d08:	9802      	ldr	r0, [sp, #8]
 8022d0a:	9903      	ldr	r1, [sp, #12]
 8022d0c:	f7df f852 	bl	8001db4 <__aeabi_ddiv>
 8022d10:	b007      	add	sp, #28
 8022d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d14:	1a2b      	subs	r3, r5, r0
 8022d16:	e7f7      	b.n	8022d08 <__ratio+0x44>

08022d18 <__copybits>:
 8022d18:	b570      	push	{r4, r5, r6, lr}
 8022d1a:	0014      	movs	r4, r2
 8022d1c:	0005      	movs	r5, r0
 8022d1e:	3901      	subs	r1, #1
 8022d20:	6913      	ldr	r3, [r2, #16]
 8022d22:	1149      	asrs	r1, r1, #5
 8022d24:	3101      	adds	r1, #1
 8022d26:	0089      	lsls	r1, r1, #2
 8022d28:	3414      	adds	r4, #20
 8022d2a:	009b      	lsls	r3, r3, #2
 8022d2c:	1841      	adds	r1, r0, r1
 8022d2e:	18e3      	adds	r3, r4, r3
 8022d30:	42a3      	cmp	r3, r4
 8022d32:	d80d      	bhi.n	8022d50 <__copybits+0x38>
 8022d34:	0014      	movs	r4, r2
 8022d36:	3411      	adds	r4, #17
 8022d38:	2500      	movs	r5, #0
 8022d3a:	429c      	cmp	r4, r3
 8022d3c:	d803      	bhi.n	8022d46 <__copybits+0x2e>
 8022d3e:	1a9b      	subs	r3, r3, r2
 8022d40:	3b11      	subs	r3, #17
 8022d42:	089b      	lsrs	r3, r3, #2
 8022d44:	009d      	lsls	r5, r3, #2
 8022d46:	2300      	movs	r3, #0
 8022d48:	1940      	adds	r0, r0, r5
 8022d4a:	4281      	cmp	r1, r0
 8022d4c:	d803      	bhi.n	8022d56 <__copybits+0x3e>
 8022d4e:	bd70      	pop	{r4, r5, r6, pc}
 8022d50:	cc40      	ldmia	r4!, {r6}
 8022d52:	c540      	stmia	r5!, {r6}
 8022d54:	e7ec      	b.n	8022d30 <__copybits+0x18>
 8022d56:	c008      	stmia	r0!, {r3}
 8022d58:	e7f7      	b.n	8022d4a <__copybits+0x32>

08022d5a <__any_on>:
 8022d5a:	0002      	movs	r2, r0
 8022d5c:	6900      	ldr	r0, [r0, #16]
 8022d5e:	b510      	push	{r4, lr}
 8022d60:	3214      	adds	r2, #20
 8022d62:	114b      	asrs	r3, r1, #5
 8022d64:	4298      	cmp	r0, r3
 8022d66:	db13      	blt.n	8022d90 <__any_on+0x36>
 8022d68:	dd0c      	ble.n	8022d84 <__any_on+0x2a>
 8022d6a:	241f      	movs	r4, #31
 8022d6c:	0008      	movs	r0, r1
 8022d6e:	4020      	ands	r0, r4
 8022d70:	4221      	tst	r1, r4
 8022d72:	d007      	beq.n	8022d84 <__any_on+0x2a>
 8022d74:	0099      	lsls	r1, r3, #2
 8022d76:	588c      	ldr	r4, [r1, r2]
 8022d78:	0021      	movs	r1, r4
 8022d7a:	40c1      	lsrs	r1, r0
 8022d7c:	4081      	lsls	r1, r0
 8022d7e:	2001      	movs	r0, #1
 8022d80:	428c      	cmp	r4, r1
 8022d82:	d104      	bne.n	8022d8e <__any_on+0x34>
 8022d84:	009b      	lsls	r3, r3, #2
 8022d86:	18d3      	adds	r3, r2, r3
 8022d88:	4293      	cmp	r3, r2
 8022d8a:	d803      	bhi.n	8022d94 <__any_on+0x3a>
 8022d8c:	2000      	movs	r0, #0
 8022d8e:	bd10      	pop	{r4, pc}
 8022d90:	0003      	movs	r3, r0
 8022d92:	e7f7      	b.n	8022d84 <__any_on+0x2a>
 8022d94:	3b04      	subs	r3, #4
 8022d96:	6819      	ldr	r1, [r3, #0]
 8022d98:	2900      	cmp	r1, #0
 8022d9a:	d0f5      	beq.n	8022d88 <__any_on+0x2e>
 8022d9c:	2001      	movs	r0, #1
 8022d9e:	e7f6      	b.n	8022d8e <__any_on+0x34>

08022da0 <__ascii_wctomb>:
 8022da0:	0003      	movs	r3, r0
 8022da2:	1e08      	subs	r0, r1, #0
 8022da4:	d005      	beq.n	8022db2 <__ascii_wctomb+0x12>
 8022da6:	2aff      	cmp	r2, #255	@ 0xff
 8022da8:	d904      	bls.n	8022db4 <__ascii_wctomb+0x14>
 8022daa:	228a      	movs	r2, #138	@ 0x8a
 8022dac:	2001      	movs	r0, #1
 8022dae:	601a      	str	r2, [r3, #0]
 8022db0:	4240      	negs	r0, r0
 8022db2:	4770      	bx	lr
 8022db4:	2001      	movs	r0, #1
 8022db6:	700a      	strb	r2, [r1, #0]
 8022db8:	e7fb      	b.n	8022db2 <__ascii_wctomb+0x12>
	...

08022dbc <__ssputs_r>:
 8022dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dbe:	688e      	ldr	r6, [r1, #8]
 8022dc0:	b085      	sub	sp, #20
 8022dc2:	001f      	movs	r7, r3
 8022dc4:	000c      	movs	r4, r1
 8022dc6:	680b      	ldr	r3, [r1, #0]
 8022dc8:	9002      	str	r0, [sp, #8]
 8022dca:	9203      	str	r2, [sp, #12]
 8022dcc:	42be      	cmp	r6, r7
 8022dce:	d830      	bhi.n	8022e32 <__ssputs_r+0x76>
 8022dd0:	210c      	movs	r1, #12
 8022dd2:	5e62      	ldrsh	r2, [r4, r1]
 8022dd4:	2190      	movs	r1, #144	@ 0x90
 8022dd6:	00c9      	lsls	r1, r1, #3
 8022dd8:	420a      	tst	r2, r1
 8022dda:	d028      	beq.n	8022e2e <__ssputs_r+0x72>
 8022ddc:	2003      	movs	r0, #3
 8022dde:	6921      	ldr	r1, [r4, #16]
 8022de0:	1a5b      	subs	r3, r3, r1
 8022de2:	9301      	str	r3, [sp, #4]
 8022de4:	6963      	ldr	r3, [r4, #20]
 8022de6:	4343      	muls	r3, r0
 8022de8:	9801      	ldr	r0, [sp, #4]
 8022dea:	0fdd      	lsrs	r5, r3, #31
 8022dec:	18ed      	adds	r5, r5, r3
 8022dee:	1c7b      	adds	r3, r7, #1
 8022df0:	181b      	adds	r3, r3, r0
 8022df2:	106d      	asrs	r5, r5, #1
 8022df4:	42ab      	cmp	r3, r5
 8022df6:	d900      	bls.n	8022dfa <__ssputs_r+0x3e>
 8022df8:	001d      	movs	r5, r3
 8022dfa:	0552      	lsls	r2, r2, #21
 8022dfc:	d528      	bpl.n	8022e50 <__ssputs_r+0x94>
 8022dfe:	0029      	movs	r1, r5
 8022e00:	9802      	ldr	r0, [sp, #8]
 8022e02:	f7ff fa61 	bl	80222c8 <_malloc_r>
 8022e06:	1e06      	subs	r6, r0, #0
 8022e08:	d02c      	beq.n	8022e64 <__ssputs_r+0xa8>
 8022e0a:	9a01      	ldr	r2, [sp, #4]
 8022e0c:	6921      	ldr	r1, [r4, #16]
 8022e0e:	f7fd fff9 	bl	8020e04 <memcpy>
 8022e12:	89a2      	ldrh	r2, [r4, #12]
 8022e14:	4b18      	ldr	r3, [pc, #96]	@ (8022e78 <__ssputs_r+0xbc>)
 8022e16:	401a      	ands	r2, r3
 8022e18:	2380      	movs	r3, #128	@ 0x80
 8022e1a:	4313      	orrs	r3, r2
 8022e1c:	81a3      	strh	r3, [r4, #12]
 8022e1e:	9b01      	ldr	r3, [sp, #4]
 8022e20:	6126      	str	r6, [r4, #16]
 8022e22:	18f6      	adds	r6, r6, r3
 8022e24:	6026      	str	r6, [r4, #0]
 8022e26:	003e      	movs	r6, r7
 8022e28:	6165      	str	r5, [r4, #20]
 8022e2a:	1aed      	subs	r5, r5, r3
 8022e2c:	60a5      	str	r5, [r4, #8]
 8022e2e:	42be      	cmp	r6, r7
 8022e30:	d900      	bls.n	8022e34 <__ssputs_r+0x78>
 8022e32:	003e      	movs	r6, r7
 8022e34:	0032      	movs	r2, r6
 8022e36:	9903      	ldr	r1, [sp, #12]
 8022e38:	6820      	ldr	r0, [r4, #0]
 8022e3a:	f000 fb7e 	bl	802353a <memmove>
 8022e3e:	2000      	movs	r0, #0
 8022e40:	68a3      	ldr	r3, [r4, #8]
 8022e42:	1b9b      	subs	r3, r3, r6
 8022e44:	60a3      	str	r3, [r4, #8]
 8022e46:	6823      	ldr	r3, [r4, #0]
 8022e48:	199b      	adds	r3, r3, r6
 8022e4a:	6023      	str	r3, [r4, #0]
 8022e4c:	b005      	add	sp, #20
 8022e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e50:	002a      	movs	r2, r5
 8022e52:	9802      	ldr	r0, [sp, #8]
 8022e54:	f000 fc05 	bl	8023662 <_realloc_r>
 8022e58:	1e06      	subs	r6, r0, #0
 8022e5a:	d1e0      	bne.n	8022e1e <__ssputs_r+0x62>
 8022e5c:	6921      	ldr	r1, [r4, #16]
 8022e5e:	9802      	ldr	r0, [sp, #8]
 8022e60:	f7fe fe62 	bl	8021b28 <_free_r>
 8022e64:	230c      	movs	r3, #12
 8022e66:	2001      	movs	r0, #1
 8022e68:	9a02      	ldr	r2, [sp, #8]
 8022e6a:	4240      	negs	r0, r0
 8022e6c:	6013      	str	r3, [r2, #0]
 8022e6e:	89a2      	ldrh	r2, [r4, #12]
 8022e70:	3334      	adds	r3, #52	@ 0x34
 8022e72:	4313      	orrs	r3, r2
 8022e74:	81a3      	strh	r3, [r4, #12]
 8022e76:	e7e9      	b.n	8022e4c <__ssputs_r+0x90>
 8022e78:	fffffb7f 	.word	0xfffffb7f

08022e7c <_svfiprintf_r>:
 8022e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e7e:	b0a1      	sub	sp, #132	@ 0x84
 8022e80:	9003      	str	r0, [sp, #12]
 8022e82:	001d      	movs	r5, r3
 8022e84:	898b      	ldrh	r3, [r1, #12]
 8022e86:	000f      	movs	r7, r1
 8022e88:	0016      	movs	r6, r2
 8022e8a:	061b      	lsls	r3, r3, #24
 8022e8c:	d511      	bpl.n	8022eb2 <_svfiprintf_r+0x36>
 8022e8e:	690b      	ldr	r3, [r1, #16]
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	d10e      	bne.n	8022eb2 <_svfiprintf_r+0x36>
 8022e94:	2140      	movs	r1, #64	@ 0x40
 8022e96:	f7ff fa17 	bl	80222c8 <_malloc_r>
 8022e9a:	6038      	str	r0, [r7, #0]
 8022e9c:	6138      	str	r0, [r7, #16]
 8022e9e:	2800      	cmp	r0, #0
 8022ea0:	d105      	bne.n	8022eae <_svfiprintf_r+0x32>
 8022ea2:	230c      	movs	r3, #12
 8022ea4:	9a03      	ldr	r2, [sp, #12]
 8022ea6:	6013      	str	r3, [r2, #0]
 8022ea8:	2001      	movs	r0, #1
 8022eaa:	4240      	negs	r0, r0
 8022eac:	e0cf      	b.n	802304e <_svfiprintf_r+0x1d2>
 8022eae:	2340      	movs	r3, #64	@ 0x40
 8022eb0:	617b      	str	r3, [r7, #20]
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	ac08      	add	r4, sp, #32
 8022eb6:	6163      	str	r3, [r4, #20]
 8022eb8:	3320      	adds	r3, #32
 8022eba:	7663      	strb	r3, [r4, #25]
 8022ebc:	3310      	adds	r3, #16
 8022ebe:	76a3      	strb	r3, [r4, #26]
 8022ec0:	9507      	str	r5, [sp, #28]
 8022ec2:	0035      	movs	r5, r6
 8022ec4:	782b      	ldrb	r3, [r5, #0]
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	d001      	beq.n	8022ece <_svfiprintf_r+0x52>
 8022eca:	2b25      	cmp	r3, #37	@ 0x25
 8022ecc:	d148      	bne.n	8022f60 <_svfiprintf_r+0xe4>
 8022ece:	1bab      	subs	r3, r5, r6
 8022ed0:	9305      	str	r3, [sp, #20]
 8022ed2:	42b5      	cmp	r5, r6
 8022ed4:	d00b      	beq.n	8022eee <_svfiprintf_r+0x72>
 8022ed6:	0032      	movs	r2, r6
 8022ed8:	0039      	movs	r1, r7
 8022eda:	9803      	ldr	r0, [sp, #12]
 8022edc:	f7ff ff6e 	bl	8022dbc <__ssputs_r>
 8022ee0:	3001      	adds	r0, #1
 8022ee2:	d100      	bne.n	8022ee6 <_svfiprintf_r+0x6a>
 8022ee4:	e0ae      	b.n	8023044 <_svfiprintf_r+0x1c8>
 8022ee6:	6963      	ldr	r3, [r4, #20]
 8022ee8:	9a05      	ldr	r2, [sp, #20]
 8022eea:	189b      	adds	r3, r3, r2
 8022eec:	6163      	str	r3, [r4, #20]
 8022eee:	782b      	ldrb	r3, [r5, #0]
 8022ef0:	2b00      	cmp	r3, #0
 8022ef2:	d100      	bne.n	8022ef6 <_svfiprintf_r+0x7a>
 8022ef4:	e0a6      	b.n	8023044 <_svfiprintf_r+0x1c8>
 8022ef6:	2201      	movs	r2, #1
 8022ef8:	2300      	movs	r3, #0
 8022efa:	4252      	negs	r2, r2
 8022efc:	6062      	str	r2, [r4, #4]
 8022efe:	a904      	add	r1, sp, #16
 8022f00:	3254      	adds	r2, #84	@ 0x54
 8022f02:	1852      	adds	r2, r2, r1
 8022f04:	1c6e      	adds	r6, r5, #1
 8022f06:	6023      	str	r3, [r4, #0]
 8022f08:	60e3      	str	r3, [r4, #12]
 8022f0a:	60a3      	str	r3, [r4, #8]
 8022f0c:	7013      	strb	r3, [r2, #0]
 8022f0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022f10:	4b54      	ldr	r3, [pc, #336]	@ (8023064 <_svfiprintf_r+0x1e8>)
 8022f12:	2205      	movs	r2, #5
 8022f14:	0018      	movs	r0, r3
 8022f16:	7831      	ldrb	r1, [r6, #0]
 8022f18:	9305      	str	r3, [sp, #20]
 8022f1a:	f7fd ff68 	bl	8020dee <memchr>
 8022f1e:	1c75      	adds	r5, r6, #1
 8022f20:	2800      	cmp	r0, #0
 8022f22:	d11f      	bne.n	8022f64 <_svfiprintf_r+0xe8>
 8022f24:	6822      	ldr	r2, [r4, #0]
 8022f26:	06d3      	lsls	r3, r2, #27
 8022f28:	d504      	bpl.n	8022f34 <_svfiprintf_r+0xb8>
 8022f2a:	2353      	movs	r3, #83	@ 0x53
 8022f2c:	a904      	add	r1, sp, #16
 8022f2e:	185b      	adds	r3, r3, r1
 8022f30:	2120      	movs	r1, #32
 8022f32:	7019      	strb	r1, [r3, #0]
 8022f34:	0713      	lsls	r3, r2, #28
 8022f36:	d504      	bpl.n	8022f42 <_svfiprintf_r+0xc6>
 8022f38:	2353      	movs	r3, #83	@ 0x53
 8022f3a:	a904      	add	r1, sp, #16
 8022f3c:	185b      	adds	r3, r3, r1
 8022f3e:	212b      	movs	r1, #43	@ 0x2b
 8022f40:	7019      	strb	r1, [r3, #0]
 8022f42:	7833      	ldrb	r3, [r6, #0]
 8022f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8022f46:	d016      	beq.n	8022f76 <_svfiprintf_r+0xfa>
 8022f48:	0035      	movs	r5, r6
 8022f4a:	2100      	movs	r1, #0
 8022f4c:	200a      	movs	r0, #10
 8022f4e:	68e3      	ldr	r3, [r4, #12]
 8022f50:	782a      	ldrb	r2, [r5, #0]
 8022f52:	1c6e      	adds	r6, r5, #1
 8022f54:	3a30      	subs	r2, #48	@ 0x30
 8022f56:	2a09      	cmp	r2, #9
 8022f58:	d950      	bls.n	8022ffc <_svfiprintf_r+0x180>
 8022f5a:	2900      	cmp	r1, #0
 8022f5c:	d111      	bne.n	8022f82 <_svfiprintf_r+0x106>
 8022f5e:	e017      	b.n	8022f90 <_svfiprintf_r+0x114>
 8022f60:	3501      	adds	r5, #1
 8022f62:	e7af      	b.n	8022ec4 <_svfiprintf_r+0x48>
 8022f64:	9b05      	ldr	r3, [sp, #20]
 8022f66:	6822      	ldr	r2, [r4, #0]
 8022f68:	1ac0      	subs	r0, r0, r3
 8022f6a:	2301      	movs	r3, #1
 8022f6c:	4083      	lsls	r3, r0
 8022f6e:	4313      	orrs	r3, r2
 8022f70:	002e      	movs	r6, r5
 8022f72:	6023      	str	r3, [r4, #0]
 8022f74:	e7cc      	b.n	8022f10 <_svfiprintf_r+0x94>
 8022f76:	9b07      	ldr	r3, [sp, #28]
 8022f78:	1d19      	adds	r1, r3, #4
 8022f7a:	681b      	ldr	r3, [r3, #0]
 8022f7c:	9107      	str	r1, [sp, #28]
 8022f7e:	2b00      	cmp	r3, #0
 8022f80:	db01      	blt.n	8022f86 <_svfiprintf_r+0x10a>
 8022f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022f84:	e004      	b.n	8022f90 <_svfiprintf_r+0x114>
 8022f86:	425b      	negs	r3, r3
 8022f88:	60e3      	str	r3, [r4, #12]
 8022f8a:	2302      	movs	r3, #2
 8022f8c:	4313      	orrs	r3, r2
 8022f8e:	6023      	str	r3, [r4, #0]
 8022f90:	782b      	ldrb	r3, [r5, #0]
 8022f92:	2b2e      	cmp	r3, #46	@ 0x2e
 8022f94:	d10c      	bne.n	8022fb0 <_svfiprintf_r+0x134>
 8022f96:	786b      	ldrb	r3, [r5, #1]
 8022f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8022f9a:	d134      	bne.n	8023006 <_svfiprintf_r+0x18a>
 8022f9c:	9b07      	ldr	r3, [sp, #28]
 8022f9e:	3502      	adds	r5, #2
 8022fa0:	1d1a      	adds	r2, r3, #4
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	9207      	str	r2, [sp, #28]
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	da01      	bge.n	8022fae <_svfiprintf_r+0x132>
 8022faa:	2301      	movs	r3, #1
 8022fac:	425b      	negs	r3, r3
 8022fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8022fb0:	4e2d      	ldr	r6, [pc, #180]	@ (8023068 <_svfiprintf_r+0x1ec>)
 8022fb2:	2203      	movs	r2, #3
 8022fb4:	0030      	movs	r0, r6
 8022fb6:	7829      	ldrb	r1, [r5, #0]
 8022fb8:	f7fd ff19 	bl	8020dee <memchr>
 8022fbc:	2800      	cmp	r0, #0
 8022fbe:	d006      	beq.n	8022fce <_svfiprintf_r+0x152>
 8022fc0:	2340      	movs	r3, #64	@ 0x40
 8022fc2:	1b80      	subs	r0, r0, r6
 8022fc4:	4083      	lsls	r3, r0
 8022fc6:	6822      	ldr	r2, [r4, #0]
 8022fc8:	3501      	adds	r5, #1
 8022fca:	4313      	orrs	r3, r2
 8022fcc:	6023      	str	r3, [r4, #0]
 8022fce:	7829      	ldrb	r1, [r5, #0]
 8022fd0:	2206      	movs	r2, #6
 8022fd2:	4826      	ldr	r0, [pc, #152]	@ (802306c <_svfiprintf_r+0x1f0>)
 8022fd4:	1c6e      	adds	r6, r5, #1
 8022fd6:	7621      	strb	r1, [r4, #24]
 8022fd8:	f7fd ff09 	bl	8020dee <memchr>
 8022fdc:	2800      	cmp	r0, #0
 8022fde:	d038      	beq.n	8023052 <_svfiprintf_r+0x1d6>
 8022fe0:	4b23      	ldr	r3, [pc, #140]	@ (8023070 <_svfiprintf_r+0x1f4>)
 8022fe2:	2b00      	cmp	r3, #0
 8022fe4:	d122      	bne.n	802302c <_svfiprintf_r+0x1b0>
 8022fe6:	2207      	movs	r2, #7
 8022fe8:	9b07      	ldr	r3, [sp, #28]
 8022fea:	3307      	adds	r3, #7
 8022fec:	4393      	bics	r3, r2
 8022fee:	3308      	adds	r3, #8
 8022ff0:	9307      	str	r3, [sp, #28]
 8022ff2:	6963      	ldr	r3, [r4, #20]
 8022ff4:	9a04      	ldr	r2, [sp, #16]
 8022ff6:	189b      	adds	r3, r3, r2
 8022ff8:	6163      	str	r3, [r4, #20]
 8022ffa:	e762      	b.n	8022ec2 <_svfiprintf_r+0x46>
 8022ffc:	4343      	muls	r3, r0
 8022ffe:	0035      	movs	r5, r6
 8023000:	2101      	movs	r1, #1
 8023002:	189b      	adds	r3, r3, r2
 8023004:	e7a4      	b.n	8022f50 <_svfiprintf_r+0xd4>
 8023006:	2300      	movs	r3, #0
 8023008:	200a      	movs	r0, #10
 802300a:	0019      	movs	r1, r3
 802300c:	3501      	adds	r5, #1
 802300e:	6063      	str	r3, [r4, #4]
 8023010:	782a      	ldrb	r2, [r5, #0]
 8023012:	1c6e      	adds	r6, r5, #1
 8023014:	3a30      	subs	r2, #48	@ 0x30
 8023016:	2a09      	cmp	r2, #9
 8023018:	d903      	bls.n	8023022 <_svfiprintf_r+0x1a6>
 802301a:	2b00      	cmp	r3, #0
 802301c:	d0c8      	beq.n	8022fb0 <_svfiprintf_r+0x134>
 802301e:	9109      	str	r1, [sp, #36]	@ 0x24
 8023020:	e7c6      	b.n	8022fb0 <_svfiprintf_r+0x134>
 8023022:	4341      	muls	r1, r0
 8023024:	0035      	movs	r5, r6
 8023026:	2301      	movs	r3, #1
 8023028:	1889      	adds	r1, r1, r2
 802302a:	e7f1      	b.n	8023010 <_svfiprintf_r+0x194>
 802302c:	aa07      	add	r2, sp, #28
 802302e:	9200      	str	r2, [sp, #0]
 8023030:	0021      	movs	r1, r4
 8023032:	003a      	movs	r2, r7
 8023034:	4b0f      	ldr	r3, [pc, #60]	@ (8023074 <_svfiprintf_r+0x1f8>)
 8023036:	9803      	ldr	r0, [sp, #12]
 8023038:	f7fc ffb2 	bl	801ffa0 <_printf_float>
 802303c:	9004      	str	r0, [sp, #16]
 802303e:	9b04      	ldr	r3, [sp, #16]
 8023040:	3301      	adds	r3, #1
 8023042:	d1d6      	bne.n	8022ff2 <_svfiprintf_r+0x176>
 8023044:	89bb      	ldrh	r3, [r7, #12]
 8023046:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023048:	065b      	lsls	r3, r3, #25
 802304a:	d500      	bpl.n	802304e <_svfiprintf_r+0x1d2>
 802304c:	e72c      	b.n	8022ea8 <_svfiprintf_r+0x2c>
 802304e:	b021      	add	sp, #132	@ 0x84
 8023050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023052:	aa07      	add	r2, sp, #28
 8023054:	9200      	str	r2, [sp, #0]
 8023056:	0021      	movs	r1, r4
 8023058:	003a      	movs	r2, r7
 802305a:	4b06      	ldr	r3, [pc, #24]	@ (8023074 <_svfiprintf_r+0x1f8>)
 802305c:	9803      	ldr	r0, [sp, #12]
 802305e:	f7fd fa4d 	bl	80204fc <_printf_i>
 8023062:	e7eb      	b.n	802303c <_svfiprintf_r+0x1c0>
 8023064:	08027038 	.word	0x08027038
 8023068:	0802703e 	.word	0x0802703e
 802306c:	08027042 	.word	0x08027042
 8023070:	0801ffa1 	.word	0x0801ffa1
 8023074:	08022dbd 	.word	0x08022dbd

08023078 <__sfputc_r>:
 8023078:	6893      	ldr	r3, [r2, #8]
 802307a:	b510      	push	{r4, lr}
 802307c:	3b01      	subs	r3, #1
 802307e:	6093      	str	r3, [r2, #8]
 8023080:	2b00      	cmp	r3, #0
 8023082:	da04      	bge.n	802308e <__sfputc_r+0x16>
 8023084:	6994      	ldr	r4, [r2, #24]
 8023086:	42a3      	cmp	r3, r4
 8023088:	db07      	blt.n	802309a <__sfputc_r+0x22>
 802308a:	290a      	cmp	r1, #10
 802308c:	d005      	beq.n	802309a <__sfputc_r+0x22>
 802308e:	6813      	ldr	r3, [r2, #0]
 8023090:	1c58      	adds	r0, r3, #1
 8023092:	6010      	str	r0, [r2, #0]
 8023094:	7019      	strb	r1, [r3, #0]
 8023096:	0008      	movs	r0, r1
 8023098:	bd10      	pop	{r4, pc}
 802309a:	f7fd fd37 	bl	8020b0c <__swbuf_r>
 802309e:	0001      	movs	r1, r0
 80230a0:	e7f9      	b.n	8023096 <__sfputc_r+0x1e>

080230a2 <__sfputs_r>:
 80230a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80230a4:	0006      	movs	r6, r0
 80230a6:	000f      	movs	r7, r1
 80230a8:	0014      	movs	r4, r2
 80230aa:	18d5      	adds	r5, r2, r3
 80230ac:	42ac      	cmp	r4, r5
 80230ae:	d101      	bne.n	80230b4 <__sfputs_r+0x12>
 80230b0:	2000      	movs	r0, #0
 80230b2:	e007      	b.n	80230c4 <__sfputs_r+0x22>
 80230b4:	7821      	ldrb	r1, [r4, #0]
 80230b6:	003a      	movs	r2, r7
 80230b8:	0030      	movs	r0, r6
 80230ba:	f7ff ffdd 	bl	8023078 <__sfputc_r>
 80230be:	3401      	adds	r4, #1
 80230c0:	1c43      	adds	r3, r0, #1
 80230c2:	d1f3      	bne.n	80230ac <__sfputs_r+0xa>
 80230c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080230c8 <_vfiprintf_r>:
 80230c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230ca:	b0a1      	sub	sp, #132	@ 0x84
 80230cc:	000f      	movs	r7, r1
 80230ce:	0015      	movs	r5, r2
 80230d0:	001e      	movs	r6, r3
 80230d2:	9003      	str	r0, [sp, #12]
 80230d4:	2800      	cmp	r0, #0
 80230d6:	d004      	beq.n	80230e2 <_vfiprintf_r+0x1a>
 80230d8:	6a03      	ldr	r3, [r0, #32]
 80230da:	2b00      	cmp	r3, #0
 80230dc:	d101      	bne.n	80230e2 <_vfiprintf_r+0x1a>
 80230de:	f7fd fbab 	bl	8020838 <__sinit>
 80230e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80230e4:	07db      	lsls	r3, r3, #31
 80230e6:	d405      	bmi.n	80230f4 <_vfiprintf_r+0x2c>
 80230e8:	89bb      	ldrh	r3, [r7, #12]
 80230ea:	059b      	lsls	r3, r3, #22
 80230ec:	d402      	bmi.n	80230f4 <_vfiprintf_r+0x2c>
 80230ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80230f0:	f7fd fe7b 	bl	8020dea <__retarget_lock_acquire_recursive>
 80230f4:	89bb      	ldrh	r3, [r7, #12]
 80230f6:	071b      	lsls	r3, r3, #28
 80230f8:	d502      	bpl.n	8023100 <_vfiprintf_r+0x38>
 80230fa:	693b      	ldr	r3, [r7, #16]
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	d113      	bne.n	8023128 <_vfiprintf_r+0x60>
 8023100:	0039      	movs	r1, r7
 8023102:	9803      	ldr	r0, [sp, #12]
 8023104:	f7fd fd44 	bl	8020b90 <__swsetup_r>
 8023108:	2800      	cmp	r0, #0
 802310a:	d00d      	beq.n	8023128 <_vfiprintf_r+0x60>
 802310c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802310e:	07db      	lsls	r3, r3, #31
 8023110:	d503      	bpl.n	802311a <_vfiprintf_r+0x52>
 8023112:	2001      	movs	r0, #1
 8023114:	4240      	negs	r0, r0
 8023116:	b021      	add	sp, #132	@ 0x84
 8023118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802311a:	89bb      	ldrh	r3, [r7, #12]
 802311c:	059b      	lsls	r3, r3, #22
 802311e:	d4f8      	bmi.n	8023112 <_vfiprintf_r+0x4a>
 8023120:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8023122:	f7fd fe63 	bl	8020dec <__retarget_lock_release_recursive>
 8023126:	e7f4      	b.n	8023112 <_vfiprintf_r+0x4a>
 8023128:	2300      	movs	r3, #0
 802312a:	ac08      	add	r4, sp, #32
 802312c:	6163      	str	r3, [r4, #20]
 802312e:	3320      	adds	r3, #32
 8023130:	7663      	strb	r3, [r4, #25]
 8023132:	3310      	adds	r3, #16
 8023134:	76a3      	strb	r3, [r4, #26]
 8023136:	9607      	str	r6, [sp, #28]
 8023138:	002e      	movs	r6, r5
 802313a:	7833      	ldrb	r3, [r6, #0]
 802313c:	2b00      	cmp	r3, #0
 802313e:	d001      	beq.n	8023144 <_vfiprintf_r+0x7c>
 8023140:	2b25      	cmp	r3, #37	@ 0x25
 8023142:	d148      	bne.n	80231d6 <_vfiprintf_r+0x10e>
 8023144:	1b73      	subs	r3, r6, r5
 8023146:	9305      	str	r3, [sp, #20]
 8023148:	42ae      	cmp	r6, r5
 802314a:	d00b      	beq.n	8023164 <_vfiprintf_r+0x9c>
 802314c:	002a      	movs	r2, r5
 802314e:	0039      	movs	r1, r7
 8023150:	9803      	ldr	r0, [sp, #12]
 8023152:	f7ff ffa6 	bl	80230a2 <__sfputs_r>
 8023156:	3001      	adds	r0, #1
 8023158:	d100      	bne.n	802315c <_vfiprintf_r+0x94>
 802315a:	e0ae      	b.n	80232ba <_vfiprintf_r+0x1f2>
 802315c:	6963      	ldr	r3, [r4, #20]
 802315e:	9a05      	ldr	r2, [sp, #20]
 8023160:	189b      	adds	r3, r3, r2
 8023162:	6163      	str	r3, [r4, #20]
 8023164:	7833      	ldrb	r3, [r6, #0]
 8023166:	2b00      	cmp	r3, #0
 8023168:	d100      	bne.n	802316c <_vfiprintf_r+0xa4>
 802316a:	e0a6      	b.n	80232ba <_vfiprintf_r+0x1f2>
 802316c:	2201      	movs	r2, #1
 802316e:	2300      	movs	r3, #0
 8023170:	4252      	negs	r2, r2
 8023172:	6062      	str	r2, [r4, #4]
 8023174:	a904      	add	r1, sp, #16
 8023176:	3254      	adds	r2, #84	@ 0x54
 8023178:	1852      	adds	r2, r2, r1
 802317a:	1c75      	adds	r5, r6, #1
 802317c:	6023      	str	r3, [r4, #0]
 802317e:	60e3      	str	r3, [r4, #12]
 8023180:	60a3      	str	r3, [r4, #8]
 8023182:	7013      	strb	r3, [r2, #0]
 8023184:	65a3      	str	r3, [r4, #88]	@ 0x58
 8023186:	4b59      	ldr	r3, [pc, #356]	@ (80232ec <_vfiprintf_r+0x224>)
 8023188:	2205      	movs	r2, #5
 802318a:	0018      	movs	r0, r3
 802318c:	7829      	ldrb	r1, [r5, #0]
 802318e:	9305      	str	r3, [sp, #20]
 8023190:	f7fd fe2d 	bl	8020dee <memchr>
 8023194:	1c6e      	adds	r6, r5, #1
 8023196:	2800      	cmp	r0, #0
 8023198:	d11f      	bne.n	80231da <_vfiprintf_r+0x112>
 802319a:	6822      	ldr	r2, [r4, #0]
 802319c:	06d3      	lsls	r3, r2, #27
 802319e:	d504      	bpl.n	80231aa <_vfiprintf_r+0xe2>
 80231a0:	2353      	movs	r3, #83	@ 0x53
 80231a2:	a904      	add	r1, sp, #16
 80231a4:	185b      	adds	r3, r3, r1
 80231a6:	2120      	movs	r1, #32
 80231a8:	7019      	strb	r1, [r3, #0]
 80231aa:	0713      	lsls	r3, r2, #28
 80231ac:	d504      	bpl.n	80231b8 <_vfiprintf_r+0xf0>
 80231ae:	2353      	movs	r3, #83	@ 0x53
 80231b0:	a904      	add	r1, sp, #16
 80231b2:	185b      	adds	r3, r3, r1
 80231b4:	212b      	movs	r1, #43	@ 0x2b
 80231b6:	7019      	strb	r1, [r3, #0]
 80231b8:	782b      	ldrb	r3, [r5, #0]
 80231ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80231bc:	d016      	beq.n	80231ec <_vfiprintf_r+0x124>
 80231be:	002e      	movs	r6, r5
 80231c0:	2100      	movs	r1, #0
 80231c2:	200a      	movs	r0, #10
 80231c4:	68e3      	ldr	r3, [r4, #12]
 80231c6:	7832      	ldrb	r2, [r6, #0]
 80231c8:	1c75      	adds	r5, r6, #1
 80231ca:	3a30      	subs	r2, #48	@ 0x30
 80231cc:	2a09      	cmp	r2, #9
 80231ce:	d950      	bls.n	8023272 <_vfiprintf_r+0x1aa>
 80231d0:	2900      	cmp	r1, #0
 80231d2:	d111      	bne.n	80231f8 <_vfiprintf_r+0x130>
 80231d4:	e017      	b.n	8023206 <_vfiprintf_r+0x13e>
 80231d6:	3601      	adds	r6, #1
 80231d8:	e7af      	b.n	802313a <_vfiprintf_r+0x72>
 80231da:	9b05      	ldr	r3, [sp, #20]
 80231dc:	6822      	ldr	r2, [r4, #0]
 80231de:	1ac0      	subs	r0, r0, r3
 80231e0:	2301      	movs	r3, #1
 80231e2:	4083      	lsls	r3, r0
 80231e4:	4313      	orrs	r3, r2
 80231e6:	0035      	movs	r5, r6
 80231e8:	6023      	str	r3, [r4, #0]
 80231ea:	e7cc      	b.n	8023186 <_vfiprintf_r+0xbe>
 80231ec:	9b07      	ldr	r3, [sp, #28]
 80231ee:	1d19      	adds	r1, r3, #4
 80231f0:	681b      	ldr	r3, [r3, #0]
 80231f2:	9107      	str	r1, [sp, #28]
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	db01      	blt.n	80231fc <_vfiprintf_r+0x134>
 80231f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80231fa:	e004      	b.n	8023206 <_vfiprintf_r+0x13e>
 80231fc:	425b      	negs	r3, r3
 80231fe:	60e3      	str	r3, [r4, #12]
 8023200:	2302      	movs	r3, #2
 8023202:	4313      	orrs	r3, r2
 8023204:	6023      	str	r3, [r4, #0]
 8023206:	7833      	ldrb	r3, [r6, #0]
 8023208:	2b2e      	cmp	r3, #46	@ 0x2e
 802320a:	d10c      	bne.n	8023226 <_vfiprintf_r+0x15e>
 802320c:	7873      	ldrb	r3, [r6, #1]
 802320e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023210:	d134      	bne.n	802327c <_vfiprintf_r+0x1b4>
 8023212:	9b07      	ldr	r3, [sp, #28]
 8023214:	3602      	adds	r6, #2
 8023216:	1d1a      	adds	r2, r3, #4
 8023218:	681b      	ldr	r3, [r3, #0]
 802321a:	9207      	str	r2, [sp, #28]
 802321c:	2b00      	cmp	r3, #0
 802321e:	da01      	bge.n	8023224 <_vfiprintf_r+0x15c>
 8023220:	2301      	movs	r3, #1
 8023222:	425b      	negs	r3, r3
 8023224:	9309      	str	r3, [sp, #36]	@ 0x24
 8023226:	4d32      	ldr	r5, [pc, #200]	@ (80232f0 <_vfiprintf_r+0x228>)
 8023228:	2203      	movs	r2, #3
 802322a:	0028      	movs	r0, r5
 802322c:	7831      	ldrb	r1, [r6, #0]
 802322e:	f7fd fdde 	bl	8020dee <memchr>
 8023232:	2800      	cmp	r0, #0
 8023234:	d006      	beq.n	8023244 <_vfiprintf_r+0x17c>
 8023236:	2340      	movs	r3, #64	@ 0x40
 8023238:	1b40      	subs	r0, r0, r5
 802323a:	4083      	lsls	r3, r0
 802323c:	6822      	ldr	r2, [r4, #0]
 802323e:	3601      	adds	r6, #1
 8023240:	4313      	orrs	r3, r2
 8023242:	6023      	str	r3, [r4, #0]
 8023244:	7831      	ldrb	r1, [r6, #0]
 8023246:	2206      	movs	r2, #6
 8023248:	482a      	ldr	r0, [pc, #168]	@ (80232f4 <_vfiprintf_r+0x22c>)
 802324a:	1c75      	adds	r5, r6, #1
 802324c:	7621      	strb	r1, [r4, #24]
 802324e:	f7fd fdce 	bl	8020dee <memchr>
 8023252:	2800      	cmp	r0, #0
 8023254:	d040      	beq.n	80232d8 <_vfiprintf_r+0x210>
 8023256:	4b28      	ldr	r3, [pc, #160]	@ (80232f8 <_vfiprintf_r+0x230>)
 8023258:	2b00      	cmp	r3, #0
 802325a:	d122      	bne.n	80232a2 <_vfiprintf_r+0x1da>
 802325c:	2207      	movs	r2, #7
 802325e:	9b07      	ldr	r3, [sp, #28]
 8023260:	3307      	adds	r3, #7
 8023262:	4393      	bics	r3, r2
 8023264:	3308      	adds	r3, #8
 8023266:	9307      	str	r3, [sp, #28]
 8023268:	6963      	ldr	r3, [r4, #20]
 802326a:	9a04      	ldr	r2, [sp, #16]
 802326c:	189b      	adds	r3, r3, r2
 802326e:	6163      	str	r3, [r4, #20]
 8023270:	e762      	b.n	8023138 <_vfiprintf_r+0x70>
 8023272:	4343      	muls	r3, r0
 8023274:	002e      	movs	r6, r5
 8023276:	2101      	movs	r1, #1
 8023278:	189b      	adds	r3, r3, r2
 802327a:	e7a4      	b.n	80231c6 <_vfiprintf_r+0xfe>
 802327c:	2300      	movs	r3, #0
 802327e:	200a      	movs	r0, #10
 8023280:	0019      	movs	r1, r3
 8023282:	3601      	adds	r6, #1
 8023284:	6063      	str	r3, [r4, #4]
 8023286:	7832      	ldrb	r2, [r6, #0]
 8023288:	1c75      	adds	r5, r6, #1
 802328a:	3a30      	subs	r2, #48	@ 0x30
 802328c:	2a09      	cmp	r2, #9
 802328e:	d903      	bls.n	8023298 <_vfiprintf_r+0x1d0>
 8023290:	2b00      	cmp	r3, #0
 8023292:	d0c8      	beq.n	8023226 <_vfiprintf_r+0x15e>
 8023294:	9109      	str	r1, [sp, #36]	@ 0x24
 8023296:	e7c6      	b.n	8023226 <_vfiprintf_r+0x15e>
 8023298:	4341      	muls	r1, r0
 802329a:	002e      	movs	r6, r5
 802329c:	2301      	movs	r3, #1
 802329e:	1889      	adds	r1, r1, r2
 80232a0:	e7f1      	b.n	8023286 <_vfiprintf_r+0x1be>
 80232a2:	aa07      	add	r2, sp, #28
 80232a4:	9200      	str	r2, [sp, #0]
 80232a6:	0021      	movs	r1, r4
 80232a8:	003a      	movs	r2, r7
 80232aa:	4b14      	ldr	r3, [pc, #80]	@ (80232fc <_vfiprintf_r+0x234>)
 80232ac:	9803      	ldr	r0, [sp, #12]
 80232ae:	f7fc fe77 	bl	801ffa0 <_printf_float>
 80232b2:	9004      	str	r0, [sp, #16]
 80232b4:	9b04      	ldr	r3, [sp, #16]
 80232b6:	3301      	adds	r3, #1
 80232b8:	d1d6      	bne.n	8023268 <_vfiprintf_r+0x1a0>
 80232ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80232bc:	07db      	lsls	r3, r3, #31
 80232be:	d405      	bmi.n	80232cc <_vfiprintf_r+0x204>
 80232c0:	89bb      	ldrh	r3, [r7, #12]
 80232c2:	059b      	lsls	r3, r3, #22
 80232c4:	d402      	bmi.n	80232cc <_vfiprintf_r+0x204>
 80232c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80232c8:	f7fd fd90 	bl	8020dec <__retarget_lock_release_recursive>
 80232cc:	89bb      	ldrh	r3, [r7, #12]
 80232ce:	065b      	lsls	r3, r3, #25
 80232d0:	d500      	bpl.n	80232d4 <_vfiprintf_r+0x20c>
 80232d2:	e71e      	b.n	8023112 <_vfiprintf_r+0x4a>
 80232d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80232d6:	e71e      	b.n	8023116 <_vfiprintf_r+0x4e>
 80232d8:	aa07      	add	r2, sp, #28
 80232da:	9200      	str	r2, [sp, #0]
 80232dc:	0021      	movs	r1, r4
 80232de:	003a      	movs	r2, r7
 80232e0:	4b06      	ldr	r3, [pc, #24]	@ (80232fc <_vfiprintf_r+0x234>)
 80232e2:	9803      	ldr	r0, [sp, #12]
 80232e4:	f7fd f90a 	bl	80204fc <_printf_i>
 80232e8:	e7e3      	b.n	80232b2 <_vfiprintf_r+0x1ea>
 80232ea:	46c0      	nop			@ (mov r8, r8)
 80232ec:	08027038 	.word	0x08027038
 80232f0:	0802703e 	.word	0x0802703e
 80232f4:	08027042 	.word	0x08027042
 80232f8:	0801ffa1 	.word	0x0801ffa1
 80232fc:	080230a3 	.word	0x080230a3

08023300 <__sflush_r>:
 8023300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023302:	220c      	movs	r2, #12
 8023304:	5e8b      	ldrsh	r3, [r1, r2]
 8023306:	0005      	movs	r5, r0
 8023308:	000c      	movs	r4, r1
 802330a:	071a      	lsls	r2, r3, #28
 802330c:	d456      	bmi.n	80233bc <__sflush_r+0xbc>
 802330e:	684a      	ldr	r2, [r1, #4]
 8023310:	2a00      	cmp	r2, #0
 8023312:	dc02      	bgt.n	802331a <__sflush_r+0x1a>
 8023314:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8023316:	2a00      	cmp	r2, #0
 8023318:	dd4e      	ble.n	80233b8 <__sflush_r+0xb8>
 802331a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 802331c:	2f00      	cmp	r7, #0
 802331e:	d04b      	beq.n	80233b8 <__sflush_r+0xb8>
 8023320:	2200      	movs	r2, #0
 8023322:	2080      	movs	r0, #128	@ 0x80
 8023324:	682e      	ldr	r6, [r5, #0]
 8023326:	602a      	str	r2, [r5, #0]
 8023328:	001a      	movs	r2, r3
 802332a:	0140      	lsls	r0, r0, #5
 802332c:	6a21      	ldr	r1, [r4, #32]
 802332e:	4002      	ands	r2, r0
 8023330:	4203      	tst	r3, r0
 8023332:	d033      	beq.n	802339c <__sflush_r+0x9c>
 8023334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023336:	89a3      	ldrh	r3, [r4, #12]
 8023338:	075b      	lsls	r3, r3, #29
 802333a:	d506      	bpl.n	802334a <__sflush_r+0x4a>
 802333c:	6863      	ldr	r3, [r4, #4]
 802333e:	1ad2      	subs	r2, r2, r3
 8023340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023342:	2b00      	cmp	r3, #0
 8023344:	d001      	beq.n	802334a <__sflush_r+0x4a>
 8023346:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023348:	1ad2      	subs	r2, r2, r3
 802334a:	2300      	movs	r3, #0
 802334c:	0028      	movs	r0, r5
 802334e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8023350:	6a21      	ldr	r1, [r4, #32]
 8023352:	47b8      	blx	r7
 8023354:	89a2      	ldrh	r2, [r4, #12]
 8023356:	1c43      	adds	r3, r0, #1
 8023358:	d106      	bne.n	8023368 <__sflush_r+0x68>
 802335a:	6829      	ldr	r1, [r5, #0]
 802335c:	291d      	cmp	r1, #29
 802335e:	d846      	bhi.n	80233ee <__sflush_r+0xee>
 8023360:	4b29      	ldr	r3, [pc, #164]	@ (8023408 <__sflush_r+0x108>)
 8023362:	410b      	asrs	r3, r1
 8023364:	07db      	lsls	r3, r3, #31
 8023366:	d442      	bmi.n	80233ee <__sflush_r+0xee>
 8023368:	2300      	movs	r3, #0
 802336a:	6063      	str	r3, [r4, #4]
 802336c:	6923      	ldr	r3, [r4, #16]
 802336e:	6023      	str	r3, [r4, #0]
 8023370:	04d2      	lsls	r2, r2, #19
 8023372:	d505      	bpl.n	8023380 <__sflush_r+0x80>
 8023374:	1c43      	adds	r3, r0, #1
 8023376:	d102      	bne.n	802337e <__sflush_r+0x7e>
 8023378:	682b      	ldr	r3, [r5, #0]
 802337a:	2b00      	cmp	r3, #0
 802337c:	d100      	bne.n	8023380 <__sflush_r+0x80>
 802337e:	6560      	str	r0, [r4, #84]	@ 0x54
 8023380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023382:	602e      	str	r6, [r5, #0]
 8023384:	2900      	cmp	r1, #0
 8023386:	d017      	beq.n	80233b8 <__sflush_r+0xb8>
 8023388:	0023      	movs	r3, r4
 802338a:	3344      	adds	r3, #68	@ 0x44
 802338c:	4299      	cmp	r1, r3
 802338e:	d002      	beq.n	8023396 <__sflush_r+0x96>
 8023390:	0028      	movs	r0, r5
 8023392:	f7fe fbc9 	bl	8021b28 <_free_r>
 8023396:	2300      	movs	r3, #0
 8023398:	6363      	str	r3, [r4, #52]	@ 0x34
 802339a:	e00d      	b.n	80233b8 <__sflush_r+0xb8>
 802339c:	2301      	movs	r3, #1
 802339e:	0028      	movs	r0, r5
 80233a0:	47b8      	blx	r7
 80233a2:	0002      	movs	r2, r0
 80233a4:	1c43      	adds	r3, r0, #1
 80233a6:	d1c6      	bne.n	8023336 <__sflush_r+0x36>
 80233a8:	682b      	ldr	r3, [r5, #0]
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d0c3      	beq.n	8023336 <__sflush_r+0x36>
 80233ae:	2b1d      	cmp	r3, #29
 80233b0:	d001      	beq.n	80233b6 <__sflush_r+0xb6>
 80233b2:	2b16      	cmp	r3, #22
 80233b4:	d11a      	bne.n	80233ec <__sflush_r+0xec>
 80233b6:	602e      	str	r6, [r5, #0]
 80233b8:	2000      	movs	r0, #0
 80233ba:	e01e      	b.n	80233fa <__sflush_r+0xfa>
 80233bc:	690e      	ldr	r6, [r1, #16]
 80233be:	2e00      	cmp	r6, #0
 80233c0:	d0fa      	beq.n	80233b8 <__sflush_r+0xb8>
 80233c2:	680f      	ldr	r7, [r1, #0]
 80233c4:	600e      	str	r6, [r1, #0]
 80233c6:	1bba      	subs	r2, r7, r6
 80233c8:	9201      	str	r2, [sp, #4]
 80233ca:	2200      	movs	r2, #0
 80233cc:	079b      	lsls	r3, r3, #30
 80233ce:	d100      	bne.n	80233d2 <__sflush_r+0xd2>
 80233d0:	694a      	ldr	r2, [r1, #20]
 80233d2:	60a2      	str	r2, [r4, #8]
 80233d4:	9b01      	ldr	r3, [sp, #4]
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	ddee      	ble.n	80233b8 <__sflush_r+0xb8>
 80233da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80233dc:	0032      	movs	r2, r6
 80233de:	001f      	movs	r7, r3
 80233e0:	0028      	movs	r0, r5
 80233e2:	9b01      	ldr	r3, [sp, #4]
 80233e4:	6a21      	ldr	r1, [r4, #32]
 80233e6:	47b8      	blx	r7
 80233e8:	2800      	cmp	r0, #0
 80233ea:	dc07      	bgt.n	80233fc <__sflush_r+0xfc>
 80233ec:	89a2      	ldrh	r2, [r4, #12]
 80233ee:	2340      	movs	r3, #64	@ 0x40
 80233f0:	2001      	movs	r0, #1
 80233f2:	4313      	orrs	r3, r2
 80233f4:	b21b      	sxth	r3, r3
 80233f6:	81a3      	strh	r3, [r4, #12]
 80233f8:	4240      	negs	r0, r0
 80233fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80233fc:	9b01      	ldr	r3, [sp, #4]
 80233fe:	1836      	adds	r6, r6, r0
 8023400:	1a1b      	subs	r3, r3, r0
 8023402:	9301      	str	r3, [sp, #4]
 8023404:	e7e6      	b.n	80233d4 <__sflush_r+0xd4>
 8023406:	46c0      	nop			@ (mov r8, r8)
 8023408:	dfbffffe 	.word	0xdfbffffe

0802340c <_fflush_r>:
 802340c:	690b      	ldr	r3, [r1, #16]
 802340e:	b570      	push	{r4, r5, r6, lr}
 8023410:	0005      	movs	r5, r0
 8023412:	000c      	movs	r4, r1
 8023414:	2b00      	cmp	r3, #0
 8023416:	d102      	bne.n	802341e <_fflush_r+0x12>
 8023418:	2500      	movs	r5, #0
 802341a:	0028      	movs	r0, r5
 802341c:	bd70      	pop	{r4, r5, r6, pc}
 802341e:	2800      	cmp	r0, #0
 8023420:	d004      	beq.n	802342c <_fflush_r+0x20>
 8023422:	6a03      	ldr	r3, [r0, #32]
 8023424:	2b00      	cmp	r3, #0
 8023426:	d101      	bne.n	802342c <_fflush_r+0x20>
 8023428:	f7fd fa06 	bl	8020838 <__sinit>
 802342c:	220c      	movs	r2, #12
 802342e:	5ea3      	ldrsh	r3, [r4, r2]
 8023430:	2b00      	cmp	r3, #0
 8023432:	d0f1      	beq.n	8023418 <_fflush_r+0xc>
 8023434:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023436:	07d2      	lsls	r2, r2, #31
 8023438:	d404      	bmi.n	8023444 <_fflush_r+0x38>
 802343a:	059b      	lsls	r3, r3, #22
 802343c:	d402      	bmi.n	8023444 <_fflush_r+0x38>
 802343e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023440:	f7fd fcd3 	bl	8020dea <__retarget_lock_acquire_recursive>
 8023444:	0028      	movs	r0, r5
 8023446:	0021      	movs	r1, r4
 8023448:	f7ff ff5a 	bl	8023300 <__sflush_r>
 802344c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802344e:	0005      	movs	r5, r0
 8023450:	07db      	lsls	r3, r3, #31
 8023452:	d4e2      	bmi.n	802341a <_fflush_r+0xe>
 8023454:	89a3      	ldrh	r3, [r4, #12]
 8023456:	059b      	lsls	r3, r3, #22
 8023458:	d4df      	bmi.n	802341a <_fflush_r+0xe>
 802345a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802345c:	f7fd fcc6 	bl	8020dec <__retarget_lock_release_recursive>
 8023460:	e7db      	b.n	802341a <_fflush_r+0xe>
	...

08023464 <__swhatbuf_r>:
 8023464:	b570      	push	{r4, r5, r6, lr}
 8023466:	000e      	movs	r6, r1
 8023468:	001d      	movs	r5, r3
 802346a:	230e      	movs	r3, #14
 802346c:	5ec9      	ldrsh	r1, [r1, r3]
 802346e:	0014      	movs	r4, r2
 8023470:	b096      	sub	sp, #88	@ 0x58
 8023472:	2900      	cmp	r1, #0
 8023474:	da0c      	bge.n	8023490 <__swhatbuf_r+0x2c>
 8023476:	89b2      	ldrh	r2, [r6, #12]
 8023478:	2380      	movs	r3, #128	@ 0x80
 802347a:	0011      	movs	r1, r2
 802347c:	4019      	ands	r1, r3
 802347e:	421a      	tst	r2, r3
 8023480:	d114      	bne.n	80234ac <__swhatbuf_r+0x48>
 8023482:	2380      	movs	r3, #128	@ 0x80
 8023484:	00db      	lsls	r3, r3, #3
 8023486:	2000      	movs	r0, #0
 8023488:	6029      	str	r1, [r5, #0]
 802348a:	6023      	str	r3, [r4, #0]
 802348c:	b016      	add	sp, #88	@ 0x58
 802348e:	bd70      	pop	{r4, r5, r6, pc}
 8023490:	466a      	mov	r2, sp
 8023492:	f000 f865 	bl	8023560 <_fstat_r>
 8023496:	2800      	cmp	r0, #0
 8023498:	dbed      	blt.n	8023476 <__swhatbuf_r+0x12>
 802349a:	23f0      	movs	r3, #240	@ 0xf0
 802349c:	9901      	ldr	r1, [sp, #4]
 802349e:	021b      	lsls	r3, r3, #8
 80234a0:	4019      	ands	r1, r3
 80234a2:	4b04      	ldr	r3, [pc, #16]	@ (80234b4 <__swhatbuf_r+0x50>)
 80234a4:	18c9      	adds	r1, r1, r3
 80234a6:	424b      	negs	r3, r1
 80234a8:	4159      	adcs	r1, r3
 80234aa:	e7ea      	b.n	8023482 <__swhatbuf_r+0x1e>
 80234ac:	2100      	movs	r1, #0
 80234ae:	2340      	movs	r3, #64	@ 0x40
 80234b0:	e7e9      	b.n	8023486 <__swhatbuf_r+0x22>
 80234b2:	46c0      	nop			@ (mov r8, r8)
 80234b4:	ffffe000 	.word	0xffffe000

080234b8 <__smakebuf_r>:
 80234b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80234ba:	2602      	movs	r6, #2
 80234bc:	898b      	ldrh	r3, [r1, #12]
 80234be:	0005      	movs	r5, r0
 80234c0:	000c      	movs	r4, r1
 80234c2:	b085      	sub	sp, #20
 80234c4:	4233      	tst	r3, r6
 80234c6:	d007      	beq.n	80234d8 <__smakebuf_r+0x20>
 80234c8:	0023      	movs	r3, r4
 80234ca:	3347      	adds	r3, #71	@ 0x47
 80234cc:	6023      	str	r3, [r4, #0]
 80234ce:	6123      	str	r3, [r4, #16]
 80234d0:	2301      	movs	r3, #1
 80234d2:	6163      	str	r3, [r4, #20]
 80234d4:	b005      	add	sp, #20
 80234d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234d8:	ab03      	add	r3, sp, #12
 80234da:	aa02      	add	r2, sp, #8
 80234dc:	f7ff ffc2 	bl	8023464 <__swhatbuf_r>
 80234e0:	9f02      	ldr	r7, [sp, #8]
 80234e2:	9001      	str	r0, [sp, #4]
 80234e4:	0039      	movs	r1, r7
 80234e6:	0028      	movs	r0, r5
 80234e8:	f7fe feee 	bl	80222c8 <_malloc_r>
 80234ec:	2800      	cmp	r0, #0
 80234ee:	d108      	bne.n	8023502 <__smakebuf_r+0x4a>
 80234f0:	220c      	movs	r2, #12
 80234f2:	5ea3      	ldrsh	r3, [r4, r2]
 80234f4:	059a      	lsls	r2, r3, #22
 80234f6:	d4ed      	bmi.n	80234d4 <__smakebuf_r+0x1c>
 80234f8:	2203      	movs	r2, #3
 80234fa:	4393      	bics	r3, r2
 80234fc:	431e      	orrs	r6, r3
 80234fe:	81a6      	strh	r6, [r4, #12]
 8023500:	e7e2      	b.n	80234c8 <__smakebuf_r+0x10>
 8023502:	2380      	movs	r3, #128	@ 0x80
 8023504:	89a2      	ldrh	r2, [r4, #12]
 8023506:	6020      	str	r0, [r4, #0]
 8023508:	4313      	orrs	r3, r2
 802350a:	81a3      	strh	r3, [r4, #12]
 802350c:	9b03      	ldr	r3, [sp, #12]
 802350e:	6120      	str	r0, [r4, #16]
 8023510:	6167      	str	r7, [r4, #20]
 8023512:	2b00      	cmp	r3, #0
 8023514:	d00c      	beq.n	8023530 <__smakebuf_r+0x78>
 8023516:	0028      	movs	r0, r5
 8023518:	230e      	movs	r3, #14
 802351a:	5ee1      	ldrsh	r1, [r4, r3]
 802351c:	f000 f832 	bl	8023584 <_isatty_r>
 8023520:	2800      	cmp	r0, #0
 8023522:	d005      	beq.n	8023530 <__smakebuf_r+0x78>
 8023524:	2303      	movs	r3, #3
 8023526:	89a2      	ldrh	r2, [r4, #12]
 8023528:	439a      	bics	r2, r3
 802352a:	3b02      	subs	r3, #2
 802352c:	4313      	orrs	r3, r2
 802352e:	81a3      	strh	r3, [r4, #12]
 8023530:	89a3      	ldrh	r3, [r4, #12]
 8023532:	9a01      	ldr	r2, [sp, #4]
 8023534:	4313      	orrs	r3, r2
 8023536:	81a3      	strh	r3, [r4, #12]
 8023538:	e7cc      	b.n	80234d4 <__smakebuf_r+0x1c>

0802353a <memmove>:
 802353a:	b510      	push	{r4, lr}
 802353c:	4288      	cmp	r0, r1
 802353e:	d806      	bhi.n	802354e <memmove+0x14>
 8023540:	2300      	movs	r3, #0
 8023542:	429a      	cmp	r2, r3
 8023544:	d008      	beq.n	8023558 <memmove+0x1e>
 8023546:	5ccc      	ldrb	r4, [r1, r3]
 8023548:	54c4      	strb	r4, [r0, r3]
 802354a:	3301      	adds	r3, #1
 802354c:	e7f9      	b.n	8023542 <memmove+0x8>
 802354e:	188b      	adds	r3, r1, r2
 8023550:	4298      	cmp	r0, r3
 8023552:	d2f5      	bcs.n	8023540 <memmove+0x6>
 8023554:	3a01      	subs	r2, #1
 8023556:	d200      	bcs.n	802355a <memmove+0x20>
 8023558:	bd10      	pop	{r4, pc}
 802355a:	5c8b      	ldrb	r3, [r1, r2]
 802355c:	5483      	strb	r3, [r0, r2]
 802355e:	e7f9      	b.n	8023554 <memmove+0x1a>

08023560 <_fstat_r>:
 8023560:	2300      	movs	r3, #0
 8023562:	b570      	push	{r4, r5, r6, lr}
 8023564:	4d06      	ldr	r5, [pc, #24]	@ (8023580 <_fstat_r+0x20>)
 8023566:	0004      	movs	r4, r0
 8023568:	0008      	movs	r0, r1
 802356a:	0011      	movs	r1, r2
 802356c:	602b      	str	r3, [r5, #0]
 802356e:	f7eb f85b 	bl	800e628 <_fstat>
 8023572:	1c43      	adds	r3, r0, #1
 8023574:	d103      	bne.n	802357e <_fstat_r+0x1e>
 8023576:	682b      	ldr	r3, [r5, #0]
 8023578:	2b00      	cmp	r3, #0
 802357a:	d000      	beq.n	802357e <_fstat_r+0x1e>
 802357c:	6023      	str	r3, [r4, #0]
 802357e:	bd70      	pop	{r4, r5, r6, pc}
 8023580:	200034ac 	.word	0x200034ac

08023584 <_isatty_r>:
 8023584:	2300      	movs	r3, #0
 8023586:	b570      	push	{r4, r5, r6, lr}
 8023588:	4d06      	ldr	r5, [pc, #24]	@ (80235a4 <_isatty_r+0x20>)
 802358a:	0004      	movs	r4, r0
 802358c:	0008      	movs	r0, r1
 802358e:	602b      	str	r3, [r5, #0]
 8023590:	f7eb f858 	bl	800e644 <_isatty>
 8023594:	1c43      	adds	r3, r0, #1
 8023596:	d103      	bne.n	80235a0 <_isatty_r+0x1c>
 8023598:	682b      	ldr	r3, [r5, #0]
 802359a:	2b00      	cmp	r3, #0
 802359c:	d000      	beq.n	80235a0 <_isatty_r+0x1c>
 802359e:	6023      	str	r3, [r4, #0]
 80235a0:	bd70      	pop	{r4, r5, r6, pc}
 80235a2:	46c0      	nop			@ (mov r8, r8)
 80235a4:	200034ac 	.word	0x200034ac

080235a8 <_sbrk_r>:
 80235a8:	2300      	movs	r3, #0
 80235aa:	b570      	push	{r4, r5, r6, lr}
 80235ac:	4d06      	ldr	r5, [pc, #24]	@ (80235c8 <_sbrk_r+0x20>)
 80235ae:	0004      	movs	r4, r0
 80235b0:	0008      	movs	r0, r1
 80235b2:	602b      	str	r3, [r5, #0]
 80235b4:	f7eb f85a 	bl	800e66c <_sbrk>
 80235b8:	1c43      	adds	r3, r0, #1
 80235ba:	d103      	bne.n	80235c4 <_sbrk_r+0x1c>
 80235bc:	682b      	ldr	r3, [r5, #0]
 80235be:	2b00      	cmp	r3, #0
 80235c0:	d000      	beq.n	80235c4 <_sbrk_r+0x1c>
 80235c2:	6023      	str	r3, [r4, #0]
 80235c4:	bd70      	pop	{r4, r5, r6, pc}
 80235c6:	46c0      	nop			@ (mov r8, r8)
 80235c8:	200034ac 	.word	0x200034ac

080235cc <__assert_func>:
 80235cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80235ce:	0014      	movs	r4, r2
 80235d0:	001a      	movs	r2, r3
 80235d2:	4b09      	ldr	r3, [pc, #36]	@ (80235f8 <__assert_func+0x2c>)
 80235d4:	0005      	movs	r5, r0
 80235d6:	681b      	ldr	r3, [r3, #0]
 80235d8:	000e      	movs	r6, r1
 80235da:	68d8      	ldr	r0, [r3, #12]
 80235dc:	4b07      	ldr	r3, [pc, #28]	@ (80235fc <__assert_func+0x30>)
 80235de:	2c00      	cmp	r4, #0
 80235e0:	d101      	bne.n	80235e6 <__assert_func+0x1a>
 80235e2:	4b07      	ldr	r3, [pc, #28]	@ (8023600 <__assert_func+0x34>)
 80235e4:	001c      	movs	r4, r3
 80235e6:	4907      	ldr	r1, [pc, #28]	@ (8023604 <__assert_func+0x38>)
 80235e8:	9301      	str	r3, [sp, #4]
 80235ea:	9402      	str	r4, [sp, #8]
 80235ec:	002b      	movs	r3, r5
 80235ee:	9600      	str	r6, [sp, #0]
 80235f0:	f000 f866 	bl	80236c0 <fiprintf>
 80235f4:	f000 f874 	bl	80236e0 <abort>
 80235f8:	200003d0 	.word	0x200003d0
 80235fc:	08027049 	.word	0x08027049
 8023600:	08027084 	.word	0x08027084
 8023604:	08027056 	.word	0x08027056

08023608 <_calloc_r>:
 8023608:	b570      	push	{r4, r5, r6, lr}
 802360a:	0c0b      	lsrs	r3, r1, #16
 802360c:	0c15      	lsrs	r5, r2, #16
 802360e:	2b00      	cmp	r3, #0
 8023610:	d11e      	bne.n	8023650 <_calloc_r+0x48>
 8023612:	2d00      	cmp	r5, #0
 8023614:	d10c      	bne.n	8023630 <_calloc_r+0x28>
 8023616:	b289      	uxth	r1, r1
 8023618:	b294      	uxth	r4, r2
 802361a:	434c      	muls	r4, r1
 802361c:	0021      	movs	r1, r4
 802361e:	f7fe fe53 	bl	80222c8 <_malloc_r>
 8023622:	1e05      	subs	r5, r0, #0
 8023624:	d01a      	beq.n	802365c <_calloc_r+0x54>
 8023626:	0022      	movs	r2, r4
 8023628:	2100      	movs	r1, #0
 802362a:	f7fd fb0f 	bl	8020c4c <memset>
 802362e:	e016      	b.n	802365e <_calloc_r+0x56>
 8023630:	1c2b      	adds	r3, r5, #0
 8023632:	1c0c      	adds	r4, r1, #0
 8023634:	b289      	uxth	r1, r1
 8023636:	b292      	uxth	r2, r2
 8023638:	434a      	muls	r2, r1
 802363a:	b29b      	uxth	r3, r3
 802363c:	b2a1      	uxth	r1, r4
 802363e:	4359      	muls	r1, r3
 8023640:	0c14      	lsrs	r4, r2, #16
 8023642:	190c      	adds	r4, r1, r4
 8023644:	0c23      	lsrs	r3, r4, #16
 8023646:	d107      	bne.n	8023658 <_calloc_r+0x50>
 8023648:	0424      	lsls	r4, r4, #16
 802364a:	b292      	uxth	r2, r2
 802364c:	4314      	orrs	r4, r2
 802364e:	e7e5      	b.n	802361c <_calloc_r+0x14>
 8023650:	2d00      	cmp	r5, #0
 8023652:	d101      	bne.n	8023658 <_calloc_r+0x50>
 8023654:	1c14      	adds	r4, r2, #0
 8023656:	e7ed      	b.n	8023634 <_calloc_r+0x2c>
 8023658:	230c      	movs	r3, #12
 802365a:	6003      	str	r3, [r0, #0]
 802365c:	2500      	movs	r5, #0
 802365e:	0028      	movs	r0, r5
 8023660:	bd70      	pop	{r4, r5, r6, pc}

08023662 <_realloc_r>:
 8023662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023664:	0006      	movs	r6, r0
 8023666:	000c      	movs	r4, r1
 8023668:	0015      	movs	r5, r2
 802366a:	2900      	cmp	r1, #0
 802366c:	d105      	bne.n	802367a <_realloc_r+0x18>
 802366e:	0011      	movs	r1, r2
 8023670:	f7fe fe2a 	bl	80222c8 <_malloc_r>
 8023674:	0004      	movs	r4, r0
 8023676:	0020      	movs	r0, r4
 8023678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802367a:	2a00      	cmp	r2, #0
 802367c:	d103      	bne.n	8023686 <_realloc_r+0x24>
 802367e:	f7fe fa53 	bl	8021b28 <_free_r>
 8023682:	2400      	movs	r4, #0
 8023684:	e7f7      	b.n	8023676 <_realloc_r+0x14>
 8023686:	f000 f832 	bl	80236ee <_malloc_usable_size_r>
 802368a:	0007      	movs	r7, r0
 802368c:	4285      	cmp	r5, r0
 802368e:	d802      	bhi.n	8023696 <_realloc_r+0x34>
 8023690:	0843      	lsrs	r3, r0, #1
 8023692:	42ab      	cmp	r3, r5
 8023694:	d3ef      	bcc.n	8023676 <_realloc_r+0x14>
 8023696:	0029      	movs	r1, r5
 8023698:	0030      	movs	r0, r6
 802369a:	f7fe fe15 	bl	80222c8 <_malloc_r>
 802369e:	9001      	str	r0, [sp, #4]
 80236a0:	2800      	cmp	r0, #0
 80236a2:	d0ee      	beq.n	8023682 <_realloc_r+0x20>
 80236a4:	002a      	movs	r2, r5
 80236a6:	42bd      	cmp	r5, r7
 80236a8:	d900      	bls.n	80236ac <_realloc_r+0x4a>
 80236aa:	003a      	movs	r2, r7
 80236ac:	0021      	movs	r1, r4
 80236ae:	9801      	ldr	r0, [sp, #4]
 80236b0:	f7fd fba8 	bl	8020e04 <memcpy>
 80236b4:	0021      	movs	r1, r4
 80236b6:	0030      	movs	r0, r6
 80236b8:	f7fe fa36 	bl	8021b28 <_free_r>
 80236bc:	9c01      	ldr	r4, [sp, #4]
 80236be:	e7da      	b.n	8023676 <_realloc_r+0x14>

080236c0 <fiprintf>:
 80236c0:	b40e      	push	{r1, r2, r3}
 80236c2:	b517      	push	{r0, r1, r2, r4, lr}
 80236c4:	4c05      	ldr	r4, [pc, #20]	@ (80236dc <fiprintf+0x1c>)
 80236c6:	ab05      	add	r3, sp, #20
 80236c8:	cb04      	ldmia	r3!, {r2}
 80236ca:	0001      	movs	r1, r0
 80236cc:	6820      	ldr	r0, [r4, #0]
 80236ce:	9301      	str	r3, [sp, #4]
 80236d0:	f7ff fcfa 	bl	80230c8 <_vfiprintf_r>
 80236d4:	bc1e      	pop	{r1, r2, r3, r4}
 80236d6:	bc08      	pop	{r3}
 80236d8:	b003      	add	sp, #12
 80236da:	4718      	bx	r3
 80236dc:	200003d0 	.word	0x200003d0

080236e0 <abort>:
 80236e0:	2006      	movs	r0, #6
 80236e2:	b510      	push	{r4, lr}
 80236e4:	f000 f834 	bl	8023750 <raise>
 80236e8:	2001      	movs	r0, #1
 80236ea:	f7ea ff69 	bl	800e5c0 <_exit>

080236ee <_malloc_usable_size_r>:
 80236ee:	1f0b      	subs	r3, r1, #4
 80236f0:	681b      	ldr	r3, [r3, #0]
 80236f2:	1f18      	subs	r0, r3, #4
 80236f4:	2b00      	cmp	r3, #0
 80236f6:	da01      	bge.n	80236fc <_malloc_usable_size_r+0xe>
 80236f8:	580b      	ldr	r3, [r1, r0]
 80236fa:	18c0      	adds	r0, r0, r3
 80236fc:	4770      	bx	lr

080236fe <_raise_r>:
 80236fe:	b570      	push	{r4, r5, r6, lr}
 8023700:	0004      	movs	r4, r0
 8023702:	000d      	movs	r5, r1
 8023704:	291f      	cmp	r1, #31
 8023706:	d904      	bls.n	8023712 <_raise_r+0x14>
 8023708:	2316      	movs	r3, #22
 802370a:	6003      	str	r3, [r0, #0]
 802370c:	2001      	movs	r0, #1
 802370e:	4240      	negs	r0, r0
 8023710:	bd70      	pop	{r4, r5, r6, pc}
 8023712:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8023714:	2b00      	cmp	r3, #0
 8023716:	d004      	beq.n	8023722 <_raise_r+0x24>
 8023718:	008a      	lsls	r2, r1, #2
 802371a:	189b      	adds	r3, r3, r2
 802371c:	681a      	ldr	r2, [r3, #0]
 802371e:	2a00      	cmp	r2, #0
 8023720:	d108      	bne.n	8023734 <_raise_r+0x36>
 8023722:	0020      	movs	r0, r4
 8023724:	f000 f830 	bl	8023788 <_getpid_r>
 8023728:	002a      	movs	r2, r5
 802372a:	0001      	movs	r1, r0
 802372c:	0020      	movs	r0, r4
 802372e:	f000 f819 	bl	8023764 <_kill_r>
 8023732:	e7ed      	b.n	8023710 <_raise_r+0x12>
 8023734:	2a01      	cmp	r2, #1
 8023736:	d009      	beq.n	802374c <_raise_r+0x4e>
 8023738:	1c51      	adds	r1, r2, #1
 802373a:	d103      	bne.n	8023744 <_raise_r+0x46>
 802373c:	2316      	movs	r3, #22
 802373e:	6003      	str	r3, [r0, #0]
 8023740:	2001      	movs	r0, #1
 8023742:	e7e5      	b.n	8023710 <_raise_r+0x12>
 8023744:	2100      	movs	r1, #0
 8023746:	0028      	movs	r0, r5
 8023748:	6019      	str	r1, [r3, #0]
 802374a:	4790      	blx	r2
 802374c:	2000      	movs	r0, #0
 802374e:	e7df      	b.n	8023710 <_raise_r+0x12>

08023750 <raise>:
 8023750:	b510      	push	{r4, lr}
 8023752:	4b03      	ldr	r3, [pc, #12]	@ (8023760 <raise+0x10>)
 8023754:	0001      	movs	r1, r0
 8023756:	6818      	ldr	r0, [r3, #0]
 8023758:	f7ff ffd1 	bl	80236fe <_raise_r>
 802375c:	bd10      	pop	{r4, pc}
 802375e:	46c0      	nop			@ (mov r8, r8)
 8023760:	200003d0 	.word	0x200003d0

08023764 <_kill_r>:
 8023764:	2300      	movs	r3, #0
 8023766:	b570      	push	{r4, r5, r6, lr}
 8023768:	4d06      	ldr	r5, [pc, #24]	@ (8023784 <_kill_r+0x20>)
 802376a:	0004      	movs	r4, r0
 802376c:	0008      	movs	r0, r1
 802376e:	0011      	movs	r1, r2
 8023770:	602b      	str	r3, [r5, #0]
 8023772:	f7ea ff15 	bl	800e5a0 <_kill>
 8023776:	1c43      	adds	r3, r0, #1
 8023778:	d103      	bne.n	8023782 <_kill_r+0x1e>
 802377a:	682b      	ldr	r3, [r5, #0]
 802377c:	2b00      	cmp	r3, #0
 802377e:	d000      	beq.n	8023782 <_kill_r+0x1e>
 8023780:	6023      	str	r3, [r4, #0]
 8023782:	bd70      	pop	{r4, r5, r6, pc}
 8023784:	200034ac 	.word	0x200034ac

08023788 <_getpid_r>:
 8023788:	b510      	push	{r4, lr}
 802378a:	f7ea ff03 	bl	800e594 <_getpid>
 802378e:	bd10      	pop	{r4, pc}

08023790 <expf>:
 8023790:	b570      	push	{r4, r5, r6, lr}
 8023792:	1c04      	adds	r4, r0, #0
 8023794:	f000 f8e6 	bl	8023964 <__ieee754_expf>
 8023798:	1c05      	adds	r5, r0, #0
 802379a:	1c20      	adds	r0, r4, #0
 802379c:	f000 f83c 	bl	8023818 <finitef>
 80237a0:	2800      	cmp	r0, #0
 80237a2:	d00b      	beq.n	80237bc <expf+0x2c>
 80237a4:	490c      	ldr	r1, [pc, #48]	@ (80237d8 <expf+0x48>)
 80237a6:	1c20      	adds	r0, r4, #0
 80237a8:	f7dc fed6 	bl	8000558 <__aeabi_fcmpgt>
 80237ac:	2800      	cmp	r0, #0
 80237ae:	d007      	beq.n	80237c0 <expf+0x30>
 80237b0:	f7fd faf0 	bl	8020d94 <__errno>
 80237b4:	25ff      	movs	r5, #255	@ 0xff
 80237b6:	2322      	movs	r3, #34	@ 0x22
 80237b8:	05ed      	lsls	r5, r5, #23
 80237ba:	6003      	str	r3, [r0, #0]
 80237bc:	1c28      	adds	r0, r5, #0
 80237be:	bd70      	pop	{r4, r5, r6, pc}
 80237c0:	4906      	ldr	r1, [pc, #24]	@ (80237dc <expf+0x4c>)
 80237c2:	1c20      	adds	r0, r4, #0
 80237c4:	f7dc feb4 	bl	8000530 <__aeabi_fcmplt>
 80237c8:	2800      	cmp	r0, #0
 80237ca:	d0f7      	beq.n	80237bc <expf+0x2c>
 80237cc:	f7fd fae2 	bl	8020d94 <__errno>
 80237d0:	2322      	movs	r3, #34	@ 0x22
 80237d2:	2500      	movs	r5, #0
 80237d4:	6003      	str	r3, [r0, #0]
 80237d6:	e7f1      	b.n	80237bc <expf+0x2c>
 80237d8:	42b17217 	.word	0x42b17217
 80237dc:	c2cff1b5 	.word	0xc2cff1b5

080237e0 <sqrtf>:
 80237e0:	b570      	push	{r4, r5, r6, lr}
 80237e2:	1c05      	adds	r5, r0, #0
 80237e4:	f000 f822 	bl	802382c <__ieee754_sqrtf>
 80237e8:	1c29      	adds	r1, r5, #0
 80237ea:	1c04      	adds	r4, r0, #0
 80237ec:	1c28      	adds	r0, r5, #0
 80237ee:	f7dd feb9 	bl	8001564 <__aeabi_fcmpun>
 80237f2:	2800      	cmp	r0, #0
 80237f4:	d10e      	bne.n	8023814 <sqrtf+0x34>
 80237f6:	2100      	movs	r1, #0
 80237f8:	1c28      	adds	r0, r5, #0
 80237fa:	f7dc fe99 	bl	8000530 <__aeabi_fcmplt>
 80237fe:	2800      	cmp	r0, #0
 8023800:	d008      	beq.n	8023814 <sqrtf+0x34>
 8023802:	f7fd fac7 	bl	8020d94 <__errno>
 8023806:	2321      	movs	r3, #33	@ 0x21
 8023808:	2100      	movs	r1, #0
 802380a:	6003      	str	r3, [r0, #0]
 802380c:	1c08      	adds	r0, r1, #0
 802380e:	f7dd f9e1 	bl	8000bd4 <__aeabi_fdiv>
 8023812:	1c04      	adds	r4, r0, #0
 8023814:	1c20      	adds	r0, r4, #0
 8023816:	bd70      	pop	{r4, r5, r6, pc}

08023818 <finitef>:
 8023818:	22ff      	movs	r2, #255	@ 0xff
 802381a:	0043      	lsls	r3, r0, #1
 802381c:	085b      	lsrs	r3, r3, #1
 802381e:	2001      	movs	r0, #1
 8023820:	05d2      	lsls	r2, r2, #23
 8023822:	4293      	cmp	r3, r2
 8023824:	db00      	blt.n	8023828 <finitef+0x10>
 8023826:	2000      	movs	r0, #0
 8023828:	4770      	bx	lr
	...

0802382c <__ieee754_sqrtf>:
 802382c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802382e:	0003      	movs	r3, r0
 8023830:	0042      	lsls	r2, r0, #1
 8023832:	1c04      	adds	r4, r0, #0
 8023834:	20ff      	movs	r0, #255	@ 0xff
 8023836:	0852      	lsrs	r2, r2, #1
 8023838:	05c0      	lsls	r0, r0, #23
 802383a:	4282      	cmp	r2, r0
 802383c:	d30a      	bcc.n	8023854 <__ieee754_sqrtf+0x28>
 802383e:	1c21      	adds	r1, r4, #0
 8023840:	1c20      	adds	r0, r4, #0
 8023842:	f7dd fbad 	bl	8000fa0 <__aeabi_fmul>
 8023846:	1c01      	adds	r1, r0, #0
 8023848:	1c20      	adds	r0, r4, #0
 802384a:	f7dd f839 	bl	80008c0 <__aeabi_fadd>
 802384e:	1c04      	adds	r4, r0, #0
 8023850:	1c20      	adds	r0, r4, #0
 8023852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023854:	2a00      	cmp	r2, #0
 8023856:	d0fb      	beq.n	8023850 <__ieee754_sqrtf+0x24>
 8023858:	2c00      	cmp	r4, #0
 802385a:	da07      	bge.n	802386c <__ieee754_sqrtf+0x40>
 802385c:	1c21      	adds	r1, r4, #0
 802385e:	1c20      	adds	r0, r4, #0
 8023860:	f7dd fcdc 	bl	800121c <__aeabi_fsub>
 8023864:	1c01      	adds	r1, r0, #0
 8023866:	f7dd f9b5 	bl	8000bd4 <__aeabi_fdiv>
 802386a:	e7f0      	b.n	802384e <__ieee754_sqrtf+0x22>
 802386c:	0022      	movs	r2, r4
 802386e:	15e1      	asrs	r1, r4, #23
 8023870:	4002      	ands	r2, r0
 8023872:	4204      	tst	r4, r0
 8023874:	d046      	beq.n	8023904 <__ieee754_sqrtf+0xd8>
 8023876:	2280      	movs	r2, #128	@ 0x80
 8023878:	000f      	movs	r7, r1
 802387a:	025b      	lsls	r3, r3, #9
 802387c:	0a5b      	lsrs	r3, r3, #9
 802387e:	0412      	lsls	r2, r2, #16
 8023880:	3f7f      	subs	r7, #127	@ 0x7f
 8023882:	4313      	orrs	r3, r2
 8023884:	07c9      	lsls	r1, r1, #31
 8023886:	d400      	bmi.n	802388a <__ieee754_sqrtf+0x5e>
 8023888:	005b      	lsls	r3, r3, #1
 802388a:	2400      	movs	r4, #0
 802388c:	2180      	movs	r1, #128	@ 0x80
 802388e:	2019      	movs	r0, #25
 8023890:	0026      	movs	r6, r4
 8023892:	107f      	asrs	r7, r7, #1
 8023894:	005b      	lsls	r3, r3, #1
 8023896:	0449      	lsls	r1, r1, #17
 8023898:	1875      	adds	r5, r6, r1
 802389a:	001a      	movs	r2, r3
 802389c:	429d      	cmp	r5, r3
 802389e:	dc02      	bgt.n	80238a6 <__ieee754_sqrtf+0x7a>
 80238a0:	186e      	adds	r6, r5, r1
 80238a2:	1b5a      	subs	r2, r3, r5
 80238a4:	1864      	adds	r4, r4, r1
 80238a6:	3801      	subs	r0, #1
 80238a8:	0053      	lsls	r3, r2, #1
 80238aa:	0849      	lsrs	r1, r1, #1
 80238ac:	2800      	cmp	r0, #0
 80238ae:	d1f3      	bne.n	8023898 <__ieee754_sqrtf+0x6c>
 80238b0:	2a00      	cmp	r2, #0
 80238b2:	d019      	beq.n	80238e8 <__ieee754_sqrtf+0xbc>
 80238b4:	4d17      	ldr	r5, [pc, #92]	@ (8023914 <__ieee754_sqrtf+0xe8>)
 80238b6:	4e18      	ldr	r6, [pc, #96]	@ (8023918 <__ieee754_sqrtf+0xec>)
 80238b8:	6828      	ldr	r0, [r5, #0]
 80238ba:	6831      	ldr	r1, [r6, #0]
 80238bc:	682b      	ldr	r3, [r5, #0]
 80238be:	9301      	str	r3, [sp, #4]
 80238c0:	f7dd fcac 	bl	800121c <__aeabi_fsub>
 80238c4:	1c01      	adds	r1, r0, #0
 80238c6:	9801      	ldr	r0, [sp, #4]
 80238c8:	f7dc fe3c 	bl	8000544 <__aeabi_fcmple>
 80238cc:	2800      	cmp	r0, #0
 80238ce:	d00b      	beq.n	80238e8 <__ieee754_sqrtf+0xbc>
 80238d0:	6828      	ldr	r0, [r5, #0]
 80238d2:	6831      	ldr	r1, [r6, #0]
 80238d4:	f7dc fff4 	bl	80008c0 <__aeabi_fadd>
 80238d8:	682d      	ldr	r5, [r5, #0]
 80238da:	1c01      	adds	r1, r0, #0
 80238dc:	1c28      	adds	r0, r5, #0
 80238de:	f7dc fe27 	bl	8000530 <__aeabi_fcmplt>
 80238e2:	2800      	cmp	r0, #0
 80238e4:	d011      	beq.n	802390a <__ieee754_sqrtf+0xde>
 80238e6:	3402      	adds	r4, #2
 80238e8:	23fc      	movs	r3, #252	@ 0xfc
 80238ea:	1064      	asrs	r4, r4, #1
 80238ec:	059b      	lsls	r3, r3, #22
 80238ee:	18e3      	adds	r3, r4, r3
 80238f0:	05fc      	lsls	r4, r7, #23
 80238f2:	18e4      	adds	r4, r4, r3
 80238f4:	e7ac      	b.n	8023850 <__ieee754_sqrtf+0x24>
 80238f6:	005b      	lsls	r3, r3, #1
 80238f8:	3201      	adds	r2, #1
 80238fa:	4203      	tst	r3, r0
 80238fc:	d0fb      	beq.n	80238f6 <__ieee754_sqrtf+0xca>
 80238fe:	3a01      	subs	r2, #1
 8023900:	1a89      	subs	r1, r1, r2
 8023902:	e7b8      	b.n	8023876 <__ieee754_sqrtf+0x4a>
 8023904:	2080      	movs	r0, #128	@ 0x80
 8023906:	0400      	lsls	r0, r0, #16
 8023908:	e7f7      	b.n	80238fa <__ieee754_sqrtf+0xce>
 802390a:	2301      	movs	r3, #1
 802390c:	3401      	adds	r4, #1
 802390e:	439c      	bics	r4, r3
 8023910:	e7ea      	b.n	80238e8 <__ieee754_sqrtf+0xbc>
 8023912:	46c0      	nop			@ (mov r8, r8)
 8023914:	20000424 	.word	0x20000424
 8023918:	20000420 	.word	0x20000420

0802391c <roundf>:
 802391c:	0dc3      	lsrs	r3, r0, #23
 802391e:	b2db      	uxtb	r3, r3
 8023920:	3b7f      	subs	r3, #127	@ 0x7f
 8023922:	0002      	movs	r2, r0
 8023924:	b510      	push	{r4, lr}
 8023926:	2b16      	cmp	r3, #22
 8023928:	dc13      	bgt.n	8023952 <roundf+0x36>
 802392a:	2b00      	cmp	r3, #0
 802392c:	da07      	bge.n	802393e <roundf+0x22>
 802392e:	0fc2      	lsrs	r2, r0, #31
 8023930:	07d0      	lsls	r0, r2, #31
 8023932:	3301      	adds	r3, #1
 8023934:	d102      	bne.n	802393c <roundf+0x20>
 8023936:	23fe      	movs	r3, #254	@ 0xfe
 8023938:	059b      	lsls	r3, r3, #22
 802393a:	4318      	orrs	r0, r3
 802393c:	bd10      	pop	{r4, pc}
 802393e:	4908      	ldr	r1, [pc, #32]	@ (8023960 <roundf+0x44>)
 8023940:	4119      	asrs	r1, r3
 8023942:	4208      	tst	r0, r1
 8023944:	d0fa      	beq.n	802393c <roundf+0x20>
 8023946:	2080      	movs	r0, #128	@ 0x80
 8023948:	03c0      	lsls	r0, r0, #15
 802394a:	4118      	asrs	r0, r3
 802394c:	1880      	adds	r0, r0, r2
 802394e:	4388      	bics	r0, r1
 8023950:	e7f4      	b.n	802393c <roundf+0x20>
 8023952:	2b80      	cmp	r3, #128	@ 0x80
 8023954:	d1f2      	bne.n	802393c <roundf+0x20>
 8023956:	1c01      	adds	r1, r0, #0
 8023958:	f7dc ffb2 	bl	80008c0 <__aeabi_fadd>
 802395c:	e7ee      	b.n	802393c <roundf+0x20>
 802395e:	46c0      	nop			@ (mov r8, r8)
 8023960:	007fffff 	.word	0x007fffff

08023964 <__ieee754_expf>:
 8023964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023966:	21ff      	movs	r1, #255	@ 0xff
 8023968:	0043      	lsls	r3, r0, #1
 802396a:	1c04      	adds	r4, r0, #0
 802396c:	085b      	lsrs	r3, r3, #1
 802396e:	05c9      	lsls	r1, r1, #23
 8023970:	428b      	cmp	r3, r1
 8023972:	d904      	bls.n	802397e <__ieee754_expf+0x1a>
 8023974:	1c01      	adds	r1, r0, #0
 8023976:	1c20      	adds	r0, r4, #0
 8023978:	f7dc ffa2 	bl	80008c0 <__aeabi_fadd>
 802397c:	e00d      	b.n	802399a <__ieee754_expf+0x36>
 802397e:	0fc6      	lsrs	r6, r0, #31
 8023980:	428b      	cmp	r3, r1
 8023982:	d104      	bne.n	802398e <__ieee754_expf+0x2a>
 8023984:	2e00      	cmp	r6, #0
 8023986:	d000      	beq.n	802398a <__ieee754_expf+0x26>
 8023988:	e0ba      	b.n	8023b00 <__ieee754_expf+0x19c>
 802398a:	1c20      	adds	r0, r4, #0
 802398c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802398e:	495d      	ldr	r1, [pc, #372]	@ (8023b04 <__ieee754_expf+0x1a0>)
 8023990:	4288      	cmp	r0, r1
 8023992:	dd04      	ble.n	802399e <__ieee754_expf+0x3a>
 8023994:	2000      	movs	r0, #0
 8023996:	f000 f8f1 	bl	8023b7c <__math_oflowf>
 802399a:	1c04      	adds	r4, r0, #0
 802399c:	e7f5      	b.n	802398a <__ieee754_expf+0x26>
 802399e:	2800      	cmp	r0, #0
 80239a0:	da06      	bge.n	80239b0 <__ieee754_expf+0x4c>
 80239a2:	4a59      	ldr	r2, [pc, #356]	@ (8023b08 <__ieee754_expf+0x1a4>)
 80239a4:	4293      	cmp	r3, r2
 80239a6:	d903      	bls.n	80239b0 <__ieee754_expf+0x4c>
 80239a8:	2000      	movs	r0, #0
 80239aa:	f000 f8e1 	bl	8023b70 <__math_uflowf>
 80239ae:	e7f4      	b.n	802399a <__ieee754_expf+0x36>
 80239b0:	4a56      	ldr	r2, [pc, #344]	@ (8023b0c <__ieee754_expf+0x1a8>)
 80239b2:	4293      	cmp	r3, r2
 80239b4:	d96e      	bls.n	8023a94 <__ieee754_expf+0x130>
 80239b6:	4a56      	ldr	r2, [pc, #344]	@ (8023b10 <__ieee754_expf+0x1ac>)
 80239b8:	00b5      	lsls	r5, r6, #2
 80239ba:	4293      	cmp	r3, r2
 80239bc:	d84e      	bhi.n	8023a5c <__ieee754_expf+0xf8>
 80239be:	4b55      	ldr	r3, [pc, #340]	@ (8023b14 <__ieee754_expf+0x1b0>)
 80239c0:	1c20      	adds	r0, r4, #0
 80239c2:	5959      	ldr	r1, [r3, r5]
 80239c4:	f7dd fc2a 	bl	800121c <__aeabi_fsub>
 80239c8:	4b53      	ldr	r3, [pc, #332]	@ (8023b18 <__ieee754_expf+0x1b4>)
 80239ca:	1c07      	adds	r7, r0, #0
 80239cc:	595b      	ldr	r3, [r3, r5]
 80239ce:	2501      	movs	r5, #1
 80239d0:	1bad      	subs	r5, r5, r6
 80239d2:	9300      	str	r3, [sp, #0]
 80239d4:	1bad      	subs	r5, r5, r6
 80239d6:	9900      	ldr	r1, [sp, #0]
 80239d8:	1c38      	adds	r0, r7, #0
 80239da:	f7dd fc1f 	bl	800121c <__aeabi_fsub>
 80239de:	1c04      	adds	r4, r0, #0
 80239e0:	1c21      	adds	r1, r4, #0
 80239e2:	1c20      	adds	r0, r4, #0
 80239e4:	f7dd fadc 	bl	8000fa0 <__aeabi_fmul>
 80239e8:	494c      	ldr	r1, [pc, #304]	@ (8023b1c <__ieee754_expf+0x1b8>)
 80239ea:	1c06      	adds	r6, r0, #0
 80239ec:	f7dd fad8 	bl	8000fa0 <__aeabi_fmul>
 80239f0:	494b      	ldr	r1, [pc, #300]	@ (8023b20 <__ieee754_expf+0x1bc>)
 80239f2:	f7dd fc13 	bl	800121c <__aeabi_fsub>
 80239f6:	1c31      	adds	r1, r6, #0
 80239f8:	f7dd fad2 	bl	8000fa0 <__aeabi_fmul>
 80239fc:	4949      	ldr	r1, [pc, #292]	@ (8023b24 <__ieee754_expf+0x1c0>)
 80239fe:	f7dc ff5f 	bl	80008c0 <__aeabi_fadd>
 8023a02:	1c31      	adds	r1, r6, #0
 8023a04:	f7dd facc 	bl	8000fa0 <__aeabi_fmul>
 8023a08:	4947      	ldr	r1, [pc, #284]	@ (8023b28 <__ieee754_expf+0x1c4>)
 8023a0a:	f7dd fc07 	bl	800121c <__aeabi_fsub>
 8023a0e:	1c31      	adds	r1, r6, #0
 8023a10:	f7dd fac6 	bl	8000fa0 <__aeabi_fmul>
 8023a14:	4945      	ldr	r1, [pc, #276]	@ (8023b2c <__ieee754_expf+0x1c8>)
 8023a16:	f7dc ff53 	bl	80008c0 <__aeabi_fadd>
 8023a1a:	1c31      	adds	r1, r6, #0
 8023a1c:	f7dd fac0 	bl	8000fa0 <__aeabi_fmul>
 8023a20:	1c01      	adds	r1, r0, #0
 8023a22:	1c20      	adds	r0, r4, #0
 8023a24:	f7dd fbfa 	bl	800121c <__aeabi_fsub>
 8023a28:	1c01      	adds	r1, r0, #0
 8023a2a:	1c06      	adds	r6, r0, #0
 8023a2c:	1c20      	adds	r0, r4, #0
 8023a2e:	f7dd fab7 	bl	8000fa0 <__aeabi_fmul>
 8023a32:	9001      	str	r0, [sp, #4]
 8023a34:	2d00      	cmp	r5, #0
 8023a36:	d140      	bne.n	8023aba <__ieee754_expf+0x156>
 8023a38:	2180      	movs	r1, #128	@ 0x80
 8023a3a:	1c30      	adds	r0, r6, #0
 8023a3c:	05c9      	lsls	r1, r1, #23
 8023a3e:	f7dd fbed 	bl	800121c <__aeabi_fsub>
 8023a42:	1c01      	adds	r1, r0, #0
 8023a44:	9801      	ldr	r0, [sp, #4]
 8023a46:	f7dd f8c5 	bl	8000bd4 <__aeabi_fdiv>
 8023a4a:	1c21      	adds	r1, r4, #0
 8023a4c:	f7dd fbe6 	bl	800121c <__aeabi_fsub>
 8023a50:	1c01      	adds	r1, r0, #0
 8023a52:	20fe      	movs	r0, #254	@ 0xfe
 8023a54:	0580      	lsls	r0, r0, #22
 8023a56:	f7dd fbe1 	bl	800121c <__aeabi_fsub>
 8023a5a:	e79e      	b.n	802399a <__ieee754_expf+0x36>
 8023a5c:	4934      	ldr	r1, [pc, #208]	@ (8023b30 <__ieee754_expf+0x1cc>)
 8023a5e:	1c20      	adds	r0, r4, #0
 8023a60:	f7dd fa9e 	bl	8000fa0 <__aeabi_fmul>
 8023a64:	4b33      	ldr	r3, [pc, #204]	@ (8023b34 <__ieee754_expf+0x1d0>)
 8023a66:	5959      	ldr	r1, [r3, r5]
 8023a68:	f7dc ff2a 	bl	80008c0 <__aeabi_fadd>
 8023a6c:	f7dd fd90 	bl	8001590 <__aeabi_f2iz>
 8023a70:	0005      	movs	r5, r0
 8023a72:	f7dd fdad 	bl	80015d0 <__aeabi_i2f>
 8023a76:	4930      	ldr	r1, [pc, #192]	@ (8023b38 <__ieee754_expf+0x1d4>)
 8023a78:	1c06      	adds	r6, r0, #0
 8023a7a:	f7dd fa91 	bl	8000fa0 <__aeabi_fmul>
 8023a7e:	1c01      	adds	r1, r0, #0
 8023a80:	1c20      	adds	r0, r4, #0
 8023a82:	f7dd fbcb 	bl	800121c <__aeabi_fsub>
 8023a86:	492d      	ldr	r1, [pc, #180]	@ (8023b3c <__ieee754_expf+0x1d8>)
 8023a88:	1c07      	adds	r7, r0, #0
 8023a8a:	1c30      	adds	r0, r6, #0
 8023a8c:	f7dd fa88 	bl	8000fa0 <__aeabi_fmul>
 8023a90:	9000      	str	r0, [sp, #0]
 8023a92:	e7a0      	b.n	80239d6 <__ieee754_expf+0x72>
 8023a94:	22d0      	movs	r2, #208	@ 0xd0
 8023a96:	0592      	lsls	r2, r2, #22
 8023a98:	4293      	cmp	r3, r2
 8023a9a:	d20c      	bcs.n	8023ab6 <__ieee754_expf+0x152>
 8023a9c:	4928      	ldr	r1, [pc, #160]	@ (8023b40 <__ieee754_expf+0x1dc>)
 8023a9e:	1c20      	adds	r0, r4, #0
 8023aa0:	f7dc ff0e 	bl	80008c0 <__aeabi_fadd>
 8023aa4:	21fe      	movs	r1, #254	@ 0xfe
 8023aa6:	0589      	lsls	r1, r1, #22
 8023aa8:	f7dc fd56 	bl	8000558 <__aeabi_fcmpgt>
 8023aac:	1e05      	subs	r5, r0, #0
 8023aae:	d097      	beq.n	80239e0 <__ieee754_expf+0x7c>
 8023ab0:	21fe      	movs	r1, #254	@ 0xfe
 8023ab2:	0589      	lsls	r1, r1, #22
 8023ab4:	e75f      	b.n	8023976 <__ieee754_expf+0x12>
 8023ab6:	2500      	movs	r5, #0
 8023ab8:	e792      	b.n	80239e0 <__ieee754_expf+0x7c>
 8023aba:	2080      	movs	r0, #128	@ 0x80
 8023abc:	1c31      	adds	r1, r6, #0
 8023abe:	05c0      	lsls	r0, r0, #23
 8023ac0:	f7dd fbac 	bl	800121c <__aeabi_fsub>
 8023ac4:	1c01      	adds	r1, r0, #0
 8023ac6:	9801      	ldr	r0, [sp, #4]
 8023ac8:	f7dd f884 	bl	8000bd4 <__aeabi_fdiv>
 8023acc:	1c01      	adds	r1, r0, #0
 8023ace:	9800      	ldr	r0, [sp, #0]
 8023ad0:	f7dd fba4 	bl	800121c <__aeabi_fsub>
 8023ad4:	1c39      	adds	r1, r7, #0
 8023ad6:	f7dd fba1 	bl	800121c <__aeabi_fsub>
 8023ada:	1c01      	adds	r1, r0, #0
 8023adc:	20fe      	movs	r0, #254	@ 0xfe
 8023ade:	0580      	lsls	r0, r0, #22
 8023ae0:	f7dd fb9c 	bl	800121c <__aeabi_fsub>
 8023ae4:	002b      	movs	r3, r5
 8023ae6:	337d      	adds	r3, #125	@ 0x7d
 8023ae8:	db02      	blt.n	8023af0 <__ieee754_expf+0x18c>
 8023aea:	05ec      	lsls	r4, r5, #23
 8023aec:	1824      	adds	r4, r4, r0
 8023aee:	e74c      	b.n	802398a <__ieee754_expf+0x26>
 8023af0:	21d8      	movs	r1, #216	@ 0xd8
 8023af2:	3564      	adds	r5, #100	@ 0x64
 8023af4:	05ed      	lsls	r5, r5, #23
 8023af6:	1828      	adds	r0, r5, r0
 8023af8:	0509      	lsls	r1, r1, #20
 8023afa:	f7dd fa51 	bl	8000fa0 <__aeabi_fmul>
 8023afe:	e74c      	b.n	802399a <__ieee754_expf+0x36>
 8023b00:	2400      	movs	r4, #0
 8023b02:	e742      	b.n	802398a <__ieee754_expf+0x26>
 8023b04:	42b17217 	.word	0x42b17217
 8023b08:	42cff1b5 	.word	0x42cff1b5
 8023b0c:	3eb17218 	.word	0x3eb17218
 8023b10:	3f851591 	.word	0x3f851591
 8023b14:	08027090 	.word	0x08027090
 8023b18:	08027088 	.word	0x08027088
 8023b1c:	3331bb4c 	.word	0x3331bb4c
 8023b20:	35ddea0e 	.word	0x35ddea0e
 8023b24:	388ab355 	.word	0x388ab355
 8023b28:	3b360b61 	.word	0x3b360b61
 8023b2c:	3e2aaaab 	.word	0x3e2aaaab
 8023b30:	3fb8aa3b 	.word	0x3fb8aa3b
 8023b34:	08027098 	.word	0x08027098
 8023b38:	3f317180 	.word	0x3f317180
 8023b3c:	3717f7d1 	.word	0x3717f7d1
 8023b40:	7149f2ca 	.word	0x7149f2ca

08023b44 <with_errnof>:
 8023b44:	b570      	push	{r4, r5, r6, lr}
 8023b46:	000d      	movs	r5, r1
 8023b48:	1c04      	adds	r4, r0, #0
 8023b4a:	f7fd f923 	bl	8020d94 <__errno>
 8023b4e:	6005      	str	r5, [r0, #0]
 8023b50:	1c20      	adds	r0, r4, #0
 8023b52:	bd70      	pop	{r4, r5, r6, pc}

08023b54 <xflowf>:
 8023b54:	b510      	push	{r4, lr}
 8023b56:	1c0b      	adds	r3, r1, #0
 8023b58:	2800      	cmp	r0, #0
 8023b5a:	d002      	beq.n	8023b62 <xflowf+0xe>
 8023b5c:	2380      	movs	r3, #128	@ 0x80
 8023b5e:	061b      	lsls	r3, r3, #24
 8023b60:	18cb      	adds	r3, r1, r3
 8023b62:	1c18      	adds	r0, r3, #0
 8023b64:	f7dd fa1c 	bl	8000fa0 <__aeabi_fmul>
 8023b68:	2122      	movs	r1, #34	@ 0x22
 8023b6a:	f7ff ffeb 	bl	8023b44 <with_errnof>
 8023b6e:	bd10      	pop	{r4, pc}

08023b70 <__math_uflowf>:
 8023b70:	2180      	movs	r1, #128	@ 0x80
 8023b72:	b510      	push	{r4, lr}
 8023b74:	0549      	lsls	r1, r1, #21
 8023b76:	f7ff ffed 	bl	8023b54 <xflowf>
 8023b7a:	bd10      	pop	{r4, pc}

08023b7c <__math_oflowf>:
 8023b7c:	21e0      	movs	r1, #224	@ 0xe0
 8023b7e:	b510      	push	{r4, lr}
 8023b80:	05c9      	lsls	r1, r1, #23
 8023b82:	f7ff ffe7 	bl	8023b54 <xflowf>
 8023b86:	bd10      	pop	{r4, pc}

08023b88 <_init>:
 8023b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b8a:	46c0      	nop			@ (mov r8, r8)
 8023b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b8e:	bc08      	pop	{r3}
 8023b90:	469e      	mov	lr, r3
 8023b92:	4770      	bx	lr

08023b94 <_fini>:
 8023b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b96:	46c0      	nop			@ (mov r8, r8)
 8023b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b9a:	bc08      	pop	{r3}
 8023b9c:	469e      	mov	lr, r3
 8023b9e:	4770      	bx	lr
